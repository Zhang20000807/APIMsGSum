method,return_type,return_description
java.applet.Applet.setStub(AppletStub),void,
java.applet.Applet.isActive(),boolean,true if the applet is active; false otherwise.
java.applet.Applet.getDocumentBase(),URL,the URL of the document that contains this applet.
java.applet.Applet.getCodeBase(),URL,the base URL of the directory which contains this applet.
java.applet.Applet.getParameter(String),String,"the value of the named parameter, or null if not set."
java.applet.Applet.getAppletContext(),AppletContext,the applet's context.
"java.applet.Applet.resize(int,int)",void,
java.applet.Applet.resize(Dimension),void,
java.applet.Applet.isValidateRoot(),boolean,true
java.applet.Applet.showStatus(String),void,
java.applet.Applet.getImage(URL),Image,the image at the specified URL.
"java.applet.Applet.getImage(URL,String)",Image,the image at the specified URL.
java.applet.Applet.newAudioClip(URL),AudioClip,the audio clip at the specified URL.
java.applet.Applet.getAudioClip(URL),AudioClip,the audio clip at the specified URL.
"java.applet.Applet.getAudioClip(URL,String)",AudioClip,the audio clip at the specified URL.
java.applet.Applet.getAppletInfo(),String,"a string containing information about the author, version, and copyright of the applet."
java.applet.Applet.getLocale(),Locale,"the locale of the applet; if no locale has been set, the default locale is returned."
java.applet.Applet.getParameterInfo(),String[][],an array describing the parameters this applet looks for.
java.applet.Applet.play(URL),void,
"java.applet.Applet.play(URL,String)",void,
java.applet.Applet.init(),void,
java.applet.Applet.start(),void,
java.applet.Applet.stop(),void,
java.applet.Applet.destroy(),void,
java.applet.Applet.getAccessibleContext(),AccessibleContext,an AccessibleApplet that serves as the AccessibleContext of this Applet
java.awt.AlphaComposite.getInstance(int),AlphaComposite,
"java.awt.AlphaComposite.getInstance(int,float)",AlphaComposite,
"java.awt.AlphaComposite.createContext(ColorModel,ColorModel,RenderingHints)",CompositeContext,the CompositeContext object to be used to perform compositing operations.
java.awt.AlphaComposite.getAlpha(),float,the alpha value of this AlphaComposite.
java.awt.AlphaComposite.getRule(),int,the compositing rule of this AlphaComposite.
java.awt.AlphaComposite.derive(int),AlphaComposite,an AlphaComposite object derived from this object that uses the specified compositing rule.
java.awt.AlphaComposite.derive(float),AlphaComposite,an AlphaComposite object derived from this object that uses the specified alpha value.
java.awt.AlphaComposite.hashCode(),int,a hash code for this composite.
java.awt.AlphaComposite.equals(Object),boolean,true if obj equals this AlphaComposite; false otherwise.
java.awt.AWTEvent.setSource(Object),void,
java.awt.AWTEvent.getID(),int,
java.awt.AWTEvent.toString(),String,A a String representation of this EventObject.
java.awt.AWTEvent.paramString(),String,a string representation of this event
java.awt.AWTEvent.consume(),void,
java.awt.AWTEvent.isConsumed(),boolean,
java.awt.AWTEventMulticaster.remove(EventListener),EventListener,resulting listener
java.awt.AWTEventMulticaster.componentResized(ComponentEvent),void,
java.awt.AWTEventMulticaster.componentMoved(ComponentEvent),void,
java.awt.AWTEventMulticaster.componentShown(ComponentEvent),void,
java.awt.AWTEventMulticaster.componentHidden(ComponentEvent),void,
java.awt.AWTEventMulticaster.componentAdded(ContainerEvent),void,
java.awt.AWTEventMulticaster.componentRemoved(ContainerEvent),void,
java.awt.AWTEventMulticaster.focusGained(FocusEvent),void,
java.awt.AWTEventMulticaster.focusLost(FocusEvent),void,
java.awt.AWTEventMulticaster.keyTyped(KeyEvent),void,
java.awt.AWTEventMulticaster.keyPressed(KeyEvent),void,
java.awt.AWTEventMulticaster.keyReleased(KeyEvent),void,
java.awt.AWTEventMulticaster.mouseClicked(MouseEvent),void,
java.awt.AWTEventMulticaster.mousePressed(MouseEvent),void,
java.awt.AWTEventMulticaster.mouseReleased(MouseEvent),void,
java.awt.AWTEventMulticaster.mouseEntered(MouseEvent),void,
java.awt.AWTEventMulticaster.mouseExited(MouseEvent),void,
java.awt.AWTEventMulticaster.mouseDragged(MouseEvent),void,
java.awt.AWTEventMulticaster.mouseMoved(MouseEvent),void,
java.awt.AWTEventMulticaster.windowOpened(WindowEvent),void,
java.awt.AWTEventMulticaster.windowClosing(WindowEvent),void,
java.awt.AWTEventMulticaster.windowClosed(WindowEvent),void,
java.awt.AWTEventMulticaster.windowIconified(WindowEvent),void,
java.awt.AWTEventMulticaster.windowDeiconified(WindowEvent),void,
java.awt.AWTEventMulticaster.windowActivated(WindowEvent),void,
java.awt.AWTEventMulticaster.windowDeactivated(WindowEvent),void,
java.awt.AWTEventMulticaster.windowStateChanged(WindowEvent),void,
java.awt.AWTEventMulticaster.windowGainedFocus(WindowEvent),void,
java.awt.AWTEventMulticaster.windowLostFocus(WindowEvent),void,
java.awt.AWTEventMulticaster.actionPerformed(ActionEvent),void,
java.awt.AWTEventMulticaster.itemStateChanged(ItemEvent),void,
java.awt.AWTEventMulticaster.adjustmentValueChanged(AdjustmentEvent),void,
java.awt.AWTEventMulticaster.textValueChanged(TextEvent),void,
java.awt.AWTEventMulticaster.inputMethodTextChanged(InputMethodEvent),void,
java.awt.AWTEventMulticaster.caretPositionChanged(InputMethodEvent),void,
java.awt.AWTEventMulticaster.hierarchyChanged(HierarchyEvent),void,
java.awt.AWTEventMulticaster.ancestorMoved(HierarchyEvent),void,
java.awt.AWTEventMulticaster.ancestorResized(HierarchyEvent),void,
java.awt.AWTEventMulticaster.mouseWheelMoved(MouseWheelEvent),void,
"java.awt.AWTEventMulticaster.add(ComponentListener,ComponentListener)",ComponentListener,
"java.awt.AWTEventMulticaster.add(ContainerListener,ContainerListener)",ContainerListener,
"java.awt.AWTEventMulticaster.add(FocusListener,FocusListener)",FocusListener,
"java.awt.AWTEventMulticaster.add(KeyListener,KeyListener)",KeyListener,
"java.awt.AWTEventMulticaster.add(MouseListener,MouseListener)",MouseListener,
"java.awt.AWTEventMulticaster.add(MouseMotionListener,MouseMotionListener)",MouseMotionListener,
"java.awt.AWTEventMulticaster.add(WindowListener,WindowListener)",WindowListener,
"java.awt.AWTEventMulticaster.add(WindowStateListener,WindowStateListener)",WindowStateListener,
"java.awt.AWTEventMulticaster.add(WindowFocusListener,WindowFocusListener)",WindowFocusListener,
"java.awt.AWTEventMulticaster.add(ActionListener,ActionListener)",ActionListener,
"java.awt.AWTEventMulticaster.add(ItemListener,ItemListener)",ItemListener,
"java.awt.AWTEventMulticaster.add(AdjustmentListener,AdjustmentListener)",AdjustmentListener,
"java.awt.AWTEventMulticaster.add(TextListener,TextListener)",TextListener,
"java.awt.AWTEventMulticaster.add(InputMethodListener,InputMethodListener)",InputMethodListener,
"java.awt.AWTEventMulticaster.add(HierarchyListener,HierarchyListener)",HierarchyListener,
"java.awt.AWTEventMulticaster.add(HierarchyBoundsListener,HierarchyBoundsListener)",HierarchyBoundsListener,
"java.awt.AWTEventMulticaster.add(MouseWheelListener,MouseWheelListener)",MouseWheelListener,
"java.awt.AWTEventMulticaster.remove(ComponentListener,ComponentListener)",ComponentListener,
"java.awt.AWTEventMulticaster.remove(ContainerListener,ContainerListener)",ContainerListener,
"java.awt.AWTEventMulticaster.remove(FocusListener,FocusListener)",FocusListener,
"java.awt.AWTEventMulticaster.remove(KeyListener,KeyListener)",KeyListener,
"java.awt.AWTEventMulticaster.remove(MouseListener,MouseListener)",MouseListener,
"java.awt.AWTEventMulticaster.remove(MouseMotionListener,MouseMotionListener)",MouseMotionListener,
"java.awt.AWTEventMulticaster.remove(WindowListener,WindowListener)",WindowListener,
"java.awt.AWTEventMulticaster.remove(WindowStateListener,WindowStateListener)",WindowStateListener,
"java.awt.AWTEventMulticaster.remove(WindowFocusListener,WindowFocusListener)",WindowFocusListener,
"java.awt.AWTEventMulticaster.remove(ActionListener,ActionListener)",ActionListener,
"java.awt.AWTEventMulticaster.remove(ItemListener,ItemListener)",ItemListener,
"java.awt.AWTEventMulticaster.remove(AdjustmentListener,AdjustmentListener)",AdjustmentListener,
"java.awt.AWTEventMulticaster.remove(TextListener,TextListener)",TextListener,
"java.awt.AWTEventMulticaster.remove(InputMethodListener,InputMethodListener)",InputMethodListener,
"java.awt.AWTEventMulticaster.remove(HierarchyListener,HierarchyListener)",HierarchyListener,
"java.awt.AWTEventMulticaster.remove(HierarchyBoundsListener,HierarchyBoundsListener)",HierarchyBoundsListener,
"java.awt.AWTEventMulticaster.remove(MouseWheelListener,MouseWheelListener)",MouseWheelListener,
"java.awt.AWTEventMulticaster.addInternal(EventListener,EventListener)",EventListener,
"java.awt.AWTEventMulticaster.removeInternal(EventListener,EventListener)",EventListener,
"java.awt.AWTEventMulticaster.saveInternal(ObjectOutputStream,String)",void,
"java.awt.AWTEventMulticaster.save(ObjectOutputStream,String,EventListener)",void,
"java.awt.AWTEventMulticaster.getListeners(EventListener,Class&lt;T&gt;)",&lt;T extends EventListener&gt;T[],"an array of all objects chained as FooListeners by the specified multicast listener, or an empty array if no such listeners have been chained by the specified multicast listener"
java.awt.AWTKeyStroke.registerSubclass(Class&lt;?&gt;),void,
java.awt.AWTKeyStroke.getAWTKeyStroke(char),AWTKeyStroke,an AWTKeyStroke object for that key
"java.awt.AWTKeyStroke.getAWTKeyStroke(Character,int)",AWTKeyStroke,
"java.awt.AWTKeyStroke.getAWTKeyStroke(int,int,boolean)",AWTKeyStroke,
"java.awt.AWTKeyStroke.getAWTKeyStroke(int,int)",AWTKeyStroke,
java.awt.AWTKeyStroke.getAWTKeyStrokeForEvent(KeyEvent),AWTKeyStroke,the AWTKeyStroke that precipitated the event
java.awt.AWTKeyStroke.getAWTKeyStroke(String),AWTKeyStroke,an AWTKeyStroke object for that String
java.awt.AWTKeyStroke.getKeyChar(),char,a char value
java.awt.AWTKeyStroke.getKeyCode(),int,an int containing the key code value
java.awt.AWTKeyStroke.getModifiers(),int,an int containing the modifiers
java.awt.AWTKeyStroke.isOnKeyRelease(),boolean,true if this AWTKeyStroke represents a key release; false otherwise
java.awt.AWTKeyStroke.getKeyEventType(),int,"KeyEvent.KEY_PRESSED, KeyEvent.KEY_TYPED, or KeyEvent.KEY_RELEASED"
java.awt.AWTKeyStroke.hashCode(),int,an int that represents this object
java.awt.AWTKeyStroke.equals(Object),boolean,true if the objects are identical
java.awt.AWTKeyStroke.toString(),String,a String representation of this object
java.awt.AWTKeyStroke.readResolve(),Object,a cached instance which is equal to this instance
java.awt.BasicStroke.createStrokedShape(Shape),Shape,the Shape of the stroked outline.
java.awt.BasicStroke.getLineWidth(),float,the line width of this BasicStroke.
java.awt.BasicStroke.getEndCap(),int,the end cap style of this BasicStroke as one of the static int values that define possible end cap styles.
java.awt.BasicStroke.getLineJoin(),int,the line join style of the BasicStroke as one of the static int values that define possible line join styles.
java.awt.BasicStroke.getMiterLimit(),float,the limit of miter joins of the BasicStroke.
java.awt.BasicStroke.getDashArray(),float[],the dash array.
java.awt.BasicStroke.getDashPhase(),float,the dash phase as a float value.
java.awt.BasicStroke.hashCode(),int,a hash code for this stroke.
java.awt.BasicStroke.equals(Object),boolean,"true if the width, join, cap, miter limit, dash, and dash phase are the same for both objects; false otherwise."
java.awt.BorderLayout.getHgap(),int,
java.awt.BorderLayout.setHgap(int),void,
java.awt.BorderLayout.getVgap(),int,
java.awt.BorderLayout.setVgap(int),void,
"java.awt.BorderLayout.addLayoutComponent(Component,Object)",void,
"java.awt.BorderLayout.addLayoutComponent(String,Component)",void,
java.awt.BorderLayout.removeLayoutComponent(Component),void,
java.awt.BorderLayout.getLayoutComponent(Object),Component,"the component at the given location, or null if the location is empty"
"java.awt.BorderLayout.getLayoutComponent(Container,Object)",Component,"the component at the given location, or null if the location is empty"
java.awt.BorderLayout.getConstraints(Component),Object,"the constraint for the specified component, or null if component is null or is not present in this layout"
java.awt.BorderLayout.minimumLayoutSize(Container),Dimension,the minimum dimensions needed to lay out the subcomponents of the specified container.
java.awt.BorderLayout.preferredLayoutSize(Container),Dimension,the preferred dimensions to lay out the subcomponents of the specified container.
java.awt.BorderLayout.maximumLayoutSize(Container),Dimension,
java.awt.BorderLayout.getLayoutAlignmentX(Container),float,
java.awt.BorderLayout.getLayoutAlignmentY(Container),float,
java.awt.BorderLayout.invalidateLayout(Container),void,
java.awt.BorderLayout.layoutContainer(Container),void,
java.awt.BorderLayout.toString(),String,a string representation of this border layout.
java.awt.BufferCapabilities.getFrontBufferCapabilities(),ImageCapabilities,the image capabilities of the front (displayed) buffer
java.awt.BufferCapabilities.getBackBufferCapabilities(),ImageCapabilities,the image capabilities of all back buffers (intermediate buffers are considered back buffers)
java.awt.BufferCapabilities.isPageFlipping(),boolean,"whether or not the buffer strategy uses page flipping; a set of buffers that uses page flipping can swap the contents internally between the front buffer and one or more back buffers by switching the video pointer (or by copying memory internally). A non-flipping set of buffers uses blitting to copy the contents from one buffer to another; when this is the case, getFlipContents returns null"
java.awt.BufferCapabilities.getFlipContents(),BufferCapabilities.FlipContents,"the resulting contents of the back buffer after page-flipping. This value is null when the isPageFlipping returns false, implying blitting. It can be one of FlipContents.UNDEFINED (the assumed default), FlipContents.BACKGROUND, FlipContents.PRIOR, or FlipContents.COPIED."
java.awt.BufferCapabilities.isFullScreenRequired(),boolean,"whether page flipping is only available in full-screen mode. If this is true, full-screen exclusive mode is required for page-flipping."
java.awt.BufferCapabilities.isMultiBufferAvailable(),boolean,whether or not page flipping can be performed using more than two buffers (one or more intermediate buffers as well as the front and back buffer).
java.awt.BufferCapabilities.clone(),Object,a copy of this BufferCapabilities object.
java.awt.BufferCapabilities.FlipContents.hashCode(),int,
java.awt.BufferCapabilities.FlipContents.toString(),String,a string representation of the object.
java.awt.Button.addNotify(),void,
java.awt.Button.getLabel(),String,"the button's label, or null if the button has no label."
java.awt.Button.setLabel(String),void,
java.awt.Button.setActionCommand(String),void,
java.awt.Button.getActionCommand(),String,
java.awt.Button.addActionListener(ActionListener),void,
java.awt.Button.removeActionListener(ActionListener),void,
java.awt.Button.getActionListeners(),ActionListener[],all of this button's ActionListeners or an empty array if no action listeners are currently registered
java.awt.Button.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this button, or an empty array if no such listeners have been added"
java.awt.Button.processEvent(AWTEvent),void,
java.awt.Button.processActionEvent(ActionEvent),void,
java.awt.Button.paramString(),String,the parameter string of this button
java.awt.Button.getAccessibleContext(),AccessibleContext,an AccessibleAWTButton that serves as the AccessibleContext of this Button
java.awt.Canvas.addNotify(),void,
java.awt.Canvas.paint(Graphics),void,
java.awt.Canvas.update(Graphics),void,
java.awt.Canvas.createBufferStrategy(int),void,
"java.awt.Canvas.createBufferStrategy(int,BufferCapabilities)",void,
java.awt.Canvas.getBufferStrategy(),BufferStrategy,the buffer strategy used by this component
java.awt.Canvas.getAccessibleContext(),AccessibleContext,an AccessibleAWTCanvas that serves as the AccessibleContext of this Canvas
java.awt.CardLayout.getHgap(),int,the horizontal gap between components.
java.awt.CardLayout.setHgap(int),void,
java.awt.CardLayout.getVgap(),int,the vertical gap between components.
java.awt.CardLayout.setVgap(int),void,
"java.awt.CardLayout.addLayoutComponent(Component,Object)",void,
"java.awt.CardLayout.addLayoutComponent(String,Component)",void,
java.awt.CardLayout.removeLayoutComponent(Component),void,
java.awt.CardLayout.preferredLayoutSize(Container),Dimension,the preferred dimensions to lay out the subcomponents of the specified container
java.awt.CardLayout.minimumLayoutSize(Container),Dimension,the minimum dimensions required to lay out the subcomponents of the specified container
java.awt.CardLayout.maximumLayoutSize(Container),Dimension,
java.awt.CardLayout.getLayoutAlignmentX(Container),float,
java.awt.CardLayout.getLayoutAlignmentY(Container),float,
java.awt.CardLayout.invalidateLayout(Container),void,
java.awt.CardLayout.layoutContainer(Container),void,
java.awt.CardLayout.first(Container),void,
java.awt.CardLayout.next(Container),void,
java.awt.CardLayout.previous(Container),void,
java.awt.CardLayout.last(Container),void,
"java.awt.CardLayout.show(Container,String)",void,
java.awt.CardLayout.toString(),String,a string representation of this card layout.
java.awt.Checkbox.addNotify(),void,
java.awt.Checkbox.getLabel(),String,"the label of this check box, or null if this check box has no label."
java.awt.Checkbox.setLabel(String),void,
java.awt.Checkbox.getState(),boolean,"the state of this check box, as a boolean value"
java.awt.Checkbox.setState(boolean),void,
java.awt.Checkbox.getSelectedObjects(),Object[],
java.awt.Checkbox.getCheckboxGroup(),CheckboxGroup,"this check box's group, or null if the check box is not part of a check box group."
java.awt.Checkbox.setCheckboxGroup(CheckboxGroup),void,
java.awt.Checkbox.addItemListener(ItemListener),void,
java.awt.Checkbox.removeItemListener(ItemListener),void,
java.awt.Checkbox.getItemListeners(),ItemListener[],all of this checkbox's ItemListeners or an empty array if no item listeners are currently registered
java.awt.Checkbox.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this checkbox, or an empty array if no such listeners have been added"
java.awt.Checkbox.processEvent(AWTEvent),void,
java.awt.Checkbox.processItemEvent(ItemEvent),void,
java.awt.Checkbox.paramString(),String,the parameter string of this check box
java.awt.Checkbox.getAccessibleContext(),AccessibleContext,an AccessibleAWTCheckbox that serves as the AccessibleContext of this Checkbox
java.awt.CheckboxGroup.getSelectedCheckbox(),Checkbox,"the check box that is currently in the ""on"" state, or null."
java.awt.CheckboxGroup.getCurrent(),Checkbox,
java.awt.CheckboxGroup.setSelectedCheckbox(Checkbox),void,
java.awt.CheckboxGroup.setCurrent(Checkbox),void,
java.awt.CheckboxGroup.toString(),String,a string representation of this check box group.
java.awt.CheckboxMenuItem.addNotify(),void,
java.awt.CheckboxMenuItem.getState(),boolean,"the state of this check box menu item, where true indicates ""on"" and false indicates ""off"""
java.awt.CheckboxMenuItem.setState(boolean),void,
java.awt.CheckboxMenuItem.getSelectedObjects(),Object[],
java.awt.CheckboxMenuItem.addItemListener(ItemListener),void,
java.awt.CheckboxMenuItem.removeItemListener(ItemListener),void,
java.awt.CheckboxMenuItem.getItemListeners(),ItemListener[],all of this checkbox menuitem's ItemListeners or an empty array if no item listeners are currently registered
java.awt.CheckboxMenuItem.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this checkbox menuitem, or an empty array if no such listeners have been added"
java.awt.CheckboxMenuItem.processEvent(AWTEvent),void,
java.awt.CheckboxMenuItem.processItemEvent(ItemEvent),void,
java.awt.CheckboxMenuItem.paramString(),String,the parameter string of this check box menu item
java.awt.CheckboxMenuItem.getAccessibleContext(),AccessibleContext,an AccessibleAWTCheckboxMenuItem that serves as the AccessibleContext of this CheckboxMenuItem
java.awt.Choice.addNotify(),void,
java.awt.Choice.getItemCount(),int,the number of items in this Choice menu
java.awt.Choice.countItems(),int,
java.awt.Choice.getItem(int),String,
java.awt.Choice.add(String),void,
java.awt.Choice.addItem(String),void,
"java.awt.Choice.insert(String,int)",void,
java.awt.Choice.remove(String),void,
java.awt.Choice.remove(int),void,
java.awt.Choice.removeAll(),void,
java.awt.Choice.getSelectedItem(),String,a string representation of the currently selected item in this choice menu
java.awt.Choice.getSelectedObjects(),Object[],
java.awt.Choice.getSelectedIndex(),int,"the index of the currently selected item, or -1 if nothing is currently selected"
java.awt.Choice.select(int),void,
java.awt.Choice.select(String),void,
java.awt.Choice.addItemListener(ItemListener),void,
java.awt.Choice.removeItemListener(ItemListener),void,
java.awt.Choice.getItemListeners(),ItemListener[],all of this choice's ItemListeners or an empty array if no item listeners are currently registered
java.awt.Choice.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this choice, or an empty array if no such listeners have been added"
java.awt.Choice.processEvent(AWTEvent),void,
java.awt.Choice.processItemEvent(ItemEvent),void,
java.awt.Choice.paramString(),String,the parameter string of this Choice menu
java.awt.Choice.getAccessibleContext(),AccessibleContext,an AccessibleAWTChoice that serves as the AccessibleContext of this Choice
java.awt.Color.getRed(),int,the red component.
java.awt.Color.getGreen(),int,the green component.
java.awt.Color.getBlue(),int,the blue component.
java.awt.Color.getAlpha(),int,the alpha component.
java.awt.Color.getRGB(),int,the RGB value of the color in the default sRGB ColorModel.
java.awt.Color.brighter(),Color,a new Color object that is a brighter version of this Color with the same alpha value.
java.awt.Color.darker(),Color,a new Color object that is a darker version of this Color with the same alpha value.
java.awt.Color.hashCode(),int,a hash code value for this object.
java.awt.Color.equals(Object),boolean,true if the objects are the same; false otherwise.
java.awt.Color.toString(),String,a string representation of this Color.
java.awt.Color.decode(String),Color,the new Color object.
java.awt.Color.getColor(String),Color,the Color converted from the system property.
"java.awt.Color.getColor(String,Color)",Color,"the Color converted from the system property, or the specified Color."
"java.awt.Color.getColor(String,int)",Color,the Color converted from the system property or the Color converted from the specified integer.
"java.awt.Color.HSBtoRGB(float,float,float)",int,"the RGB value of the color with the indicated hue, saturation, and brightness."
"java.awt.Color.RGBtoHSB(int,int,int,float[])",float[],"an array of three elements containing the hue, saturation, and brightness (in that order), of the color with the indicated red, green, and blue components."
"java.awt.Color.getHSBColor(float,float,float)",Color,"a Color object with the specified hue, saturation, and brightness."
java.awt.Color.getRGBComponents(float[]),float[],the RGBA components in a float array.
java.awt.Color.getRGBColorComponents(float[]),float[],the RGB components in a float array.
java.awt.Color.getComponents(float[]),float[],the color and alpha components in a float array.
java.awt.Color.getColorComponents(float[]),float[],the color components in a float array.
"java.awt.Color.getComponents(ColorSpace,float[])",float[],the color and alpha components in a float array.
"java.awt.Color.getColorComponents(ColorSpace,float[])",float[],the color components in a float array.
java.awt.Color.getColorSpace(),ColorSpace,this Color object's ColorSpace.
"java.awt.Color.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)",PaintContext,the PaintContext for generating color patterns.
java.awt.Color.getTransparency(),int,this Color object's transparency mode.
java.awt.Component.getName(),String,this component's name
java.awt.Component.setName(String),void,
java.awt.Component.getParent(),Container,the parent container of this component
java.awt.Component.getPeer(),java.awt.peer.ComponentPeer,
java.awt.Component.setDropTarget(DropTarget),void,
java.awt.Component.getDropTarget(),DropTarget,
java.awt.Component.getGraphicsConfiguration(),GraphicsConfiguration,the GraphicsConfiguration used by this Component or null
java.awt.Component.getTreeLock(),Object,this component's locking object
java.awt.Component.getToolkit(),Toolkit,the toolkit of this component
java.awt.Component.isValid(),boolean,"true if the component is valid, false otherwise"
java.awt.Component.isDisplayable(),boolean,"true if the component is displayable, false otherwise"
java.awt.Component.isVisible(),boolean,"true if the component is visible, false otherwise"
java.awt.Component.getMousePosition(),Point,"mouse coordinates relative to this Component, or null"
java.awt.Component.isShowing(),boolean,
java.awt.Component.isEnabled(),boolean,"true if the component is enabled, false otherwise"
java.awt.Component.setEnabled(boolean),void,
java.awt.Component.enable(),void,
java.awt.Component.enable(boolean),void,
java.awt.Component.disable(),void,
java.awt.Component.isDoubleBuffered(),boolean,false by default
java.awt.Component.enableInputMethods(boolean),void,
java.awt.Component.setVisible(boolean),void,
java.awt.Component.show(),void,
java.awt.Component.show(boolean),void,
java.awt.Component.hide(),void,
java.awt.Component.getForeground(),Color,"this component's foreground color; if this component does not have a foreground color, the foreground color of its parent is returned"
java.awt.Component.setForeground(Color),void,
java.awt.Component.isForegroundSet(),boolean,true if the foreground color has been explicitly set for this Component; false otherwise.
java.awt.Component.getBackground(),Color,"this component's background color; if this component does not have a background color, the background color of its parent is returned"
java.awt.Component.setBackground(Color),void,
java.awt.Component.isBackgroundSet(),boolean,true if the background color has been explicitly set for this Component; false otherwise.
java.awt.Component.getFont(),Font,"this component's font; if a font has not been set for this component, the font of its parent is returned"
java.awt.Component.setFont(Font),void,
java.awt.Component.isFontSet(),boolean,true if the font has been explicitly set for this Component; false otherwise.
java.awt.Component.getLocale(),Locale,"this component's locale; if this component does not have a locale, the locale of its parent is returned"
java.awt.Component.setLocale(Locale),void,
java.awt.Component.getColorModel(),ColorModel,the color model used by this component
java.awt.Component.getLocation(),Point,an instance of Point representing the top-left corner of the component's bounds in the coordinate space of the component's parent
java.awt.Component.getLocationOnScreen(),Point,an instance of Point representing the top-left corner of the component's bounds in the coordinate space of the screen
java.awt.Component.location(),Point,
"java.awt.Component.setLocation(int,int)",void,
"java.awt.Component.move(int,int)",void,
java.awt.Component.setLocation(Point),void,
java.awt.Component.getSize(),Dimension,a Dimension object that indicates the size of this component
java.awt.Component.size(),Dimension,
"java.awt.Component.setSize(int,int)",void,
"java.awt.Component.resize(int,int)",void,
java.awt.Component.setSize(Dimension),void,
java.awt.Component.resize(Dimension),void,
java.awt.Component.getBounds(),Rectangle,a rectangle indicating this component's bounds
java.awt.Component.bounds(),Rectangle,
"java.awt.Component.setBounds(int,int,int,int)",void,
"java.awt.Component.reshape(int,int,int,int)",void,
java.awt.Component.setBounds(Rectangle),void,
java.awt.Component.getX(),int,the current x coordinate of the components origin
java.awt.Component.getY(),int,the current y coordinate of the components origin
java.awt.Component.getWidth(),int,the current width of this component
java.awt.Component.getHeight(),int,the current height of this component
java.awt.Component.getBounds(Rectangle),Rectangle,rv
java.awt.Component.getSize(Dimension),Dimension,rv
java.awt.Component.getLocation(Point),Point,rv
java.awt.Component.isOpaque(),boolean,true if this component is completely opaque
java.awt.Component.isLightweight(),boolean,true if this component has a lightweight peer; false if it has a native peer or no peer
java.awt.Component.setPreferredSize(Dimension),void,
java.awt.Component.isPreferredSizeSet(),boolean,true if setPreferredSize has been invoked with a non-null value.
java.awt.Component.getPreferredSize(),Dimension,a dimension object indicating this component's preferred size
java.awt.Component.preferredSize(),Dimension,
java.awt.Component.setMinimumSize(Dimension),void,
java.awt.Component.isMinimumSizeSet(),boolean,true if setMinimumSize has been invoked with a non-null value.
java.awt.Component.getMinimumSize(),Dimension,a dimension object indicating this component's minimum size
java.awt.Component.minimumSize(),Dimension,
java.awt.Component.setMaximumSize(Dimension),void,
java.awt.Component.isMaximumSizeSet(),boolean,"true if maximumSize is non-null, false otherwise"
java.awt.Component.getMaximumSize(),Dimension,a dimension object indicating this component's maximum size
java.awt.Component.getAlignmentX(),float,
java.awt.Component.getAlignmentY(),float,
"java.awt.Component.getBaseline(int,int)",int,the baseline or &lt; 0 indicating there is no reasonable baseline
java.awt.Component.getBaselineResizeBehavior(),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
java.awt.Component.doLayout(),void,
java.awt.Component.layout(),void,
java.awt.Component.validate(),void,
java.awt.Component.invalidate(),void,
java.awt.Component.revalidate(),void,
java.awt.Component.getGraphics(),Graphics,"a graphics context for this component, or null if it has none"
java.awt.Component.getFontMetrics(Font),FontMetrics,the font metrics for font
java.awt.Component.setCursor(Cursor),void,
java.awt.Component.getCursor(),Cursor,
java.awt.Component.isCursorSet(),boolean,true if the cursor has been explicitly set for this Component; false otherwise.
java.awt.Component.paint(Graphics),void,
java.awt.Component.update(Graphics),void,
java.awt.Component.paintAll(Graphics),void,
java.awt.Component.repaint(),void,
java.awt.Component.repaint(long),void,
"java.awt.Component.repaint(int,int,int,int)",void,
"java.awt.Component.repaint(long,int,int,int,int)",void,
java.awt.Component.print(Graphics),void,
java.awt.Component.printAll(Graphics),void,
"java.awt.Component.imageUpdate(Image,int,int,int,int,int)",boolean,false if the infoflags indicate that the image is completely loaded; true otherwise.
java.awt.Component.createImage(ImageProducer),Image,the image produced
"java.awt.Component.createImage(int,int)",Image,"an off-screen drawable image, which can be used for double buffering. The return value may be null if the component is not displayable. This will always happen if GraphicsEnvironment.isHeadless() returns true."
"java.awt.Component.createVolatileImage(int,int)",VolatileImage,"an off-screen drawable image, which can be used for double buffering. The return value may be null if the component is not displayable. This will always happen if GraphicsEnvironment.isHeadless() returns true."
"java.awt.Component.createVolatileImage(int,int,ImageCapabilities)",VolatileImage,"a VolatileImage object, which can be used to manage surface contents loss and capabilities."
"java.awt.Component.prepareImage(Image,ImageObserver)",boolean,true if the image has already been fully prepared; false otherwise
"java.awt.Component.prepareImage(Image,int,int,ImageObserver)",boolean,true if the image has already been fully prepared; false otherwise
"java.awt.Component.checkImage(Image,ImageObserver)",int,the bitwise inclusive OR of ImageObserver flags indicating what information about the image is currently available
"java.awt.Component.checkImage(Image,int,int,ImageObserver)",int,the bitwise inclusive OR of ImageObserver flags indicating what information about the image is currently available
java.awt.Component.setIgnoreRepaint(boolean),void,
java.awt.Component.getIgnoreRepaint(),boolean,whether or not paint messages received from the operating system should be ignored.
"java.awt.Component.contains(int,int)",boolean,
"java.awt.Component.inside(int,int)",boolean,
java.awt.Component.contains(Point),boolean,
"java.awt.Component.getComponentAt(int,int)",Component,"the component or subcomponent that contains the (x,y) location; null if the location is outside this component"
"java.awt.Component.locate(int,int)",Component,
java.awt.Component.getComponentAt(Point),Component,
java.awt.Component.deliverEvent(Event),void,
java.awt.Component.dispatchEvent(AWTEvent),void,
java.awt.Component.postEvent(Event),boolean,
java.awt.Component.addComponentListener(ComponentListener),void,
java.awt.Component.removeComponentListener(ComponentListener),void,
java.awt.Component.getComponentListeners(),ComponentListener[],all ComponentListeners of this component or an empty array if no component listeners are currently registered
java.awt.Component.addFocusListener(FocusListener),void,
java.awt.Component.removeFocusListener(FocusListener),void,
java.awt.Component.getFocusListeners(),FocusListener[],all of this component's FocusListeners or an empty array if no component listeners are currently registered
java.awt.Component.addHierarchyListener(HierarchyListener),void,
java.awt.Component.removeHierarchyListener(HierarchyListener),void,
java.awt.Component.getHierarchyListeners(),HierarchyListener[],all of this component's HierarchyListeners or an empty array if no hierarchy listeners are currently registered
java.awt.Component.addHierarchyBoundsListener(HierarchyBoundsListener),void,
java.awt.Component.removeHierarchyBoundsListener(HierarchyBoundsListener),void,
java.awt.Component.getHierarchyBoundsListeners(),HierarchyBoundsListener[],all of this component's HierarchyBoundsListeners or an empty array if no hierarchy bounds listeners are currently registered
java.awt.Component.addKeyListener(KeyListener),void,
java.awt.Component.removeKeyListener(KeyListener),void,
java.awt.Component.getKeyListeners(),KeyListener[],all of this component's KeyListeners or an empty array if no key listeners are currently registered
java.awt.Component.addMouseListener(MouseListener),void,
java.awt.Component.removeMouseListener(MouseListener),void,
java.awt.Component.getMouseListeners(),MouseListener[],all of this component's MouseListeners or an empty array if no mouse listeners are currently registered
java.awt.Component.addMouseMotionListener(MouseMotionListener),void,
java.awt.Component.removeMouseMotionListener(MouseMotionListener),void,
java.awt.Component.getMouseMotionListeners(),MouseMotionListener[],all of this component's MouseMotionListeners or an empty array if no mouse motion listeners are currently registered
java.awt.Component.addMouseWheelListener(MouseWheelListener),void,
java.awt.Component.removeMouseWheelListener(MouseWheelListener),void,
java.awt.Component.getMouseWheelListeners(),MouseWheelListener[],all of this component's MouseWheelListeners or an empty array if no mouse wheel listeners are currently registered
java.awt.Component.addInputMethodListener(InputMethodListener),void,
java.awt.Component.removeInputMethodListener(InputMethodListener),void,
java.awt.Component.getInputMethodListeners(),InputMethodListener[],all of this component's InputMethodListeners or an empty array if no input method listeners are currently registered
java.awt.Component.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added"
java.awt.Component.getInputMethodRequests(),InputMethodRequests,"the input method request handler for this component, null by default"
java.awt.Component.getInputContext(),InputContext,the input context used by this component; null if no context can be determined
java.awt.Component.enableEvents(long),void,
java.awt.Component.disableEvents(long),void,
"java.awt.Component.coalesceEvents(AWTEvent,AWTEvent)",AWTEvent,"a coalesced event, or null indicating that no coalescing was done"
java.awt.Component.processEvent(AWTEvent),void,
java.awt.Component.processComponentEvent(ComponentEvent),void,
java.awt.Component.processFocusEvent(FocusEvent),void,
java.awt.Component.processKeyEvent(KeyEvent),void,
java.awt.Component.processMouseEvent(MouseEvent),void,
java.awt.Component.processMouseMotionEvent(MouseEvent),void,
java.awt.Component.processMouseWheelEvent(MouseWheelEvent),void,
java.awt.Component.processInputMethodEvent(InputMethodEvent),void,
java.awt.Component.processHierarchyEvent(HierarchyEvent),void,
java.awt.Component.processHierarchyBoundsEvent(HierarchyEvent),void,
java.awt.Component.handleEvent(Event),boolean,
"java.awt.Component.mouseDown(Event,int,int)",boolean,
"java.awt.Component.mouseDrag(Event,int,int)",boolean,
"java.awt.Component.mouseUp(Event,int,int)",boolean,
"java.awt.Component.mouseMove(Event,int,int)",boolean,
"java.awt.Component.mouseEnter(Event,int,int)",boolean,
"java.awt.Component.mouseExit(Event,int,int)",boolean,
"java.awt.Component.keyDown(Event,int)",boolean,
"java.awt.Component.keyUp(Event,int)",boolean,
"java.awt.Component.action(Event,Object)",boolean,
java.awt.Component.addNotify(),void,
java.awt.Component.removeNotify(),void,
"java.awt.Component.gotFocus(Event,Object)",boolean,
"java.awt.Component.lostFocus(Event,Object)",boolean,
java.awt.Component.isFocusTraversable(),boolean,true if this Component is focusable; false otherwise
java.awt.Component.isFocusable(),boolean,true if this Component is focusable; false otherwise.
java.awt.Component.setFocusable(boolean),void,
"java.awt.Component.setFocusTraversalKeys(int,Set&lt;?)",void,
java.awt.Component.getFocusTraversalKeys(int),Set&lt;AWTKeyStroke&gt;,"the Set of AWTKeyStrokes for the specified operation. The Set will be unmodifiable, and may be empty. null will never be returned."
java.awt.Component.areFocusTraversalKeysSet(int),boolean,true if the the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component; false otherwise.
java.awt.Component.setFocusTraversalKeysEnabled(boolean),void,
java.awt.Component.getFocusTraversalKeysEnabled(),boolean,whether focus traversal keys are enabled for this Component
java.awt.Component.requestFocus(),void,
java.awt.Component.requestFocus(boolean),boolean,false if the focus change request is guaranteed to fail; true if it is likely to succeed
java.awt.Component.requestFocusInWindow(),boolean,false if the focus change request is guaranteed to fail; true if it is likely to succeed
java.awt.Component.requestFocusInWindow(boolean),boolean,false if the focus change request is guaranteed to fail; true if it is likely to succeed
java.awt.Component.getFocusCycleRootAncestor(),Container,this Component's nearest focus-cycle-root ancestor
java.awt.Component.isFocusCycleRoot(Container),boolean,true if the specified Container is a focus-cycle- root of this Component; false otherwise
java.awt.Component.transferFocus(),void,
java.awt.Component.nextFocus(),void,
java.awt.Component.transferFocusBackward(),void,
java.awt.Component.transferFocusUpCycle(),void,
java.awt.Component.hasFocus(),boolean,true if this Component is the focus owner; false otherwise
java.awt.Component.isFocusOwner(),boolean,true if this Component is the focus owner; false otherwise
java.awt.Component.add(PopupMenu),void,
java.awt.Component.remove(MenuComponent),void,
java.awt.Component.paramString(),String,a string representation of this component's state
java.awt.Component.toString(),String,a string representation of this component
java.awt.Component.list(),void,
java.awt.Component.list(PrintStream),void,
"java.awt.Component.list(PrintStream,int)",void,
java.awt.Component.list(PrintWriter),void,
"java.awt.Component.list(PrintWriter,int)",void,
java.awt.Component.addPropertyChangeListener(PropertyChangeListener),void,
java.awt.Component.removePropertyChangeListener(PropertyChangeListener),void,
java.awt.Component.getPropertyChangeListeners(),PropertyChangeListener[],all of this component's PropertyChangeListeners or an empty array if no property change listeners are currently registered
"java.awt.Component.addPropertyChangeListener(String,PropertyChangeListener)",void,
"java.awt.Component.removePropertyChangeListener(String,PropertyChangeListener)",void,
java.awt.Component.getPropertyChangeListeners(String),PropertyChangeListener[],"all of the PropertyChangeListeners associated with the named property; if no such listeners have been added or if propertyName is null, an empty array is returned"
"java.awt.Component.firePropertyChange(String,Object,Object)",void,
"java.awt.Component.firePropertyChange(String,boolean,boolean)",void,
"java.awt.Component.firePropertyChange(String,int,int)",void,
"java.awt.Component.firePropertyChange(String,byte,byte)",void,
"java.awt.Component.firePropertyChange(String,char,char)",void,
"java.awt.Component.firePropertyChange(String,short,short)",void,
"java.awt.Component.firePropertyChange(String,long,long)",void,
"java.awt.Component.firePropertyChange(String,float,float)",void,
"java.awt.Component.firePropertyChange(String,double,double)",void,
java.awt.Component.setComponentOrientation(ComponentOrientation),void,
java.awt.Component.getComponentOrientation(),ComponentOrientation,
java.awt.Component.applyComponentOrientation(ComponentOrientation),void,
java.awt.Component.getAccessibleContext(),AccessibleContext,the AccessibleContext of this Component
java.awt.ComponentOrientation.isHorizontal(),boolean,
java.awt.ComponentOrientation.isLeftToRight(),boolean,
java.awt.ComponentOrientation.getOrientation(Locale),ComponentOrientation,
java.awt.ComponentOrientation.getOrientation(ResourceBundle),ComponentOrientation,
java.awt.Container.getComponentCount(),int,the number of components in this panel.
java.awt.Container.countComponents(),int,
java.awt.Container.getComponent(int),Component,the nth component in this container.
java.awt.Container.getComponents(),Component[],an array of all the components in this container.
java.awt.Container.getInsets(),Insets,the insets of this container.
java.awt.Container.insets(),Insets,
java.awt.Container.add(Component),Component,the component argument
"java.awt.Container.add(String,Component)",Component,
"java.awt.Container.add(Component,int)",Component,the component comp
"java.awt.Container.setComponentZOrder(Component,int)",void,
java.awt.Container.getComponentZOrder(Component),int,the z-order index of the component; otherwise returns -1 if the component is null or doesn't belong to the container
"java.awt.Container.add(Component,Object)",void,
"java.awt.Container.add(Component,Object,int)",void,
"java.awt.Container.addImpl(Component,Object,int)",void,
java.awt.Container.remove(int),void,
java.awt.Container.remove(Component),void,
java.awt.Container.removeAll(),void,
java.awt.Container.getLayout(),LayoutManager,
java.awt.Container.setLayout(LayoutManager),void,
java.awt.Container.doLayout(),void,
java.awt.Container.layout(),void,
java.awt.Container.isValidateRoot(),boolean,whether this container is a validate root
java.awt.Container.invalidate(),void,
java.awt.Container.validate(),void,
java.awt.Container.validateTree(),void,
java.awt.Container.setFont(Font),void,
java.awt.Container.getPreferredSize(),Dimension,an instance of Dimension that represents the preferred size of this container.
java.awt.Container.preferredSize(),Dimension,
java.awt.Container.getMinimumSize(),Dimension,an instance of Dimension that represents the minimum size of this container.
java.awt.Container.minimumSize(),Dimension,
java.awt.Container.getMaximumSize(),Dimension,an instance of Dimension that represents the maximum size of this container.
java.awt.Container.getAlignmentX(),float,
java.awt.Container.getAlignmentY(),float,
java.awt.Container.paint(Graphics),void,
java.awt.Container.update(Graphics),void,
java.awt.Container.print(Graphics),void,
java.awt.Container.paintComponents(Graphics),void,
java.awt.Container.printComponents(Graphics),void,
java.awt.Container.addContainerListener(ContainerListener),void,
java.awt.Container.removeContainerListener(ContainerListener),void,
java.awt.Container.getContainerListeners(),ContainerListener[],all of this container's ContainerListeners or an empty array if no container listeners are currently registered
java.awt.Container.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this container, or an empty array if no such listeners have been added"
java.awt.Container.processEvent(AWTEvent),void,
java.awt.Container.processContainerEvent(ContainerEvent),void,
java.awt.Container.deliverEvent(Event),void,
"java.awt.Container.getComponentAt(int,int)",Component,null if the component does not contain the position. If there is no child component at the requested point and the point is within the bounds of the container the container itself is returned; otherwise the top-most child is returned.
"java.awt.Container.locate(int,int)",Component,
java.awt.Container.getComponentAt(Point),Component,"returns the component that contains the point, or null if the component does not contain the point."
java.awt.Container.getMousePosition(boolean),Point,"mouse coordinates relative to this Component, or null"
"java.awt.Container.findComponentAt(int,int)",Component,null if the component does not contain the position. If there is no child component at the requested point and the point is within the bounds of the container the container itself is returned.
java.awt.Container.findComponentAt(Point),Component,null if the component does not contain the position. If there is no child component at the requested point and the point is within the bounds of the container the container itself is returned.
java.awt.Container.addNotify(),void,
java.awt.Container.removeNotify(),void,
java.awt.Container.isAncestorOf(Component),boolean,true if it is an ancestor; false otherwise.
java.awt.Container.paramString(),String,the parameter string of this container
"java.awt.Container.list(PrintStream,int)",void,
"java.awt.Container.list(PrintWriter,int)",void,
"java.awt.Container.setFocusTraversalKeys(int,Set&lt;?)",void,
java.awt.Container.getFocusTraversalKeys(int),Set&lt;AWTKeyStroke&gt;,"the Set of AWTKeyStrokes for the specified operation. The Set will be unmodifiable, and may be empty. null will never be returned."
java.awt.Container.areFocusTraversalKeysSet(int),boolean,true if the the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component; false otherwise.
java.awt.Container.isFocusCycleRoot(Container),boolean,true if the specified Container is a focus-cycle- root of this Container; false otherwise
java.awt.Container.setFocusTraversalPolicy(FocusTraversalPolicy),void,
java.awt.Container.getFocusTraversalPolicy(),FocusTraversalPolicy,"this Container's focus traversal policy, or null if this Container is not a focus cycle root."
java.awt.Container.isFocusTraversalPolicySet(),boolean,true if the focus traversal policy has been explicitly set for this Container; false otherwise.
java.awt.Container.setFocusCycleRoot(boolean),void,
java.awt.Container.isFocusCycleRoot(),boolean,whether this Container is the root of a focus traversal cycle
java.awt.Container.setFocusTraversalPolicyProvider(boolean),void,
java.awt.Container.isFocusTraversalPolicyProvider(),boolean,"true if this container provides focus traversal policy, false otherwise"
java.awt.Container.transferFocusDownCycle(),void,
java.awt.Container.applyComponentOrientation(ComponentOrientation),void,
java.awt.Container.addPropertyChangeListener(PropertyChangeListener),void,
"java.awt.Container.addPropertyChangeListener(String,PropertyChangeListener)",void,
"java.awt.ContainerOrderFocusTraversalPolicy.getComponentAfter(Container,Component)",Component,"the Component that should receive the focus after aComponent, or null if no suitable Component can be found"
"java.awt.ContainerOrderFocusTraversalPolicy.getComponentBefore(Container,Component)",Component,"the Component that should receive the focus before aComponent, or null if no suitable Component can be found"
java.awt.ContainerOrderFocusTraversalPolicy.getFirstComponent(Container),Component,"the first Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
java.awt.ContainerOrderFocusTraversalPolicy.getLastComponent(Container),Component,"the last Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
java.awt.ContainerOrderFocusTraversalPolicy.getDefaultComponent(Container),Component,"the default Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
java.awt.ContainerOrderFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean),void,
java.awt.ContainerOrderFocusTraversalPolicy.getImplicitDownCycleTraversal(),boolean,whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly
java.awt.ContainerOrderFocusTraversalPolicy.accept(Component),boolean,"true if aComponent is visible, displayable, enabled, and focusable; false otherwise"
java.awt.Cursor.getPredefinedCursor(int),Cursor,the specified predefined cursor
java.awt.Cursor.getSystemCustomCursor(String),Cursor,the system specific custom cursor named
java.awt.Cursor.getDefaultCursor(),Cursor,
java.awt.Cursor.getType(),int,
java.awt.Cursor.getName(),String,a localized description of this cursor.
java.awt.Cursor.toString(),String,a string representation of this cursor.
java.awt.DefaultFocusTraversalPolicy.accept(Component),boolean,true if aComponent meets the above requirements; false otherwise
java.awt.DefaultKeyboardFocusManager.dispatchEvent(AWTEvent),boolean,true if this method dispatched the event; false otherwise
java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(KeyEvent),boolean,true
java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(KeyEvent),boolean,true
"java.awt.DefaultKeyboardFocusManager.processKeyEvent(Component,KeyEvent)",void,
"java.awt.DefaultKeyboardFocusManager.enqueueKeyEvents(long,Component)",void,
"java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long,Component)",void,
java.awt.DefaultKeyboardFocusManager.discardKeyEvents(Component),void,
java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(Component),void,
java.awt.DefaultKeyboardFocusManager.focusNextComponent(Component),void,
java.awt.DefaultKeyboardFocusManager.upFocusCycle(Component),void,
java.awt.DefaultKeyboardFocusManager.downFocusCycle(Container),void,
java.awt.Desktop.getDesktop(),Desktop,the Desktop instance of the current browser context
java.awt.Desktop.isDesktopSupported(),boolean,true if this class is supported on the current platform; false otherwise
java.awt.Desktop.isSupported(Desktop.Action),boolean,true if the specified action is supported on the current platform; false otherwise
java.awt.Desktop.open(File),void,
java.awt.Desktop.edit(File),void,
java.awt.Desktop.print(File),void,
java.awt.Desktop.browse(URI),void,
java.awt.Desktop.mail(),void,
java.awt.Desktop.mail(URI),void,
java.awt.Dialog.addNotify(),void,
java.awt.Dialog.isModal(),boolean,true if this dialog window is modal; false otherwise
java.awt.Dialog.setModal(boolean),void,
java.awt.Dialog.getModalityType(),Dialog.ModalityType,modality type of this dialog
java.awt.Dialog.setModalityType(Dialog.ModalityType),void,
java.awt.Dialog.getTitle(),String,the title of this dialog window. The title may be null.
java.awt.Dialog.setTitle(String),void,
java.awt.Dialog.setVisible(boolean),void,
java.awt.Dialog.show(),void,
java.awt.Dialog.hide(),void,
java.awt.Dialog.toBack(),void,
java.awt.Dialog.isResizable(),boolean,true if the user can resize the dialog; false otherwise.
java.awt.Dialog.setResizable(boolean),void,
java.awt.Dialog.setUndecorated(boolean),void,
java.awt.Dialog.isUndecorated(),boolean,true if dialog is undecorated; false otherwise.
java.awt.Dialog.setOpacity(float),void,
java.awt.Dialog.setShape(Shape),void,
java.awt.Dialog.setBackground(Color),void,
java.awt.Dialog.paramString(),String,the parameter string of this dialog window.
java.awt.Dialog.getAccessibleContext(),AccessibleContext,an AccessibleAWTDialog that serves as the AccessibleContext of this Dialog
java.awt.Dimension.getWidth(),double,the width of this Dimension.
java.awt.Dimension.getHeight(),double,the height of this Dimension.
"java.awt.Dimension.setSize(double,double)",void,
java.awt.Dimension.getSize(),Dimension,"the size of this dimension, a new instance of Dimension with the same width and height"
java.awt.Dimension.setSize(Dimension),void,
"java.awt.Dimension.setSize(int,int)",void,
java.awt.Dimension.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.awt.Dimension.hashCode(),int,a hash code for this Dimension
java.awt.Dimension.toString(),String,a string representation of this Dimension object
java.awt.DisplayMode.getHeight(),int,"the height of the display, in pixels"
java.awt.DisplayMode.getWidth(),int,"the width of the display, in pixels"
java.awt.DisplayMode.getBitDepth(),int,"the bit depth of the display, in bits per pixel."
java.awt.DisplayMode.getRefreshRate(),int,"the refresh rate of the display, in hertz."
java.awt.DisplayMode.equals(DisplayMode),boolean,whether the two display modes are equal
java.awt.DisplayMode.equals(Object),boolean,
java.awt.DisplayMode.hashCode(),int,
"java.awt.Event.translate(int,int)",void,
java.awt.Event.shiftDown(),boolean,true if the key is down; false otherwise.
java.awt.Event.controlDown(),boolean,true if the key is down; false otherwise.
java.awt.Event.metaDown(),boolean,true if the key is down; false otherwise.
java.awt.Event.paramString(),String,the parameter string of this event
java.awt.Event.toString(),String,a string that represents the event and the values of its member fields.
java.awt.EventQueue.postEvent(AWTEvent),void,
java.awt.EventQueue.getNextEvent(),AWTEvent,the next AWTEvent
java.awt.EventQueue.peekEvent(),AWTEvent,the first event
java.awt.EventQueue.peekEvent(int),AWTEvent,the first event of the specified id or null if there is no such event
java.awt.EventQueue.dispatchEvent(AWTEvent),void,
java.awt.EventQueue.getMostRecentEventTime(),long,"the timestamp of the last InputEvent, ActionEvent, or InvocationEvent to be dispatched, or System.currentTimeMillis() if this method is invoked on a thread other than an event dispatching thread"
java.awt.EventQueue.getCurrentEvent(),AWTEvent,"the event currently being dispatched, or null if this method is invoked on a thread other than an event dispatching thread"
java.awt.EventQueue.push(EventQueue),void,
java.awt.EventQueue.pop(),void,
java.awt.EventQueue.createSecondaryLoop(),SecondaryLoop,"secondaryLoop A new secondary loop object, which can be used to launch a new nested event loop and dispatch events from this queue"
java.awt.EventQueue.isDispatchThread(),boolean,true if running in the current AWT EventQueue's dispatch thread
java.awt.EventQueue.invokeLater(Runnable),void,
java.awt.EventQueue.invokeAndWait(Runnable),void,
java.awt.FileDialog.addNotify(),void,
java.awt.FileDialog.getMode(),int,"the mode of this file dialog window, either FileDialog.LOAD or FileDialog.SAVE"
java.awt.FileDialog.setMode(int),void,
java.awt.FileDialog.getDirectory(),String,the (potentially null or invalid) directory of this FileDialog
java.awt.FileDialog.setDirectory(String),void,
java.awt.FileDialog.getFile(),String,"the currently selected file of this file dialog window, or null if none is selected"
java.awt.FileDialog.getFiles(),File[],files that the user selects or an empty array if the user cancels the file dialog.
java.awt.FileDialog.setFile(String),void,
java.awt.FileDialog.setMultipleMode(boolean),void,
java.awt.FileDialog.isMultipleMode(),boolean,true if the file dialog allows the multiple file selection; false otherwise.
java.awt.FileDialog.getFilenameFilter(),FilenameFilter,this file dialog's filename filter
java.awt.FileDialog.setFilenameFilter(FilenameFilter),void,
java.awt.FileDialog.paramString(),String,the parameter string of this file dialog window
java.awt.FlowLayout.getAlignment(),int,the alignment value for this layout
java.awt.FlowLayout.setAlignment(int),void,
java.awt.FlowLayout.getHgap(),int,the horizontal gap between components and between the components and the borders of the Container
java.awt.FlowLayout.setHgap(int),void,
java.awt.FlowLayout.getVgap(),int,the vertical gap between components and between the components and the borders of the Container
java.awt.FlowLayout.setVgap(int),void,
java.awt.FlowLayout.setAlignOnBaseline(boolean),void,
java.awt.FlowLayout.getAlignOnBaseline(),boolean,true if components are to be vertically aligned along their baseline
"java.awt.FlowLayout.addLayoutComponent(String,Component)",void,
java.awt.FlowLayout.removeLayoutComponent(Component),void,
java.awt.FlowLayout.preferredLayoutSize(Container),Dimension,the preferred dimensions to lay out the subcomponents of the specified container
java.awt.FlowLayout.minimumLayoutSize(Container),Dimension,the minimum dimensions to lay out the subcomponents of the specified container
java.awt.FlowLayout.layoutContainer(Container),void,
java.awt.FlowLayout.toString(),String,a string representation of this layout
"java.awt.FocusTraversalPolicy.getComponentAfter(Container,Component)",abstractComponent,"the Component that should receive the focus after aComponent, or null if no suitable Component can be found"
"java.awt.FocusTraversalPolicy.getComponentBefore(Container,Component)",abstractComponent,"the Component that should receive the focus before aComponent, or null if no suitable Component can be found"
java.awt.FocusTraversalPolicy.getFirstComponent(Container),abstractComponent,"the first Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
java.awt.FocusTraversalPolicy.getLastComponent(Container),abstractComponent,"the last Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
java.awt.FocusTraversalPolicy.getDefaultComponent(Container),abstractComponent,"the default Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
java.awt.FocusTraversalPolicy.getInitialComponent(Window),Component,"the Component that should receive the focus when window is made visible for the first time, or null if no suitable Component can be found"
java.awt.Font.getPeer(),java.awt.peer.FontPeer,the peer of the Font.
"java.awt.Font.getFont(Map&lt;?,?&gt;)",Font,a new Font created with the specified attributes
"java.awt.Font.createFont(int,InputStream)",Font,a new Font created with the specified font type.
"java.awt.Font.createFont(int,File)",Font,a new Font created with the specified font type.
java.awt.Font.getTransform(),AffineTransform,an AffineTransform object representing the transform attribute of this Font object.
java.awt.Font.getFamily(),String,a String that is the family name of this Font.
java.awt.Font.getFamily(Locale),String,"a String representing the family name of the font, localized for the specified locale."
java.awt.Font.getPSName(),String,a String representing the postscript name of this Font.
java.awt.Font.getName(),String,a String representing the logical name of this Font.
java.awt.Font.getFontName(),String,a String representing the font face name of this Font.
java.awt.Font.getFontName(Locale),String,"a String representing the font face name, localized for the specified locale."
java.awt.Font.getStyle(),int,the style of this Font
java.awt.Font.getSize(),int,the point size of this Font in 1/72 of an inch units.
java.awt.Font.getSize2D(),float,the point size of this Font as a float value.
java.awt.Font.isPlain(),boolean,true if this Font has a PLAIN style; false otherwise.
java.awt.Font.isBold(),boolean,true if this Font object's style is BOLD; false otherwise.
java.awt.Font.isItalic(),boolean,true if this Font object's style is ITALIC; false otherwise.
java.awt.Font.isTransformed(),boolean,true if this Font object has a non-identity AffineTransform attribute. false otherwise.
java.awt.Font.hasLayoutAttributes(),boolean,true if the font has layout attributes
java.awt.Font.getFont(String),Font,"a Font object that the property name describes, or null if no such property exists."
java.awt.Font.decode(String),Font,
"java.awt.Font.getFont(String,Font)",Font,the Font value of the property.
java.awt.Font.hashCode(),int,a hashcode value for this Font.
java.awt.Font.equals(Object),boolean,true if the objects are the same or if the argument is a Font object describing the same font as this object; false otherwise.
java.awt.Font.toString(),String,a String representation of this Font object.
java.awt.Font.getNumGlyphs(),int,the number of glyphs in this Font.
java.awt.Font.getMissingGlyphCode(),int,the glyphCode of this Font.
java.awt.Font.getBaselineFor(char),byte,the baseline appropriate for the specified character.
java.awt.Font.getAttributes(),"Map&lt;TextAttribute,?&gt;",the attributes map of this Font.
java.awt.Font.getAvailableAttributes(),AttributedCharacterIterator.Attribute[],an array containing the keys of all the attributes supported by this Font.
"java.awt.Font.deriveFont(int,float)",Font,a new Font object.
"java.awt.Font.deriveFont(int,AffineTransform)",Font,a new Font object.
java.awt.Font.deriveFont(float),Font,a new Font object.
java.awt.Font.deriveFont(AffineTransform),Font,a new Font object.
java.awt.Font.deriveFont(int),Font,a new Font object.
"java.awt.Font.deriveFont(Map&lt;?,?&gt;)",Font,a new Font object.
java.awt.Font.canDisplay(char),boolean,true if this Font has a glyph for this character; false otherwise.
java.awt.Font.canDisplay(int),boolean,true if this Font has a glyph for the character; false otherwise.
java.awt.Font.canDisplayUpTo(String),int,an offset into str that points to the first character in str that this Font cannot display; or -1 if this Font can display all characters in str.
"java.awt.Font.canDisplayUpTo(char[],int,int)",int,an offset into text that points to the first character in text that this Font cannot display; or -1 if this Font can display all characters in text.
"java.awt.Font.canDisplayUpTo(CharacterIterator,int,int)",int,an offset into iter that points to the first character in iter that this Font cannot display; or -1 if this Font can display all characters in iter.
java.awt.Font.getItalicAngle(),float,the angle of the ITALIC style of this Font.
java.awt.Font.hasUniformLineMetrics(),boolean,true if this Font has uniform line metrics; false otherwise.
"java.awt.Font.getLineMetrics(String,FontRenderContext)",LineMetrics,a LineMetrics object created with the specified String and FontRenderContext.
"java.awt.Font.getLineMetrics(String,int,int,FontRenderContext)",LineMetrics,a LineMetrics object created with the specified arguments.
"java.awt.Font.getLineMetrics(char[],int,int,FontRenderContext)",LineMetrics,a LineMetrics object created with the specified arguments.
"java.awt.Font.getLineMetrics(CharacterIterator,int,int,FontRenderContext)",LineMetrics,a LineMetrics object created with the specified arguments.
"java.awt.Font.getStringBounds(String,FontRenderContext)",Rectangle2D,a Rectangle2D that is the bounding box of the specified String in the specified FontRenderContext.
"java.awt.Font.getStringBounds(String,int,int,FontRenderContext)",Rectangle2D,a Rectangle2D that is the bounding box of the specified String in the specified FontRenderContext.
"java.awt.Font.getStringBounds(char[],int,int,FontRenderContext)",Rectangle2D,a Rectangle2D that is the bounding box of the specified array of characters in the specified FontRenderContext.
"java.awt.Font.getStringBounds(CharacterIterator,int,int,FontRenderContext)",Rectangle2D,a Rectangle2D that is the bounding box of the characters indexed in the specified CharacterIterator in the specified FontRenderContext.
java.awt.Font.getMaxCharBounds(FontRenderContext),Rectangle2D,a Rectangle2D that is the bounding box for the character with the maximum bounds.
"java.awt.Font.createGlyphVector(FontRenderContext,String)",GlyphVector,a new GlyphVector created with the specified String and the specified FontRenderContext.
"java.awt.Font.createGlyphVector(FontRenderContext,char[])",GlyphVector,a new GlyphVector created with the specified array of characters and the specified FontRenderContext.
"java.awt.Font.createGlyphVector(FontRenderContext,CharacterIterator)",GlyphVector,a new GlyphVector created with the specified CharacterIterator and the specified FontRenderContext.
"java.awt.Font.createGlyphVector(FontRenderContext,int[])",GlyphVector,a new GlyphVector created with the specified integer array and the specified FontRenderContext.
"java.awt.Font.layoutGlyphVector(FontRenderContext,char[],int,int,int)",GlyphVector,"a new GlyphVector representing the text between start and limit, with glyphs chosen and positioned so as to best represent the text"
java.awt.FontMetrics.getFont(),Font,the Font described by this FontMetrics object.
java.awt.FontMetrics.getFontRenderContext(),FontRenderContext,the FontRenderContext used by this FontMetrics object.
java.awt.FontMetrics.getLeading(),int,the standard leading of the Font.
java.awt.FontMetrics.getAscent(),int,the font ascent of the Font.
java.awt.FontMetrics.getDescent(),int,the font descent of the Font.
java.awt.FontMetrics.getHeight(),int,the standard height of the font.
java.awt.FontMetrics.getMaxAscent(),int,the maximum ascent of any character in the Font.
java.awt.FontMetrics.getMaxDescent(),int,the maximum descent of any character in the Font.
java.awt.FontMetrics.getMaxDecent(),int,the maximum descent of any character in the Font.
java.awt.FontMetrics.getMaxAdvance(),int,"the maximum advance width of any character in the Font, or -1 if the maximum advance width is not known."
java.awt.FontMetrics.charWidth(int),int,the advance width of the specified character in the Font described by this FontMetrics object.
java.awt.FontMetrics.charWidth(char),int,the advance width of the specified character in the Font described by this FontMetrics object.
java.awt.FontMetrics.stringWidth(String),int,the advance width of the specified String in the Font described by this FontMetrics.
"java.awt.FontMetrics.charsWidth(char[],int,int)",int,the advance width of the subarray of the specified char array in the font described by this FontMetrics object.
"java.awt.FontMetrics.bytesWidth(byte[],int,int)",int,the advance width of the subarray of the specified byte array in the Font described by this FontMetrics object.
java.awt.FontMetrics.getWidths(),int[],an array storing the advance widths of the characters in the Font described by this FontMetrics object.
java.awt.FontMetrics.hasUniformLineMetrics(),boolean,true if the font has uniform line metrics; false otherwise.
"java.awt.FontMetrics.getLineMetrics(String,Graphics)",LineMetrics,a LineMetrics object created with the specified String and Graphics context.
"java.awt.FontMetrics.getLineMetrics(String,int,int,Graphics)",LineMetrics,a LineMetrics object created with the specified String and Graphics context.
"java.awt.FontMetrics.getLineMetrics(char[],int,int,Graphics)",LineMetrics,a LineMetrics object created with the specified character array and Graphics context.
"java.awt.FontMetrics.getLineMetrics(CharacterIterator,int,int,Graphics)",LineMetrics,a LineMetrics object created with the specified arguments.
"java.awt.FontMetrics.getStringBounds(String,Graphics)",Rectangle2D,a Rectangle2D that is the bounding box of the specified String in the specified Graphics context.
"java.awt.FontMetrics.getStringBounds(String,int,int,Graphics)",Rectangle2D,a Rectangle2D that is the bounding box of the specified String in the specified Graphics context.
"java.awt.FontMetrics.getStringBounds(char[],int,int,Graphics)",Rectangle2D,a Rectangle2D that is the bounding box of the specified character array in the specified Graphics context.
"java.awt.FontMetrics.getStringBounds(CharacterIterator,int,int,Graphics)",Rectangle2D,a Rectangle2D that is the bounding box of the characters indexed in the specified CharacterIterator in the specified Graphics context.
java.awt.FontMetrics.getMaxCharBounds(Graphics),Rectangle2D,a Rectangle2D that is the bounding box for the character with the maximum bounds.
java.awt.FontMetrics.toString(),String,a String representation of this FontMetrics object.
java.awt.Frame.addNotify(),void,
java.awt.Frame.getTitle(),String,"the title of this frame, or an empty string ("""") if this frame doesn't have a title."
java.awt.Frame.setTitle(String),void,
java.awt.Frame.getIconImage(),Image,"the icon image for this frame, or null if this frame doesn't have an icon image."
java.awt.Frame.setIconImage(Image),void,
java.awt.Frame.getMenuBar(),MenuBar,"the menu bar for this frame, or null if this frame doesn't have a menu bar."
java.awt.Frame.setMenuBar(MenuBar),void,
java.awt.Frame.isResizable(),boolean,true if the user can resize this frame; false otherwise.
java.awt.Frame.setResizable(boolean),void,
java.awt.Frame.setState(int),void,
java.awt.Frame.setExtendedState(int),void,
java.awt.Frame.getState(),int,Frame.NORMAL or Frame.ICONIFIED.
java.awt.Frame.getExtendedState(),int,
java.awt.Frame.setMaximizedBounds(Rectangle),void,
java.awt.Frame.getMaximizedBounds(),Rectangle,maximized bounds for this frame; may be null
java.awt.Frame.setUndecorated(boolean),void,
java.awt.Frame.isUndecorated(),boolean,true if frame is undecorated; false otherwise.
java.awt.Frame.setOpacity(float),void,
java.awt.Frame.setShape(Shape),void,
java.awt.Frame.setBackground(Color),void,
java.awt.Frame.remove(MenuComponent),void,
java.awt.Frame.removeNotify(),void,
java.awt.Frame.paramString(),String,the parameter string of this frame
java.awt.Frame.setCursor(int),void,
java.awt.Frame.getCursorType(),int,
java.awt.Frame.getFrames(),Frame[],
java.awt.Frame.getAccessibleContext(),AccessibleContext,an AccessibleAWTFrame that serves as the AccessibleContext of this Frame
java.awt.GradientPaint.getPoint1(),Point2D,a Point2D object that is a copy of the point that anchors the first color of this GradientPaint.
java.awt.GradientPaint.getColor1(),Color,a Color object that is the color anchored by P1.
java.awt.GradientPaint.getPoint2(),Point2D,a Point2D object that is a copy of the point that anchors the second color of this GradientPaint.
java.awt.GradientPaint.getColor2(),Color,a Color object that is the color anchored by P2.
java.awt.GradientPaint.isCyclic(),boolean,true if the gradient cycles repeatedly between the two colors; false otherwise.
"java.awt.GradientPaint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)",PaintContext,the PaintContext for generating color patterns.
java.awt.GradientPaint.getTransparency(),int,an integer value representing this GradientPaint object's transparency mode.
java.awt.Graphics.create(),abstractGraphics,a new graphics context that is a copy of this graphics context.
"java.awt.Graphics.create(int,int,int,int)",Graphics,
"java.awt.Graphics.translate(int,int)",abstractvoid,
java.awt.Graphics.getColor(),abstractColor,this graphics context's current color.
java.awt.Graphics.setColor(Color),abstractvoid,
java.awt.Graphics.setPaintMode(),abstractvoid,
java.awt.Graphics.setXORMode(Color),abstractvoid,
java.awt.Graphics.getFont(),abstractFont,this graphics context's current font.
java.awt.Graphics.setFont(Font),abstractvoid,
java.awt.Graphics.getFontMetrics(),FontMetrics,the font metrics of this graphics context's current font.
java.awt.Graphics.getFontMetrics(Font),abstractFontMetrics,the font metrics for the specified font.
java.awt.Graphics.getClipBounds(),abstractRectangle,"the bounding rectangle of the current clipping area, or null if no clip is set."
"java.awt.Graphics.clipRect(int,int,int,int)",abstractvoid,
"java.awt.Graphics.setClip(int,int,int,int)",abstractvoid,
java.awt.Graphics.getClip(),abstractShape,"a Shape object representing the current clipping area, or null if no clip is set."
java.awt.Graphics.setClip(Shape),abstractvoid,
"java.awt.Graphics.copyArea(int,int,int,int,int,int)",abstractvoid,
"java.awt.Graphics.drawLine(int,int,int,int)",abstractvoid,
"java.awt.Graphics.fillRect(int,int,int,int)",abstractvoid,
"java.awt.Graphics.drawRect(int,int,int,int)",void,
"java.awt.Graphics.clearRect(int,int,int,int)",abstractvoid,
"java.awt.Graphics.drawRoundRect(int,int,int,int,int,int)",abstractvoid,
"java.awt.Graphics.fillRoundRect(int,int,int,int,int,int)",abstractvoid,
"java.awt.Graphics.draw3DRect(int,int,int,int,boolean)",void,
"java.awt.Graphics.fill3DRect(int,int,int,int,boolean)",void,
"java.awt.Graphics.drawOval(int,int,int,int)",abstractvoid,
"java.awt.Graphics.fillOval(int,int,int,int)",abstractvoid,
"java.awt.Graphics.drawArc(int,int,int,int,int,int)",abstractvoid,
"java.awt.Graphics.fillArc(int,int,int,int,int,int)",abstractvoid,
"java.awt.Graphics.drawPolyline(int[],int[],int)",abstractvoid,
"java.awt.Graphics.drawPolygon(int[],int[],int)",abstractvoid,
java.awt.Graphics.drawPolygon(Polygon),void,
"java.awt.Graphics.fillPolygon(int[],int[],int)",abstractvoid,
java.awt.Graphics.fillPolygon(Polygon),void,
"java.awt.Graphics.drawString(String,int,int)",abstractvoid,
"java.awt.Graphics.drawString(AttributedCharacterIterator,int,int)",abstractvoid,
"java.awt.Graphics.drawChars(char[],int,int,int,int)",void,
"java.awt.Graphics.drawBytes(byte[],int,int,int,int)",void,
"java.awt.Graphics.drawImage(Image,int,int,ImageObserver)",abstractboolean,false if the image pixels are still changing; true otherwise.
"java.awt.Graphics.drawImage(Image,int,int,int,int,ImageObserver)",abstractboolean,false if the image pixels are still changing; true otherwise.
"java.awt.Graphics.drawImage(Image,int,int,Color,ImageObserver)",abstractboolean,false if the image pixels are still changing; true otherwise.
"java.awt.Graphics.drawImage(Image,int,int,int,int,Color,ImageObserver)",abstractboolean,false if the image pixels are still changing; true otherwise.
"java.awt.Graphics.drawImage(Image,int,int,int,int,int,int,int,int,ImageObserver)",abstractboolean,false if the image pixels are still changing; true otherwise.
"java.awt.Graphics.drawImage(Image,int,int,int,int,int,int,int,int,Color,ImageObserver)",abstractboolean,false if the image pixels are still changing; true otherwise.
java.awt.Graphics.dispose(),abstractvoid,
java.awt.Graphics.finalize(),voidize(),
java.awt.Graphics.toString(),String,a string representation of this graphics context.
java.awt.Graphics.getClipRect(),Rectangle,the bounding rectangle of the current clipping area or null if no clip is set.
"java.awt.Graphics.hitClip(int,int,int,int)",boolean,true if the specified rectangle intersects the bounds of the current clip; false otherwise.
java.awt.Graphics.getClipBounds(Rectangle),Rectangle,the bounding rectangle of the current clipping area.
"java.awt.Graphics2D.draw3DRect(int,int,int,int,boolean)",void,
"java.awt.Graphics2D.fill3DRect(int,int,int,int,boolean)",void,
java.awt.Graphics2D.draw(Shape),abstractvoid,
"java.awt.Graphics2D.drawImage(Image,AffineTransform,ImageObserver)",abstractboolean,"true if the Image is fully loaded and completely rendered, or if it's null; false if the Image is still being loaded."
"java.awt.Graphics2D.drawImage(BufferedImage,BufferedImageOp,int,int)",abstractvoid,
"java.awt.Graphics2D.drawRenderedImage(RenderedImage,AffineTransform)",abstractvoid,
"java.awt.Graphics2D.drawRenderableImage(RenderableImage,AffineTransform)",abstractvoid,
"java.awt.Graphics2D.drawString(String,int,int)",abstractvoid,
"java.awt.Graphics2D.drawString(String,float,float)",abstractvoid,
"java.awt.Graphics2D.drawString(AttributedCharacterIterator,int,int)",abstractvoid,
"java.awt.Graphics2D.drawString(AttributedCharacterIterator,float,float)",abstractvoid,
"java.awt.Graphics2D.drawGlyphVector(GlyphVector,float,float)",abstractvoid,
java.awt.Graphics2D.fill(Shape),abstractvoid,
"java.awt.Graphics2D.hit(Rectangle,Shape,boolean)",abstractboolean,true if there is a hit; false otherwise.
java.awt.Graphics2D.getDeviceConfiguration(),abstractGraphicsConfiguration,the device configuration of this Graphics2D.
java.awt.Graphics2D.setComposite(Composite),abstractvoid,
java.awt.Graphics2D.setPaint(Paint),abstractvoid,
java.awt.Graphics2D.setStroke(Stroke),abstractvoid,
"java.awt.Graphics2D.setRenderingHint(RenderingHints.Key,Object)",abstractvoid,
java.awt.Graphics2D.getRenderingHint(RenderingHints.Key),abstractObject,an object representing the value for the specified hint key. Some of the keys and their associated values are defined in the RenderingHints class.
"java.awt.Graphics2D.setRenderingHints(Map&lt;?,?&gt;)",abstractvoid,
"java.awt.Graphics2D.addRenderingHints(Map&lt;?,?&gt;)",abstractvoid,
java.awt.Graphics2D.getRenderingHints(),abstractRenderingHints,a reference to an instance of RenderingHints that contains the current preferences.
"java.awt.Graphics2D.translate(int,int)",abstractvoid,
"java.awt.Graphics2D.translate(double,double)",abstractvoid,
java.awt.Graphics2D.rotate(double),abstractvoid,
"java.awt.Graphics2D.rotate(double,double,double)",abstractvoid,
"java.awt.Graphics2D.scale(double,double)",abstractvoid,
"java.awt.Graphics2D.shear(double,double)",abstractvoid,
java.awt.Graphics2D.transform(AffineTransform),abstractvoid,
java.awt.Graphics2D.setTransform(AffineTransform),abstractvoid,
java.awt.Graphics2D.getTransform(),abstractAffineTransform,the current AffineTransform in the Graphics2D context.
java.awt.Graphics2D.getPaint(),abstractPaint,"the current Graphics2D Paint, which defines a color or pattern."
java.awt.Graphics2D.getComposite(),abstractComposite,"the current Graphics2D Composite, which defines a compositing style."
java.awt.Graphics2D.setBackground(Color),abstractvoid,
java.awt.Graphics2D.getBackground(),abstractColor,"the current Graphics2D Color, which defines the background color."
java.awt.Graphics2D.getStroke(),abstractStroke,"the current Graphics2D Stroke, which defines the line style."
java.awt.Graphics2D.clip(Shape),abstractvoid,
java.awt.Graphics2D.getFontRenderContext(),abstractFontRenderContext,a reference to an instance of FontRenderContext.
java.awt.GraphicsConfigTemplate.getBestConfiguration(GraphicsConfiguration[]),abstractGraphicsConfiguration,a GraphicsConfiguration object that is the best configuration possible.
java.awt.GraphicsConfigTemplate.isGraphicsConfigSupported(GraphicsConfiguration),abstractboolean,true if this GraphicsConfiguration object can be used to create surfaces that support the indicated features; false if the GraphicsConfiguration can not be used to create a drawing surface usable by this Java(tm) API.
java.awt.GraphicsConfiguration.getDevice(),abstractGraphicsDevice,a GraphicsDevice object that is associated with this GraphicsConfiguration.
"java.awt.GraphicsConfiguration.createCompatibleImage(int,int)",BufferedImage,a BufferedImage whose data layout and color model is compatible with this GraphicsConfiguration.
"java.awt.GraphicsConfiguration.createCompatibleImage(int,int,int)",BufferedImage,a BufferedImage whose data layout and color model is compatible with this GraphicsConfiguration and also supports the specified transparency.
"java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int)",VolatileImage,a VolatileImage whose data layout and color model is compatible with this GraphicsConfiguration.
"java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,int)",VolatileImage,a VolatileImage whose data layout and color model is compatible with this GraphicsConfiguration.
"java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,ImageCapabilities)",VolatileImage,a VolatileImage whose data layout and color model is compatible with this GraphicsConfiguration.
"java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,ImageCapabilities,int)",VolatileImage,a VolatileImage whose data layout and color model is compatible with this GraphicsConfiguration.
java.awt.GraphicsConfiguration.getColorModel(),abstractColorModel,a ColorModel object that is associated with this GraphicsConfiguration.
java.awt.GraphicsConfiguration.getColorModel(int),abstractColorModel,a ColorModel object that is associated with this GraphicsConfiguration and supports the specified transparency or null if the transparency is not a valid value.
java.awt.GraphicsConfiguration.getDefaultTransform(),abstractAffineTransform,the default AffineTransform for this GraphicsConfiguration.
java.awt.GraphicsConfiguration.getNormalizingTransform(),abstractAffineTransform,an AffineTransform to concatenate to the default AffineTransform so that 72 units in user space is mapped to 1 inch in device space.
java.awt.GraphicsConfiguration.getBounds(),abstractRectangle,the bounds of the area covered by this GraphicsConfiguration.
java.awt.GraphicsConfiguration.getBufferCapabilities(),BufferCapabilities,the buffering capabilities of this graphics configuration object
java.awt.GraphicsConfiguration.getImageCapabilities(),ImageCapabilities,the image capabilities of this graphics configuration object
java.awt.GraphicsConfiguration.isTranslucencyCapable(),boolean,whether the given GraphicsConfiguration supports the translucency effects.
java.awt.GraphicsDevice.getType(),abstractint,"the type of this GraphicsDevice, which can either be TYPE_RASTER_SCREEN, TYPE_PRINTER or TYPE_IMAGE_BUFFER."
java.awt.GraphicsDevice.getIDstring(),abstractString,a String that is the identification of this GraphicsDevice.
java.awt.GraphicsDevice.getConfigurations(),abstractGraphicsConfiguration[],an array of GraphicsConfiguration objects that are associated with this GraphicsDevice.
java.awt.GraphicsDevice.getDefaultConfiguration(),abstractGraphicsConfiguration,the default GraphicsConfiguration of this GraphicsDevice.
java.awt.GraphicsDevice.getBestConfiguration(GraphicsConfigTemplate),GraphicsConfiguration,a GraphicsConfiguration that passes the criteria defined in the specified GraphicsConfigTemplate.
java.awt.GraphicsDevice.isFullScreenSupported(),boolean,whether full-screen exclusive mode is available for this graphics device
java.awt.GraphicsDevice.setFullScreenWindow(Window),void,
java.awt.GraphicsDevice.getFullScreenWindow(),Window,"the full-screen window, or null if the device is not in full-screen mode."
java.awt.GraphicsDevice.isDisplayChangeSupported(),boolean,whether low-level display changes are supported for this graphics device.
java.awt.GraphicsDevice.setDisplayMode(DisplayMode),void,
java.awt.GraphicsDevice.getDisplayMode(),DisplayMode,the current display mode of this graphics device.
java.awt.GraphicsDevice.getDisplayModes(),DisplayMode[],all of the display modes available for this graphics device.
java.awt.GraphicsDevice.getAvailableAcceleratedMemory(),int,number of bytes available in accelerated memory. A negative return value indicates that the amount of accelerated memory on this GraphicsDevice is indeterminate.
java.awt.GraphicsDevice.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency),boolean,whether the given translucency kind is supported
java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(),GraphicsEnvironment,the local GraphicsEnvironment
java.awt.GraphicsEnvironment.isHeadless(),boolean,"true if this environment cannot support a display, keyboard, and mouse; false otherwise"
java.awt.GraphicsEnvironment.isHeadlessInstance(),boolean,"true if a display, keyboard, and mouse can be supported in this environment; false otherwise"
java.awt.GraphicsEnvironment.getScreenDevices(),abstractGraphicsDevice[],an array containing all the GraphicsDevice objects that represent screen devices
java.awt.GraphicsEnvironment.getDefaultScreenDevice(),abstractGraphicsDevice,the GraphicsDevice that represents the default screen device
java.awt.GraphicsEnvironment.createGraphics(BufferedImage),abstractGraphics2D,a Graphics2D to be used for rendering into the specified BufferedImage
java.awt.GraphicsEnvironment.getAllFonts(),abstractFont[],an array of Font objects
java.awt.GraphicsEnvironment.getAvailableFontFamilyNames(),abstractString[],"an array of String containing font family names localized for the default locale, or a suitable alternative name if no name exists for this locale."
java.awt.GraphicsEnvironment.getAvailableFontFamilyNames(Locale),abstractString[],"an array of String containing font family names localized for the specified Locale, or a suitable alternative name if no name exists for the specified locale."
java.awt.GraphicsEnvironment.registerFont(Font),boolean,
java.awt.GraphicsEnvironment.preferLocaleFonts(),void,
java.awt.GraphicsEnvironment.preferProportionalFonts(),void,
java.awt.GraphicsEnvironment.getCenterPoint(),Point,the point where Windows should be centered
java.awt.GraphicsEnvironment.getMaximumWindowBounds(),Rectangle,the maximum bounds for centered Windows
java.awt.GridBagConstraints.clone(),Object,a copy of this grid bag constraint
"java.awt.GridBagLayout.setConstraints(Component,GridBagConstraints)",void,
java.awt.GridBagLayout.getConstraints(Component),GridBagConstraints,the constraint for the specified component in this grid bag layout; a copy of the actual constraint object is returned
java.awt.GridBagLayout.lookupConstraints(Component),GridBagConstraints,the constraints for the specified component
java.awt.GridBagLayout.getLayoutOrigin(),Point,the graphics origin of the cell in the top-left corner of the layout grid
java.awt.GridBagLayout.getLayoutDimensions(),int[][],"an array of two arrays, containing the widths of the layout columns and the heights of the layout rows"
java.awt.GridBagLayout.getLayoutWeights(),double[][],"an array of two arrays, representing the horizontal weights of the layout columns and the vertical weights of the layout rows"
"java.awt.GridBagLayout.location(int,int)",Point,"an ordered pair of indexes that indicate which cell in the layout grid contains the point (x,y)."
"java.awt.GridBagLayout.addLayoutComponent(String,Component)",void,
"java.awt.GridBagLayout.addLayoutComponent(Component,Object)",void,
java.awt.GridBagLayout.removeLayoutComponent(Component),void,
java.awt.GridBagLayout.preferredLayoutSize(Container),Dimension,the preferred size of the parent container
java.awt.GridBagLayout.minimumLayoutSize(Container),Dimension,the minimum size of the parent container
java.awt.GridBagLayout.maximumLayoutSize(Container),Dimension,the maximum dimensions for this layout
java.awt.GridBagLayout.getLayoutAlignmentX(Container),float,the value 0.5f to indicate centered
java.awt.GridBagLayout.getLayoutAlignmentY(Container),float,the value 0.5f to indicate centered
java.awt.GridBagLayout.invalidateLayout(Container),void,
java.awt.GridBagLayout.layoutContainer(Container),void,
java.awt.GridBagLayout.toString(),String,a string representation of this grid bag layout.
"java.awt.GridBagLayout.getLayoutInfo(Container,int)",GridBagLayoutInfo,
"java.awt.GridBagLayout.GetLayoutInfo(Container,int)",GridBagLayoutInfo,
"java.awt.GridBagLayout.adjustForGravity(GridBagConstraints,Rectangle)",void,
"java.awt.GridBagLayout.AdjustForGravity(GridBagConstraints,Rectangle)",void,
"java.awt.GridBagLayout.getMinSize(Container,GridBagLayoutInfo)",Dimension,a Dimension object containing the minimum size
"java.awt.GridBagLayout.GetMinSize(Container,GridBagLayoutInfo)",Dimension,
java.awt.GridBagLayout.arrangeGrid(Container),void,
java.awt.GridBagLayout.ArrangeGrid(Container),void,
java.awt.GridLayout.getRows(),int,the number of rows in this layout
java.awt.GridLayout.setRows(int),void,
java.awt.GridLayout.getColumns(),int,the number of columns in this layout
java.awt.GridLayout.setColumns(int),void,
java.awt.GridLayout.getHgap(),int,the horizontal gap between components
java.awt.GridLayout.setHgap(int),void,
java.awt.GridLayout.getVgap(),int,the vertical gap between components
java.awt.GridLayout.setVgap(int),void,
"java.awt.GridLayout.addLayoutComponent(String,Component)",void,
java.awt.GridLayout.removeLayoutComponent(Component),void,
java.awt.GridLayout.preferredLayoutSize(Container),Dimension,the preferred dimensions to lay out the subcomponents of the specified container
java.awt.GridLayout.minimumLayoutSize(Container),Dimension,the minimum dimensions needed to lay out the subcomponents of the specified container
java.awt.GridLayout.layoutContainer(Container),void,
java.awt.GridLayout.toString(),String,a string representation of this grid layout
java.awt.Image.getWidth(ImageObserver),abstractint,"the width of this image, or -1 if the width is not yet known."
java.awt.Image.getHeight(ImageObserver),abstractint,"the height of this image, or -1 if the height is not yet known."
java.awt.Image.getSource(),abstractImageProducer,the image producer that produces the pixels for this image.
java.awt.Image.getGraphics(),abstractGraphics,a graphics context to draw to the off-screen image.
"java.awt.Image.getProperty(String,ImageObserver)",abstractObject,the value of the named property.
"java.awt.Image.getScaledInstance(int,int,int)",Image,a scaled version of the image.
java.awt.Image.flush(),void,
java.awt.Image.getCapabilities(GraphicsConfiguration),ImageCapabilities,an ImageCapabilities object that contains the capabilities of this Image on the specified GraphicsConfiguration.
java.awt.Image.setAccelerationPriority(float),void,
java.awt.Image.getAccelerationPriority(),float,"value between 0 and 1, inclusive, which represents the current priority value"
java.awt.ImageCapabilities.isAccelerated(),boolean,"whether or not an image can be, or is, accelerated. There are various platform-specific ways to accelerate an image, including pixmaps, VRAM, AGP. This is the general acceleration method (as opposed to residing in system memory)."
java.awt.ImageCapabilities.isTrueVolatile(),boolean,whether or not a volatile image is subject to losing its surfaces at the whim of the operating system.
java.awt.ImageCapabilities.clone(),Object,a copy of this ImageCapabilities object.
"java.awt.Insets.set(int,int,int,int)",void,
java.awt.Insets.equals(Object),boolean,true if the two insets are equal; otherwise false.
java.awt.Insets.hashCode(),int,a hash code for this Insets.
java.awt.Insets.toString(),String,a string representation of this Insets object.
java.awt.Insets.clone(),Object,a copy of this Insets object.
java.awt.JobAttributes.clone(),Object,the newly created copy; it is safe to cast this Object into a JobAttributes
java.awt.JobAttributes.set(JobAttributes),void,
java.awt.JobAttributes.getCopies(),int,an integer greater than 0.
java.awt.JobAttributes.setCopies(int),void,
java.awt.JobAttributes.setCopiesToDefault(),void,
java.awt.JobAttributes.getDefaultSelection(),JobAttributes.DefaultSelectionType,"DefaultSelectionType.ALL, DefaultSelectionType.RANGE, or DefaultSelectionType.SELECTION"
java.awt.JobAttributes.setDefaultSelection(JobAttributes.DefaultSelectionType),void,
java.awt.JobAttributes.getDestination(),JobAttributes.DestinationType,DesintationType.FILE or DesintationType.PRINTER
java.awt.JobAttributes.setDestination(JobAttributes.DestinationType),void,
java.awt.JobAttributes.getDialog(),JobAttributes.DialogType,"DialogType.COMMON, DialogType.NATIVE, or DialogType.NONE"
java.awt.JobAttributes.setDialog(JobAttributes.DialogType),void,
java.awt.JobAttributes.getFileName(),String,the possibly null file name
java.awt.JobAttributes.setFileName(String),void,
java.awt.JobAttributes.getFromPage(),int,an integer greater than zero and less than or equal to toPage and greater than or equal to minPage and less than or equal to maxPage.
java.awt.JobAttributes.setFromPage(int),void,
java.awt.JobAttributes.getMaxPage(),int,an integer greater than zero and greater than or equal to minPage.
java.awt.JobAttributes.setMaxPage(int),void,
java.awt.JobAttributes.getMinPage(),int,an integer greater than zero and less than or equal to maxPage.
java.awt.JobAttributes.setMinPage(int),void,
java.awt.JobAttributes.getMultipleDocumentHandling(),JobAttributes.MultipleDocumentHandlingType,MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES or MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES.
java.awt.JobAttributes.setMultipleDocumentHandling(JobAttributes.MultipleDocumentHandlingType),void,
java.awt.JobAttributes.setMultipleDocumentHandlingToDefault(),void,
java.awt.JobAttributes.getPageRanges(),int[][],"an array of integer arrays of 2 elements. An array is interpreted as a range spanning all pages including and between the specified pages. Ranges must be in ascending order and must not overlap. Specified page numbers cannot be less than minPage nor greater than maxPage. For example: (new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 }, new int[] { 15, 19 } }), specifies pages 1, 2, 3, 5, 15, 16, 17, 18, and 19."
java.awt.JobAttributes.setPageRanges(int[][]),void,
java.awt.JobAttributes.getPrinter(),String,the possibly null printer name.
java.awt.JobAttributes.setPrinter(String),void,
java.awt.JobAttributes.getSides(),JobAttributes.SidesType,"SidesType.ONE_SIDED, SidesType.TWO_SIDED_LONG_EDGE, or SidesType.TWO_SIDED_SHORT_EDGE."
java.awt.JobAttributes.setSides(JobAttributes.SidesType),void,
java.awt.JobAttributes.setSidesToDefault(),void,
java.awt.JobAttributes.getToPage(),int,an integer greater than zero and greater than or equal to toPage and greater than or equal to minPage and less than or equal to maxPage.
java.awt.JobAttributes.setToPage(int),void,
java.awt.JobAttributes.equals(Object),boolean,whether obj is equal to this JobAttribute according to the above criteria.
java.awt.JobAttributes.hashCode(),int,the hash code.
java.awt.JobAttributes.toString(),String,the string representation.
java.awt.JobAttributes.DefaultSelectionType.hashCode(),int,
java.awt.JobAttributes.DefaultSelectionType.toString(),String,a string representation of the object.
java.awt.JobAttributes.DestinationType.hashCode(),int,
java.awt.JobAttributes.DestinationType.toString(),String,a string representation of the object.
java.awt.JobAttributes.DialogType.hashCode(),int,
java.awt.JobAttributes.DialogType.toString(),String,a string representation of the object.
java.awt.JobAttributes.MultipleDocumentHandlingType.hashCode(),int,
java.awt.JobAttributes.MultipleDocumentHandlingType.toString(),String,a string representation of the object.
java.awt.JobAttributes.SidesType.hashCode(),int,
java.awt.JobAttributes.SidesType.toString(),String,a string representation of the object.
java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager(),KeyboardFocusManager,this thread's context's KeyboardFocusManager
java.awt.KeyboardFocusManager.setCurrentKeyboardFocusManager(KeyboardFocusManager),void,
java.awt.KeyboardFocusManager.getFocusOwner(),Component,"the focus owner, or null if the focus owner is not a member of the calling thread's context"
java.awt.KeyboardFocusManager.getGlobalFocusOwner(),Component,the focus owner
java.awt.KeyboardFocusManager.setGlobalFocusOwner(Component),void,
java.awt.KeyboardFocusManager.clearFocusOwner(),void,
java.awt.KeyboardFocusManager.clearGlobalFocusOwner(),void,
java.awt.KeyboardFocusManager.getPermanentFocusOwner(),Component,"the permanent focus owner, or null if the permanent focus owner is not a member of the calling thread's context"
java.awt.KeyboardFocusManager.getGlobalPermanentFocusOwner(),Component,the permanent focus owner
java.awt.KeyboardFocusManager.setGlobalPermanentFocusOwner(Component),void,
java.awt.KeyboardFocusManager.getFocusedWindow(),Window,"the focused Window, or null if the focused Window is not a member of the calling thread's context"
java.awt.KeyboardFocusManager.getGlobalFocusedWindow(),Window,the focused Window
java.awt.KeyboardFocusManager.setGlobalFocusedWindow(Window),void,
java.awt.KeyboardFocusManager.getActiveWindow(),Window,"the active Window, or null if the active Window is not a member of the calling thread's context"
java.awt.KeyboardFocusManager.getGlobalActiveWindow(),Window,the active Window
java.awt.KeyboardFocusManager.setGlobalActiveWindow(Window),void,
java.awt.KeyboardFocusManager.getDefaultFocusTraversalPolicy(),FocusTraversalPolicy,the default FocusTraversalPolicy. null will never be returned.
java.awt.KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy),void,
"java.awt.KeyboardFocusManager.setDefaultFocusTraversalKeys(int,Set&lt;?)",void,
java.awt.KeyboardFocusManager.getDefaultFocusTraversalKeys(int),Set&lt;AWTKeyStroke&gt;,"the Set of AWTKeyStrokes for the specified operation; the Set will be unmodifiable, and may be empty; null will never be returned"
java.awt.KeyboardFocusManager.getCurrentFocusCycleRoot(),Container,"the current focus cycle root, or null if the current focus cycle root is not a member of the calling thread's context"
java.awt.KeyboardFocusManager.getGlobalCurrentFocusCycleRoot(),Container,"the current focus cycle root, or null if the current focus cycle root is not a member of the calling thread's context"
java.awt.KeyboardFocusManager.setGlobalCurrentFocusCycleRoot(Container),void,
java.awt.KeyboardFocusManager.addPropertyChangeListener(PropertyChangeListener),void,
java.awt.KeyboardFocusManager.removePropertyChangeListener(PropertyChangeListener),void,
java.awt.KeyboardFocusManager.getPropertyChangeListeners(),PropertyChangeListener[],all of this keyboard focus manager's PropertyChangeListeners or an empty array if no property change listeners are currently registered
"java.awt.KeyboardFocusManager.addPropertyChangeListener(String,PropertyChangeListener)",void,
"java.awt.KeyboardFocusManager.removePropertyChangeListener(String,PropertyChangeListener)",void,
java.awt.KeyboardFocusManager.getPropertyChangeListeners(String),PropertyChangeListener[],all of the PropertyChangeListeners associated with the named property or an empty array if no such listeners have been added.
"java.awt.KeyboardFocusManager.firePropertyChange(String,Object,Object)",void,
java.awt.KeyboardFocusManager.addVetoableChangeListener(VetoableChangeListener),void,
java.awt.KeyboardFocusManager.removeVetoableChangeListener(VetoableChangeListener),void,
java.awt.KeyboardFocusManager.getVetoableChangeListeners(),VetoableChangeListener[],all of this keyboard focus manager's VetoableChangeListeners or an empty array if no vetoable change listeners are currently registered
"java.awt.KeyboardFocusManager.addVetoableChangeListener(String,VetoableChangeListener)",void,
"java.awt.KeyboardFocusManager.removeVetoableChangeListener(String,VetoableChangeListener)",void,
java.awt.KeyboardFocusManager.getVetoableChangeListeners(String),VetoableChangeListener[],all of the VetoableChangeListeners associated with the named property or an empty array if no such listeners have been added.
"java.awt.KeyboardFocusManager.fireVetoableChange(String,Object,Object)",void,
java.awt.KeyboardFocusManager.addKeyEventDispatcher(KeyEventDispatcher),void,
java.awt.KeyboardFocusManager.removeKeyEventDispatcher(KeyEventDispatcher),void,
java.awt.KeyboardFocusManager.getKeyEventDispatchers(),List&lt;KeyEventDispatcher&gt;,a possibly null or empty List of KeyEventDispatchers
java.awt.KeyboardFocusManager.addKeyEventPostProcessor(KeyEventPostProcessor),void,
java.awt.KeyboardFocusManager.removeKeyEventPostProcessor(KeyEventPostProcessor),void,
java.awt.KeyboardFocusManager.getKeyEventPostProcessors(),List&lt;KeyEventPostProcessor&gt;,a possibly null or empty List of KeyEventPostProcessors
java.awt.KeyboardFocusManager.dispatchEvent(AWTEvent),abstractboolean,true if this method dispatched the event; false otherwise
"java.awt.KeyboardFocusManager.redispatchEvent(Component,AWTEvent)",void,
java.awt.KeyboardFocusManager.dispatchKeyEvent(KeyEvent),abstractboolean,true if the KeyEvent was dispatched; false otherwise
java.awt.KeyboardFocusManager.postProcessKeyEvent(KeyEvent),abstractboolean,true to indicate that no other KeyEventPostProcessor will be notified of the KeyEvent.
"java.awt.KeyboardFocusManager.processKeyEvent(Component,KeyEvent)",abstractvoid,
"java.awt.KeyboardFocusManager.enqueueKeyEvents(long,Component)",abstractvoid,
"java.awt.KeyboardFocusManager.dequeueKeyEvents(long,Component)",abstractvoid,
java.awt.KeyboardFocusManager.discardKeyEvents(Component),abstractvoid,
java.awt.KeyboardFocusManager.focusNextComponent(Component),abstractvoid,
java.awt.KeyboardFocusManager.focusPreviousComponent(Component),abstractvoid,
java.awt.KeyboardFocusManager.upFocusCycle(Component),abstractvoid,
java.awt.KeyboardFocusManager.downFocusCycle(Container),abstractvoid,
java.awt.KeyboardFocusManager.focusNextComponent(),void,
java.awt.KeyboardFocusManager.focusPreviousComponent(),void,
java.awt.KeyboardFocusManager.upFocusCycle(),void,
java.awt.KeyboardFocusManager.downFocusCycle(),void,
java.awt.Label.addNotify(),void,
java.awt.Label.getAlignment(),int,
java.awt.Label.setAlignment(int),void,
java.awt.Label.getText(),String,"the text of this label, or null if the text has been set to null."
java.awt.Label.setText(String),void,
java.awt.Label.paramString(),String,the parameter string of this label
java.awt.Label.getAccessibleContext(),AccessibleContext,an AccessibleAWTLabel that serves as the AccessibleContext of this Label
"java.awt.LinearGradientPaint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)",PaintContext,the PaintContext for generating color patterns.
java.awt.LinearGradientPaint.getStartPoint(),Point2D,a Point2D object that is a copy of the point that anchors the first color of this LinearGradientPaint
java.awt.LinearGradientPaint.getEndPoint(),Point2D,a Point2D object that is a copy of the point that anchors the last color of this LinearGradientPaint
java.awt.List.addNotify(),void,
java.awt.List.removeNotify(),void,
java.awt.List.getItemCount(),int,the number of items in the list
java.awt.List.countItems(),int,
java.awt.List.getItem(int),String,an item that is associated with the specified index
java.awt.List.getItems(),String[],a string array containing items of the list
java.awt.List.add(String),void,
java.awt.List.addItem(String),void,
"java.awt.List.add(String,int)",void,
"java.awt.List.addItem(String,int)",void,
"java.awt.List.replaceItem(String,int)",void,
java.awt.List.removeAll(),void,
java.awt.List.clear(),void,
java.awt.List.remove(String),void,
java.awt.List.remove(int),void,
java.awt.List.delItem(int),void,
java.awt.List.getSelectedIndex(),int,"the index of the selected item; if no item is selected, or if multiple items are selected, -1 is returned."
java.awt.List.getSelectedIndexes(),int[],"an array of the selected indexes on this scrolling list; if no item is selected, a zero-length array is returned."
java.awt.List.getSelectedItem(),String,"the selected item on the list; if no item is selected, or if multiple items are selected, null is returned."
java.awt.List.getSelectedItems(),String[],"an array of the selected items on this scrolling list; if no item is selected, a zero-length array is returned."
java.awt.List.getSelectedObjects(),Object[],"an array of Objects representing the selected items on this scrolling list; if no item is selected, a zero-length array is returned."
java.awt.List.select(int),void,
java.awt.List.deselect(int),void,
java.awt.List.isIndexSelected(int),boolean,true if the specified item has been selected; false otherwise
java.awt.List.isSelected(int),boolean,
java.awt.List.getRows(),int,the number of visible lines in this scrolling list
java.awt.List.isMultipleMode(),boolean,"true if this list allows multiple selections; otherwise, false"
java.awt.List.allowsMultipleSelections(),boolean,
java.awt.List.setMultipleMode(boolean),void,
java.awt.List.setMultipleSelections(boolean),void,
java.awt.List.getVisibleIndex(),int,the index of the item that was last made visible
java.awt.List.makeVisible(int),void,
java.awt.List.getPreferredSize(int),Dimension,the preferred dimensions for displaying this scrolling list given that the specified number of rows must be visible
java.awt.List.preferredSize(int),Dimension,
java.awt.List.getPreferredSize(),Dimension,the preferred dimensions for displaying this scrolling list
java.awt.List.preferredSize(),Dimension,
java.awt.List.getMinimumSize(int),Dimension,the minimum dimensions for displaying this scrolling list given that the specified number of rows must be visible
java.awt.List.minimumSize(int),Dimension,
java.awt.List.getMinimumSize(),Dimension,the minimum dimensions needed to display this scrolling list
java.awt.List.minimumSize(),Dimension,
java.awt.List.addItemListener(ItemListener),void,
java.awt.List.removeItemListener(ItemListener),void,
java.awt.List.getItemListeners(),ItemListener[],all of this list's ItemListeners or an empty array if no item listeners are currently registered
java.awt.List.addActionListener(ActionListener),void,
java.awt.List.removeActionListener(ActionListener),void,
java.awt.List.getActionListeners(),ActionListener[],all of this list's ActionListeners or an empty array if no action listeners are currently registered
java.awt.List.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this list, or an empty array if no such listeners have been added"
java.awt.List.processEvent(AWTEvent),void,
java.awt.List.processItemEvent(ItemEvent),void,
java.awt.List.processActionEvent(ActionEvent),void,
java.awt.List.paramString(),String,the parameter string of this scrolling list
"java.awt.List.delItems(int,int)",void,
java.awt.List.getAccessibleContext(),AccessibleContext,an AccessibleAWTList that serves as the AccessibleContext of this List
"java.awt.MediaTracker.addImage(Image,int)",void,
"java.awt.MediaTracker.addImage(Image,int,int,int)",void,
java.awt.MediaTracker.checkAll(),boolean,"true if all images have finished loading, have been aborted, or have encountered an error; false otherwise"
java.awt.MediaTracker.checkAll(boolean),boolean,"true if all images have finished loading, have been aborted, or have encountered an error; false otherwise"
java.awt.MediaTracker.isErrorAny(),boolean,true if any of the images tracked by this media tracker had an error during loading; false otherwise
java.awt.MediaTracker.getErrorsAny(),Object[],"an array of media objects tracked by this media tracker that have encountered an error, or null if there are none with errors"
java.awt.MediaTracker.waitForAll(),void,
java.awt.MediaTracker.waitForAll(long),boolean,true if all images were successfully loaded; false otherwise
java.awt.MediaTracker.statusAll(boolean),int,the bitwise inclusive OR of the status of all of the media being tracked
java.awt.MediaTracker.checkID(int),boolean,"true if all images have finished loading, have been aborted, or have encountered an error; false otherwise"
"java.awt.MediaTracker.checkID(int,boolean)",boolean,"true if all images have finished loading, have been aborted, or have encountered an error; false otherwise"
java.awt.MediaTracker.isErrorID(int),boolean,true if any of the images with the specified identifier had an error during loading; false otherwise
java.awt.MediaTracker.getErrorsID(int),Object[],"an array of media objects tracked by this media tracker with the specified identifier that have encountered an error, or null if there are none with errors"
java.awt.MediaTracker.waitForID(int),void,
"java.awt.MediaTracker.waitForID(int,long)",boolean,
"java.awt.MediaTracker.statusID(int,boolean)",int,the bitwise inclusive OR of the status of all of the media with the specified identifier that are being tracked
java.awt.MediaTracker.removeImage(Image),void,
"java.awt.MediaTracker.removeImage(Image,int)",void,
"java.awt.MediaTracker.removeImage(Image,int,int,int)",void,
java.awt.Menu.addNotify(),void,
java.awt.Menu.removeNotify(),void,
java.awt.Menu.isTearOff(),boolean,true if this is a tear-off menu; false otherwise.
java.awt.Menu.getItemCount(),int,the number of items in this menu.
java.awt.Menu.countItems(),int,
java.awt.Menu.getItem(int),MenuItem,the item located at the specified index.
java.awt.Menu.add(MenuItem),MenuItem,the menu item added
java.awt.Menu.add(String),void,
"java.awt.Menu.insert(MenuItem,int)",void,
"java.awt.Menu.insert(String,int)",void,
java.awt.Menu.addSeparator(),void,
java.awt.Menu.insertSeparator(int),void,
java.awt.Menu.remove(int),void,
java.awt.Menu.remove(MenuComponent),void,
java.awt.Menu.removeAll(),void,
java.awt.Menu.paramString(),String,the parameter string of this menu
java.awt.Menu.getAccessibleContext(),AccessibleContext,an AccessibleAWTMenu that serves as the AccessibleContext of this Menu
java.awt.MenuBar.addNotify(),void,
java.awt.MenuBar.removeNotify(),void,
java.awt.MenuBar.getHelpMenu(),Menu,the help menu on this menu bar.
java.awt.MenuBar.setHelpMenu(Menu),void,
java.awt.MenuBar.add(Menu),Menu,the menu added
java.awt.MenuBar.remove(int),void,
java.awt.MenuBar.remove(MenuComponent),void,
java.awt.MenuBar.getMenuCount(),int,the number of menus on the menu bar.
java.awt.MenuBar.countMenus(),int,
java.awt.MenuBar.getMenu(int),Menu,the menu at the specified index of this menu bar.
java.awt.MenuBar.shortcuts(),Enumeration&lt;MenuShortcut&gt;,an enumeration of menu shortcuts that this menu bar is managing.
java.awt.MenuBar.getShortcutMenuItem(MenuShortcut),MenuItem,
java.awt.MenuBar.deleteShortcut(MenuShortcut),void,
java.awt.MenuBar.getAccessibleContext(),AccessibleContext,an AccessibleAWTMenuBar that serves as the AccessibleContext of this MenuBar
java.awt.MenuComponent.getName(),String,the name of the menu component
java.awt.MenuComponent.setName(String),void,
java.awt.MenuComponent.getParent(),MenuContainer,"the menu component containing this menu component, or null if this menu component is the outermost component, the menu bar itself"
java.awt.MenuComponent.getPeer(),java.awt.peer.MenuComponentPeer,
java.awt.MenuComponent.getFont(),Font,"the font used in this menu component, if there is one; null otherwise"
java.awt.MenuComponent.setFont(Font),void,
java.awt.MenuComponent.removeNotify(),void,
java.awt.MenuComponent.postEvent(Event),boolean,
java.awt.MenuComponent.dispatchEvent(AWTEvent),void,
java.awt.MenuComponent.processEvent(AWTEvent),void,
java.awt.MenuComponent.paramString(),String,the parameter string of this menu component
java.awt.MenuComponent.toString(),String,a string representation of this menu component
java.awt.MenuComponent.getTreeLock(),Object,this component's locking object
java.awt.MenuComponent.getAccessibleContext(),AccessibleContext,the AccessibleContext of this MenuComponent
java.awt.MenuItem.addNotify(),void,
java.awt.MenuItem.getLabel(),String,"the label of this menu item, or null if this menu item has no label."
java.awt.MenuItem.setLabel(String),void,
java.awt.MenuItem.isEnabled(),boolean,
java.awt.MenuItem.setEnabled(boolean),void,
java.awt.MenuItem.enable(),void,
java.awt.MenuItem.enable(boolean),void,
java.awt.MenuItem.disable(),void,
java.awt.MenuItem.getShortcut(),MenuShortcut,"the menu shortcut associated with this menu item, or null if none has been specified."
java.awt.MenuItem.setShortcut(MenuShortcut),void,
java.awt.MenuItem.deleteShortcut(),void,
java.awt.MenuItem.enableEvents(long),void,
java.awt.MenuItem.disableEvents(long),void,
java.awt.MenuItem.setActionCommand(String),void,
java.awt.MenuItem.getActionCommand(),String,
java.awt.MenuItem.addActionListener(ActionListener),void,
java.awt.MenuItem.removeActionListener(ActionListener),void,
java.awt.MenuItem.getActionListeners(),ActionListener[],all of this menu item's ActionListeners or an empty array if no action listeners are currently registered
java.awt.MenuItem.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this menu item, or an empty array if no such listeners have been added"
java.awt.MenuItem.processEvent(AWTEvent),void,
java.awt.MenuItem.processActionEvent(ActionEvent),void,
java.awt.MenuItem.paramString(),String,the parameter string of this menu item
java.awt.MenuItem.getAccessibleContext(),AccessibleContext,an AccessibleAWTMenuItem that serves as the AccessibleContext of this MenuItem
java.awt.MenuShortcut.getKey(),int,the raw keycode of this MenuShortcut.
java.awt.MenuShortcut.usesShiftModifier(),boolean,"true if this MenuShortcut must be invoked using the SHIFT key, false otherwise."
java.awt.MenuShortcut.equals(MenuShortcut),boolean,"true if this MenuShortcut is the same as another, false otherwise."
java.awt.MenuShortcut.equals(Object),boolean,"true if this MenuShortcut is the same as another, false otherwise."
java.awt.MenuShortcut.hashCode(),int,the hashcode for this MenuShortcut.
java.awt.MenuShortcut.toString(),String,a string representation of this MenuShortcut.
java.awt.MenuShortcut.paramString(),String,the parameter string of this MenuShortcut.
java.awt.MouseInfo.getPointerInfo(),PointerInfo,location of the mouse pointer
java.awt.MouseInfo.getNumberOfButtons(),int,number of buttons on the mouse
java.awt.MultipleGradientPaint.getFractions(),float[],a copy of the array of floats used by this gradient to calculate color distribution
java.awt.MultipleGradientPaint.getColors(),Color[],a copy of the array of colors used by this gradient
java.awt.MultipleGradientPaint.getCycleMethod(),MultipleGradientPaint.CycleMethod,the enumerated type which specifies cycling behavior
java.awt.MultipleGradientPaint.getColorSpace(),MultipleGradientPaint.ColorSpaceType,the enumerated type which specifies color space for interpolation
java.awt.MultipleGradientPaint.getTransform(),AffineTransform,a copy of the transform applied to the gradient
java.awt.MultipleGradientPaint.getTransparency(),int,"OPAQUE if all colors used by this Paint object are opaque, TRANSLUCENT if at least one of the colors used by this Paint object is not opaque."
java.awt.PageAttributes.clone(),Object,the newly created copy. It is safe to cast this Object into a PageAttributes.
java.awt.PageAttributes.set(PageAttributes),void,
java.awt.PageAttributes.getColor(),PageAttributes.ColorType,ColorType.COLOR or ColorType.MONOCHROME.
java.awt.PageAttributes.setColor(PageAttributes.ColorType),void,
java.awt.PageAttributes.getMedia(),PageAttributes.MediaType,one of the constant fields of the MediaType class.
java.awt.PageAttributes.setMedia(PageAttributes.MediaType),void,
java.awt.PageAttributes.setMediaToDefault(),void,
java.awt.PageAttributes.getOrientationRequested(),PageAttributes.OrientationRequestedType,OrientationRequestedType.PORTRAIT or OrientationRequestedType.LANDSCAPE.
java.awt.PageAttributes.setOrientationRequested(PageAttributes.OrientationRequestedType),void,
java.awt.PageAttributes.setOrientationRequested(int),void,
java.awt.PageAttributes.setOrientationRequestedToDefault(),void,
java.awt.PageAttributes.getOrigin(),PageAttributes.OriginType,OriginType.PHYSICAL or OriginType.PRINTABLE
java.awt.PageAttributes.setOrigin(PageAttributes.OriginType),void,
java.awt.PageAttributes.getPrintQuality(),PageAttributes.PrintQualityType,"PrintQualityType.DRAFT, PrintQualityType.NORMAL, or PrintQualityType.HIGH"
java.awt.PageAttributes.setPrintQuality(PageAttributes.PrintQualityType),void,
java.awt.PageAttributes.setPrintQuality(int),void,
java.awt.PageAttributes.setPrintQualityToDefault(),void,
java.awt.PageAttributes.getPrinterResolution(),int[],an integer array of 3 elements. The first element must be greater than 0. The second element must be must be greater than 0. The third element must be either 3 or 4.
java.awt.PageAttributes.setPrinterResolution(int[]),void,
java.awt.PageAttributes.setPrinterResolution(int),void,
java.awt.PageAttributes.setPrinterResolutionToDefault(),void,
java.awt.PageAttributes.equals(Object),boolean,whether obj is equal to this PageAttribute according to the above criteria.
java.awt.PageAttributes.hashCode(),int,the hash code.
java.awt.PageAttributes.toString(),String,the string representation.
java.awt.PageAttributes.ColorType.hashCode(),int,
java.awt.PageAttributes.ColorType.toString(),String,a string representation of the object.
java.awt.PageAttributes.MediaType.hashCode(),int,
java.awt.PageAttributes.MediaType.toString(),String,a string representation of the object.
java.awt.PageAttributes.OrientationRequestedType.hashCode(),int,
java.awt.PageAttributes.OrientationRequestedType.toString(),String,a string representation of the object.
java.awt.PageAttributes.OriginType.hashCode(),int,
java.awt.PageAttributes.OriginType.toString(),String,a string representation of the object.
java.awt.PageAttributes.PrintQualityType.hashCode(),int,
java.awt.PageAttributes.PrintQualityType.toString(),String,a string representation of the object.
java.awt.Panel.addNotify(),void,
java.awt.Panel.getAccessibleContext(),AccessibleContext,an AccessibleAWTPanel that serves as the AccessibleContext of this Panel
java.awt.Point.getX(),double,the X coordinate of this Point2D.
java.awt.Point.getY(),double,the Y coordinate of this Point2D.
java.awt.Point.getLocation(),Point,"a copy of this point, at the same location"
java.awt.Point.setLocation(Point),void,
"java.awt.Point.setLocation(int,int)",void,
"java.awt.Point.setLocation(double,double)",void,
"java.awt.Point.move(int,int)",void,
"java.awt.Point.translate(int,int)",void,
java.awt.Point.equals(Object),boolean,true if the object to be compared is an instance of Point2D and has the same values; false otherwise.
java.awt.Point.toString(),String,a string representation of this point
java.awt.PointerInfo.getDevice(),GraphicsDevice,GraphicsDevice corresponding to the pointer
java.awt.PointerInfo.getLocation(),Point,coordinates of mouse pointer
java.awt.Polygon.reset(),void,
java.awt.Polygon.invalidate(),void,
"java.awt.Polygon.translate(int,int)",void,
"java.awt.Polygon.addPoint(int,int)",void,
java.awt.Polygon.getBounds(),Rectangle,a Rectangle that defines the bounds of this Polygon.
java.awt.Polygon.getBoundingBox(),Rectangle,the bounds of this Polygon.
java.awt.Polygon.contains(Point),boolean,true if the Polygon contains the Point; false otherwise.
"java.awt.Polygon.contains(int,int)",boolean,"true if this Polygon contains the specified coordinates (x,y); false otherwise."
"java.awt.Polygon.inside(int,int)",boolean,"true if this Polygon contains the specified coordinates (x,y); false otherwise."
java.awt.Polygon.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
"java.awt.Polygon.contains(double,double)",boolean,true if the specified coordinates are inside the Shape boundary; false otherwise.
java.awt.Polygon.contains(Point2D),boolean,true if the specified Point2D is inside the boundary of the Shape; false otherwise.
"java.awt.Polygon.intersects(double,double,double,double)",boolean,
java.awt.Polygon.intersects(Rectangle2D),boolean,
"java.awt.Polygon.contains(double,double,double,double)",boolean,
java.awt.Polygon.contains(Rectangle2D),boolean,
java.awt.Polygon.getPathIterator(AffineTransform),PathIterator,a PathIterator object that provides access to the geometry of this Polygon.
"java.awt.Polygon.getPathIterator(AffineTransform,double)",PathIterator,a PathIterator object that provides access to the Shape object's geometry.
java.awt.PopupMenu.getParent(),MenuContainer,"the menu component containing this menu component, or null if this menu component is the outermost component, the menu bar itself"
java.awt.PopupMenu.addNotify(),void,
"java.awt.PopupMenu.show(Component,int,int)",void,
java.awt.PopupMenu.getAccessibleContext(),AccessibleContext,the AccessibleContext of this PopupMenu
java.awt.PrintJob.getGraphics(),abstractGraphics,
java.awt.PrintJob.getPageDimension(),abstractDimension,
java.awt.PrintJob.getPageResolution(),abstractint,
java.awt.PrintJob.lastPageFirst(),abstractboolean,
java.awt.PrintJob.end(),abstractvoid,
java.awt.PrintJob.finalize(),voidize(),
"java.awt.RadialGradientPaint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)",PaintContext,the PaintContext for generating color patterns.
java.awt.RadialGradientPaint.getCenterPoint(),Point2D,a Point2D object that is a copy of the center point
java.awt.RadialGradientPaint.getFocusPoint(),Point2D,a Point2D object that is a copy of the focus point
java.awt.RadialGradientPaint.getRadius(),float,the radius of the circle defining the radial gradient
java.awt.Rectangle.getX(),double,the X coordinate of the bounding Rectangle.
java.awt.Rectangle.getY(),double,the Y coordinate of the bounding Rectangle.
java.awt.Rectangle.getWidth(),double,the width of the bounding Rectangle.
java.awt.Rectangle.getHeight(),double,the height of the bounding Rectangle.
java.awt.Rectangle.getBounds(),Rectangle,"a new Rectangle, equal to the bounding Rectangle for this Rectangle."
java.awt.Rectangle.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.Rectangle.setBounds(Rectangle),void,
"java.awt.Rectangle.setBounds(int,int,int,int)",void,
"java.awt.Rectangle.setRect(double,double,double,double)",void,
"java.awt.Rectangle.reshape(int,int,int,int)",void,
java.awt.Rectangle.getLocation(),Point,the Point that is the upper-left corner of this Rectangle.
java.awt.Rectangle.setLocation(Point),void,
"java.awt.Rectangle.setLocation(int,int)",void,
"java.awt.Rectangle.move(int,int)",void,
"java.awt.Rectangle.translate(int,int)",void,
java.awt.Rectangle.getSize(),Dimension,"a Dimension, representing the size of this Rectangle."
java.awt.Rectangle.setSize(Dimension),void,
"java.awt.Rectangle.setSize(int,int)",void,
"java.awt.Rectangle.resize(int,int)",void,
java.awt.Rectangle.contains(Point),boolean,true if the specified Point is inside this Rectangle; false otherwise.
"java.awt.Rectangle.contains(int,int)",boolean,"true if the point (x,y) is inside this Rectangle; false otherwise."
java.awt.Rectangle.contains(Rectangle),boolean,true if the Rectangle is contained entirely inside this Rectangle; false otherwise
"java.awt.Rectangle.contains(int,int,int,int)",boolean,"true if the Rectangle specified by (X, Y, W, H) is entirely enclosed inside this Rectangle; false otherwise."
"java.awt.Rectangle.inside(int,int)",boolean,"true if the point (X,Y) is inside this Rectangle; false otherwise."
java.awt.Rectangle.intersects(Rectangle),boolean,true if the specified Rectangle and this Rectangle intersect; false otherwise.
java.awt.Rectangle.intersection(Rectangle),Rectangle,"the largest Rectangle contained in both the specified Rectangle and in this Rectangle; or if the rectangles do not intersect, an empty rectangle."
java.awt.Rectangle.union(Rectangle),Rectangle,the smallest Rectangle containing both the specified Rectangle and this Rectangle.
"java.awt.Rectangle.add(int,int)",void,
java.awt.Rectangle.add(Point),void,
java.awt.Rectangle.add(Rectangle),void,
"java.awt.Rectangle.grow(int,int)",void,
java.awt.Rectangle.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.Rectangle.outcode(double,double)",int,the logical OR of all appropriate out codes.
java.awt.Rectangle.createIntersection(Rectangle2D),Rectangle2D,the largest Rectangle2D contained in both the specified Rectangle2D and in this Rectangle2D.
java.awt.Rectangle.createUnion(Rectangle2D),Rectangle2D,the smallest Rectangle2D containing both the specified Rectangle2D and this Rectangle2D.
java.awt.Rectangle.equals(Object),boolean,true if the objects are equal; false otherwise.
java.awt.Rectangle.toString(),String,a String representing this Rectangle object's coordinate and size values.
java.awt.RenderingHints.size(),int,the number of key-value mappings in this RenderingHints.
java.awt.RenderingHints.isEmpty(),boolean,true if this RenderingHints contains no key-value mappings.
java.awt.RenderingHints.containsKey(Object),boolean,true if this RenderingHints contains a mapping for the specified key.
java.awt.RenderingHints.containsValue(Object),boolean,true if this RenderingHints maps one or more keys to the specified value.
java.awt.RenderingHints.get(Object),Object,the value to which the key is mapped in this object or null if the key is not mapped to any value in this object.
"java.awt.RenderingHints.put(Object,Object)",Object,the previous value of the specified key in this object or null if it did not have one.
java.awt.RenderingHints.add(RenderingHints),void,
java.awt.RenderingHints.clear(),void,
java.awt.RenderingHints.remove(Object),Object,"the value to which the key had previously been mapped in this RenderingHints object, or null if the key did not have a mapping."
"java.awt.RenderingHints.putAll(Map&lt;?,?&gt;)",void,
java.awt.RenderingHints.keySet(),Set&lt;Object&gt;,a Set view of the keys contained in this RenderingHints.
java.awt.RenderingHints.values(),Collection&lt;Object&gt;,a Collection view of the values contained in this RenderingHints.
java.awt.RenderingHints.entrySet(),"Set&lt;Map.Entry&lt;Object,Object&gt;&gt;",a Set view of the mappings contained in this RenderingHints.
java.awt.RenderingHints.equals(Object),boolean,true if the specified Object is equal to this RenderingHints.
java.awt.RenderingHints.hashCode(),int,the hash code value for this RenderingHints.
java.awt.RenderingHints.clone(),Object,a clone of this instance.
java.awt.RenderingHints.toString(),String,a string representation of this object.
java.awt.RenderingHints.Key.isCompatibleValue(Object),abstractboolean,true if val is valid; false otherwise.
java.awt.RenderingHints.Key.intKey(),int,the private integer key that the subclass instantiated this Key with.
java.awt.RenderingHints.Key.hashCode(),int,a hash code value for this object.
java.awt.RenderingHints.Key.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
"java.awt.Robot.mouseMove(int,int)",void,
java.awt.Robot.mousePress(int),void,
java.awt.Robot.mouseRelease(int),void,
java.awt.Robot.mouseWheel(int),void,
java.awt.Robot.keyPress(int),void,
java.awt.Robot.keyRelease(int),void,
"java.awt.Robot.getPixelColor(int,int)",Color,Color of the pixel
java.awt.Robot.createScreenCapture(Rectangle),BufferedImage,The captured image
java.awt.Robot.isAutoWaitForIdle(),boolean,Whether waitForIdle is automatically called
java.awt.Robot.setAutoWaitForIdle(boolean),void,
java.awt.Robot.getAutoDelay(),int,
java.awt.Robot.setAutoDelay(int),void,
java.awt.Robot.delay(int),void,
java.awt.Robot.waitForIdle(),void,
java.awt.Robot.toString(),String,the string representation.
java.awt.Scrollbar.addNotify(),void,
java.awt.Scrollbar.getOrientation(),int,"the orientation of this scroll bar, either Scrollbar.HORIZONTAL or Scrollbar.VERTICAL"
java.awt.Scrollbar.setOrientation(int),void,
java.awt.Scrollbar.getValue(),int,the current value of this scroll bar
java.awt.Scrollbar.setValue(int),void,
java.awt.Scrollbar.getMinimum(),int,the minimum value of this scroll bar
java.awt.Scrollbar.setMinimum(int),void,
java.awt.Scrollbar.getMaximum(),int,the maximum value of this scroll bar
java.awt.Scrollbar.setMaximum(int),void,
java.awt.Scrollbar.getVisibleAmount(),int,the visible amount of this scroll bar
java.awt.Scrollbar.getVisible(),int,
java.awt.Scrollbar.setVisibleAmount(int),void,
java.awt.Scrollbar.setUnitIncrement(int),void,
java.awt.Scrollbar.setLineIncrement(int),void,
java.awt.Scrollbar.getUnitIncrement(),int,the unit increment of this scroll bar
java.awt.Scrollbar.getLineIncrement(),int,
java.awt.Scrollbar.setBlockIncrement(int),void,
java.awt.Scrollbar.setPageIncrement(int),void,
java.awt.Scrollbar.getBlockIncrement(),int,the block increment of this scroll bar
java.awt.Scrollbar.getPageIncrement(),int,
"java.awt.Scrollbar.setValues(int,int,int,int)",void,
java.awt.Scrollbar.getValueIsAdjusting(),boolean,the value of the valueIsAdjusting property
java.awt.Scrollbar.setValueIsAdjusting(boolean),void,
java.awt.Scrollbar.addAdjustmentListener(AdjustmentListener),void,
java.awt.Scrollbar.removeAdjustmentListener(AdjustmentListener),void,
java.awt.Scrollbar.getAdjustmentListeners(),AdjustmentListener[],all of this scrollbar's AdjustmentListeners or an empty array if no adjustment listeners are currently registered
java.awt.Scrollbar.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added"
java.awt.Scrollbar.processEvent(AWTEvent),void,
java.awt.Scrollbar.processAdjustmentEvent(AdjustmentEvent),void,
java.awt.Scrollbar.paramString(),String,the parameter string of this scroll bar
java.awt.Scrollbar.getAccessibleContext(),AccessibleContext,an AccessibleAWTScrollBar that serves as the AccessibleContext of this ScrollBar
"java.awt.ScrollPane.addImpl(Component,Object,int)",void,
java.awt.ScrollPane.getScrollbarDisplayPolicy(),int,the display policy for the scrollbars
java.awt.ScrollPane.getViewportSize(),Dimension,the size of the view port in pixels
java.awt.ScrollPane.getHScrollbarHeight(),int,the height of a horizontal scrollbar in pixels
java.awt.ScrollPane.getVScrollbarWidth(),int,the width of a vertical scrollbar in pixels
java.awt.ScrollPane.getVAdjustable(),Adjustable,
java.awt.ScrollPane.getHAdjustable(),Adjustable,
"java.awt.ScrollPane.setScrollPosition(int,int)",void,
java.awt.ScrollPane.setScrollPosition(Point),void,
java.awt.ScrollPane.getScrollPosition(),Point,the coordinate position for the current scroll position
java.awt.ScrollPane.setLayout(LayoutManager),void,
java.awt.ScrollPane.doLayout(),void,
java.awt.ScrollPane.layout(),void,
java.awt.ScrollPane.printComponents(Graphics),void,
java.awt.ScrollPane.addNotify(),void,
java.awt.ScrollPane.paramString(),String,the parameter string of this scroll pane
java.awt.ScrollPane.processMouseWheelEvent(MouseWheelEvent),void,
java.awt.ScrollPane.eventTypeEnabled(int),boolean,
java.awt.ScrollPane.setWheelScrollingEnabled(boolean),void,
java.awt.ScrollPane.isWheelScrollingEnabled(),boolean,
java.awt.ScrollPane.getAccessibleContext(),AccessibleContext,an AccessibleAWTScrollPane that serves as the AccessibleContext of this ScrollPane
java.awt.ScrollPaneAdjustable.getOrientation(),int,"the orientation of this scrollbar, either Adjustable.HORIZONTAL or Adjustable.VERTICAL"
java.awt.ScrollPaneAdjustable.setMinimum(int),void,
java.awt.ScrollPaneAdjustable.getMinimum(),int,the minimum value of the adjustable object
java.awt.ScrollPaneAdjustable.setMaximum(int),void,
java.awt.ScrollPaneAdjustable.getMaximum(),int,the maximum value of the adjustable object
java.awt.ScrollPaneAdjustable.setUnitIncrement(int),void,
java.awt.ScrollPaneAdjustable.getUnitIncrement(),int,the unit value increment for the adjustable object
java.awt.ScrollPaneAdjustable.setBlockIncrement(int),void,
java.awt.ScrollPaneAdjustable.getBlockIncrement(),int,the block value increment for the adjustable object
java.awt.ScrollPaneAdjustable.setVisibleAmount(int),void,
java.awt.ScrollPaneAdjustable.getVisibleAmount(),int,the length of the proportional indicator
java.awt.ScrollPaneAdjustable.setValueIsAdjusting(boolean),void,
java.awt.ScrollPaneAdjustable.getValueIsAdjusting(),boolean,the value of the valueIsAdjusting property
java.awt.ScrollPaneAdjustable.setValue(int),void,
java.awt.ScrollPaneAdjustable.getValue(),int,the current value of the adjustable object
java.awt.ScrollPaneAdjustable.addAdjustmentListener(AdjustmentListener),void,
java.awt.ScrollPaneAdjustable.removeAdjustmentListener(AdjustmentListener),void,
java.awt.ScrollPaneAdjustable.getAdjustmentListeners(),AdjustmentListener[],all of this ScrollPaneAdjustable's AdjustmentListeners or an empty array if no adjustment listeners are currently registered
java.awt.ScrollPaneAdjustable.toString(),String,a string representation of this scrollbar.
java.awt.ScrollPaneAdjustable.paramString(),String,the parameter string of this scrollbar.
java.awt.SplashScreen.getSplashScreen(),SplashScreen,"the SplashScreen instance, or null if there is none or it has already been closed"
java.awt.SplashScreen.setImageURL(URL),void,
java.awt.SplashScreen.getImageURL(),URL,URL for the current splash screen image file
java.awt.SplashScreen.getBounds(),Rectangle,a Rectangle containing the splash screen bounds
java.awt.SplashScreen.getSize(),Dimension,a Dimension object indicating the splash screen size
java.awt.SplashScreen.createGraphics(),Graphics2D,graphics context for the splash screen overlay surface
java.awt.SplashScreen.update(),void,
java.awt.SplashScreen.close(),void,
java.awt.SplashScreen.isVisible(),boolean,"true if the splash screen is visible (has not been closed yet), false otherwise"
java.awt.SystemColor.toString(),String,a string representation of this Color
java.awt.SystemTray.getSystemTray(),SystemTray,the SystemTray instance that represents the desktop's tray area
java.awt.SystemTray.isSupported(),boolean,false if no system tray access is supported; this method returns true if the minimal system tray access is supported but does not guarantee that all system tray functionality is supported for the current platform
java.awt.SystemTray.add(TrayIcon),void,
java.awt.SystemTray.remove(TrayIcon),void,
java.awt.SystemTray.getTrayIcons(),TrayIcon[],"an array of all tray icons added to this tray, or an empty array if none has been added"
java.awt.SystemTray.getTrayIconSize(),Dimension,"the default size of a tray icon, in pixels"
"java.awt.SystemTray.addPropertyChangeListener(String,PropertyChangeListener)",void,
"java.awt.SystemTray.removePropertyChangeListener(String,PropertyChangeListener)",void,
java.awt.SystemTray.getPropertyChangeListeners(String),PropertyChangeListener[],"all of the PropertyChangeListeners associated with the named property; if no such listeners have been added or if propertyName is null or invalid, an empty array is returned"
java.awt.TextArea.addNotify(),void,
"java.awt.TextArea.insert(String,int)",void,
"java.awt.TextArea.insertText(String,int)",void,
java.awt.TextArea.append(String),void,
java.awt.TextArea.appendText(String),void,
"java.awt.TextArea.replaceRange(String,int,int)",void,
"java.awt.TextArea.replaceText(String,int,int)",void,
java.awt.TextArea.getRows(),int,the number of rows in the text area
java.awt.TextArea.setRows(int),void,
java.awt.TextArea.getColumns(),int,the number of columns in the text area
java.awt.TextArea.setColumns(int),void,
java.awt.TextArea.getScrollbarVisibility(),int,an integer that indicates which scroll bars are used
"java.awt.TextArea.getPreferredSize(int,int)",Dimension,the preferred dimensions required to display the text area with the specified number of rows and columns
"java.awt.TextArea.preferredSize(int,int)",Dimension,
java.awt.TextArea.getPreferredSize(),Dimension,the preferred dimensions needed for this text area
java.awt.TextArea.preferredSize(),Dimension,
"java.awt.TextArea.getMinimumSize(int,int)",Dimension,the minimum dimensions required to display the text area with the specified number of rows and columns
"java.awt.TextArea.minimumSize(int,int)",Dimension,
java.awt.TextArea.getMinimumSize(),Dimension,the preferred dimensions needed for this text area
java.awt.TextArea.minimumSize(),Dimension,
java.awt.TextArea.paramString(),String,the parameter string of this text area
java.awt.TextArea.getAccessibleContext(),AccessibleContext,an AccessibleAWTTextArea that serves as the AccessibleContext of this TextArea
java.awt.TextComponent.enableInputMethods(boolean),void,
java.awt.TextComponent.getInputMethodRequests(),InputMethodRequests,"the input method request handler for this component, null by default"
java.awt.TextComponent.addNotify(),void,
java.awt.TextComponent.removeNotify(),void,
java.awt.TextComponent.setText(String),void,
java.awt.TextComponent.getText(),String,the value of this TextComponent
java.awt.TextComponent.getSelectedText(),String,the selected text of this text component
java.awt.TextComponent.isEditable(),boolean,true if this text component is editable; false otherwise.
java.awt.TextComponent.setEditable(boolean),void,
java.awt.TextComponent.getBackground(),Color,"This text component's background color. If this text component does not have a background color, the background color of its parent is returned."
java.awt.TextComponent.setBackground(Color),void,
java.awt.TextComponent.getSelectionStart(),int,the start position of the selected text
java.awt.TextComponent.setSelectionStart(int),void,
java.awt.TextComponent.getSelectionEnd(),int,the end position of the selected text
java.awt.TextComponent.setSelectionEnd(int),void,
"java.awt.TextComponent.select(int,int)",void,
java.awt.TextComponent.selectAll(),void,
java.awt.TextComponent.setCaretPosition(int),void,
java.awt.TextComponent.getCaretPosition(),int,the position of the text insertion caret
java.awt.TextComponent.addTextListener(TextListener),void,
java.awt.TextComponent.removeTextListener(TextListener),void,
java.awt.TextComponent.getTextListeners(),TextListener[],all of this text component's TextListeners or an empty array if no text listeners are currently registered
java.awt.TextComponent.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this text component, or an empty array if no such listeners have been added"
java.awt.TextComponent.processEvent(AWTEvent),void,
java.awt.TextComponent.processTextEvent(TextEvent),void,
java.awt.TextComponent.paramString(),String,the parameter string of this text component
java.awt.TextComponent.getAccessibleContext(),AccessibleContext,an AccessibleAWTTextComponent that serves as the AccessibleContext of this TextComponent
java.awt.TextField.addNotify(),void,
java.awt.TextField.getEchoChar(),char,the echo character for this text field.
java.awt.TextField.setEchoChar(char),void,
java.awt.TextField.setEchoCharacter(char),void,
java.awt.TextField.setText(String),void,
java.awt.TextField.echoCharIsSet(),boolean,true if this text field has a character set for echoing; false otherwise.
java.awt.TextField.getColumns(),int,the number of columns.
java.awt.TextField.setColumns(int),void,
java.awt.TextField.getPreferredSize(int),Dimension,the preferred dimensions for displaying this text field.
java.awt.TextField.preferredSize(int),Dimension,
java.awt.TextField.getPreferredSize(),Dimension,the preferred dimensions for displaying this text field.
java.awt.TextField.preferredSize(),Dimension,
java.awt.TextField.getMinimumSize(int),Dimension,
java.awt.TextField.minimumSize(int),Dimension,
java.awt.TextField.getMinimumSize(),Dimension,the minimum dimensions for displaying this text field.
java.awt.TextField.minimumSize(),Dimension,
java.awt.TextField.addActionListener(ActionListener),void,
java.awt.TextField.removeActionListener(ActionListener),void,
java.awt.TextField.getActionListeners(),ActionListener[],all of this textfield's ActionListeners or an empty array if no action listeners are currently registered
java.awt.TextField.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this textfield, or an empty array if no such listeners have been added"
java.awt.TextField.processEvent(AWTEvent),void,
java.awt.TextField.processActionEvent(ActionEvent),void,
java.awt.TextField.paramString(),String,the parameter string of this text field
java.awt.TextField.getAccessibleContext(),AccessibleContext,an AccessibleAWTTextField that serves as the AccessibleContext of this TextField
java.awt.TexturePaint.getImage(),BufferedImage,a BufferedImage.
java.awt.TexturePaint.getAnchorRect(),Rectangle2D,the Rectangle2D used to anchor and size this TexturePaint.
"java.awt.TexturePaint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)",PaintContext,the PaintContext for generating color patterns.
java.awt.TexturePaint.getTransparency(),int,the transparency mode for this TexturePaint as an integer value.
java.awt.Toolkit.createDesktopPeer(Desktop),abstractjava.awt.peer.DesktopPeer,this toolkit's implementation of the Desktop
java.awt.Toolkit.createButton(Button),abstractjava.awt.peer.ButtonPeer,this toolkit's implementation of Button.
java.awt.Toolkit.createTextField(TextField),abstractjava.awt.peer.TextFieldPeer,this toolkit's implementation of TextField.
java.awt.Toolkit.createLabel(Label),abstractjava.awt.peer.LabelPeer,this toolkit's implementation of Label.
java.awt.Toolkit.createList(List),abstractjava.awt.peer.ListPeer,this toolkit's implementation of List.
java.awt.Toolkit.createCheckbox(Checkbox),abstractjava.awt.peer.CheckboxPeer,this toolkit's implementation of Checkbox.
java.awt.Toolkit.createScrollbar(Scrollbar),abstractjava.awt.peer.ScrollbarPeer,this toolkit's implementation of Scrollbar.
java.awt.Toolkit.createScrollPane(ScrollPane),abstractjava.awt.peer.ScrollPanePeer,this toolkit's implementation of ScrollPane.
java.awt.Toolkit.createTextArea(TextArea),abstractjava.awt.peer.TextAreaPeer,this toolkit's implementation of TextArea.
java.awt.Toolkit.createChoice(Choice),abstractjava.awt.peer.ChoicePeer,this toolkit's implementation of Choice.
java.awt.Toolkit.createFrame(Frame),abstractjava.awt.peer.FramePeer,this toolkit's implementation of Frame.
java.awt.Toolkit.createCanvas(Canvas),abstractjava.awt.peer.CanvasPeer,this toolkit's implementation of Canvas.
java.awt.Toolkit.createPanel(Panel),abstractjava.awt.peer.PanelPeer,this toolkit's implementation of Panel.
java.awt.Toolkit.createWindow(Window),abstractjava.awt.peer.WindowPeer,this toolkit's implementation of Window.
java.awt.Toolkit.createDialog(Dialog),abstractjava.awt.peer.DialogPeer,this toolkit's implementation of Dialog.
java.awt.Toolkit.createMenuBar(MenuBar),abstractjava.awt.peer.MenuBarPeer,this toolkit's implementation of MenuBar.
java.awt.Toolkit.createMenu(Menu),abstractjava.awt.peer.MenuPeer,this toolkit's implementation of Menu.
java.awt.Toolkit.createPopupMenu(PopupMenu),abstractjava.awt.peer.PopupMenuPeer,this toolkit's implementation of PopupMenu.
java.awt.Toolkit.createMenuItem(MenuItem),abstractjava.awt.peer.MenuItemPeer,this toolkit's implementation of MenuItem.
java.awt.Toolkit.createFileDialog(FileDialog),abstractjava.awt.peer.FileDialogPeer,this toolkit's implementation of FileDialog.
java.awt.Toolkit.createCheckboxMenuItem(CheckboxMenuItem),abstractjava.awt.peer.CheckboxMenuItemPeer,this toolkit's implementation of CheckboxMenuItem.
java.awt.Toolkit.getMouseInfoPeer(),java.awt.peer.MouseInfoPeer,this toolkit's implementation of helper for MouseInfo
java.awt.Toolkit.createComponent(Component),java.awt.peer.LightweightPeer,
"java.awt.Toolkit.getFontPeer(String,int)",abstractjava.awt.peer.FontPeer,this toolkit's implementation of Font
java.awt.Toolkit.loadSystemColors(int[]),void,
java.awt.Toolkit.setDynamicLayout(boolean),void,
java.awt.Toolkit.isDynamicLayoutSet(),boolean,"true if validation of Containers is done dynamically, false if validation is done after resizing is finished."
java.awt.Toolkit.isDynamicLayoutActive(),boolean,"true if dynamic layout of Containers on resize is currently active, false otherwise."
java.awt.Toolkit.getScreenSize(),abstractDimension,"the size of this toolkit's screen, in pixels."
java.awt.Toolkit.getScreenResolution(),abstractint,"this toolkit's screen resolution, in dots-per-inch."
java.awt.Toolkit.getScreenInsets(GraphicsConfiguration),Insets,"the insets of this toolkit's screen, in pixels."
java.awt.Toolkit.getColorModel(),abstractColorModel,the color model of this toolkit's screen.
java.awt.Toolkit.getFontList(),abstractString[],
java.awt.Toolkit.getFontMetrics(Font),abstractFontMetrics,the screen metrics of the specified font in this toolkit
java.awt.Toolkit.sync(),abstractvoid,
java.awt.Toolkit.getDefaultToolkit(),Toolkit,the default toolkit.
java.awt.Toolkit.getImage(String),abstractImage,an image which gets its pixel data from the specified file.
java.awt.Toolkit.getImage(URL),abstractImage,an image which gets its pixel data from the specified URL.
java.awt.Toolkit.createImage(String),abstractImage,an image which gets its pixel data from the specified file.
java.awt.Toolkit.createImage(URL),abstractImage,an image which gets its pixel data from the specified URL.
"java.awt.Toolkit.prepareImage(Image,int,int,ImageObserver)",abstractboolean,true if the image has already been fully prepared; false otherwise.
"java.awt.Toolkit.checkImage(Image,int,int,ImageObserver)",abstractint,the bitwise inclusive OR of the ImageObserver flags for the image data that is currently available.
java.awt.Toolkit.createImage(ImageProducer),abstractImage,an image with the specified image producer.
java.awt.Toolkit.createImage(byte[]),Image,an image.
"java.awt.Toolkit.createImage(byte[],int,int)",abstractImage,an image.
"java.awt.Toolkit.getPrintJob(Frame,String,Properties)",abstractPrintJob,"a PrintJob object, or null if the user cancelled the print job."
"java.awt.Toolkit.getPrintJob(Frame,String,JobAttributes,PageAttributes)",PrintJob,"a PrintJob object, or null if the user cancelled the print job."
java.awt.Toolkit.beep(),abstractvoid,
java.awt.Toolkit.getSystemClipboard(),abstractClipboard,
java.awt.Toolkit.getSystemSelection(),Clipboard,"the system selection as a Clipboard, or null if the native platform does not support a system selection Clipboard"
java.awt.Toolkit.getMenuShortcutKeyMask(),int,the modifier mask on the Event class that is used for menu shortcuts on this toolkit.
java.awt.Toolkit.getLockingKeyState(int),boolean,
"java.awt.Toolkit.setLockingKeyState(int,boolean)",void,
java.awt.Toolkit.getNativeContainer(Component),Container,
"java.awt.Toolkit.createCustomCursor(Image,Point,String)",Cursor,
"java.awt.Toolkit.getBestCursorSize(int,int)",Dimension,"the closest matching supported cursor size, or a dimension of 0,0 if the Toolkit implementation doesn't support custom cursors."
java.awt.Toolkit.getMaximumCursorColors(),int,"the maximum number of colors, or zero if custom cursors are not supported by this Toolkit implementation."
java.awt.Toolkit.isFrameStateSupported(int),boolean,
"java.awt.Toolkit.getProperty(String,String)",String,
java.awt.Toolkit.getSystemEventQueue(),EventQueue,the EventQueue object
java.awt.Toolkit.getSystemEventQueueImpl(),abstractEventQueue,the EventQueue object
java.awt.Toolkit.createDragSourceContextPeer(DragGestureEvent),abstractjava.awt.dnd.peer.DragSourceContextPeer,
"java.awt.Toolkit.createDragGestureRecognizer(Class&lt;T&gt;,DragSource,Component,int,DragGestureListener)",&lt;T extends DragGestureRecognizer&gt;T,the new object or null. Always returns null if GraphicsEnvironment.isHeadless() returns true.
java.awt.Toolkit.getDesktopProperty(String),Object,
"java.awt.Toolkit.setDesktopProperty(String,Object)",void,
java.awt.Toolkit.lazilyLoadDesktopProperty(String),Object,
java.awt.Toolkit.initializeDesktopProperties(),void,
"java.awt.Toolkit.addPropertyChangeListener(String,PropertyChangeListener)",void,
"java.awt.Toolkit.removePropertyChangeListener(String,PropertyChangeListener)",void,
java.awt.Toolkit.getPropertyChangeListeners(),PropertyChangeListener[],all of this toolkit's PropertyChangeListener objects wrapped in java.beans.PropertyChangeListenerProxy objects or an empty array if no listeners are added
java.awt.Toolkit.getPropertyChangeListeners(String),PropertyChangeListener[],all of the PropertyChangeListener objects associated with the specified name of a desktop property or an empty array if no such listeners are added
java.awt.Toolkit.isAlwaysOnTopSupported(),boolean,"true, if current toolkit supports the always-on-top mode, otherwise returns false"
java.awt.Toolkit.isModalityTypeSupported(Dialog.ModalityType),abstractboolean,"true, if current toolkit supports given modality type, false otherwise"
java.awt.Toolkit.isModalExclusionTypeSupported(Dialog.ModalExclusionType),abstractboolean,"true, if current toolkit supports given modal exclusion type, false otherwise"
"java.awt.Toolkit.addAWTEventListener(AWTEventListener,long)",void,
java.awt.Toolkit.removeAWTEventListener(AWTEventListener),void,
java.awt.Toolkit.getAWTEventListeners(),AWTEventListener[],all of the AWTEventListeners or an empty array if no listeners are currently registered
java.awt.Toolkit.getAWTEventListeners(long),AWTEventListener[],"all of the AWTEventListeners registered on this toolkit for the specified event types, or an empty array if no such listeners are currently registered"
java.awt.Toolkit.mapInputMethodHighlight(InputMethodHighlight),"abstractMap&lt;TextAttribute,?&gt;","style attribute map, or null"
java.awt.Toolkit.areExtraMouseButtonsEnabled(),boolean,true if events from extra mouse buttons are allowed to be processed and posted; false otherwise
java.awt.TrayIcon.setImage(Image),void,
java.awt.TrayIcon.getImage(),Image,the image
java.awt.TrayIcon.setPopupMenu(PopupMenu),void,
java.awt.TrayIcon.getPopupMenu(),PopupMenu,the popup menu or null if none exists
java.awt.TrayIcon.setToolTip(String),void,
java.awt.TrayIcon.getToolTip(),String,the tooltip string or null if none exists
java.awt.TrayIcon.setImageAutoSize(boolean),void,
java.awt.TrayIcon.isImageAutoSize(),boolean,"true if the image will be auto-sized, false otherwise"
java.awt.TrayIcon.addMouseListener(MouseListener),void,
java.awt.TrayIcon.removeMouseListener(MouseListener),void,
java.awt.TrayIcon.getMouseListeners(),MouseListener[],all of the MouseListeners registered on this TrayIcon or an empty array if no mouse listeners are currently registered
java.awt.TrayIcon.addMouseMotionListener(MouseMotionListener),void,
java.awt.TrayIcon.removeMouseMotionListener(MouseMotionListener),void,
java.awt.TrayIcon.getMouseMotionListeners(),MouseMotionListener[],all of the MouseInputListeners registered on this TrayIcon or an empty array if no mouse listeners are currently registered
java.awt.TrayIcon.getActionCommand(),String,"the action command name, or null if none exists"
java.awt.TrayIcon.setActionCommand(String),void,
java.awt.TrayIcon.addActionListener(ActionListener),void,
java.awt.TrayIcon.removeActionListener(ActionListener),void,
java.awt.TrayIcon.getActionListeners(),ActionListener[],all of the ActionListeners registered on this TrayIcon or an empty array if no action listeners are currently registered
"java.awt.TrayIcon.displayMessage(String,String,TrayIcon.MessageType)",void,
java.awt.TrayIcon.getSize(),Dimension,"the size of the tray icon, in pixels"
java.awt.Window.getIconImages(),List&lt;Image&gt;,"the copy of icon images' list for this window, or empty list if this window doesn't have icon images."
java.awt.Window.setIconImages(List&lt;?),void,
java.awt.Window.setIconImage(Image),void,
java.awt.Window.addNotify(),void,
java.awt.Window.removeNotify(),void,
java.awt.Window.pack(),void,
java.awt.Window.setMinimumSize(Dimension),void,
java.awt.Window.setSize(Dimension),void,
"java.awt.Window.setSize(int,int)",void,
"java.awt.Window.setLocation(int,int)",void,
java.awt.Window.setLocation(Point),void,
"java.awt.Window.reshape(int,int,int,int)",void,
java.awt.Window.setVisible(boolean),void,
java.awt.Window.show(),void,
java.awt.Window.hide(),void,
java.awt.Window.dispose(),void,
java.awt.Window.toFront(),void,
java.awt.Window.toBack(),void,
java.awt.Window.getToolkit(),Toolkit,the toolkit of this window.
java.awt.Window.getWarningString(),String,the warning string for this window.
java.awt.Window.getLocale(),Locale,the locale that is set for this window.
java.awt.Window.getInputContext(),InputContext,the input context used by this component; null if no context can be determined
java.awt.Window.setCursor(Cursor),void,
java.awt.Window.getOwner(),Window,
java.awt.Window.getOwnedWindows(),Window[],
java.awt.Window.getWindows(),Window[],
java.awt.Window.getOwnerlessWindows(),Window[],
java.awt.Window.setModalExclusionType(Dialog.ModalExclusionType),void,
java.awt.Window.getModalExclusionType(),Dialog.ModalExclusionType,the modal exclusion type of this window
java.awt.Window.addWindowListener(WindowListener),void,
java.awt.Window.addWindowStateListener(WindowStateListener),void,
java.awt.Window.addWindowFocusListener(WindowFocusListener),void,
java.awt.Window.removeWindowListener(WindowListener),void,
java.awt.Window.removeWindowStateListener(WindowStateListener),void,
java.awt.Window.removeWindowFocusListener(WindowFocusListener),void,
java.awt.Window.getWindowListeners(),WindowListener[],all of this window's WindowListeners or an empty array if no window listeners are currently registered
java.awt.Window.getWindowFocusListeners(),WindowFocusListener[],all of this window's WindowFocusListeners or an empty array if no window focus listeners are currently registered
java.awt.Window.getWindowStateListeners(),WindowStateListener[],all of this window's WindowStateListeners or an empty array if no window state listeners are currently registered
java.awt.Window.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this window, or an empty array if no such listeners have been added"
java.awt.Window.processEvent(AWTEvent),void,
java.awt.Window.processWindowEvent(WindowEvent),void,
java.awt.Window.processWindowFocusEvent(WindowEvent),void,
java.awt.Window.processWindowStateEvent(WindowEvent),void,
java.awt.Window.setAlwaysOnTop(boolean),void,
java.awt.Window.isAlwaysOnTopSupported(),boolean,"true, if the always-on-top mode is supported for this window and this window's toolkit supports always-on-top windows, false otherwise"
java.awt.Window.isAlwaysOnTop(),boolean,"true, if the window is in always-on-top state, false otherwise"
java.awt.Window.getFocusOwner(),Component,"the child Component with focus, or null if this Window is not focused"
java.awt.Window.getMostRecentFocusOwner(),Component,the child Component that will receive focus when this Window is focused
java.awt.Window.isActive(),boolean,whether this is the active Window.
java.awt.Window.isFocused(),boolean,whether this is the focused Window.
java.awt.Window.getFocusTraversalKeys(int),Set&lt;AWTKeyStroke&gt;,the AWTKeyStroke for the specified key
java.awt.Window.setFocusCycleRoot(boolean),void,
java.awt.Window.isFocusCycleRoot(),boolean,true
java.awt.Window.getFocusCycleRootAncestor(),Container,null
java.awt.Window.isFocusableWindow(),boolean,true if this Window can be the focused Window; false otherwise
java.awt.Window.getFocusableWindowState(),boolean,whether this Window can be the focused Window
java.awt.Window.setFocusableWindowState(boolean),void,
java.awt.Window.setAutoRequestFocus(boolean),void,
java.awt.Window.isAutoRequestFocus(),boolean,autoRequestFocus value
java.awt.Window.addPropertyChangeListener(PropertyChangeListener),void,
"java.awt.Window.addPropertyChangeListener(String,PropertyChangeListener)",void,
java.awt.Window.isValidateRoot(),boolean,true
java.awt.Window.postEvent(Event),boolean,
java.awt.Window.isShowing(),boolean,"true if the component is showing, false otherwise"
java.awt.Window.applyResourceBundle(ResourceBundle),void,
java.awt.Window.applyResourceBundle(String),void,
java.awt.Window.setType(Window.Type),void,
java.awt.Window.getType(),Window.Type,
java.awt.Window.getAccessibleContext(),AccessibleContext,an AccessibleAWTWindow that serves as the AccessibleContext of this Window
java.awt.Window.setLocationRelativeTo(Component),void,
java.awt.Window.createBufferStrategy(int),void,
"java.awt.Window.createBufferStrategy(int,BufferCapabilities)",void,
java.awt.Window.getBufferStrategy(),BufferStrategy,the buffer strategy used by this component
java.awt.Window.setLocationByPlatform(boolean),void,
java.awt.Window.isLocationByPlatform(),boolean,whether this Window will appear at the default location
"java.awt.Window.setBounds(int,int,int,int)",void,
java.awt.Window.setBounds(Rectangle),void,
java.awt.Window.getOpacity(),float,the opacity of the window
java.awt.Window.setOpacity(float),void,
java.awt.Window.getShape(),Shape,the shape of the window or null if no shape is specified for the window
java.awt.Window.setShape(Shape),void,
java.awt.Window.getBackground(),Color,this component's background color
java.awt.Window.setBackground(Color),void,
java.awt.Window.isOpaque(),boolean,"true if the window is opaque, false otherwise"
java.awt.Window.paint(Graphics),void,
java.awt.color.ColorSpace.getInstance(int),ColorSpace,the requested ColorSpace object
java.awt.color.ColorSpace.isCS_sRGB(),boolean,"true if this is a CS_sRGB color space, false if it is not"
java.awt.color.ColorSpace.toRGB(float[]),abstractfloat[],a float array of length 3
java.awt.color.ColorSpace.fromRGB(float[]),abstractfloat[],a float array with length equal to the number of components in this ColorSpace
java.awt.color.ColorSpace.toCIEXYZ(float[]),abstractfloat[],a float array of length 3
java.awt.color.ColorSpace.fromCIEXYZ(float[]),abstractfloat[],a float array with length equal to the number of components in this ColorSpace
java.awt.color.ColorSpace.getType(),int,the type constant that represents the type of this ColorSpace
java.awt.color.ColorSpace.getNumComponents(),int,The number of components in this ColorSpace.
java.awt.color.ColorSpace.getName(int),String,the name of the component at the specified index
java.awt.color.ColorSpace.getMinValue(int),float,the minimum normalized component value
java.awt.color.ColorSpace.getMaxValue(int),float,the maximum normalized component value
java.awt.color.ICC_ColorSpace.getProfile(),ICC_Profile,the ICC_Profile for this ICC_ColorSpace.
java.awt.color.ICC_ColorSpace.toRGB(float[]),float[],a float array of length 3.
java.awt.color.ICC_ColorSpace.fromRGB(float[]),float[],a float array with length equal to the number of components in this ColorSpace.
java.awt.color.ICC_ColorSpace.toCIEXYZ(float[]),float[],a float array of length 3.
java.awt.color.ICC_ColorSpace.fromCIEXYZ(float[]),float[],a float array with length equal to the number of components in this ColorSpace.
java.awt.color.ICC_ColorSpace.getMinValue(int),float,The minimum normalized component value.
java.awt.color.ICC_ColorSpace.getMaxValue(int),float,The maximum normalized component value.
java.awt.color.ICC_Profile.finalize(),voidize(),
java.awt.color.ICC_Profile.getInstance(byte[]),ICC_Profile,an ICC_Profile object corresponding to the data in the specified data array.
java.awt.color.ICC_Profile.getInstance(int),ICC_Profile,an ICC_Profile object corresponding to the specified ColorSpace type.
java.awt.color.ICC_Profile.getInstance(String),ICC_Profile,an ICC_Profile object corresponding to the data in the specified file.
java.awt.color.ICC_Profile.getInstance(InputStream),ICC_Profile,an ICC_Profile object corresponding to the data in the specified InputStream.
java.awt.color.ICC_Profile.getMajorVersion(),int,The major version of the profile.
java.awt.color.ICC_Profile.getMinorVersion(),int,The minor version of the profile.
java.awt.color.ICC_Profile.getProfileClass(),int,One of the predefined profile class constants.
java.awt.color.ICC_Profile.getColorSpaceType(),int,One of the color space type constants defined in the ColorSpace class.
java.awt.color.ICC_Profile.getPCSType(),int,One of the color space type constants defined in the ColorSpace class.
java.awt.color.ICC_Profile.write(String),void,
java.awt.color.ICC_Profile.write(OutputStream),void,
java.awt.color.ICC_Profile.getData(),byte[],A byte array that contains the profile data.
java.awt.color.ICC_Profile.getData(int),byte[],A byte array that contains the tagged data element. Returns null if the specified tag doesn't exist.
"java.awt.color.ICC_Profile.setData(int,byte[])",void,
java.awt.color.ICC_Profile.getNumComponents(),int,The number of color components in the profile's input color space.
java.awt.color.ICC_Profile.readResolve(),Object,ICC_Profile object for profile registered with CMM.
java.awt.color.ICC_ProfileGray.getMediaWhitePoint(),float[],an array containing the components of the mediaWhitePointTag in the ICC profile.
java.awt.color.ICC_ProfileGray.getGamma(),float,the gamma value as a float.
java.awt.color.ICC_ProfileGray.getTRC(),short[],a short array representing the TRC.
java.awt.color.ICC_ProfileRGB.getMediaWhitePoint(),float[],"A 3-element float array containing the x, y, and z components of the profile's mediaWhitePointTag."
java.awt.color.ICC_ProfileRGB.getMatrix(),float[][],"A 3x3 float array that contains the x, y, and z components of the profile's redColorantTag, greenColorantTag, and blueColorantTag."
java.awt.color.ICC_ProfileRGB.getGamma(int),float,the gamma value as a float.
java.awt.color.ICC_ProfileRGB.getTRC(int),short[],a short array representing the TRC.
java.awt.datatransfer.Clipboard.getName(),String,
"java.awt.datatransfer.Clipboard.setContents(Transferable,ClipboardOwner)",void,
java.awt.datatransfer.Clipboard.getContents(Object),Transferable,the current transferable object on the clipboard
java.awt.datatransfer.Clipboard.getAvailableDataFlavors(),DataFlavor[],an array of DataFlavors in which the current contents of this clipboard can be provided
java.awt.datatransfer.Clipboard.isDataFlavorAvailable(DataFlavor),boolean,true if the current contents of this clipboard can be provided in the specified DataFlavor; false otherwise
java.awt.datatransfer.Clipboard.getData(DataFlavor),Object,an object representing the current contents of this clipboard in the specified DataFlavor
java.awt.datatransfer.Clipboard.addFlavorListener(FlavorListener),void,
java.awt.datatransfer.Clipboard.removeFlavorListener(FlavorListener),void,
java.awt.datatransfer.Clipboard.getFlavorListeners(),FlavorListener[],all of this clipboard's FlavorListeners or an empty array if no listeners are currently registered
"java.awt.datatransfer.DataFlavor.tryToLoadClass(String,ClassLoader)",Class&lt;?&gt;,the class loaded
java.awt.datatransfer.DataFlavor.toString(),String,string representation of this DataFlavor
java.awt.datatransfer.DataFlavor.getTextPlainUnicodeFlavor(),DataFlavor,a DataFlavor representing plain text with Unicode encoding
java.awt.datatransfer.DataFlavor.selectBestTextFlavor(DataFlavor[]),DataFlavor,
java.awt.datatransfer.DataFlavor.getReaderForText(Transferable),Reader,a Reader to read the Transferable's data
java.awt.datatransfer.DataFlavor.getMimeType(),String,the MIME type string for this flavor
java.awt.datatransfer.DataFlavor.getRepresentationClass(),Class&lt;?&gt;,the Class which objects supporting this DataFlavor will return when this DataFlavor is requested
java.awt.datatransfer.DataFlavor.getHumanPresentableName(),String,the human presentable name for the data format that this DataFlavor represents
java.awt.datatransfer.DataFlavor.getPrimaryType(),String,the primary MIME type of this DataFlavor
java.awt.datatransfer.DataFlavor.getSubType(),String,the Sub MIME type of this DataFlavor
java.awt.datatransfer.DataFlavor.getParameter(String),String,"the value of the name parameter, or null if there is no associated value"
java.awt.datatransfer.DataFlavor.setHumanPresentableName(String),void,
java.awt.datatransfer.DataFlavor.equals(Object),boolean,
java.awt.datatransfer.DataFlavor.equals(DataFlavor),boolean,true if that is equivalent to this DataFlavor; false otherwise
java.awt.datatransfer.DataFlavor.equals(String),boolean,true if the String (MimeType) is equal; false otherwise or if s is null
java.awt.datatransfer.DataFlavor.hashCode(),int,a hash code for this DataFlavor
java.awt.datatransfer.DataFlavor.match(DataFlavor),boolean,true if that is equivalent to this DataFlavor; false otherwise
java.awt.datatransfer.DataFlavor.isMimeTypeEqual(String),boolean,true if the string representation of the MIME type passed in is equivalent to the MIME type of this DataFlavor; false otherwise
java.awt.datatransfer.DataFlavor.isMimeTypeEqual(DataFlavor),boolean,"true if the MimeTypes are equal, otherwise false"
java.awt.datatransfer.DataFlavor.isMimeTypeSerializedObject(),boolean,
java.awt.datatransfer.DataFlavor.getDefaultRepresentationClass(),Class&lt;?&gt;,
java.awt.datatransfer.DataFlavor.getDefaultRepresentationClassAsString(),String,
java.awt.datatransfer.DataFlavor.isRepresentationClassInputStream(),boolean,
java.awt.datatransfer.DataFlavor.isRepresentationClassReader(),boolean,
java.awt.datatransfer.DataFlavor.isRepresentationClassCharBuffer(),boolean,
java.awt.datatransfer.DataFlavor.isRepresentationClassByteBuffer(),boolean,
java.awt.datatransfer.DataFlavor.isRepresentationClassSerializable(),boolean,true if the representation class can be serialized
java.awt.datatransfer.DataFlavor.isRepresentationClassRemote(),boolean,true if the representation class is Remote
java.awt.datatransfer.DataFlavor.isFlavorSerializedObjectType(),boolean,true if the DataFlavor specified represents a Serialized Object
java.awt.datatransfer.DataFlavor.isFlavorRemoteObjectType(),boolean,true if the DataFlavor specified represents a Remote Object
java.awt.datatransfer.DataFlavor.isFlavorJavaFileListType(),boolean,true if the DataFlavor specified represents a List of File objects
java.awt.datatransfer.DataFlavor.isFlavorTextType(),boolean,true if this DataFlavor is a valid text flavor as described above; false otherwise
java.awt.datatransfer.DataFlavor.writeExternal(ObjectOutput),void,
java.awt.datatransfer.DataFlavor.readExternal(ObjectInput),void,
java.awt.datatransfer.DataFlavor.clone(),Object,a clone of this DataFlavor
"java.awt.datatransfer.DataFlavor.normalizeMimeTypeParameter(String,String)",String,
java.awt.datatransfer.DataFlavor.normalizeMimeType(String),String,
java.awt.datatransfer.StringSelection.getTransferDataFlavors(),DataFlavor[],"an array of length two, whose elements are DataFlavor. stringFlavor and DataFlavor.plainTextFlavor"
java.awt.datatransfer.StringSelection.isDataFlavorSupported(DataFlavor),boolean,true if flavor is equal to DataFlavor.stringFlavor or DataFlavor.plainTextFlavor; false if flavor is not one of the above flavors
java.awt.datatransfer.StringSelection.getTransferData(DataFlavor),Object,"the data in the requested flavor, as outlined above"
"java.awt.datatransfer.StringSelection.lostOwnership(Clipboard,Transferable)",void,
java.awt.datatransfer.SystemFlavorMap.getDefaultFlavorMap(),FlavorMap,
java.awt.datatransfer.SystemFlavorMap.getNativesForFlavor(DataFlavor),List&lt;String&gt;,a java.util.List of java.lang.String objects which are platform-specific representations of platform- specific data formats
java.awt.datatransfer.SystemFlavorMap.getFlavorsForNative(String),List&lt;DataFlavor&gt;,"a java.util.List of DataFlavor objects into which platform-specific data in the specified, platform-specific native can be translated"
java.awt.datatransfer.SystemFlavorMap.getNativesForFlavors(DataFlavor[]),"Map&lt;DataFlavor,String&gt;",a java.util.Map of DataFlavors to String natives
java.awt.datatransfer.SystemFlavorMap.getFlavorsForNatives(String[]),"Map&lt;String,DataFlavor&gt;",a java.util.Map of String natives to DataFlavors
"java.awt.datatransfer.SystemFlavorMap.addUnencodedNativeForFlavor(DataFlavor,String)",void,
"java.awt.datatransfer.SystemFlavorMap.setNativesForFlavor(DataFlavor,String[])",void,
"java.awt.datatransfer.SystemFlavorMap.addFlavorForUnencodedNative(String,DataFlavor)",void,
"java.awt.datatransfer.SystemFlavorMap.setFlavorsForNative(String,DataFlavor[])",void,
java.awt.datatransfer.SystemFlavorMap.encodeJavaMIMEType(String),String,
java.awt.datatransfer.SystemFlavorMap.encodeDataFlavor(DataFlavor),String,
java.awt.datatransfer.SystemFlavorMap.isJavaMIMEType(String),boolean,true if the String is encoded; false otherwise
java.awt.datatransfer.SystemFlavorMap.decodeJavaMIMEType(String),String,"the decoded Java MIME type, or null if nat is not an encoded String native"
java.awt.datatransfer.SystemFlavorMap.decodeDataFlavor(String),DataFlavor,"the decoded DataFlavor, or null if nat is not an encoded String native"
java.awt.dnd.DragGestureEvent.getSourceAsDragGestureRecognizer(),DragGestureRecognizer,the source as a DragGestureRecognizer
java.awt.dnd.DragGestureEvent.getComponent(),Component,the Component
java.awt.dnd.DragGestureEvent.getDragSource(),DragSource,the DragSource
java.awt.dnd.DragGestureEvent.getDragOrigin(),Point,the Point where the drag originated in Component coords.
java.awt.dnd.DragGestureEvent.iterator(),Iterator&lt;InputEvent&gt;,an Iterator for the events comprising the gesture
java.awt.dnd.DragGestureEvent.toArray(),Object[],an array of the events comprising the gesture
java.awt.dnd.DragGestureEvent.toArray(Object[]),Object[],an array of the events comprising the gesture
java.awt.dnd.DragGestureEvent.getDragAction(),int,the action selected by the user
java.awt.dnd.DragGestureEvent.getTriggerEvent(),InputEvent,"the first ""triggering"" event in the sequence of the gesture"
"java.awt.dnd.DragGestureEvent.startDrag(Cursor,Transferable)",void,
"java.awt.dnd.DragGestureEvent.startDrag(Cursor,Transferable,DragSourceListener)",void,
"java.awt.dnd.DragGestureEvent.startDrag(Cursor,Image,Point,Transferable,DragSourceListener)",void,
java.awt.dnd.DragGestureRecognizer.registerListeners(),abstractvoid,
java.awt.dnd.DragGestureRecognizer.unregisterListeners(),abstractvoid,
java.awt.dnd.DragGestureRecognizer.getDragSource(),DragSource,the DragSource
java.awt.dnd.DragGestureRecognizer.getComponent(),Component,The Component this DragGestureRecognizer is associated with
java.awt.dnd.DragGestureRecognizer.setComponent(Component),void,
java.awt.dnd.DragGestureRecognizer.getSourceActions(),int,the currently permitted source action(s)
java.awt.dnd.DragGestureRecognizer.setSourceActions(int),void,
java.awt.dnd.DragGestureRecognizer.getTriggerEvent(),InputEvent,the initial event that triggered the drag gesture
java.awt.dnd.DragGestureRecognizer.resetRecognizer(),void,
java.awt.dnd.DragGestureRecognizer.addDragGestureListener(DragGestureListener),void,
java.awt.dnd.DragGestureRecognizer.removeDragGestureListener(DragGestureListener),void,
"java.awt.dnd.DragGestureRecognizer.fireDragGestureRecognized(int,Point)",void,
java.awt.dnd.DragGestureRecognizer.appendEvent(InputEvent),void,
java.awt.dnd.DragSource.getDefaultDragSource(),DragSource,the platform DragSource
java.awt.dnd.DragSource.isDragImageSupported(),boolean,if the Drag Image support is available on this platform
"java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener,FlavorMap)",void,
"java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Transferable,DragSourceListener,FlavorMap)",void,
"java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener)",void,
"java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Transferable,DragSourceListener)",void,
"java.awt.dnd.DragSource.createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener)",DragSourceContext,the DragSourceContext
java.awt.dnd.DragSource.getFlavorMap(),FlavorMap,the FlavorMap for this DragSource
"java.awt.dnd.DragSource.createDragGestureRecognizer(Class&lt;T&gt;,Component,int,DragGestureListener)",&lt;T extends DragGestureRecognizer&gt;T,the new DragGestureRecognizer or null if the Toolkit.createDragGestureRecognizer method has no implementation available for the requested DragGestureRecognizer subclass and returns null
"java.awt.dnd.DragSource.createDefaultDragGestureRecognizer(Component,int,DragGestureListener)",DragGestureRecognizer,the new DragGestureRecognizer or null if the Toolkit.createDragGestureRecognizer method has no implementation available for the requested DragGestureRecognizer subclass and returns null
java.awt.dnd.DragSource.addDragSourceListener(DragSourceListener),void,
java.awt.dnd.DragSource.removeDragSourceListener(DragSourceListener),void,
java.awt.dnd.DragSource.getDragSourceListeners(),DragSourceListener[],all of this DragSource's DragSourceListeners or an empty array if no such listeners are currently registered
java.awt.dnd.DragSource.addDragSourceMotionListener(DragSourceMotionListener),void,
java.awt.dnd.DragSource.removeDragSourceMotionListener(DragSourceMotionListener),void,
java.awt.dnd.DragSource.getDragSourceMotionListeners(),DragSourceMotionListener[],all of this DragSource's DragSourceMotionListeners or an empty array if no such listeners are currently registered
java.awt.dnd.DragSource.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this DragSource, or an empty array if no such listeners have been added"
java.awt.dnd.DragSource.getDragThreshold(),int,the drag gesture motion threshold
java.awt.dnd.DragSourceAdapter.dragEnter(DragSourceDragEvent),void,
java.awt.dnd.DragSourceAdapter.dragOver(DragSourceDragEvent),void,
java.awt.dnd.DragSourceAdapter.dragMouseMoved(DragSourceDragEvent),void,
java.awt.dnd.DragSourceAdapter.dropActionChanged(DragSourceDragEvent),void,
java.awt.dnd.DragSourceAdapter.dragExit(DragSourceEvent),void,
java.awt.dnd.DragSourceAdapter.dragDropEnd(DragSourceDropEvent),void,
java.awt.dnd.DragSourceContext.getDragSource(),DragSource,the DragSource that instantiated this DragSourceContext
java.awt.dnd.DragSourceContext.getComponent(),Component,the Component that started the drag
java.awt.dnd.DragSourceContext.getTrigger(),DragGestureEvent,the Event that triggered the drag
java.awt.dnd.DragSourceContext.getSourceActions(),int,the drop actions supported by the drag source
java.awt.dnd.DragSourceContext.setCursor(Cursor),void,
java.awt.dnd.DragSourceContext.getCursor(),Cursor,the current drag Cursor
java.awt.dnd.DragSourceContext.addDragSourceListener(DragSourceListener),void,
java.awt.dnd.DragSourceContext.removeDragSourceListener(DragSourceListener),void,
java.awt.dnd.DragSourceContext.transferablesFlavorsChanged(),void,
java.awt.dnd.DragSourceContext.dragEnter(DragSourceDragEvent),void,
java.awt.dnd.DragSourceContext.dragOver(DragSourceDragEvent),void,
java.awt.dnd.DragSourceContext.dragExit(DragSourceEvent),void,
java.awt.dnd.DragSourceContext.dropActionChanged(DragSourceDragEvent),void,
java.awt.dnd.DragSourceContext.dragDropEnd(DragSourceDropEvent),void,
java.awt.dnd.DragSourceContext.dragMouseMoved(DragSourceDragEvent),void,
java.awt.dnd.DragSourceContext.getTransferable(),Transferable,the Transferable
"java.awt.dnd.DragSourceContext.updateCurrentCursor(int,int,int)",void,
java.awt.dnd.DragSourceDragEvent.getTargetActions(),int,the target drop action.
java.awt.dnd.DragSourceDragEvent.getGestureModifiers(),int,the current state of the input device modifiers
java.awt.dnd.DragSourceDragEvent.getGestureModifiersEx(),int,the current state of the input device extended modifiers
java.awt.dnd.DragSourceDragEvent.getUserAction(),int,the user drop action.
java.awt.dnd.DragSourceDragEvent.getDropAction(),int,the logical intersection of the target drop action and the set of drop actions supported by the drag source.
java.awt.dnd.DragSourceDropEvent.getDropSuccess(),boolean,"true if the drop target accepted the drop and successfully performed a drop action; false if the drop target rejected the drop or if the drop target accepted the drop, but failed to perform a drop action."
java.awt.dnd.DragSourceDropEvent.getDropAction(),int,"the action performed by the target on the subject of the drop if the drop target accepted the drop and the target drop action is supported by the drag source; otherwise, DnDConstants.ACTION_NONE."
java.awt.dnd.DragSourceEvent.getDragSourceContext(),DragSourceContext,the DragSourceContext that originated the event
java.awt.dnd.DragSourceEvent.getLocation(),Point,the Point indicating the cursor location or null if the cursor location is not specified
java.awt.dnd.DragSourceEvent.getX(),int,an integer indicating the horizontal coordinate of the cursor location or zero if the cursor location is not specified
java.awt.dnd.DragSourceEvent.getY(),int,an integer indicating the vertical coordinate of the cursor location or zero if the cursor location is not specified
java.awt.dnd.DropTarget.setComponent(Component),void,
java.awt.dnd.DropTarget.getComponent(),Component,the current Component
java.awt.dnd.DropTarget.setDefaultActions(int),void,
java.awt.dnd.DropTarget.getDefaultActions(),int,the current default actions
java.awt.dnd.DropTarget.setActive(boolean),void,
java.awt.dnd.DropTarget.isActive(),boolean,"true if active, false if not"
java.awt.dnd.DropTarget.addDropTargetListener(DropTargetListener),void,
java.awt.dnd.DropTarget.removeDropTargetListener(DropTargetListener),void,
java.awt.dnd.DropTarget.dragEnter(DropTargetDragEvent),void,
java.awt.dnd.DropTarget.dragOver(DropTargetDragEvent),void,
java.awt.dnd.DropTarget.dropActionChanged(DropTargetDragEvent),void,
java.awt.dnd.DropTarget.dragExit(DropTargetEvent),void,
java.awt.dnd.DropTarget.drop(DropTargetDropEvent),void,
java.awt.dnd.DropTarget.getFlavorMap(),FlavorMap,the FlavorMap for this DropTarget
java.awt.dnd.DropTarget.setFlavorMap(FlavorMap),void,
java.awt.dnd.DropTarget.addNotify(java.awt.peer.ComponentPeer),void,
java.awt.dnd.DropTarget.removeNotify(java.awt.peer.ComponentPeer),void,
java.awt.dnd.DropTarget.getDropTargetContext(),DropTargetContext,the DropTargetContext associated with this DropTarget.
java.awt.dnd.DropTarget.createDropTargetContext(),DropTargetContext,
"java.awt.dnd.DropTarget.createDropTargetAutoScroller(Component,Point)",DropTarget.DropTargetAutoScroller,
java.awt.dnd.DropTarget.initializeAutoscrolling(Point),void,
java.awt.dnd.DropTarget.updateAutoscroll(Point),void,
java.awt.dnd.DropTarget.clearAutoscroll(),void,
java.awt.dnd.DropTarget.DropTargetAutoScroller.updateLocation(Point),void,
java.awt.dnd.DropTarget.DropTargetAutoScroller.stop(),void,
java.awt.dnd.DropTarget.DropTargetAutoScroller.actionPerformed(ActionEvent),void,
java.awt.dnd.DropTargetAdapter.dragEnter(DropTargetDragEvent),void,
java.awt.dnd.DropTargetAdapter.dragOver(DropTargetDragEvent),void,
java.awt.dnd.DropTargetAdapter.dropActionChanged(DropTargetDragEvent),void,
java.awt.dnd.DropTargetAdapter.dragExit(DropTargetEvent),void,
java.awt.dnd.DropTargetContext.getDropTarget(),DropTarget,the DropTarget associated with this DropTargetContext
java.awt.dnd.DropTargetContext.getComponent(),Component,the Component associated with this Context
java.awt.dnd.DropTargetContext.addNotify(java.awt.dnd.peer.DropTargetContextPeer),void,
java.awt.dnd.DropTargetContext.removeNotify(),void,
java.awt.dnd.DropTargetContext.setTargetActions(int),void,
java.awt.dnd.DropTargetContext.getTargetActions(),int,the current actions acceptable to this DropTarget
java.awt.dnd.DropTargetContext.dropComplete(boolean),void,
java.awt.dnd.DropTargetContext.acceptDrag(int),void,
java.awt.dnd.DropTargetContext.rejectDrag(),void,
java.awt.dnd.DropTargetContext.acceptDrop(int),void,
java.awt.dnd.DropTargetContext.rejectDrop(),void,
java.awt.dnd.DropTargetContext.getCurrentDataFlavors(),DataFlavor[],a DataFlavor[] containing the supported DataFlavors of the Transferable operand.
java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList(),List&lt;DataFlavor&gt;,the currently available DataFlavors as a java.util.List
java.awt.dnd.DropTargetContext.isDataFlavorSupported(DataFlavor),boolean,if the DataFlavor specified is supported
java.awt.dnd.DropTargetContext.getTransferable(),Transferable,the Transferable
"java.awt.dnd.DropTargetContext.createTransferableProxy(Transferable,boolean)",Transferable,the new TransferableProxy instance.
java.awt.dnd.DropTargetDragEvent.getLocation(),Point,the current cursor location in Component's coords.
java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavors(),DataFlavor[],current DataFlavors from the DropTargetContext
java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavorsAsList(),List&lt;DataFlavor&gt;,a java.util.List of the Current DataFlavors
java.awt.dnd.DropTargetDragEvent.isDataFlavorSupported(DataFlavor),boolean,if a particular DataFlavor is supported
java.awt.dnd.DropTargetDragEvent.getSourceActions(),int,the source drop actions
java.awt.dnd.DropTargetDragEvent.getDropAction(),int,the user drop action
java.awt.dnd.DropTargetDragEvent.getTransferable(),Transferable,the Transferable associated with the drag operation
java.awt.dnd.DropTargetDragEvent.acceptDrag(int),void,
java.awt.dnd.DropTargetDragEvent.rejectDrag(),void,
java.awt.dnd.DropTargetDropEvent.getLocation(),Point,the current Cursor location in Component's coords.
java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors(),DataFlavor[],current DataFlavors
java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList(),List&lt;DataFlavor&gt;,the currently available DataFlavors as a java.util.List
java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(DataFlavor),boolean,if the DataFlavor specified is available from the source
java.awt.dnd.DropTargetDropEvent.getSourceActions(),int,the source drop actions.
java.awt.dnd.DropTargetDropEvent.getDropAction(),int,the user drop actions.
java.awt.dnd.DropTargetDropEvent.getTransferable(),Transferable,the Transferable associated with the drop
java.awt.dnd.DropTargetDropEvent.acceptDrop(int),void,
java.awt.dnd.DropTargetDropEvent.rejectDrop(),void,
java.awt.dnd.DropTargetDropEvent.dropComplete(boolean),void,
java.awt.dnd.DropTargetDropEvent.isLocalTransfer(),boolean,if the Source is in the same JVM
java.awt.dnd.DropTargetEvent.getDropTargetContext(),DropTargetContext,the DropTargetContext
java.awt.dnd.MouseDragGestureRecognizer.registerListeners(),void,
java.awt.dnd.MouseDragGestureRecognizer.unregisterListeners(),void,
java.awt.dnd.MouseDragGestureRecognizer.mouseClicked(MouseEvent),void,
java.awt.dnd.MouseDragGestureRecognizer.mousePressed(MouseEvent),void,
java.awt.dnd.MouseDragGestureRecognizer.mouseReleased(MouseEvent),void,
java.awt.dnd.MouseDragGestureRecognizer.mouseEntered(MouseEvent),void,
java.awt.dnd.MouseDragGestureRecognizer.mouseExited(MouseEvent),void,
java.awt.dnd.MouseDragGestureRecognizer.mouseDragged(MouseEvent),void,
java.awt.dnd.MouseDragGestureRecognizer.mouseMoved(MouseEvent),void,
java.awt.event.ActionEvent.getActionCommand(),String,the string identifying the command for this event
java.awt.event.ActionEvent.getWhen(),long,this event's timestamp
java.awt.event.ActionEvent.getModifiers(),int,the bitwise-or of the modifier constants
java.awt.event.ActionEvent.paramString(),String,a string identifying the event and its associated command
java.awt.event.AdjustmentEvent.getAdjustable(),Adjustable,the Adjustable object where this event originated
java.awt.event.AdjustmentEvent.getValue(),int,the current value in the adjustment event
java.awt.event.AdjustmentEvent.getAdjustmentType(),int,
java.awt.event.AdjustmentEvent.getValueIsAdjusting(),boolean,"true if this is one of multiple adjustment events, otherwise returns false"
java.awt.event.AdjustmentEvent.paramString(),String,a string representation of this event
java.awt.event.AWTEventListenerProxy.eventDispatched(AWTEvent),void,
java.awt.event.AWTEventListenerProxy.getEventMask(),long,the event mask associated with the listener
java.awt.event.ComponentAdapter.componentResized(ComponentEvent),void,
java.awt.event.ComponentAdapter.componentMoved(ComponentEvent),void,
java.awt.event.ComponentAdapter.componentShown(ComponentEvent),void,
java.awt.event.ComponentAdapter.componentHidden(ComponentEvent),void,
java.awt.event.ComponentEvent.getComponent(),Component,"the Component object that originated the event, or null if the object is not a Component."
java.awt.event.ComponentEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.ContainerAdapter.componentAdded(ContainerEvent),void,
java.awt.event.ContainerAdapter.componentRemoved(ContainerEvent),void,
java.awt.event.ContainerEvent.getContainer(),Container,"the Container object that originated the event, or null if the object is not a Container."
java.awt.event.ContainerEvent.getChild(),Component,the Component object that was added or removed
java.awt.event.ContainerEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.FocusAdapter.focusGained(FocusEvent),void,
java.awt.event.FocusAdapter.focusLost(FocusEvent),void,
java.awt.event.FocusEvent.isTemporary(),boolean,true if the focus change is temporary; false otherwise
java.awt.event.FocusEvent.getOppositeComponent(),Component,"the other Component involved in the focus change, or null"
java.awt.event.FocusEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.HierarchyBoundsAdapter.ancestorMoved(HierarchyEvent),void,
java.awt.event.HierarchyBoundsAdapter.ancestorResized(HierarchyEvent),void,
java.awt.event.HierarchyEvent.getComponent(),Component,"the Component object that originated the event, or null if the object is not a Component."
java.awt.event.HierarchyEvent.getChanged(),Component,the changed Component
java.awt.event.HierarchyEvent.getChangedParent(),Container,the parent of the changed Component
java.awt.event.HierarchyEvent.getChangeFlags(),long,"the bitmask, or 0 if this is not an HIERARCHY_CHANGED event"
java.awt.event.HierarchyEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.InputEvent.getMaskForButton(int),int,
java.awt.event.InputEvent.isShiftDown(),boolean,
java.awt.event.InputEvent.isControlDown(),boolean,
java.awt.event.InputEvent.isMetaDown(),boolean,
java.awt.event.InputEvent.isAltDown(),boolean,
java.awt.event.InputEvent.isAltGraphDown(),boolean,
java.awt.event.InputEvent.getWhen(),long,
java.awt.event.InputEvent.getModifiers(),int,
java.awt.event.InputEvent.getModifiersEx(),int,
java.awt.event.InputEvent.consume(),void,
java.awt.event.InputEvent.isConsumed(),boolean,
java.awt.event.InputEvent.getModifiersExText(int),String,a text description of the combination of extended modifier keys and mouse buttons that were held down during the event.
java.awt.event.InputMethodEvent.getText(),AttributedCharacterIterator,the text. Always null for CARET_POSITION_CHANGED; may be null for INPUT_METHOD_TEXT_CHANGED if there's no composed or committed text.
java.awt.event.InputMethodEvent.getCommittedCharacterCount(),int,
java.awt.event.InputMethodEvent.getCaret(),TextHitInfo,the caret (a.k.a. insertion point). Null if there's no caret within current composed text.
java.awt.event.InputMethodEvent.getVisiblePosition(),TextHitInfo,the position that's most important to be visible. Null if there's no recommendation for a visible position within current composed text.
java.awt.event.InputMethodEvent.consume(),void,
java.awt.event.InputMethodEvent.isConsumed(),boolean,
java.awt.event.InputMethodEvent.getWhen(),long,this event's timestamp
java.awt.event.InputMethodEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.InvocationEvent.dispatch(),void,
java.awt.event.InvocationEvent.getException(),Exception,A reference to the Exception if one was thrown; null if no Exception was thrown or if this InvocationEvent does not catch exceptions
java.awt.event.InvocationEvent.getThrowable(),Throwable,A reference to the Throwable if one was thrown; null if no Throwable was thrown or if this InvocationEvent does not catch Throwables
java.awt.event.InvocationEvent.getWhen(),long,this event's timestamp
java.awt.event.InvocationEvent.isDispatched(),boolean,"true if the event has been dispatched, or any exception has been thrown while dispatching, false otherwise"
java.awt.event.InvocationEvent.paramString(),String,A string identifying the event and its attributes
java.awt.event.ItemEvent.getItemSelectable(),ItemSelectable,the ItemSelectable object that originated the event.
java.awt.event.ItemEvent.getItem(),Object,the item (object) that was affected by the event
java.awt.event.ItemEvent.getStateChange(),int,an integer that indicates whether the item was selected or deselected
java.awt.event.ItemEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.KeyAdapter.keyTyped(KeyEvent),void,
java.awt.event.KeyAdapter.keyPressed(KeyEvent),void,
java.awt.event.KeyAdapter.keyReleased(KeyEvent),void,
java.awt.event.KeyEvent.getKeyCode(),int,"the integer code for an actual key on the keyboard. (For KEY_TYPED events, the keyCode is VK_UNDEFINED.)"
java.awt.event.KeyEvent.setKeyCode(int),void,
java.awt.event.KeyEvent.getKeyChar(),char,"the Unicode character defined for this key event. If no valid Unicode character exists for this key event, CHAR_UNDEFINED is returned."
java.awt.event.KeyEvent.setKeyChar(char),void,
java.awt.event.KeyEvent.setModifiers(int),void,
java.awt.event.KeyEvent.getKeyLocation(),int,the location of the key that was pressed or released. Always returns KEY_LOCATION_UNKNOWN for KEY_TYPED events.
java.awt.event.KeyEvent.getKeyText(int),String,"a string containing a text description for a physical key, identified by its keyCode"
java.awt.event.KeyEvent.getKeyModifiersText(int),String,string a text description of the combination of modifier keys that were held down during the event
java.awt.event.KeyEvent.isActionKey(),boolean,"true if the key is an ""action"" key, false otherwise"
java.awt.event.KeyEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.KeyEvent.getExtendedKeyCode(),int,
java.awt.event.KeyEvent.getExtendedKeyCodeForChar(int),int,"for a unicode character with a corresponding VK_ constant -- this VK_ constant; for a character appearing on the primary level of a known keyboard layout -- a unique integer. If a character does not appear on the primary level of a known keyboard, VK_UNDEFINED is returned."
java.awt.event.MouseAdapter.mouseClicked(MouseEvent),void,
java.awt.event.MouseAdapter.mousePressed(MouseEvent),void,
java.awt.event.MouseAdapter.mouseReleased(MouseEvent),void,
java.awt.event.MouseAdapter.mouseEntered(MouseEvent),void,
java.awt.event.MouseAdapter.mouseExited(MouseEvent),void,
java.awt.event.MouseAdapter.mouseWheelMoved(MouseWheelEvent),void,
java.awt.event.MouseAdapter.mouseDragged(MouseEvent),void,
java.awt.event.MouseAdapter.mouseMoved(MouseEvent),void,
java.awt.event.MouseEvent.getLocationOnScreen(),Point,a Point object containing the absolute x and y coordinates.
java.awt.event.MouseEvent.getXOnScreen(),int,x an integer indicating absolute horizontal position.
java.awt.event.MouseEvent.getYOnScreen(),int,y an integer indicating absolute vertical position.
java.awt.event.MouseEvent.getModifiersEx(),int,
java.awt.event.MouseEvent.getX(),int,x an integer indicating horizontal position relative to the component
java.awt.event.MouseEvent.getY(),int,y an integer indicating vertical position relative to the component
java.awt.event.MouseEvent.getPoint(),Point,a Point object containing the x and y coordinates relative to the source component
"java.awt.event.MouseEvent.translatePoint(int,int)",void,
java.awt.event.MouseEvent.getClickCount(),int,integer value for the number of clicks
java.awt.event.MouseEvent.getButton(),int,
java.awt.event.MouseEvent.isPopupTrigger(),boolean,"boolean, true if this event is the popup menu trigger for this platform"
java.awt.event.MouseEvent.getMouseModifiersText(int),String,string string text description of the combination of modifier keys and mouse buttons that were down during the event
java.awt.event.MouseEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.MouseMotionAdapter.mouseDragged(MouseEvent),void,
java.awt.event.MouseMotionAdapter.mouseMoved(MouseEvent),void,
java.awt.event.MouseWheelEvent.getScrollType(),int,
java.awt.event.MouseWheelEvent.getScrollAmount(),int,"number of units to scroll, or an undefined value if getScrollType returns MouseWheelEvent.WHEEL_BLOCK_SCROLL"
java.awt.event.MouseWheelEvent.getWheelRotation(),int,"negative values if the mouse wheel was rotated up/away from the user, and positive values if the mouse wheel was rotated down/ towards the user"
java.awt.event.MouseWheelEvent.getPreciseWheelRotation(),double,"negative values if the mouse wheel was rotated up or away from the user, and positive values if the mouse wheel was rotated down or towards the user"
java.awt.event.MouseWheelEvent.getUnitsToScroll(),int,"the number of units to scroll based on the direction and amount of mouse wheel rotation, and on the wheel scrolling settings of the native platform"
java.awt.event.MouseWheelEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.PaintEvent.getUpdateRect(),Rectangle,
java.awt.event.PaintEvent.setUpdateRect(Rectangle),void,
java.awt.event.PaintEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.TextEvent.paramString(),String,a string identifying the event and its attributes
java.awt.event.WindowAdapter.windowOpened(WindowEvent),void,
java.awt.event.WindowAdapter.windowClosing(WindowEvent),void,
java.awt.event.WindowAdapter.windowClosed(WindowEvent),void,
java.awt.event.WindowAdapter.windowIconified(WindowEvent),void,
java.awt.event.WindowAdapter.windowDeiconified(WindowEvent),void,
java.awt.event.WindowAdapter.windowActivated(WindowEvent),void,
java.awt.event.WindowAdapter.windowDeactivated(WindowEvent),void,
java.awt.event.WindowAdapter.windowStateChanged(WindowEvent),void,
java.awt.event.WindowAdapter.windowGainedFocus(WindowEvent),void,
java.awt.event.WindowAdapter.windowLostFocus(WindowEvent),void,
java.awt.event.WindowEvent.getWindow(),Window,the Window object that originated the event
java.awt.event.WindowEvent.getOppositeWindow(),Window,"the other Window involved in the focus or activation change, or null"
java.awt.event.WindowEvent.getOldState(),int,
java.awt.event.WindowEvent.getNewState(),int,
java.awt.event.WindowEvent.paramString(),String,a string identifying the event and its attributes
java.awt.font.FontRenderContext.isTransformed(),boolean,true if this FontRenderContext object has a non-identity AffineTransform attribute. false otherwise.
java.awt.font.FontRenderContext.getTransformType(),int,the type of the transform.
java.awt.font.FontRenderContext.getTransform(),AffineTransform,the AffineTransform of this FontRenderContext.
java.awt.font.FontRenderContext.isAntiAliased(),boolean,"true, if text is anti-aliased in this FontRenderContext; false otherwise."
java.awt.font.FontRenderContext.usesFractionalMetrics(),boolean,"true, if layout should be performed with fractional metrics; false otherwise. in this FontRenderContext."
java.awt.font.FontRenderContext.getAntiAliasingHint(),Object,text anti-aliasing rendering mode hint used in this FontRenderContext.
java.awt.font.FontRenderContext.getFractionalMetricsHint(),Object,the text fractional metrics rendering mode hint used in this FontRenderContext.
java.awt.font.FontRenderContext.equals(Object),boolean,true if the specified object is equal to this FontRenderContext; false otherwise.
java.awt.font.FontRenderContext.equals(FontRenderContext),boolean,true if rhs is equal to this FontRenderContext; false otherwise.
java.awt.font.FontRenderContext.hashCode(),int,a hash code value for this object.
java.awt.font.GlyphMetrics.getAdvance(),float,the advance of the glyph
java.awt.font.GlyphMetrics.getAdvanceX(),float,the x-component of the advance of the glyph
java.awt.font.GlyphMetrics.getAdvanceY(),float,the y-component of the advance of the glyph
java.awt.font.GlyphMetrics.getBounds2D(),Rectangle2D,a Rectangle2D that is the bounds of the glyph.
java.awt.font.GlyphMetrics.getLSB(),float,the left side bearing of the glyph.
java.awt.font.GlyphMetrics.getRSB(),float,the right side bearing of the glyph.
java.awt.font.GlyphMetrics.getType(),int,the raw glyph type code.
java.awt.font.GlyphMetrics.isStandard(),boolean,true if this is a standard glyph; false otherwise.
java.awt.font.GlyphMetrics.isLigature(),boolean,true if this is a ligature glyph; false otherwise.
java.awt.font.GlyphMetrics.isCombining(),boolean,true if this is a combining glyph; false otherwise.
java.awt.font.GlyphMetrics.isComponent(),boolean,true if this is a component glyph; false otherwise.
java.awt.font.GlyphMetrics.isWhitespace(),boolean,true if this is a whitespace glyph; false otherwise.
java.awt.font.GlyphVector.getFont(),abstractFont,Font used to create this GlyphVector.
java.awt.font.GlyphVector.getFontRenderContext(),abstractFontRenderContext,FontRenderContext used to create this GlyphVector.
java.awt.font.GlyphVector.performDefaultLayout(),abstractvoid,
java.awt.font.GlyphVector.getNumGlyphs(),abstractint,number of glyphs in this GlyphVector.
java.awt.font.GlyphVector.getGlyphCode(int),abstractint,the glyphcode of the glyph at the specified glyphIndex.
"java.awt.font.GlyphVector.getGlyphCodes(int,int,int[])",abstractint[],an array of glyphcodes for the specified glyphs.
java.awt.font.GlyphVector.getGlyphCharIndex(int),int,the index of the first character represented by the glyph
"java.awt.font.GlyphVector.getGlyphCharIndices(int,int,int[])",int[],"an array of character indices, one per glyph."
java.awt.font.GlyphVector.getLogicalBounds(),abstractRectangle2D,a Rectangle2D that is the logical bounds of this GlyphVector.
java.awt.font.GlyphVector.getVisualBounds(),abstractRectangle2D,a Rectangle2D that is the bounding box of this GlyphVector.
"java.awt.font.GlyphVector.getPixelBounds(FontRenderContext,float,float)",Rectangle,a Rectangle bounding the pixels that would be affected.
java.awt.font.GlyphVector.getOutline(),abstractShape,a Shape that is the outline of this GlyphVector.
"java.awt.font.GlyphVector.getOutline(float,float)",abstractShape,a Shape that is the outline of this GlyphVector when rendered at the specified coordinates.
java.awt.font.GlyphVector.getGlyphOutline(int),abstractShape,a Shape that is the outline of the glyph at the specified glyphIndex of this GlyphVector.
"java.awt.font.GlyphVector.getGlyphOutline(int,float,float)",Shape,a Shape that is the outline of the glyph at the specified glyphIndex of this GlyphVector when rendered at the specified coordinates.
java.awt.font.GlyphVector.getGlyphPosition(int),abstractPoint2D,a Point2D object that is the position of the glyph at the specified glyphIndex.
"java.awt.font.GlyphVector.setGlyphPosition(int,Point2D)",abstractvoid,
java.awt.font.GlyphVector.getGlyphTransform(int),abstractAffineTransform,an AffineTransform that is the transform of the glyph at the specified glyphIndex.
"java.awt.font.GlyphVector.setGlyphTransform(int,AffineTransform)",abstractvoid,
java.awt.font.GlyphVector.getLayoutFlags(),int,an int containing the flags describing the state
"java.awt.font.GlyphVector.getGlyphPositions(int,int,float[])",abstractfloat[],an array of glyph positions specified by beginGlyphIndex and numEntries.
java.awt.font.GlyphVector.getGlyphLogicalBounds(int),abstractShape,a Shape that is the logical bounds of the glyph at the specified glyphIndex.
java.awt.font.GlyphVector.getGlyphVisualBounds(int),abstractShape,a Shape that is the visual bounds of the glyph at the specified glyphIndex.
"java.awt.font.GlyphVector.getGlyphPixelBounds(int,FontRenderContext,float,float)",Rectangle,a Rectangle bounding the pixels that would be affected.
java.awt.font.GlyphVector.getGlyphMetrics(int),abstractGlyphMetrics,a GlyphMetrics object that represents the metrics of the glyph at the specified glyphIndex into this GlyphVector.
java.awt.font.GlyphVector.getGlyphJustificationInfo(int),abstractGlyphJustificationInfo,a GlyphJustificationInfo object that represents the justification properties of the glyph at the specified glyphIndex into this GlyphVector.
java.awt.font.GlyphVector.equals(GlyphVector),abstractboolean,true if the specified GlyphVector equals this GlyphVector; false otherwise.
java.awt.font.GraphicAttribute.getAscent(),abstractfloat,the ascent of this GraphicAttribute.
java.awt.font.GraphicAttribute.getDescent(),abstractfloat,the descent of this GraphicAttribute.
java.awt.font.GraphicAttribute.getAdvance(),abstractfloat,the advance of this GraphicAttribute.
java.awt.font.GraphicAttribute.getBounds(),Rectangle2D,a Rectangle2D that encloses all of the bits rendered by this GraphicAttribute.
java.awt.font.GraphicAttribute.getOutline(AffineTransform),Shape,"a Shape representing this graphic attribute, suitable for stroking or filling."
"java.awt.font.GraphicAttribute.draw(Graphics2D,float,float)",abstractvoid,
java.awt.font.GraphicAttribute.getAlignment(),int,the alignment of this GraphicAttribute.
java.awt.font.GraphicAttribute.getJustificationInfo(),GlyphJustificationInfo,a GlyphJustificationInfo object that contains the justification information for this GraphicAttribute.
java.awt.font.ImageGraphicAttribute.getAscent(),float,the ascent of this ImageGraphicAttribute.
java.awt.font.ImageGraphicAttribute.getDescent(),float,the descent of this ImageGraphicAttribute.
java.awt.font.ImageGraphicAttribute.getAdvance(),float,the advance of this ImageGraphicAttribute.
java.awt.font.ImageGraphicAttribute.getBounds(),Rectangle2D,a Rectangle2D that encloses all of the bits rendered by this ImageGraphicAttribute.
"java.awt.font.ImageGraphicAttribute.draw(Graphics2D,float,float)",void,
java.awt.font.ImageGraphicAttribute.hashCode(),int,a hash code value for this object.
java.awt.font.ImageGraphicAttribute.equals(Object),boolean,true if this ImageGraphicAttribute equals rhs; false otherwise.
java.awt.font.ImageGraphicAttribute.equals(ImageGraphicAttribute),boolean,true if this ImageGraphicAttribute equals rhs; false otherwise.
"java.awt.font.LayoutPath.pointToPath(Point2D,Point2D)",abstractboolean,"true if the point is associated with the portion of the path preceding the location, false if it is associated with the portion following. The default, if the location is not at a break or sharp bend in the path, is to return true."
"java.awt.font.LayoutPath.pathToPoint(Point2D,boolean,Point2D)",abstractvoid,
java.awt.font.LineBreakMeasurer.nextOffset(float),int,an offset in the text representing the limit of the next TextLayout.
"java.awt.font.LineBreakMeasurer.nextOffset(float,int,boolean)",int,an offset in the text representing the limit of the next TextLayout
java.awt.font.LineBreakMeasurer.nextLayout(float),TextLayout,"a TextLayout, beginning at the current position, which represents the next line fitting within wrappingWidth"
"java.awt.font.LineBreakMeasurer.nextLayout(float,int,boolean)",TextLayout,"a TextLayout, beginning at the current position, that represents the next line fitting within wrappingWidth. If the current position is at the end of the text used by this LineBreakMeasurer, null is returned"
java.awt.font.LineBreakMeasurer.getPosition(),int,the current position of this LineBreakMeasurer
java.awt.font.LineBreakMeasurer.setPosition(int),void,
"java.awt.font.LineBreakMeasurer.insertChar(AttributedCharacterIterator,int)",void,
"java.awt.font.LineBreakMeasurer.deleteChar(AttributedCharacterIterator,int)",void,
java.awt.font.LineMetrics.getNumChars(),abstractint,the number of characters (char values) in the text with which this LineMetrics was created.
java.awt.font.LineMetrics.getAscent(),abstractfloat,the ascent of the text.
java.awt.font.LineMetrics.getDescent(),abstractfloat,the descent of the text.
java.awt.font.LineMetrics.getLeading(),abstractfloat,the leading of the text.
java.awt.font.LineMetrics.getHeight(),abstractfloat,the height of the text.
java.awt.font.LineMetrics.getBaselineIndex(),abstractint,the baseline of the text.
java.awt.font.LineMetrics.getBaselineOffsets(),abstractfloat[],the baseline offsets of the text.
java.awt.font.LineMetrics.getStrikethroughOffset(),abstractfloat,the position of the strike-through line.
java.awt.font.LineMetrics.getStrikethroughThickness(),abstractfloat,the thickness of the strike-through line.
java.awt.font.LineMetrics.getUnderlineOffset(),abstractfloat,the position of the underline.
java.awt.font.LineMetrics.getUnderlineThickness(),abstractfloat,the thickness of the underline.
java.awt.font.NumericShaper.getShaper(int),NumericShaper,a non-contextual numeric shaper
java.awt.font.NumericShaper.getShaper(NumericShaper.Range),NumericShaper,a non-contextual NumericShaper.
java.awt.font.NumericShaper.getContextualShaper(int),NumericShaper,a shaper for the specified ranges
java.awt.font.NumericShaper.getContextualShaper(Set&lt;NumericShaper.Range&gt;),NumericShaper,a contextual shaper for the specified ranges
"java.awt.font.NumericShaper.getContextualShaper(int,int)",NumericShaper,a shaper for the specified Unicode ranges.
"java.awt.font.NumericShaper.getContextualShaper(Set&lt;NumericShaper.Range&gt;,NumericShaper.Range)",NumericShaper,a contextual shaper for the specified Unicode ranges.
"java.awt.font.NumericShaper.shape(char[],int,int)",void,
"java.awt.font.NumericShaper.shape(char[],int,int,int)",void,
"java.awt.font.NumericShaper.shape(char[],int,int,NumericShaper.Range)",void,
java.awt.font.NumericShaper.isContextual(),boolean,true if this shaper is contextual; false otherwise.
java.awt.font.NumericShaper.getRanges(),int,the values for all the ranges to be shaped.
java.awt.font.NumericShaper.getRangeSet(),Set&lt;NumericShaper.Range&gt;,all the Unicode ranges to be shaped.
java.awt.font.NumericShaper.hashCode(),int,this shaper's hash code.
java.awt.font.NumericShaper.equals(Object),boolean,true if o is an instance of NumericShaper and shapes in the same way; false otherwise.
java.awt.font.NumericShaper.toString(),String,a String describing this shaper.
java.awt.font.ShapeGraphicAttribute.getAscent(),float,the ascent of this ShapeGraphicAttribute.
java.awt.font.ShapeGraphicAttribute.getDescent(),float,the descent of this ShapeGraphicAttribute.
java.awt.font.ShapeGraphicAttribute.getAdvance(),float,the advance of this ShapeGraphicAttribute.
"java.awt.font.ShapeGraphicAttribute.draw(Graphics2D,float,float)",void,
java.awt.font.ShapeGraphicAttribute.getBounds(),Rectangle2D,a Rectangle2D that encloses all of the bits rendered by this ShapeGraphicAttribute.
java.awt.font.ShapeGraphicAttribute.getOutline(AffineTransform),Shape,"the Shape representing this graphic attribute, suitable for stroking or filling."
java.awt.font.ShapeGraphicAttribute.hashCode(),int,a hash code value for this ShapeGraphicAttribute.
java.awt.font.ShapeGraphicAttribute.equals(Object),boolean,true if this ShapeGraphicAttribute equals rhs; false otherwise.
java.awt.font.ShapeGraphicAttribute.equals(ShapeGraphicAttribute),boolean,true if this ShapeGraphicAttribute equals rhs; false otherwise.
java.awt.font.TextAttribute.readResolve(),Object,the resolved Attribute object
java.awt.font.TextHitInfo.getCharIndex(),int,the index of the character hit.
java.awt.font.TextHitInfo.isLeadingEdge(),boolean,true if the leading edge of the character was hit; false otherwise.
java.awt.font.TextHitInfo.getInsertionIndex(),int,the insertion index.
java.awt.font.TextHitInfo.hashCode(),int,"the hash code of this TextHitInfo, which is also the charIndex of this TextHitInfo."
java.awt.font.TextHitInfo.equals(Object),boolean,true if the specified Object equals this TextHitInfo; false otherwise.
java.awt.font.TextHitInfo.equals(TextHitInfo),boolean,true if the specified TextHitInfo has the same charIndex and isLeadingEdge as this TextHitInfo.
java.awt.font.TextHitInfo.toString(),String,a String representing this TextHitInfo.
java.awt.font.TextHitInfo.leading(int),TextHitInfo,a TextHitInfo on the leading edge of the character at the specified charIndex.
java.awt.font.TextHitInfo.trailing(int),TextHitInfo,a TextHitInfo on the trailing edge of the character at the specified charIndex.
java.awt.font.TextHitInfo.beforeOffset(int),TextHitInfo,a TextHitInfo at the specified offset.
java.awt.font.TextHitInfo.afterOffset(int),TextHitInfo,a TextHitInfo at the specified offset.
java.awt.font.TextHitInfo.getOtherHit(),TextHitInfo,a TextHitInfo on the other side of the insertion point.
java.awt.font.TextHitInfo.getOffsetHit(int),TextHitInfo,a TextHitInfo whose charIndex is offset by delta from the charIndex of this TextHitInfo.
java.awt.font.TextLayout.clone(),Object,a clone of this instance.
java.awt.font.TextLayout.getJustifiedLayout(float),TextLayout,a TextLayout justified to the specified width.
java.awt.font.TextLayout.handleJustify(float),void,
java.awt.font.TextLayout.getBaseline(),byte,the baseline of this TextLayout.
java.awt.font.TextLayout.getBaselineOffsets(),float[],the offsets array containing the baselines used for this TextLayout.
java.awt.font.TextLayout.getAdvance(),float,the advance of this TextLayout.
java.awt.font.TextLayout.getVisibleAdvance(),float,the advance of this TextLayout without the trailing whitespace.
java.awt.font.TextLayout.getAscent(),float,the ascent of this TextLayout.
java.awt.font.TextLayout.getDescent(),float,the descent of this TextLayout.
java.awt.font.TextLayout.getLeading(),float,the leading of this TextLayout.
java.awt.font.TextLayout.getBounds(),Rectangle2D,a Rectangle2D that is the bounds of this TextLayout.
"java.awt.font.TextLayout.getPixelBounds(FontRenderContext,float,float)",Rectangle,a Rectangle bounding the pixels that would be affected.
java.awt.font.TextLayout.isLeftToRight(),boolean,true if the base direction of this TextLayout is left-to-right; false otherwise.
java.awt.font.TextLayout.isVertical(),boolean,true if this TextLayout is vertical; false otherwise.
java.awt.font.TextLayout.getCharacterCount(),int,the number of characters in this TextLayout.
"java.awt.font.TextLayout.getCaretInfo(TextHitInfo,Rectangle2D)",float[],a two-element array containing the position and slope of the caret. The returned caret info is in baseline-relative coordinates.
java.awt.font.TextLayout.getCaretInfo(TextHitInfo),float[],the information about a caret corresponding to a hit. The returned caret info is in baseline-relative coordinates.
java.awt.font.TextLayout.getNextRightHit(TextHitInfo),TextHitInfo,a hit whose caret appears at the next position to the right (bottom) of the caret of the provided hit or null.
"java.awt.font.TextLayout.getNextRightHit(int,TextLayout.CaretPolicy)",TextHitInfo,"a hit whose caret appears at the next position to the right (bottom) of the caret of the provided hit, or null."
java.awt.font.TextLayout.getNextRightHit(int),TextHitInfo,"a hit whose caret appears at the next position to the right (bottom) of the caret of the provided hit, or null."
java.awt.font.TextLayout.getNextLeftHit(TextHitInfo),TextHitInfo,"a hit whose caret appears at the next position to the left (top) of the caret of the provided hit, or null."
"java.awt.font.TextLayout.getNextLeftHit(int,TextLayout.CaretPolicy)",TextHitInfo,"a hit whose caret appears at the next position to the left (top) of the caret of the provided hit, or null."
java.awt.font.TextLayout.getNextLeftHit(int),TextHitInfo,"a hit whose caret appears at the next position to the left (top) of the caret of the provided hit, or null."
java.awt.font.TextLayout.getVisualOtherHit(TextHitInfo),TextHitInfo,a hit that is on the opposite side of the specified hit's caret.
"java.awt.font.TextLayout.getCaretShape(TextHitInfo,Rectangle2D)",Shape,a Shape representing the caret. The returned shape is in standard coordinates.
java.awt.font.TextLayout.getCaretShape(TextHitInfo),Shape,a Shape representing the caret. The returned shape is in standard coordinates.
java.awt.font.TextLayout.getCharacterLevel(int),byte,the level of the character at the specified index.
"java.awt.font.TextLayout.getCaretShapes(int,Rectangle2D,TextLayout.CaretPolicy)",Shape[],"an array of two paths. Element zero is the strong caret. If there are two carets, element one is the weak caret, otherwise it is null. The returned shapes are in standard coordinates."
"java.awt.font.TextLayout.getCaretShapes(int,Rectangle2D)",Shape[],two paths corresponding to the strong and weak caret as defined by the DEFAULT_CARET_POLICY. These are in standard coordinates.
java.awt.font.TextLayout.getCaretShapes(int),Shape[],two paths corresponding to the strong and weak caret as defined by the DEFAULT_CARET_POLICY. These are in standard coordinates.
"java.awt.font.TextLayout.getLogicalRangesForVisualSelection(TextHitInfo,TextHitInfo)",int[],an array of integers representing start/limit pairs for the selected ranges.
"java.awt.font.TextLayout.getVisualHighlightShape(TextHitInfo,TextHitInfo,Rectangle2D)",Shape,a Shape enclosing the selection. This is in standard coordinates.
"java.awt.font.TextLayout.getVisualHighlightShape(TextHitInfo,TextHitInfo)",Shape,a Shape enclosing the selection. This is in standard coordinates.
"java.awt.font.TextLayout.getLogicalHighlightShape(int,int,Rectangle2D)",Shape,an area enclosing the selection. This is in standard coordinates.
"java.awt.font.TextLayout.getLogicalHighlightShape(int,int)",Shape,a Shape enclosing the selection. This is in standard coordinates.
"java.awt.font.TextLayout.getBlackBoxBounds(int,int)",Shape,a Shape enclosing the black box bounds. This is in standard coordinates.
"java.awt.font.TextLayout.hitTestChar(float,float,Rectangle2D)",TextHitInfo,a hit describing the character and edge (leading or trailing) under the specified point.
"java.awt.font.TextLayout.hitTestChar(float,float)",TextHitInfo,a hit describing the character and edge (leading or trailing) under the specified point.
java.awt.font.TextLayout.hashCode(),int,the hash code of this TextLayout.
java.awt.font.TextLayout.equals(Object),boolean,true if the specified Object equals this TextLayout; false otherwise.
java.awt.font.TextLayout.equals(TextLayout),boolean,true if the specified TextLayout equals this TextLayout.
java.awt.font.TextLayout.toString(),String,the textLine of this TextLayout as a String.
"java.awt.font.TextLayout.draw(Graphics2D,float,float)",void,
java.awt.font.TextLayout.getOutline(AffineTransform),Shape,a Shape that is the outline of this TextLayout. This is in standard coordinates.
java.awt.font.TextLayout.getLayoutPath(),LayoutPath,the layout path
"java.awt.font.TextLayout.hitToPoint(TextHitInfo,Point2D)",void,
"java.awt.font.TextLayout.CaretPolicy.getStrongCaret(TextHitInfo,TextHitInfo,TextLayout)",TextHitInfo,"hit1 or hit2 (or an equivalent TextHitInfo), indicating the strong caret."
java.awt.font.TextMeasurer.clone(),Object,a clone of this instance.
"java.awt.font.TextMeasurer.getLineBreakIndex(int,float)",int,"the index after the last character that will fit on a line beginning at start, which is not longer than maxAdvance in graphical width"
"java.awt.font.TextMeasurer.getAdvanceBetween(int,int)",float,the graphical width of a line beginning at start and including characters up to limit
"java.awt.font.TextMeasurer.getLayout(int,int)",TextLayout,a TextLayout for the characters beginning at start up to (but not including) limit
"java.awt.font.TextMeasurer.insertChar(AttributedCharacterIterator,int)",void,
"java.awt.font.TextMeasurer.deleteChar(AttributedCharacterIterator,int)",void,
java.awt.font.TransformAttribute.getTransform(),AffineTransform,a AffineTransform that is a copy of the wrapped transform of this TransformAttribute.
java.awt.font.TransformAttribute.isIdentity(),boolean,true if the wrapped transform is an identity transform; false otherwise.
java.awt.font.TransformAttribute.hashCode(),int,
java.awt.font.TransformAttribute.equals(Object),boolean,true if the argument is a TransformAttribute whose transform is equal to this TransformAttribute's transform.
"java.awt.geom.AffineTransform.getTranslateInstance(double,double)",AffineTransform,"an AffineTransform object that represents a translation transformation, created with the specified vector."
java.awt.geom.AffineTransform.getRotateInstance(double),AffineTransform,"an AffineTransform object that is a rotation transformation, created with the specified angle of rotation."
"java.awt.geom.AffineTransform.getRotateInstance(double,double,double)",AffineTransform,an AffineTransform object that rotates coordinates around the specified point by the specified angle of rotation.
"java.awt.geom.AffineTransform.getRotateInstance(double,double)",AffineTransform,an AffineTransform object that rotates coordinates according to the specified rotation vector.
"java.awt.geom.AffineTransform.getRotateInstance(double,double,double,double)",AffineTransform,an AffineTransform object that rotates coordinates around the specified point according to the specified rotation vector.
java.awt.geom.AffineTransform.getQuadrantRotateInstance(int),AffineTransform,an AffineTransform object that rotates coordinates by the specified number of quadrants.
"java.awt.geom.AffineTransform.getQuadrantRotateInstance(int,double,double)",AffineTransform,an AffineTransform object that rotates coordinates by the specified number of quadrants around the specified anchor point.
"java.awt.geom.AffineTransform.getScaleInstance(double,double)",AffineTransform,an AffineTransform object that scales coordinates by the specified factors.
"java.awt.geom.AffineTransform.getShearInstance(double,double)",AffineTransform,an AffineTransform object that shears coordinates by the specified multipliers.
java.awt.geom.AffineTransform.getType(),int,the OR combination of any of the indicated flags that apply to this transform
java.awt.geom.AffineTransform.getDeterminant(),double,the determinant of the matrix used to transform the coordinates.
java.awt.geom.AffineTransform.getMatrix(double[]),void,
java.awt.geom.AffineTransform.getScaleX(),double,a double value that is the X coordinate of the scaling element of the affine transformation matrix.
java.awt.geom.AffineTransform.getScaleY(),double,a double value that is the Y coordinate of the scaling element of the affine transformation matrix.
java.awt.geom.AffineTransform.getShearX(),double,a double value that is the X coordinate of the shearing element of the affine transformation matrix.
java.awt.geom.AffineTransform.getShearY(),double,a double value that is the Y coordinate of the shearing element of the affine transformation matrix.
java.awt.geom.AffineTransform.getTranslateX(),double,a double value that is the X coordinate of the translation element of the affine transformation matrix.
java.awt.geom.AffineTransform.getTranslateY(),double,a double value that is the Y coordinate of the translation element of the affine transformation matrix.
"java.awt.geom.AffineTransform.translate(double,double)",void,
java.awt.geom.AffineTransform.rotate(double),void,
"java.awt.geom.AffineTransform.rotate(double,double,double)",void,
"java.awt.geom.AffineTransform.rotate(double,double)",void,
"java.awt.geom.AffineTransform.rotate(double,double,double,double)",void,
java.awt.geom.AffineTransform.quadrantRotate(int),void,
"java.awt.geom.AffineTransform.quadrantRotate(int,double,double)",void,
"java.awt.geom.AffineTransform.scale(double,double)",void,
"java.awt.geom.AffineTransform.shear(double,double)",void,
java.awt.geom.AffineTransform.setToIdentity(),void,
"java.awt.geom.AffineTransform.setToTranslation(double,double)",void,
java.awt.geom.AffineTransform.setToRotation(double),void,
"java.awt.geom.AffineTransform.setToRotation(double,double,double)",void,
"java.awt.geom.AffineTransform.setToRotation(double,double)",void,
"java.awt.geom.AffineTransform.setToRotation(double,double,double,double)",void,
java.awt.geom.AffineTransform.setToQuadrantRotation(int),void,
"java.awt.geom.AffineTransform.setToQuadrantRotation(int,double,double)",void,
"java.awt.geom.AffineTransform.setToScale(double,double)",void,
"java.awt.geom.AffineTransform.setToShear(double,double)",void,
java.awt.geom.AffineTransform.setTransform(AffineTransform),void,
"java.awt.geom.AffineTransform.setTransform(double,double,double,double,double,double)",void,
java.awt.geom.AffineTransform.concatenate(AffineTransform),void,
java.awt.geom.AffineTransform.preConcatenate(AffineTransform),void,
java.awt.geom.AffineTransform.createInverse(),AffineTransform,a new AffineTransform object representing the inverse transformation.
java.awt.geom.AffineTransform.invert(),void,
"java.awt.geom.AffineTransform.transform(Point2D,Point2D)",Point2D,the ptDst after transforming ptSrc and storing the result in ptDst.
"java.awt.geom.AffineTransform.transform(Point2D[],int,Point2D[],int,int)",void,
"java.awt.geom.AffineTransform.transform(float[],int,float[],int,int)",void,
"java.awt.geom.AffineTransform.transform(double[],int,double[],int,int)",void,
"java.awt.geom.AffineTransform.transform(float[],int,double[],int,int)",void,
"java.awt.geom.AffineTransform.transform(double[],int,float[],int,int)",void,
"java.awt.geom.AffineTransform.inverseTransform(Point2D,Point2D)",Point2D,"ptDst, which contains the result of the inverse transform."
"java.awt.geom.AffineTransform.inverseTransform(double[],int,double[],int,int)",void,
"java.awt.geom.AffineTransform.deltaTransform(Point2D,Point2D)",Point2D,"ptDst, which contains the result of the transformation."
"java.awt.geom.AffineTransform.deltaTransform(double[],int,double[],int,int)",void,
java.awt.geom.AffineTransform.createTransformedShape(Shape),Shape,"a new Shape object that defines the geometry of the transformed Shape, or null if pSrc is null."
java.awt.geom.AffineTransform.toString(),String,a String representing the value of this Object.
java.awt.geom.AffineTransform.isIdentity(),boolean,true if this AffineTransform is an identity transform; false otherwise.
java.awt.geom.AffineTransform.clone(),Object,an Object that is a copy of this AffineTransform object.
java.awt.geom.AffineTransform.hashCode(),int,a hash code for this transform.
java.awt.geom.AffineTransform.equals(Object),boolean,true if obj equals this AffineTransform object; false otherwise.
java.awt.geom.Arc2D.getAngleStart(),abstractdouble,A double value that represents the starting angle of the arc in degrees.
java.awt.geom.Arc2D.getAngleExtent(),abstractdouble,A double value that represents the angular extent of the arc in degrees.
java.awt.geom.Arc2D.getArcType(),int,One of the integer constant closure types defined in this class.
java.awt.geom.Arc2D.getStartPoint(),Point2D,"A Point2D object representing the x,y coordinates of the starting point of the arc."
java.awt.geom.Arc2D.getEndPoint(),Point2D,"A Point2D object representing the x,y coordinates of the ending point of the arc."
"java.awt.geom.Arc2D.setArc(double,double,double,double,double,double,int)",abstractvoid,
"java.awt.geom.Arc2D.setArc(Point2D,Dimension2D,double,double,int)",void,
"java.awt.geom.Arc2D.setArc(Rectangle2D,double,double,int)",void,
java.awt.geom.Arc2D.setArc(Arc2D),void,
"java.awt.geom.Arc2D.setArcByCenter(double,double,double,double,double,int)",void,
"java.awt.geom.Arc2D.setArcByTangent(Point2D,Point2D,Point2D,double)",void,
java.awt.geom.Arc2D.setAngleStart(double),abstractvoid,
java.awt.geom.Arc2D.setAngleExtent(double),abstractvoid,
java.awt.geom.Arc2D.setAngleStart(Point2D),void,
"java.awt.geom.Arc2D.setAngles(double,double,double,double)",void,
"java.awt.geom.Arc2D.setAngles(Point2D,Point2D)",void,
java.awt.geom.Arc2D.setArcType(int),void,
"java.awt.geom.Arc2D.setFrame(double,double,double,double)",void,
java.awt.geom.Arc2D.getBounds2D(),Rectangle2D,the Rectangle2D that represents the arc's framing rectangle.
"java.awt.geom.Arc2D.makeBounds(double,double,double,double)",abstractRectangle2D,a Rectangle2D that is the framing rectangle of this arc.
java.awt.geom.Arc2D.containsAngle(double),boolean,"true if the arc contains the angle, false if the arc doesn't contain the angle."
"java.awt.geom.Arc2D.contains(double,double)",boolean,"true if the point lies within the bound of the arc, false if the point lies outside of the arc's bounds."
"java.awt.geom.Arc2D.intersects(double,double,double,double)",boolean,"true if the arc intersects the rectangle, false if the arc doesn't intersect the rectangle."
"java.awt.geom.Arc2D.contains(double,double,double,double)",boolean,"true if the arc contains the rectangle, false if the arc doesn't contain the rectangle."
java.awt.geom.Arc2D.contains(Rectangle2D),boolean,"true if the arc contains the rectangle, false if the arc doesn't contain the rectangle."
java.awt.geom.Arc2D.getPathIterator(AffineTransform),PathIterator,A PathIterator that defines the arc's boundary.
java.awt.geom.Arc2D.hashCode(),int,the hashcode for this Arc2D.
java.awt.geom.Arc2D.equals(Object),boolean,true if obj is an instance of Arc2D and has the same values; false otherwise.
java.awt.geom.Arc2D.Double.getX(),double,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Arc2D.Double.getY(),double,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Arc2D.Double.getWidth(),double,the width of the framing rectangle.
java.awt.geom.Arc2D.Double.getHeight(),double,the height of the framing rectangle.
java.awt.geom.Arc2D.Double.getAngleStart(),double,A double value that represents the starting angle of the arc in degrees.
java.awt.geom.Arc2D.Double.getAngleExtent(),double,A double value that represents the angular extent of the arc in degrees.
java.awt.geom.Arc2D.Double.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.Arc2D.Double.setArc(double,double,double,double,double,double,int)",void,
java.awt.geom.Arc2D.Double.setAngleStart(double),void,
java.awt.geom.Arc2D.Double.setAngleExtent(double),void,
"java.awt.geom.Arc2D.Double.makeBounds(double,double,double,double)",Rectangle2D,a Rectangle2D that is the framing rectangle of this arc.
java.awt.geom.Arc2D.Float.getX(),double,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Arc2D.Float.getY(),double,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Arc2D.Float.getWidth(),double,the width of the framing rectangle.
java.awt.geom.Arc2D.Float.getHeight(),double,the height of the framing rectangle.
java.awt.geom.Arc2D.Float.getAngleStart(),double,A double value that represents the starting angle of the arc in degrees.
java.awt.geom.Arc2D.Float.getAngleExtent(),double,A double value that represents the angular extent of the arc in degrees.
java.awt.geom.Arc2D.Float.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.Arc2D.Float.setArc(double,double,double,double,double,double,int)",void,
java.awt.geom.Arc2D.Float.setAngleStart(double),void,
java.awt.geom.Arc2D.Float.setAngleExtent(double),void,
"java.awt.geom.Arc2D.Float.makeBounds(double,double,double,double)",Rectangle2D,a Rectangle2D that is the framing rectangle of this arc.
java.awt.geom.Area.add(Area),void,
java.awt.geom.Area.subtract(Area),void,
java.awt.geom.Area.intersect(Area),void,
java.awt.geom.Area.exclusiveOr(Area),void,
java.awt.geom.Area.reset(),void,
java.awt.geom.Area.isEmpty(),boolean,true if this Area object represents an empty area; false otherwise.
java.awt.geom.Area.isPolygonal(),boolean,true if the geometry of this Area consists entirely of line segments; false otherwise.
java.awt.geom.Area.isRectangular(),boolean,true if the geometry of this Area is rectangular in shape; false otherwise.
java.awt.geom.Area.isSingular(),boolean,true if the Area is comprised of a single basic geometry; false otherwise.
java.awt.geom.Area.getBounds2D(),Rectangle2D,the bounding Rectangle2D for the Area.
java.awt.geom.Area.getBounds(),Rectangle,the bounding Rectangle for the Area.
java.awt.geom.Area.clone(),Object,Created clone object
java.awt.geom.Area.equals(Area),boolean,true if the two geometries are equal; false otherwise.
java.awt.geom.Area.transform(AffineTransform),void,
java.awt.geom.Area.createTransformedArea(AffineTransform),Area,a new Area object representing the transformed geometry.
"java.awt.geom.Area.contains(double,double)",boolean,true if the specified coordinates are inside the Shape boundary; false otherwise.
java.awt.geom.Area.contains(Point2D),boolean,true if the specified Point2D is inside the boundary of the Shape; false otherwise.
"java.awt.geom.Area.contains(double,double,double,double)",boolean,
java.awt.geom.Area.contains(Rectangle2D),boolean,
"java.awt.geom.Area.intersects(double,double,double,double)",boolean,
java.awt.geom.Area.intersects(Rectangle2D),boolean,
java.awt.geom.Area.getPathIterator(AffineTransform),PathIterator,"the PathIterator object that returns the geometry of the outline of this Area, one segment at a time."
"java.awt.geom.Area.getPathIterator(AffineTransform,double)",PathIterator,"the PathIterator object that returns the geometry of the outline of this Area, one segment at a time."
java.awt.geom.CubicCurve2D.getX1(),abstractdouble,the X coordinate of the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getY1(),abstractdouble,the Y coordinate of the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getP1(),abstractPoint2D,a Point2D that is the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getCtrlX1(),abstractdouble,the X coordinate of the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getCtrlY1(),abstractdouble,the Y coordinate of the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getCtrlP1(),abstractPoint2D,a Point2D that is the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getCtrlX2(),abstractdouble,the X coordinate of the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getCtrlY2(),abstractdouble,the Y coordinate of the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getCtrlP2(),abstractPoint2D,a Point2D that is the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getX2(),abstractdouble,the X coordinate of the end point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getY2(),abstractdouble,the Y coordinate of the end point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.getP2(),abstractPoint2D,a Point2D that is the end point of the CubicCurve2D.
"java.awt.geom.CubicCurve2D.setCurve(double,double,double,double,double,double,double,double)",abstractvoid,
"java.awt.geom.CubicCurve2D.setCurve(double[],int)",void,
"java.awt.geom.CubicCurve2D.setCurve(Point2D,Point2D,Point2D,Point2D)",void,
"java.awt.geom.CubicCurve2D.setCurve(Point2D[],int)",void,
java.awt.geom.CubicCurve2D.setCurve(CubicCurve2D),void,
"java.awt.geom.CubicCurve2D.getFlatnessSq(double,double,double,double,double,double,double,double)",double,the square of the flatness of the CubicCurve2D represented by the specified coordinates.
"java.awt.geom.CubicCurve2D.getFlatness(double,double,double,double,double,double,double,double)",double,the flatness of the CubicCurve2D represented by the specified coordinates.
"java.awt.geom.CubicCurve2D.getFlatnessSq(double[],int)",double,the square of the flatness of the CubicCurve2D specified by the coordinates in coords at the specified offset.
"java.awt.geom.CubicCurve2D.getFlatness(double[],int)",double,the flatness of the CubicCurve2D specified by the coordinates in coords at the specified offset.
java.awt.geom.CubicCurve2D.getFlatnessSq(),double,the square of the flatness of this curve.
java.awt.geom.CubicCurve2D.getFlatness(),double,the flatness of this curve.
"java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D,CubicCurve2D)",void,
"java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D,CubicCurve2D,CubicCurve2D)",void,
"java.awt.geom.CubicCurve2D.subdivide(double[],int,double[],int,double[],int)",void,
java.awt.geom.CubicCurve2D.solveCubic(double[]),int,"the number of roots, or -1 if the equation is a constant."
"java.awt.geom.CubicCurve2D.solveCubic(double[],double[])",int,"the number of roots, or -1 if the equation is a constant"
"java.awt.geom.CubicCurve2D.contains(double,double)",boolean,true if the specified coordinates are inside the Shape boundary; false otherwise.
java.awt.geom.CubicCurve2D.contains(Point2D),boolean,true if the specified Point2D is inside the boundary of the Shape; false otherwise.
"java.awt.geom.CubicCurve2D.intersects(double,double,double,double)",boolean,
java.awt.geom.CubicCurve2D.intersects(Rectangle2D),boolean,
"java.awt.geom.CubicCurve2D.contains(double,double,double,double)",boolean,
java.awt.geom.CubicCurve2D.contains(Rectangle2D),boolean,
java.awt.geom.CubicCurve2D.getBounds(),Rectangle,an integer Rectangle that completely encloses the Shape.
java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform),PathIterator,"the PathIterator object that returns the geometry of the outline of this CubicCurve2D, one segment at a time."
"java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform,double)",PathIterator,"the PathIterator object that returns the geometry of the outline of this CubicCurve2D, one segment at a time."
java.awt.geom.CubicCurve2D.clone(),Object,a clone of this instance.
java.awt.geom.CubicCurve2D.Double.getX1(),double,the X coordinate of the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getY1(),double,the Y coordinate of the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getP1(),Point2D,a Point2D that is the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getCtrlX1(),double,the X coordinate of the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getCtrlY1(),double,the Y coordinate of the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getCtrlP1(),Point2D,a Point2D that is the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getCtrlX2(),double,the X coordinate of the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getCtrlY2(),double,the Y coordinate of the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getCtrlP2(),Point2D,a Point2D that is the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getX2(),double,the X coordinate of the end point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getY2(),double,the Y coordinate of the end point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Double.getP2(),Point2D,a Point2D that is the end point of the CubicCurve2D.
"java.awt.geom.CubicCurve2D.Double.setCurve(double,double,double,double,double,double,double,double)",void,
java.awt.geom.CubicCurve2D.Double.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.CubicCurve2D.Float.getX1(),double,the X coordinate of the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getY1(),double,the Y coordinate of the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getP1(),Point2D,a Point2D that is the start point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getCtrlX1(),double,the X coordinate of the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getCtrlY1(),double,the Y coordinate of the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getCtrlP1(),Point2D,a Point2D that is the first control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getCtrlX2(),double,the X coordinate of the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getCtrlY2(),double,the Y coordinate of the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getCtrlP2(),Point2D,a Point2D that is the second control point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getX2(),double,the X coordinate of the end point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getY2(),double,the Y coordinate of the end point of the CubicCurve2D.
java.awt.geom.CubicCurve2D.Float.getP2(),Point2D,a Point2D that is the end point of the CubicCurve2D.
"java.awt.geom.CubicCurve2D.Float.setCurve(double,double,double,double,double,double,double,double)",void,
"java.awt.geom.CubicCurve2D.Float.setCurve(float,float,float,float,float,float,float,float)",void,
java.awt.geom.CubicCurve2D.Float.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.Dimension2D.getWidth(),abstractdouble,the width of this Dimension.
java.awt.geom.Dimension2D.getHeight(),abstractdouble,the height of this Dimension.
"java.awt.geom.Dimension2D.setSize(double,double)",abstractvoid,
java.awt.geom.Dimension2D.setSize(Dimension2D),void,
java.awt.geom.Dimension2D.clone(),Object,a clone of this instance.
"java.awt.geom.Ellipse2D.contains(double,double)",boolean,true if the specified coordinates are inside the Shape boundary; false otherwise.
"java.awt.geom.Ellipse2D.intersects(double,double,double,double)",boolean,
"java.awt.geom.Ellipse2D.contains(double,double,double,double)",boolean,
java.awt.geom.Ellipse2D.getPathIterator(AffineTransform),PathIterator,"the PathIterator object that returns the geometry of the outline of this Ellipse2D, one segment at a time."
java.awt.geom.Ellipse2D.hashCode(),int,the hashcode for this Ellipse2D.
java.awt.geom.Ellipse2D.equals(Object),boolean,true if obj is an instance of Ellipse2D and has the same values; false otherwise.
java.awt.geom.Ellipse2D.Double.getX(),double,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Ellipse2D.Double.getY(),double,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Ellipse2D.Double.getWidth(),double,the width of the framing rectangle.
java.awt.geom.Ellipse2D.Double.getHeight(),double,the height of the framing rectangle.
java.awt.geom.Ellipse2D.Double.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.Ellipse2D.Double.setFrame(double,double,double,double)",void,
java.awt.geom.Ellipse2D.Double.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.Ellipse2D.Float.getX(),double,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Ellipse2D.Float.getY(),double,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Ellipse2D.Float.getWidth(),double,the width of the framing rectangle.
java.awt.geom.Ellipse2D.Float.getHeight(),double,the height of the framing rectangle.
java.awt.geom.Ellipse2D.Float.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.Ellipse2D.Float.setFrame(float,float,float,float)",void,
"java.awt.geom.Ellipse2D.Float.setFrame(double,double,double,double)",void,
java.awt.geom.Ellipse2D.Float.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.FlatteningPathIterator.getFlatness(),double,the flatness of this FlatteningPathIterator.
java.awt.geom.FlatteningPathIterator.getRecursionLimit(),int,the recursion limit of this FlatteningPathIterator.
java.awt.geom.FlatteningPathIterator.getWindingRule(),int,the winding rule of the original unflattened path being iterated over.
java.awt.geom.FlatteningPathIterator.isDone(),boolean,true if all the segments have been read; false otherwise.
java.awt.geom.FlatteningPathIterator.next(),void,
java.awt.geom.FlatteningPathIterator.currentSegment(float[]),int,the path segment type of the current path segment.
java.awt.geom.FlatteningPathIterator.currentSegment(double[]),int,the path segment type of the current path segment.
java.awt.geom.Line2D.getX1(),abstractdouble,the X coordinate of the start point of this Line2D object.
java.awt.geom.Line2D.getY1(),abstractdouble,the Y coordinate of the start point of this Line2D object.
java.awt.geom.Line2D.getP1(),abstractPoint2D,the start Point2D of this Line2D.
java.awt.geom.Line2D.getX2(),abstractdouble,the X coordinate of the end point of this Line2D object.
java.awt.geom.Line2D.getY2(),abstractdouble,the Y coordinate of the end point of this Line2D object.
java.awt.geom.Line2D.getP2(),abstractPoint2D,the end Point2D of this Line2D.
"java.awt.geom.Line2D.setLine(double,double,double,double)",abstractvoid,
"java.awt.geom.Line2D.setLine(Point2D,Point2D)",void,
java.awt.geom.Line2D.setLine(Line2D),void,
"java.awt.geom.Line2D.relativeCCW(double,double,double,double,double,double)",int,an integer that indicates the position of the third specified coordinates with respect to the line segment formed by the first two specified coordinates.
"java.awt.geom.Line2D.relativeCCW(double,double)",int,an integer that indicates the position of the specified coordinates with respect to this Line2D
java.awt.geom.Line2D.relativeCCW(Point2D),int,an integer that indicates the position of the specified Point2D with respect to this Line2D
"java.awt.geom.Line2D.linesIntersect(double,double,double,double,double,double,double,double)",boolean,true if the first specified line segment and the second specified line segment intersect each other; false otherwise.
"java.awt.geom.Line2D.intersectsLine(double,double,double,double)",boolean,&lt;true&gt; if this line segment and the specified line segment intersect each other; false otherwise.
java.awt.geom.Line2D.intersectsLine(Line2D),boolean,true if this line segment and the specified line segment intersect each other; false otherwise.
"java.awt.geom.Line2D.ptSegDistSq(double,double,double,double,double,double)",double,a double value that is the square of the distance from the specified point to the specified line segment.
"java.awt.geom.Line2D.ptSegDist(double,double,double,double,double,double)",double,a double value that is the distance from the specified point to the specified line segment.
"java.awt.geom.Line2D.ptSegDistSq(double,double)",double,a double value that is the square of the distance from the specified point to the current line segment.
java.awt.geom.Line2D.ptSegDistSq(Point2D),double,a double value that is the square of the distance from the specified Point2D to the current line segment.
"java.awt.geom.Line2D.ptSegDist(double,double)",double,a double value that is the distance from the specified point to the current line segment.
java.awt.geom.Line2D.ptSegDist(Point2D),double,a double value that is the distance from the specified Point2D to the current line segment.
"java.awt.geom.Line2D.ptLineDistSq(double,double,double,double,double,double)",double,a double value that is the square of the distance from the specified point to the specified line.
"java.awt.geom.Line2D.ptLineDist(double,double,double,double,double,double)",double,a double value that is the distance from the specified point to the specified line.
"java.awt.geom.Line2D.ptLineDistSq(double,double)",double,a double value that is the square of the distance from a specified point to the current line.
java.awt.geom.Line2D.ptLineDistSq(Point2D),double,a double value that is the square of the distance from a specified Point2D to the current line.
"java.awt.geom.Line2D.ptLineDist(double,double)",double,a double value that is the distance from a specified point to the current line.
java.awt.geom.Line2D.ptLineDist(Point2D),double,a double value that is the distance from a specified Point2D to the current line.
"java.awt.geom.Line2D.contains(double,double)",boolean,false because a Line2D contains no area.
java.awt.geom.Line2D.contains(Point2D),boolean,false because a Line2D contains no area.
"java.awt.geom.Line2D.intersects(double,double,double,double)",boolean,
java.awt.geom.Line2D.intersects(Rectangle2D),boolean,
"java.awt.geom.Line2D.contains(double,double,double,double)",boolean,false because a Line2D contains no area.
java.awt.geom.Line2D.contains(Rectangle2D),boolean,false because a Line2D contains no area.
java.awt.geom.Line2D.getBounds(),Rectangle,an integer Rectangle that completely encloses the Shape.
java.awt.geom.Line2D.getPathIterator(AffineTransform),PathIterator,a PathIterator that defines the boundary of this Line2D.
"java.awt.geom.Line2D.getPathIterator(AffineTransform,double)",PathIterator,a PathIterator that defines the boundary of the flattened Line2D
java.awt.geom.Line2D.clone(),Object,a clone of this instance.
java.awt.geom.Line2D.Double.getX1(),double,the X coordinate of the start point of this Line2D object.
java.awt.geom.Line2D.Double.getY1(),double,the Y coordinate of the start point of this Line2D object.
java.awt.geom.Line2D.Double.getP1(),Point2D,the start Point2D of this Line2D.
java.awt.geom.Line2D.Double.getX2(),double,the X coordinate of the end point of this Line2D object.
java.awt.geom.Line2D.Double.getY2(),double,the Y coordinate of the end point of this Line2D object.
java.awt.geom.Line2D.Double.getP2(),Point2D,the end Point2D of this Line2D.
"java.awt.geom.Line2D.Double.setLine(double,double,double,double)",void,
java.awt.geom.Line2D.Double.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.Line2D.Float.getX1(),double,the X coordinate of the start point of this Line2D object.
java.awt.geom.Line2D.Float.getY1(),double,the Y coordinate of the start point of this Line2D object.
java.awt.geom.Line2D.Float.getP1(),Point2D,the start Point2D of this Line2D.
java.awt.geom.Line2D.Float.getX2(),double,the X coordinate of the end point of this Line2D object.
java.awt.geom.Line2D.Float.getY2(),double,the Y coordinate of the end point of this Line2D object.
java.awt.geom.Line2D.Float.getP2(),Point2D,the end Point2D of this Line2D.
"java.awt.geom.Line2D.Float.setLine(double,double,double,double)",void,
"java.awt.geom.Line2D.Float.setLine(float,float,float,float)",void,
java.awt.geom.Line2D.Float.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
"java.awt.geom.Path2D.moveTo(double,double)",abstractvoid,
"java.awt.geom.Path2D.lineTo(double,double)",abstractvoid,
"java.awt.geom.Path2D.quadTo(double,double,double,double)",abstractvoid,
"java.awt.geom.Path2D.curveTo(double,double,double,double,double,double)",abstractvoid,
java.awt.geom.Path2D.closePath(),void,
"java.awt.geom.Path2D.append(Shape,boolean)",void,
"java.awt.geom.Path2D.append(PathIterator,boolean)",abstractvoid,
java.awt.geom.Path2D.getWindingRule(),int,an integer representing the current winding rule.
java.awt.geom.Path2D.setWindingRule(int),void,
java.awt.geom.Path2D.getCurrentPoint(),Point2D,a Point2D object containing the ending coordinates of the path or null if there are no points in the path.
java.awt.geom.Path2D.reset(),void,
java.awt.geom.Path2D.transform(AffineTransform),abstractvoid,
java.awt.geom.Path2D.createTransformedShape(AffineTransform),Shape,"a new Shape, transformed with the specified AffineTransform."
java.awt.geom.Path2D.getBounds(),Rectangle,an integer Rectangle that completely encloses the Shape.
"java.awt.geom.Path2D.contains(PathIterator,double,double)",boolean,true if the specified coordinates are inside the specified PathIterator; false otherwise
"java.awt.geom.Path2D.contains(PathIterator,Point2D)",boolean,true if the specified coordinates are inside the specified PathIterator; false otherwise
"java.awt.geom.Path2D.contains(double,double)",boolean,true if the specified coordinates are inside the Shape boundary; false otherwise.
java.awt.geom.Path2D.contains(Point2D),boolean,true if the specified Point2D is inside the boundary of the Shape; false otherwise.
"java.awt.geom.Path2D.contains(PathIterator,double,double,double,double)",boolean,true if the specified PathIterator contains the specified rectangular area; false otherwise.
"java.awt.geom.Path2D.contains(PathIterator,Rectangle2D)",boolean,true if the specified PathIterator contains the specified Rectangle2D; false otherwise.
"java.awt.geom.Path2D.contains(double,double,double,double)",boolean,
java.awt.geom.Path2D.contains(Rectangle2D),boolean,
"java.awt.geom.Path2D.intersects(PathIterator,double,double,double,double)",boolean,true if the specified PathIterator and the interior of the specified set of rectangular coordinates intersect each other; false otherwise.
"java.awt.geom.Path2D.intersects(PathIterator,Rectangle2D)",boolean,true if the specified PathIterator and the interior of the specified Rectangle2D intersect each other; false otherwise.
"java.awt.geom.Path2D.intersects(double,double,double,double)",boolean,
java.awt.geom.Path2D.intersects(Rectangle2D),boolean,
"java.awt.geom.Path2D.getPathIterator(AffineTransform,double)",PathIterator,a new PathIterator that independently traverses a flattened view of the geometry of the Shape.
java.awt.geom.Path2D.clone(),abstractObject,a clone of this instance.
"java.awt.geom.Path2D.Double.moveTo(double,double)",void,
"java.awt.geom.Path2D.Double.lineTo(double,double)",void,
"java.awt.geom.Path2D.Double.quadTo(double,double,double,double)",void,
"java.awt.geom.Path2D.Double.curveTo(double,double,double,double,double,double)",void,
"java.awt.geom.Path2D.Double.append(PathIterator,boolean)",void,
java.awt.geom.Path2D.Double.transform(AffineTransform),void,
java.awt.geom.Path2D.Double.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.Path2D.Double.getPathIterator(AffineTransform),PathIterator,a new PathIterator that iterates along the boundary of this Shape and provides access to the geometry of this Shape's outline
java.awt.geom.Path2D.Double.clone(),Object,a clone of this instance.
"java.awt.geom.Path2D.Float.moveTo(double,double)",void,
"java.awt.geom.Path2D.Float.moveTo(float,float)",void,
"java.awt.geom.Path2D.Float.lineTo(double,double)",void,
"java.awt.geom.Path2D.Float.lineTo(float,float)",void,
"java.awt.geom.Path2D.Float.quadTo(double,double,double,double)",void,
"java.awt.geom.Path2D.Float.quadTo(float,float,float,float)",void,
"java.awt.geom.Path2D.Float.curveTo(double,double,double,double,double,double)",void,
"java.awt.geom.Path2D.Float.curveTo(float,float,float,float,float,float)",void,
"java.awt.geom.Path2D.Float.append(PathIterator,boolean)",void,
java.awt.geom.Path2D.Float.transform(AffineTransform),void,
java.awt.geom.Path2D.Float.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.Path2D.Float.getPathIterator(AffineTransform),PathIterator,"a new PathIterator object, which independently traverses the geometry of the Shape."
java.awt.geom.Path2D.Float.clone(),Object,a clone of this instance.
java.awt.geom.Point2D.getX(),abstractdouble,the X coordinate of this Point2D.
java.awt.geom.Point2D.getY(),abstractdouble,the Y coordinate of this Point2D.
"java.awt.geom.Point2D.setLocation(double,double)",abstractvoid,
java.awt.geom.Point2D.setLocation(Point2D),void,
"java.awt.geom.Point2D.distanceSq(double,double,double,double)",double,the square of the distance between the two sets of specified coordinates.
"java.awt.geom.Point2D.distance(double,double,double,double)",double,the distance between the two sets of specified coordinates.
"java.awt.geom.Point2D.distanceSq(double,double)",double,the square of the distance between this Point2D and the specified point.
java.awt.geom.Point2D.distanceSq(Point2D),double,the square of the distance between this Point2D to a specified Point2D.
"java.awt.geom.Point2D.distance(double,double)",double,the distance between this Point2D and a specified point.
java.awt.geom.Point2D.distance(Point2D),double,the distance between this Point2D and the specified Point2D.
java.awt.geom.Point2D.clone(),Object,a clone of this instance.
java.awt.geom.Point2D.hashCode(),int,a hash code for this Point2D.
java.awt.geom.Point2D.equals(Object),boolean,true if the object to be compared is an instance of Point2D and has the same values; false otherwise.
java.awt.geom.Point2D.Double.getX(),double,the X coordinate of this Point2D.
java.awt.geom.Point2D.Double.getY(),double,the Y coordinate of this Point2D.
"java.awt.geom.Point2D.Double.setLocation(double,double)",void,
java.awt.geom.Point2D.Double.toString(),String,a string representation of this Point2D.
java.awt.geom.Point2D.Float.getX(),double,the X coordinate of this Point2D.
java.awt.geom.Point2D.Float.getY(),double,the Y coordinate of this Point2D.
"java.awt.geom.Point2D.Float.setLocation(double,double)",void,
"java.awt.geom.Point2D.Float.setLocation(float,float)",void,
java.awt.geom.Point2D.Float.toString(),String,a string representation of this Point2D.
java.awt.geom.QuadCurve2D.getX1(),abstractdouble,the X coordinate of the start point.
java.awt.geom.QuadCurve2D.getY1(),abstractdouble,the Y coordinate of the start point.
java.awt.geom.QuadCurve2D.getP1(),abstractPoint2D,a Point2D that is the start point of this QuadCurve2D.
java.awt.geom.QuadCurve2D.getCtrlX(),abstractdouble,X coordinate the control point
java.awt.geom.QuadCurve2D.getCtrlY(),abstractdouble,the Y coordinate of the control point.
java.awt.geom.QuadCurve2D.getCtrlPt(),abstractPoint2D,a Point2D that is the control point of this Point2D.
java.awt.geom.QuadCurve2D.getX2(),abstractdouble,the x coordinate of the end point.
java.awt.geom.QuadCurve2D.getY2(),abstractdouble,the Y coordinate of the end point.
java.awt.geom.QuadCurve2D.getP2(),abstractPoint2D,a Point object that is the end point of this Point2D.
"java.awt.geom.QuadCurve2D.setCurve(double,double,double,double,double,double)",abstractvoid,
"java.awt.geom.QuadCurve2D.setCurve(double[],int)",void,
"java.awt.geom.QuadCurve2D.setCurve(Point2D,Point2D,Point2D)",void,
"java.awt.geom.QuadCurve2D.setCurve(Point2D[],int)",void,
java.awt.geom.QuadCurve2D.setCurve(QuadCurve2D),void,
"java.awt.geom.QuadCurve2D.getFlatnessSq(double,double,double,double,double,double)",double,the square of the flatness of the quadratic curve defined by the specified coordinates.
"java.awt.geom.QuadCurve2D.getFlatness(double,double,double,double,double,double)",double,the flatness of the quadratic curve defined by the specified coordinates.
"java.awt.geom.QuadCurve2D.getFlatnessSq(double[],int)",double,the flatness of the quadratic curve that is defined by the values in the specified array at the specified index.
"java.awt.geom.QuadCurve2D.getFlatness(double[],int)",double,the flatness of a quadratic curve defined by the specified array at the specified offset.
java.awt.geom.QuadCurve2D.getFlatnessSq(),double,the square of the flatness of this QuadCurve2D.
java.awt.geom.QuadCurve2D.getFlatness(),double,the flatness of this QuadCurve2D.
"java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D,QuadCurve2D)",void,
"java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D,QuadCurve2D,QuadCurve2D)",void,
"java.awt.geom.QuadCurve2D.subdivide(double[],int,double[],int,double[],int)",void,
java.awt.geom.QuadCurve2D.solveQuadratic(double[]),int,"the number of roots, or -1 if the equation is a constant"
"java.awt.geom.QuadCurve2D.solveQuadratic(double[],double[])",int,"the number of roots, or -1 if the equation is a constant."
"java.awt.geom.QuadCurve2D.contains(double,double)",boolean,true if the specified coordinates are inside the Shape boundary; false otherwise.
java.awt.geom.QuadCurve2D.contains(Point2D),boolean,true if the specified Point2D is inside the boundary of the Shape; false otherwise.
"java.awt.geom.QuadCurve2D.intersects(double,double,double,double)",boolean,
java.awt.geom.QuadCurve2D.intersects(Rectangle2D),boolean,
"java.awt.geom.QuadCurve2D.contains(double,double,double,double)",boolean,
java.awt.geom.QuadCurve2D.contains(Rectangle2D),boolean,
java.awt.geom.QuadCurve2D.getBounds(),Rectangle,an integer Rectangle that completely encloses the Shape.
java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform),PathIterator,a PathIterator object that defines the boundary of the shape.
"java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform,double)",PathIterator,a PathIterator object that defines the flattened boundary of the shape.
java.awt.geom.QuadCurve2D.clone(),Object,a clone of this instance.
java.awt.geom.QuadCurve2D.Double.getX1(),double,the X coordinate of the start point.
java.awt.geom.QuadCurve2D.Double.getY1(),double,the Y coordinate of the start point.
java.awt.geom.QuadCurve2D.Double.getP1(),Point2D,a Point2D that is the start point of this QuadCurve2D.
java.awt.geom.QuadCurve2D.Double.getCtrlX(),double,X coordinate the control point
java.awt.geom.QuadCurve2D.Double.getCtrlY(),double,the Y coordinate of the control point.
java.awt.geom.QuadCurve2D.Double.getCtrlPt(),Point2D,a Point2D that is the control point of this Point2D.
java.awt.geom.QuadCurve2D.Double.getX2(),double,the x coordinate of the end point.
java.awt.geom.QuadCurve2D.Double.getY2(),double,the Y coordinate of the end point.
java.awt.geom.QuadCurve2D.Double.getP2(),Point2D,a Point object that is the end point of this Point2D.
"java.awt.geom.QuadCurve2D.Double.setCurve(double,double,double,double,double,double)",void,
java.awt.geom.QuadCurve2D.Double.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.QuadCurve2D.Float.getX1(),double,the X coordinate of the start point.
java.awt.geom.QuadCurve2D.Float.getY1(),double,the Y coordinate of the start point.
java.awt.geom.QuadCurve2D.Float.getP1(),Point2D,a Point2D that is the start point of this QuadCurve2D.
java.awt.geom.QuadCurve2D.Float.getCtrlX(),double,X coordinate the control point
java.awt.geom.QuadCurve2D.Float.getCtrlY(),double,the Y coordinate of the control point.
java.awt.geom.QuadCurve2D.Float.getCtrlPt(),Point2D,a Point2D that is the control point of this Point2D.
java.awt.geom.QuadCurve2D.Float.getX2(),double,the x coordinate of the end point.
java.awt.geom.QuadCurve2D.Float.getY2(),double,the Y coordinate of the end point.
java.awt.geom.QuadCurve2D.Float.getP2(),Point2D,a Point object that is the end point of this Point2D.
"java.awt.geom.QuadCurve2D.Float.setCurve(double,double,double,double,double,double)",void,
"java.awt.geom.QuadCurve2D.Float.setCurve(float,float,float,float,float,float)",void,
java.awt.geom.QuadCurve2D.Float.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
"java.awt.geom.Rectangle2D.setRect(double,double,double,double)",abstractvoid,
java.awt.geom.Rectangle2D.setRect(Rectangle2D),void,
"java.awt.geom.Rectangle2D.intersectsLine(double,double,double,double)",boolean,true if the specified line segment intersects the interior of this Rectangle2D; false otherwise.
java.awt.geom.Rectangle2D.intersectsLine(Line2D),boolean,true if the specified Line2D intersects the interior of this Rectangle2D; false otherwise.
"java.awt.geom.Rectangle2D.outcode(double,double)",abstractint,the logical OR of all appropriate out codes.
java.awt.geom.Rectangle2D.outcode(Point2D),int,the logical OR of all appropriate out codes.
"java.awt.geom.Rectangle2D.setFrame(double,double,double,double)",void,
java.awt.geom.Rectangle2D.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
"java.awt.geom.Rectangle2D.contains(double,double)",boolean,true if the specified coordinates are inside the Shape boundary; false otherwise.
"java.awt.geom.Rectangle2D.intersects(double,double,double,double)",boolean,
"java.awt.geom.Rectangle2D.contains(double,double,double,double)",boolean,
java.awt.geom.Rectangle2D.createIntersection(Rectangle2D),abstractRectangle2D,the largest Rectangle2D contained in both the specified Rectangle2D and in this Rectangle2D.
"java.awt.geom.Rectangle2D.intersect(Rectangle2D,Rectangle2D,Rectangle2D)",void,
java.awt.geom.Rectangle2D.createUnion(Rectangle2D),abstractRectangle2D,the smallest Rectangle2D containing both the specified Rectangle2D and this Rectangle2D.
"java.awt.geom.Rectangle2D.union(Rectangle2D,Rectangle2D,Rectangle2D)",void,
"java.awt.geom.Rectangle2D.add(double,double)",void,
java.awt.geom.Rectangle2D.add(Point2D),void,
java.awt.geom.Rectangle2D.add(Rectangle2D),void,
java.awt.geom.Rectangle2D.getPathIterator(AffineTransform),PathIterator,"the PathIterator object that returns the geometry of the outline of this Rectangle2D, one segment at a time."
"java.awt.geom.Rectangle2D.getPathIterator(AffineTransform,double)",PathIterator,"the PathIterator object that returns the geometry of the outline of this Rectangle2D, one segment at a time."
java.awt.geom.Rectangle2D.hashCode(),int,the hashcode for this Rectangle2D.
java.awt.geom.Rectangle2D.equals(Object),boolean,true if obj is an instance of Rectangle2D and has the same values; false otherwise.
java.awt.geom.Rectangle2D.Double.getX(),double,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Rectangle2D.Double.getY(),double,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Rectangle2D.Double.getWidth(),double,the width of the framing rectangle.
java.awt.geom.Rectangle2D.Double.getHeight(),double,the height of the framing rectangle.
java.awt.geom.Rectangle2D.Double.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.Rectangle2D.Double.setRect(double,double,double,double)",void,
java.awt.geom.Rectangle2D.Double.setRect(Rectangle2D),void,
"java.awt.geom.Rectangle2D.Double.outcode(double,double)",int,the logical OR of all appropriate out codes.
java.awt.geom.Rectangle2D.Double.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.Rectangle2D.Double.createIntersection(Rectangle2D),Rectangle2D,the largest Rectangle2D contained in both the specified Rectangle2D and in this Rectangle2D.
java.awt.geom.Rectangle2D.Double.createUnion(Rectangle2D),Rectangle2D,the smallest Rectangle2D containing both the specified Rectangle2D and this Rectangle2D.
java.awt.geom.Rectangle2D.Double.toString(),String,a String representing this Rectangle2D.
java.awt.geom.Rectangle2D.Float.getX(),double,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Rectangle2D.Float.getY(),double,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.Rectangle2D.Float.getWidth(),double,the width of the framing rectangle.
java.awt.geom.Rectangle2D.Float.getHeight(),double,the height of the framing rectangle.
java.awt.geom.Rectangle2D.Float.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.Rectangle2D.Float.setRect(float,float,float,float)",void,
"java.awt.geom.Rectangle2D.Float.setRect(double,double,double,double)",void,
java.awt.geom.Rectangle2D.Float.setRect(Rectangle2D),void,
"java.awt.geom.Rectangle2D.Float.outcode(double,double)",int,the logical OR of all appropriate out codes.
java.awt.geom.Rectangle2D.Float.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.Rectangle2D.Float.createIntersection(Rectangle2D),Rectangle2D,the largest Rectangle2D contained in both the specified Rectangle2D and in this Rectangle2D.
java.awt.geom.Rectangle2D.Float.createUnion(Rectangle2D),Rectangle2D,the smallest Rectangle2D containing both the specified Rectangle2D and this Rectangle2D.
java.awt.geom.Rectangle2D.Float.toString(),String,a String representing this Rectangle2D.
java.awt.geom.RectangularShape.getX(),abstractdouble,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.RectangularShape.getY(),abstractdouble,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.RectangularShape.getWidth(),abstractdouble,the width of the framing rectangle.
java.awt.geom.RectangularShape.getHeight(),abstractdouble,the height of the framing rectangle.
java.awt.geom.RectangularShape.getMinX(),double,the smallest X coordinate of the framing rectangle of the Shape.
java.awt.geom.RectangularShape.getMinY(),double,the smallest Y coordinate of the framing rectangle of the Shape.
java.awt.geom.RectangularShape.getMaxX(),double,the largest X coordinate of the framing rectangle of the Shape.
java.awt.geom.RectangularShape.getMaxY(),double,the largest Y coordinate of the framing rectangle of the Shape.
java.awt.geom.RectangularShape.getCenterX(),double,the X coordinate of the center of the framing rectangle of the Shape.
java.awt.geom.RectangularShape.getCenterY(),double,the Y coordinate of the center of the framing rectangle of the Shape.
java.awt.geom.RectangularShape.getFrame(),Rectangle2D,"a Rectangle2D, specified in double coordinates."
java.awt.geom.RectangularShape.isEmpty(),abstractboolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.RectangularShape.setFrame(double,double,double,double)",abstractvoid,
"java.awt.geom.RectangularShape.setFrame(Point2D,Dimension2D)",void,
java.awt.geom.RectangularShape.setFrame(Rectangle2D),void,
"java.awt.geom.RectangularShape.setFrameFromDiagonal(double,double,double,double)",void,
"java.awt.geom.RectangularShape.setFrameFromDiagonal(Point2D,Point2D)",void,
"java.awt.geom.RectangularShape.setFrameFromCenter(double,double,double,double)",void,
"java.awt.geom.RectangularShape.setFrameFromCenter(Point2D,Point2D)",void,
java.awt.geom.RectangularShape.contains(Point2D),boolean,true if the specified Point2D is inside the boundary of the Shape; false otherwise.
java.awt.geom.RectangularShape.intersects(Rectangle2D),boolean,
java.awt.geom.RectangularShape.contains(Rectangle2D),boolean,
java.awt.geom.RectangularShape.getBounds(),Rectangle,an integer Rectangle that completely encloses the Shape.
"java.awt.geom.RectangularShape.getPathIterator(AffineTransform,double)",PathIterator,a PathIterator object that provides access to the Shape object's flattened geometry.
java.awt.geom.RectangularShape.clone(),Object,a clone of this instance.
java.awt.geom.RoundRectangle2D.getArcWidth(),abstractdouble,the width of the arc that rounds off the corners of this RoundRectangle2D.
java.awt.geom.RoundRectangle2D.getArcHeight(),abstractdouble,the height of the arc that rounds off the corners of this RoundRectangle2D.
"java.awt.geom.RoundRectangle2D.setRoundRect(double,double,double,double,double,double)",abstractvoid,
java.awt.geom.RoundRectangle2D.setRoundRect(RoundRectangle2D),void,
"java.awt.geom.RoundRectangle2D.setFrame(double,double,double,double)",void,
"java.awt.geom.RoundRectangle2D.contains(double,double)",boolean,true if the specified coordinates are inside the Shape boundary; false otherwise.
"java.awt.geom.RoundRectangle2D.intersects(double,double,double,double)",boolean,
"java.awt.geom.RoundRectangle2D.contains(double,double,double,double)",boolean,
java.awt.geom.RoundRectangle2D.getPathIterator(AffineTransform),PathIterator,"the PathIterator object that returns the geometry of the outline of this RoundRectangle2D, one segment at a time."
java.awt.geom.RoundRectangle2D.hashCode(),int,the hashcode for this RoundRectangle2D.
java.awt.geom.RoundRectangle2D.equals(Object),boolean,true if obj is an instance of RoundRectangle2D and has the same values; false otherwise.
java.awt.geom.RoundRectangle2D.Double.getX(),double,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.RoundRectangle2D.Double.getY(),double,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.RoundRectangle2D.Double.getWidth(),double,the width of the framing rectangle.
java.awt.geom.RoundRectangle2D.Double.getHeight(),double,the height of the framing rectangle.
java.awt.geom.RoundRectangle2D.Double.getArcWidth(),double,the width of the arc that rounds off the corners of this RoundRectangle2D.
java.awt.geom.RoundRectangle2D.Double.getArcHeight(),double,the height of the arc that rounds off the corners of this RoundRectangle2D.
java.awt.geom.RoundRectangle2D.Double.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.RoundRectangle2D.Double.setRoundRect(double,double,double,double,double,double)",void,
java.awt.geom.RoundRectangle2D.Double.setRoundRect(RoundRectangle2D),void,
java.awt.geom.RoundRectangle2D.Double.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.geom.RoundRectangle2D.Float.getX(),double,the X coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.RoundRectangle2D.Float.getY(),double,the Y coordinate of the upper-left corner of the framing rectangle.
java.awt.geom.RoundRectangle2D.Float.getWidth(),double,the width of the framing rectangle.
java.awt.geom.RoundRectangle2D.Float.getHeight(),double,the height of the framing rectangle.
java.awt.geom.RoundRectangle2D.Float.getArcWidth(),double,the width of the arc that rounds off the corners of this RoundRectangle2D.
java.awt.geom.RoundRectangle2D.Float.getArcHeight(),double,the height of the arc that rounds off the corners of this RoundRectangle2D.
java.awt.geom.RoundRectangle2D.Float.isEmpty(),boolean,true if the RectangularShape is empty; false otherwise.
"java.awt.geom.RoundRectangle2D.Float.setRoundRect(float,float,float,float,float,float)",void,
"java.awt.geom.RoundRectangle2D.Float.setRoundRect(double,double,double,double,double,double)",void,
java.awt.geom.RoundRectangle2D.Float.setRoundRect(RoundRectangle2D),void,
java.awt.geom.RoundRectangle2D.Float.getBounds2D(),Rectangle2D,an instance of Rectangle2D that is a high-precision bounding box of the Shape.
java.awt.im.InputContext.getInstance(),InputContext,
java.awt.im.InputContext.selectInputMethod(Locale),boolean,
java.awt.im.InputContext.getLocale(),Locale,the current locale of the current input method or keyboard layout
java.awt.im.InputContext.setCharacterSubsets(Character.Subset[]),void,
java.awt.im.InputContext.setCompositionEnabled(boolean),void,
java.awt.im.InputContext.isCompositionEnabled(),boolean,true if the current input method is enabled for composition; false otherwise
java.awt.im.InputContext.reconvert(),void,
java.awt.im.InputContext.dispatchEvent(AWTEvent),void,
java.awt.im.InputContext.removeNotify(Component),void,
java.awt.im.InputContext.endComposition(),void,
java.awt.im.InputContext.dispose(),void,
java.awt.im.InputContext.getInputMethodControlObject(),Object,"A control object from the current input method, or null."
java.awt.im.InputMethodHighlight.isSelected(),boolean,
java.awt.im.InputMethodHighlight.getState(),int,The conversion state for the text range - RAW_TEXT or CONVERTED_TEXT.
java.awt.im.InputMethodHighlight.getVariation(),int,
java.awt.im.InputMethodHighlight.getStyle(),"Map&lt;TextAttribute,?&gt;",
java.awt.image.AffineTransformOp.getInterpolationType(),int,the interpolation type.
"java.awt.image.AffineTransformOp.filter(BufferedImage,BufferedImage)",BufferedImage,The filtered BufferedImage.
"java.awt.image.AffineTransformOp.filter(Raster,WritableRaster)",WritableRaster,The transformed Raster.
java.awt.image.AffineTransformOp.getBounds2D(BufferedImage),Rectangle2D,The Rectangle2D representing the destination's bounding box.
java.awt.image.AffineTransformOp.getBounds2D(Raster),Rectangle2D,The Rectangle2D representing the destination's bounding box.
"java.awt.image.AffineTransformOp.createCompatibleDestImage(BufferedImage,ColorModel)",BufferedImage,The zeroed destination image.
java.awt.image.AffineTransformOp.createCompatibleDestRaster(Raster),WritableRaster,The zeroed destination Raster.
"java.awt.image.AffineTransformOp.getPoint2D(Point2D,Point2D)",Point2D,The Point2D in the destination that corresponds to the specified point in the source.
java.awt.image.AffineTransformOp.getTransform(),AffineTransform,The AffineTransform associated with this op.
java.awt.image.AffineTransformOp.getRenderingHints(),RenderingHints,The RenderingHints object associated with this op.
java.awt.image.AreaAveragingScaleFilter.setHints(int),void,
"java.awt.image.AreaAveragingScaleFilter.setPixels(int,int,int,int,ColorModel,byte[],int,int)",void,
"java.awt.image.AreaAveragingScaleFilter.setPixels(int,int,int,int,ColorModel,int[],int,int)",void,
java.awt.image.BandCombineOp.getMatrix(),float[][],The matrix associated with this band combine operation.
"java.awt.image.BandCombineOp.filter(Raster,WritableRaster)",WritableRaster,The filtered Raster.
java.awt.image.BandCombineOp.getBounds2D(Raster),Rectangle2D,The Rectangle2D representing the destination image's bounding box.
java.awt.image.BandCombineOp.createCompatibleDestRaster(Raster),WritableRaster,The zeroed destination Raster.
"java.awt.image.BandCombineOp.getPoint2D(Point2D,Point2D)",Point2D,The Point2D in the destination image that corresponds to the specified point in the source image.
java.awt.image.BandCombineOp.getRenderingHints(),RenderingHints,The RenderingHints object associated with this operation. Returns null if no hints have been set.
"java.awt.image.BandedSampleModel.createCompatibleSampleModel(int,int)",SampleModel,a new BandedSampleModel with the specified width and height.
java.awt.image.BandedSampleModel.createSubsetSampleModel(int[]),SampleModel,a ComponentSampleModel created with a subset of bands from this ComponentSampleModel.
java.awt.image.BandedSampleModel.createDataBuffer(),DataBuffer,"a DataBuffer whose data type, number of banks and size are consistent with this ComponentSampleModel."
"java.awt.image.BandedSampleModel.getDataElements(int,int,Object,DataBuffer)",Object,the data for the specified pixel.
"java.awt.image.BandedSampleModel.getPixel(int,int,int[],DataBuffer)",int[],the samples for the specified pixel.
"java.awt.image.BandedSampleModel.getPixels(int,int,int,int,int[],DataBuffer)",int[],the samples for the pixels within the specified region.
"java.awt.image.BandedSampleModel.getSample(int,int,int,DataBuffer)",int,the sample in the specified band for the specified pixel.
"java.awt.image.BandedSampleModel.getSampleFloat(int,int,int,DataBuffer)",float,a float value that represents the sample in the specified band for the specified pixel.
"java.awt.image.BandedSampleModel.getSampleDouble(int,int,int,DataBuffer)",double,a double value that represents the sample in the specified band for the specified pixel.
"java.awt.image.BandedSampleModel.getSamples(int,int,int,int,int,int[],DataBuffer)",int[],the samples in the specified band for the pixels within the specified region.
"java.awt.image.BandedSampleModel.setDataElements(int,int,Object,DataBuffer)",void,
"java.awt.image.BandedSampleModel.setPixel(int,int,int[],DataBuffer)",void,
"java.awt.image.BandedSampleModel.setPixels(int,int,int,int,int[],DataBuffer)",void,
"java.awt.image.BandedSampleModel.setSample(int,int,int,int,DataBuffer)",void,
"java.awt.image.BandedSampleModel.setSample(int,int,int,float,DataBuffer)",void,
"java.awt.image.BandedSampleModel.setSample(int,int,int,double,DataBuffer)",void,
"java.awt.image.BandedSampleModel.setSamples(int,int,int,int,int,int[],DataBuffer)",void,
java.awt.image.BandedSampleModel.hashCode(),int,
java.awt.image.BufferedImage.getType(),int,the image type of this BufferedImage.
java.awt.image.BufferedImage.getColorModel(),ColorModel,the ColorModel of this BufferedImage.
java.awt.image.BufferedImage.getRaster(),WritableRaster,the WriteableRaster of this BufferedImage.
java.awt.image.BufferedImage.getAlphaRaster(),WritableRaster,a WritableRaster or null if this BufferedImage has no alpha channel associated with its ColorModel.
"java.awt.image.BufferedImage.getRGB(int,int)",int,an integer pixel in the default RGB color model and default sRGB colorspace.
"java.awt.image.BufferedImage.getRGB(int,int,int,int,int[],int,int)",int[],array of RGB pixels.
"java.awt.image.BufferedImage.setRGB(int,int,int)",void,
"java.awt.image.BufferedImage.setRGB(int,int,int,int,int[],int,int)",void,
java.awt.image.BufferedImage.getWidth(),int,the width of this BufferedImage
java.awt.image.BufferedImage.getHeight(),int,the height of this BufferedImage
java.awt.image.BufferedImage.getWidth(ImageObserver),int,the width of this BufferedImage
java.awt.image.BufferedImage.getHeight(ImageObserver),int,the height of this BufferedImage
java.awt.image.BufferedImage.getSource(),ImageProducer,the ImageProducer that is used to produce the pixels for this image.
"java.awt.image.BufferedImage.getProperty(String,ImageObserver)",Object,an Object that is the property referred to by the specified name or null if the properties of this image are not yet known.
java.awt.image.BufferedImage.getProperty(String),Object,an Object that is the property referred to by the specified name.
java.awt.image.BufferedImage.getGraphics(),Graphics,"a Graphics2D, which can be used to draw into this image."
java.awt.image.BufferedImage.createGraphics(),Graphics2D,"a Graphics2D, used for drawing into this image."
"java.awt.image.BufferedImage.getSubimage(int,int,int,int)",BufferedImage,a BufferedImage that is the subimage of this BufferedImage.
java.awt.image.BufferedImage.isAlphaPremultiplied(),boolean,true if the alpha has been premultiplied; false otherwise.
java.awt.image.BufferedImage.coerceData(boolean),void,
java.awt.image.BufferedImage.toString(),String,a String representing this BufferedImage.
java.awt.image.BufferedImage.getSources(),Vector&lt;RenderedImage&gt;,"a Vector containing immediate sources of this BufferedImage object's image date, or null if this BufferedImage has no information about its immediate sources, or an empty Vector if this BufferedImage has no immediate sources."
java.awt.image.BufferedImage.getPropertyNames(),String[],a String array containing all of the property names that getProperty(String) recognizes; or null if no property names are recognized.
java.awt.image.BufferedImage.getMinX(),int,the minimum x coordinate of this BufferedImage.
java.awt.image.BufferedImage.getMinY(),int,the minimum y coordinate of this BufferedImage.
java.awt.image.BufferedImage.getSampleModel(),SampleModel,the SampleModel of this BufferedImage.
java.awt.image.BufferedImage.getNumXTiles(),int,the number of tiles in the x direction.
java.awt.image.BufferedImage.getNumYTiles(),int,the number of tiles in the y direction.
java.awt.image.BufferedImage.getMinTileX(),int,the minimum tile index in the x direction.
java.awt.image.BufferedImage.getMinTileY(),int,the minimum tile index in the y direction.
java.awt.image.BufferedImage.getTileWidth(),int,the tile width in pixels.
java.awt.image.BufferedImage.getTileHeight(),int,the tile height in pixels.
java.awt.image.BufferedImage.getTileGridXOffset(),int,the x offset of the tile grid.
java.awt.image.BufferedImage.getTileGridYOffset(),int,the y offset of the tile grid.
"java.awt.image.BufferedImage.getTile(int,int)",Raster,a Raster that is the tile defined by the arguments tileX and tileY.
java.awt.image.BufferedImage.getData(),Raster,a Raster that is a copy of the image data.
java.awt.image.BufferedImage.getData(Rectangle),Raster,a Raster that is a copy of the image data of the specified region of the BufferedImage
java.awt.image.BufferedImage.copyData(WritableRaster),WritableRaster,a reference to the supplied or created WritableRaster.
java.awt.image.BufferedImage.setData(Raster),void,
java.awt.image.BufferedImage.addTileObserver(TileObserver),void,
java.awt.image.BufferedImage.removeTileObserver(TileObserver),void,
"java.awt.image.BufferedImage.isTileWritable(int,int)",boolean,true if the tile specified by the specified indices is checked out for writing; false otherwise.
java.awt.image.BufferedImage.getWritableTileIndices(),Point[],"a Point array that indicates the tiles that are checked out for writing, or null if no tiles are checked out for writing."
java.awt.image.BufferedImage.hasTileWriters(),boolean,true if any tile is checked out for writing; false otherwise.
"java.awt.image.BufferedImage.getWritableTile(int,int)",WritableRaster,"a WritableRaster that is the tile, indicated by the specified indices, to be checked out for writing."
"java.awt.image.BufferedImage.releaseWritableTile(int,int)",void,
java.awt.image.BufferedImage.getTransparency(),int,the transparency of this BufferedImage.
java.awt.image.BufferedImageFilter.getBufferedImageOp(),BufferedImageOp,the operator of this BufferedImageFilter.
"java.awt.image.BufferedImageFilter.setDimensions(int,int)",void,
java.awt.image.BufferedImageFilter.setColorModel(ColorModel),void,
"java.awt.image.BufferedImageFilter.setPixels(int,int,int,int,ColorModel,byte[],int,int)",void,
"java.awt.image.BufferedImageFilter.setPixels(int,int,int,int,ColorModel,int[],int,int)",void,
java.awt.image.BufferedImageFilter.imageComplete(int),void,
java.awt.image.BufferStrategy.getCapabilities(),abstractBufferCapabilities,the buffering capabilities of this strategy
java.awt.image.BufferStrategy.getDrawGraphics(),abstractGraphics,a graphics context for the drawing buffer
java.awt.image.BufferStrategy.contentsLost(),abstractboolean,Whether or not the drawing buffer was lost since the last call to getDrawGraphics.
java.awt.image.BufferStrategy.contentsRestored(),abstractboolean,Whether or not the drawing buffer was restored since the last call to getDrawGraphics.
java.awt.image.BufferStrategy.show(),abstractvoid,
java.awt.image.BufferStrategy.dispose(),void,
java.awt.image.ByteLookupTable.getTable(),byte[][],the data array of this ByteLookupTable.
"java.awt.image.ByteLookupTable.lookupPixel(int[],int[])",int[],"the array dst, an int array of samples."
"java.awt.image.ByteLookupTable.lookupPixel(byte[],byte[])",byte[],"the array dst, an int array of samples."
java.awt.image.ColorConvertOp.getICC_Profiles(),ICC_Profile[],"the array of ICC_Profile objects of this ColorConvertOp, or null if this ColorConvertOp was not constructed with an array of ICC_Profile objects."
"java.awt.image.ColorConvertOp.filter(BufferedImage,BufferedImage)",BufferedImage,"dest color converted from src or a new, converted BufferedImage if dest is null"
"java.awt.image.ColorConvertOp.filter(Raster,WritableRaster)",WritableRaster,"dest color converted from src or a new, converted WritableRaster if dest is null"
java.awt.image.ColorConvertOp.getBounds2D(BufferedImage),Rectangle2D,"a Rectangle2D that is the bounding box of the destination, given the specified src"
java.awt.image.ColorConvertOp.getBounds2D(Raster),Rectangle2D,"a Rectangle2D that is the bounding box of the destination, given the specified src"
"java.awt.image.ColorConvertOp.createCompatibleDestImage(BufferedImage,ColorModel)",BufferedImage,a BufferedImage with the correct size and number of bands from the specified src.
java.awt.image.ColorConvertOp.createCompatibleDestRaster(Raster),WritableRaster,a WritableRaster with the correct size and number of bands from the specified src
"java.awt.image.ColorConvertOp.getPoint2D(Point2D,Point2D)",Point2D,dstPt after setting its location to be the same as srcPt
java.awt.image.ColorConvertOp.getRenderingHints(),RenderingHints,the RenderingHints object of this ColorConvertOp
java.awt.image.ColorModel.getRGBdefault(),ColorModel,a DirectColorModelobject describing default RGB values.
java.awt.image.ColorModel.hasAlpha(),boolean,true if alpha is supported in this ColorModel; false otherwise.
java.awt.image.ColorModel.isAlphaPremultiplied(),boolean,true if the alpha values are premultiplied in the pixel values to be translated by this ColorModel; false otherwise.
java.awt.image.ColorModel.getTransferType(),int,the transfer type.
java.awt.image.ColorModel.getPixelSize(),int,the number of bits per pixel.
java.awt.image.ColorModel.getComponentSize(int),int,the number of bits for the color/alpha component at the specified index.
java.awt.image.ColorModel.getComponentSize(),int[],an array of the number of bits per color/alpha component
java.awt.image.ColorModel.getTransparency(),int,the transparency of this ColorModel.
java.awt.image.ColorModel.getNumComponents(),int,the number of components in this ColorModel
java.awt.image.ColorModel.getNumColorComponents(),int,the number of color components in this ColorModel.
java.awt.image.ColorModel.getRed(int),abstractint,the value of the red component of the specified pixel.
java.awt.image.ColorModel.getGreen(int),abstractint,the value of the green component of the specified pixel.
java.awt.image.ColorModel.getBlue(int),abstractint,the value of the blue component of the specified pixel.
java.awt.image.ColorModel.getAlpha(int),abstractint,the value of alpha component of the specified pixel.
java.awt.image.ColorModel.getRGB(int),int,the RGB value of the color/alpha components of the specified pixel.
java.awt.image.ColorModel.getRed(Object),int,the value of the red component of the specified pixel.
java.awt.image.ColorModel.getGreen(Object),int,the value of the green component of the specified pixel.
java.awt.image.ColorModel.getBlue(Object),int,the value of the blue component of the specified pixel.
java.awt.image.ColorModel.getAlpha(Object),int,"the alpha component of the specified pixel, scaled from 0 to 255."
java.awt.image.ColorModel.getRGB(Object),int,the color and alpha components of the specified pixel.
"java.awt.image.ColorModel.getDataElements(int,Object)",Object,an array representation of the specified pixel in this ColorModel.
"java.awt.image.ColorModel.getComponents(int,int[],int)",int[],an array containing the color and alpha components of the specified pixel starting at the specified offset.
"java.awt.image.ColorModel.getComponents(Object,int[],int)",int[],an array containing the color and alpha components of the specified pixel starting at the specified offset.
"java.awt.image.ColorModel.getUnnormalizedComponents(float[],int,int[],int)",int[],an array containing unnormalized color and alpha components.
"java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",float[],an array containing normalized color and alpha components.
"java.awt.image.ColorModel.getDataElement(int[],int)",int,an int pixel value in this ColorModel corresponding to the specified components.
"java.awt.image.ColorModel.getDataElements(int[],int,Object)",Object,an Object representing an array of color and alpha components.
"java.awt.image.ColorModel.getDataElement(float[],int)",int,an int pixel value in this ColorModel corresponding to the specified components.
"java.awt.image.ColorModel.getDataElements(float[],int,Object)",Object,an Object which is a primitive data array representation of a pixel
"java.awt.image.ColorModel.getNormalizedComponents(Object,float[],int)",float[],an array containing normalized color and alpha components.
java.awt.image.ColorModel.equals(Object),boolean,true if the specified Object is an instance of ColorModel and equals this ColorModel; false otherwise.
java.awt.image.ColorModel.hashCode(),int,a hash code for this ColorModel.
java.awt.image.ColorModel.getColorSpace(),ColorSpace,the ColorSpace of this ColorModel.
"java.awt.image.ColorModel.coerceData(WritableRaster,boolean)",ColorModel,a ColorModel object that represents the coerced data.
java.awt.image.ColorModel.isCompatibleRaster(Raster),boolean,true if raster is compatible with this ColorModel.
"java.awt.image.ColorModel.createCompatibleWritableRaster(int,int)",WritableRaster,a WritableRaster object with the specified width and height.
"java.awt.image.ColorModel.createCompatibleSampleModel(int,int)",SampleModel,a SampleModel object with the specified width and height.
java.awt.image.ColorModel.isCompatibleSampleModel(SampleModel),boolean,true if the specified SampleModel is compatible with this ColorModel; false otherwise.
java.awt.image.ColorModel.finalize(),voidize(),
java.awt.image.ColorModel.getAlphaRaster(WritableRaster),WritableRaster,"a Raster representing the alpha channel of an image, obtained from the specified Raster."
java.awt.image.ColorModel.toString(),String,a String representing the contents of this ColorModel object.
java.awt.image.ComponentColorModel.getRed(int),int,"The red color component for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getGreen(int),int,"The green color component for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getBlue(int),int,"The blue color component for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getAlpha(int),int,"The alpha component for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getRGB(int),int,"The color/alpha components for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getRed(Object),int,"The red color component for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getGreen(Object),int,"The green color component for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getBlue(Object),int,"The blue color component for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getAlpha(Object),int,"The alpha component for the specified pixel, as an int."
java.awt.image.ComponentColorModel.getRGB(Object),int,"The color/alpha components for the specified pixel, as an int."
"java.awt.image.ComponentColorModel.getDataElements(int,Object)",Object,The data element array representation of a pixel in this ColorModel.
"java.awt.image.ComponentColorModel.getComponents(int,int[],int)",int[],The components array.
"java.awt.image.ComponentColorModel.getComponents(Object,int[],int)",int[],The components array.
"java.awt.image.ComponentColorModel.getUnnormalizedComponents(float[],int,int[],int)",int[],an array containing unnormalized color and alpha components.
"java.awt.image.ComponentColorModel.getNormalizedComponents(int[],int,float[],int)",float[],an array containing normalized color and alpha components.
"java.awt.image.ComponentColorModel.getDataElement(int[],int)",int,A pixel value represented as an int.
"java.awt.image.ComponentColorModel.getDataElements(int[],int,Object)",Object,The data element array representation of a pixel in this ColorModel.
"java.awt.image.ComponentColorModel.getDataElement(float[],int)",int,an int pixel value in this ColorModel corresponding to the specified components.
"java.awt.image.ComponentColorModel.getDataElements(float[],int,Object)",Object,an Object which is a primitive data array representation of a pixel
"java.awt.image.ComponentColorModel.getNormalizedComponents(Object,float[],int)",float[],an array containing normalized color and alpha components.
"java.awt.image.ComponentColorModel.coerceData(WritableRaster,boolean)",ColorModel,a ColorModel object that represents the coerced data.
java.awt.image.ComponentColorModel.isCompatibleRaster(Raster),boolean,"true if raster is compatible with this ColorModel, false if it is not."
"java.awt.image.ComponentColorModel.createCompatibleWritableRaster(int,int)",WritableRaster,A WritableRaster that is compatible with this ColorModel.
"java.awt.image.ComponentColorModel.createCompatibleSampleModel(int,int)",SampleModel,A SampleModel that is compatible with this ColorModel.
java.awt.image.ComponentColorModel.isCompatibleSampleModel(SampleModel),boolean,"true if the SampleModel is compatible with this ColorModel, false if it is not."
java.awt.image.ComponentColorModel.getAlphaRaster(WritableRaster),WritableRaster,A WritableRaster containing the image's alpha channel.
java.awt.image.ComponentColorModel.equals(Object),boolean,"true if the color model objects are equal, false if they are not."
"java.awt.image.ComponentSampleModel.createCompatibleSampleModel(int,int)",SampleModel,a new ComponentSampleModel with the specified size
java.awt.image.ComponentSampleModel.createSubsetSampleModel(int[]),SampleModel,a ComponentSampleModel created with a subset of bands from this ComponentSampleModel.
java.awt.image.ComponentSampleModel.createDataBuffer(),DataBuffer,"a DataBuffer whose data type, number of banks and size are consistent with this ComponentSampleModel."
"java.awt.image.ComponentSampleModel.getOffset(int,int)",int,the offset for the first band of the specified pixel.
"java.awt.image.ComponentSampleModel.getOffset(int,int,int)",int,the offset for the specified band of the specified pixel.
java.awt.image.ComponentSampleModel.getSampleSize(),int[],"an array containing the number of bits per sample for all bands, where each element in the array represents a band."
java.awt.image.ComponentSampleModel.getSampleSize(int),int,the number of bits per sample for the specified band.
java.awt.image.ComponentSampleModel.getBankIndices(),int[],the bank indices for all bands.
java.awt.image.ComponentSampleModel.getBandOffsets(),int[],the band offsets for all bands.
java.awt.image.ComponentSampleModel.getScanlineStride(),int,the scanline stride of this ComponentSampleModel.
java.awt.image.ComponentSampleModel.getPixelStride(),int,the pixel stride of this ComponentSampleModel.
java.awt.image.ComponentSampleModel.getNumDataElements(),int,the number of data elements needed to transfer a pixel with the getDataElements and setDataElements methods.
"java.awt.image.ComponentSampleModel.getDataElements(int,int,Object,DataBuffer)",Object,the data of the specified pixel
"java.awt.image.ComponentSampleModel.getPixel(int,int,int[],DataBuffer)",int[],the samples of the specified pixel.
"java.awt.image.ComponentSampleModel.getPixels(int,int,int,int,int[],DataBuffer)",int[],the samples of the pixels within the specified region.
"java.awt.image.ComponentSampleModel.getSample(int,int,int,DataBuffer)",int,the sample in a specified band for the specified pixel
"java.awt.image.ComponentSampleModel.getSampleFloat(int,int,int,DataBuffer)",float,a float value representing the sample in the specified band for the specified pixel.
"java.awt.image.ComponentSampleModel.getSampleDouble(int,int,int,DataBuffer)",double,a double value representing the sample in the specified band for the specified pixel.
"java.awt.image.ComponentSampleModel.getSamples(int,int,int,int,int,int[],DataBuffer)",int[],the samples in the specified band of the specified pixel
"java.awt.image.ComponentSampleModel.setDataElements(int,int,Object,DataBuffer)",void,
"java.awt.image.ComponentSampleModel.setPixel(int,int,int[],DataBuffer)",void,
"java.awt.image.ComponentSampleModel.setPixels(int,int,int,int,int[],DataBuffer)",void,
"java.awt.image.ComponentSampleModel.setSample(int,int,int,int,DataBuffer)",void,
"java.awt.image.ComponentSampleModel.setSample(int,int,int,float,DataBuffer)",void,
"java.awt.image.ComponentSampleModel.setSample(int,int,int,double,DataBuffer)",void,
"java.awt.image.ComponentSampleModel.setSamples(int,int,int,int,int,int[],DataBuffer)",void,
java.awt.image.ComponentSampleModel.equals(Object),boolean,
java.awt.image.ComponentSampleModel.hashCode(),int,
java.awt.image.ConvolveOp.getEdgeCondition(),int,the edge condition of this ConvolveOp.
java.awt.image.ConvolveOp.getKernel(),Kernel,the Kernel of this ConvolveOp.
"java.awt.image.ConvolveOp.filter(BufferedImage,BufferedImage)",BufferedImage,the filtered BufferedImage
"java.awt.image.ConvolveOp.filter(Raster,WritableRaster)",WritableRaster,the filtered WritableRaster
"java.awt.image.ConvolveOp.createCompatibleDestImage(BufferedImage,ColorModel)",BufferedImage,a destination BufferedImage with the correct size and number of bands.
java.awt.image.ConvolveOp.createCompatibleDestRaster(Raster),WritableRaster,a WritableRaster that is compatible with src
java.awt.image.ConvolveOp.getBounds2D(BufferedImage),Rectangle2D,The Rectangle2D representing the destination image's bounding box.
java.awt.image.ConvolveOp.getBounds2D(Raster),Rectangle2D,a Rectangle2D that is the bounding box of the Raster resulting from the filtering operation.
"java.awt.image.ConvolveOp.getPoint2D(Point2D,Point2D)",Point2D,The Point2D in the destination image that corresponds to the specified point in the source image.
java.awt.image.ConvolveOp.getRenderingHints(),RenderingHints,The RenderingHints object for this BufferedImageOp. Returns null if no hints have been set.
"java.awt.image.CropImageFilter.setProperties(Hashtable&lt;?,?&gt;)",void,
"java.awt.image.CropImageFilter.setDimensions(int,int)",void,
"java.awt.image.CropImageFilter.setPixels(int,int,int,int,ColorModel,byte[],int,int)",void,
"java.awt.image.CropImageFilter.setPixels(int,int,int,int,ColorModel,int[],int,int)",void,
java.awt.image.DataBuffer.getDataTypeSize(int),int,the size of the data type
java.awt.image.DataBuffer.getDataType(),int,the data type of this DataBuffer.
java.awt.image.DataBuffer.getSize(),int,the size of all banks.
java.awt.image.DataBuffer.getOffset(),int,the offset of the default bank.
java.awt.image.DataBuffer.getOffsets(),int[],the offsets of all banks.
java.awt.image.DataBuffer.getNumBanks(),int,the number of banks.
java.awt.image.DataBuffer.getElem(int),int,the data array element at the specified index.
"java.awt.image.DataBuffer.getElem(int,int)",abstractint,the data array element at the specified index from the specified bank at the specified index.
"java.awt.image.DataBuffer.setElem(int,int)",void,
"java.awt.image.DataBuffer.setElem(int,int,int)",abstractvoid,
java.awt.image.DataBuffer.getElemFloat(int),float,a float value representing the data array element at the specified index.
"java.awt.image.DataBuffer.getElemFloat(int,int)",float,a float value representing the data array element from the specified bank at the specified index.
"java.awt.image.DataBuffer.setElemFloat(int,float)",void,
"java.awt.image.DataBuffer.setElemFloat(int,int,float)",void,
java.awt.image.DataBuffer.getElemDouble(int),double,a double value representing the element at the specified index in the data array.
"java.awt.image.DataBuffer.getElemDouble(int,int)",double,a double value representing the element from the specified bank at the specified index in the data array.
"java.awt.image.DataBuffer.setElemDouble(int,double)",void,
"java.awt.image.DataBuffer.setElemDouble(int,int,double)",void,
java.awt.image.DataBufferByte.getData(),byte[],The first byte data array.
java.awt.image.DataBufferByte.getData(int),byte[],The data array for the specified bank.
java.awt.image.DataBufferByte.getBankData(),byte[][],All of the data arrays.
java.awt.image.DataBufferByte.getElem(int),int,The requested data array element as an integer.
"java.awt.image.DataBufferByte.getElem(int,int)",int,The requested data array element as an integer.
"java.awt.image.DataBufferByte.setElem(int,int)",void,
"java.awt.image.DataBufferByte.setElem(int,int,int)",void,
java.awt.image.DataBufferDouble.getData(),double[],the first double data array.
java.awt.image.DataBufferDouble.getData(int),double[],the data array specified by bank.
java.awt.image.DataBufferDouble.getBankData(),double[][],all data arrays from this data buffer.
java.awt.image.DataBufferDouble.getElem(int),int,The data entry as an int.
"java.awt.image.DataBufferDouble.getElem(int,int)",int,The data entry as an int.
"java.awt.image.DataBufferDouble.setElem(int,int)",void,
"java.awt.image.DataBufferDouble.setElem(int,int,int)",void,
java.awt.image.DataBufferDouble.getElemFloat(int),float,The data entry as a float.
"java.awt.image.DataBufferDouble.getElemFloat(int,int)",float,The data entry as a float.
"java.awt.image.DataBufferDouble.setElemFloat(int,float)",void,
"java.awt.image.DataBufferDouble.setElemFloat(int,int,float)",void,
java.awt.image.DataBufferDouble.getElemDouble(int),double,The data entry as a double.
"java.awt.image.DataBufferDouble.getElemDouble(int,int)",double,The data entry as a double.
"java.awt.image.DataBufferDouble.setElemDouble(int,double)",void,
"java.awt.image.DataBufferDouble.setElemDouble(int,int,double)",void,
java.awt.image.DataBufferFloat.getData(),float[],the first float data array.
java.awt.image.DataBufferFloat.getData(int),float[],the data array specified by bank.
java.awt.image.DataBufferFloat.getBankData(),float[][],all data arrays for this data buffer.
java.awt.image.DataBufferFloat.getElem(int),int,The data entry as an int.
"java.awt.image.DataBufferFloat.getElem(int,int)",int,The data entry as an int.
"java.awt.image.DataBufferFloat.setElem(int,int)",void,
"java.awt.image.DataBufferFloat.setElem(int,int,int)",void,
java.awt.image.DataBufferFloat.getElemFloat(int),float,The data entry as a float.
"java.awt.image.DataBufferFloat.getElemFloat(int,int)",float,The data entry as a float.
"java.awt.image.DataBufferFloat.setElemFloat(int,float)",void,
"java.awt.image.DataBufferFloat.setElemFloat(int,int,float)",void,
java.awt.image.DataBufferFloat.getElemDouble(int),double,The data entry as a double.
"java.awt.image.DataBufferFloat.getElemDouble(int,int)",double,The data entry as a double.
"java.awt.image.DataBufferFloat.setElemDouble(int,double)",void,
"java.awt.image.DataBufferFloat.setElemDouble(int,int,double)",void,
java.awt.image.DataBufferInt.getData(),int[],The first integer data array.
java.awt.image.DataBufferInt.getData(int),int[],The data array for the specified bank.
java.awt.image.DataBufferInt.getBankData(),int[][],All of the data arrays.
java.awt.image.DataBufferInt.getElem(int),int,The requested data array element as an integer.
"java.awt.image.DataBufferInt.getElem(int,int)",int,The requested data array element as an integer.
"java.awt.image.DataBufferInt.setElem(int,int)",void,
"java.awt.image.DataBufferInt.setElem(int,int,int)",void,
java.awt.image.DataBufferShort.getData(),short[],The first short data array.
java.awt.image.DataBufferShort.getData(int),short[],The data array for the specified bank.
java.awt.image.DataBufferShort.getBankData(),short[][],All of the data arrays.
java.awt.image.DataBufferShort.getElem(int),int,The requested data array element as an integer.
"java.awt.image.DataBufferShort.getElem(int,int)",int,The requested data array element as an integer.
"java.awt.image.DataBufferShort.setElem(int,int)",void,
"java.awt.image.DataBufferShort.setElem(int,int,int)",void,
java.awt.image.DataBufferUShort.getData(),short[],The first unsigned-short data array.
java.awt.image.DataBufferUShort.getData(int),short[],The data array for the specified bank.
java.awt.image.DataBufferUShort.getBankData(),short[][],All of the data arrays.
java.awt.image.DataBufferUShort.getElem(int),int,The requested data array element as an integer.
"java.awt.image.DataBufferUShort.getElem(int,int)",int,The requested data array element as an integer.
"java.awt.image.DataBufferUShort.setElem(int,int)",void,
"java.awt.image.DataBufferUShort.setElem(int,int,int)",void,
java.awt.image.DirectColorModel.getRedMask(),int,"the mask, which indicates which bits of the int pixel representation contain the red color sample."
java.awt.image.DirectColorModel.getGreenMask(),int,"the mask, which indicates which bits of the int pixel representation contain the green color sample."
java.awt.image.DirectColorModel.getBlueMask(),int,"the mask, which indicates which bits of the int pixel representation contain the blue color sample."
java.awt.image.DirectColorModel.getAlphaMask(),int,"the mask, which indicates which bits of the int pixel representation contain the alpha sample."
java.awt.image.DirectColorModel.getRed(int),int,"the red color component for the specified pixel, from 0 to 255 in the sRGB ColorSpace."
java.awt.image.DirectColorModel.getGreen(int),int,"the green color component for the specified pixel, from 0 to 255 in the sRGB ColorSpace."
java.awt.image.DirectColorModel.getBlue(int),int,"the blue color component for the specified pixel, from 0 to 255 in the sRGB ColorSpace."
java.awt.image.DirectColorModel.getAlpha(int),int,the value of the alpha component of pixel from 0 to 255.
java.awt.image.DirectColorModel.getRGB(int),int,the RGB value of the color/alpha components of the specified pixel.
java.awt.image.DirectColorModel.getRed(Object),int,the value of the red component of the specified pixel.
java.awt.image.DirectColorModel.getGreen(Object),int,the value of the green component of the specified pixel.
java.awt.image.DirectColorModel.getBlue(Object),int,the value of the blue component of the specified pixel.
java.awt.image.DirectColorModel.getAlpha(Object),int,"the alpha component of the specified pixel, scaled from 0 to 255."
java.awt.image.DirectColorModel.getRGB(Object),int,the color and alpha components of the specified pixel.
"java.awt.image.DirectColorModel.getDataElements(int,Object)",Object,an array representation of the specified pixel in this ColorModel
"java.awt.image.DirectColorModel.getComponents(int,int[],int)",int[],an array containing the color and alpha components of the specified pixel starting at the specified offset.
"java.awt.image.DirectColorModel.getComponents(Object,int[],int)",int[],an array containing the color and alpha components of the specified pixel starting at the specified offset.
"java.awt.image.DirectColorModel.createCompatibleWritableRaster(int,int)",WritableRaster,a WritableRaster object with the specified width and height.
"java.awt.image.DirectColorModel.getDataElement(int[],int)",int,an int pixel value in this ColorModel corresponding to the specified components.
"java.awt.image.DirectColorModel.getDataElements(int[],int,Object)",Object,an Object representing an array of color and alpha components.
"java.awt.image.DirectColorModel.coerceData(WritableRaster,boolean)",ColorModel,a ColorModel object that represents the coerced data.
java.awt.image.DirectColorModel.isCompatibleRaster(Raster),boolean,true if raster is compatible with this ColorModel; false otherwise.
java.awt.image.DirectColorModel.toString(),String,a String representing this DirectColorModel.
java.awt.image.FilteredImageSource.addConsumer(ImageConsumer),void,
java.awt.image.FilteredImageSource.isConsumer(ImageConsumer),boolean,true if the ImageConsumer is on the list; false otherwise
java.awt.image.FilteredImageSource.removeConsumer(ImageConsumer),void,
java.awt.image.FilteredImageSource.startProduction(ImageConsumer),void,
java.awt.image.FilteredImageSource.requestTopDownLeftRightResend(ImageConsumer),void,
java.awt.image.ImageFilter.getFilterInstance(ImageConsumer),ImageFilter,an ImageFilter used to perform the filtering for the specified ImageConsumer.
"java.awt.image.ImageFilter.setDimensions(int,int)",void,
"java.awt.image.ImageFilter.setProperties(Hashtable&lt;?,?&gt;)",void,
java.awt.image.ImageFilter.setColorModel(ColorModel),void,
java.awt.image.ImageFilter.setHints(int),void,
"java.awt.image.ImageFilter.setPixels(int,int,int,int,ColorModel,byte[],int,int)",void,
"java.awt.image.ImageFilter.setPixels(int,int,int,int,ColorModel,int[],int,int)",void,
java.awt.image.ImageFilter.imageComplete(int),void,
java.awt.image.ImageFilter.resendTopDownLeftRight(ImageProducer),void,
java.awt.image.ImageFilter.clone(),Object,a clone of this instance.
java.awt.image.IndexColorModel.getTransparency(),int,the transparency of this IndexColorModel
java.awt.image.IndexColorModel.getComponentSize(),int[],an array containing the number of bits of each color and alpha component of this IndexColorModel
java.awt.image.IndexColorModel.getMapSize(),int,the size of the color and alpha component arrays.
java.awt.image.IndexColorModel.getTransparentPixel(),int,"the index of a transparent pixel in this IndexColorModel object, or -1 if there is no such pixel"
java.awt.image.IndexColorModel.getReds(byte[]),void,
java.awt.image.IndexColorModel.getGreens(byte[]),void,
java.awt.image.IndexColorModel.getBlues(byte[]),void,
java.awt.image.IndexColorModel.getAlphas(byte[]),void,
java.awt.image.IndexColorModel.getRGBs(int[]),void,
java.awt.image.IndexColorModel.getRed(int),int,the value of the red color component for the specified pixel
java.awt.image.IndexColorModel.getGreen(int),int,the value of the green color component for the specified pixel
java.awt.image.IndexColorModel.getBlue(int),int,the value of the blue color component for the specified pixel
java.awt.image.IndexColorModel.getAlpha(int),int,the value of the alpha component for the specified pixel
java.awt.image.IndexColorModel.getRGB(int),int,the color and alpha components of the specified pixel
"java.awt.image.IndexColorModel.getDataElements(int,Object)",Object,an array representation of the specified pixel in this IndexColorModel.
"java.awt.image.IndexColorModel.getComponents(int,int[],int)",int[],an array containing the color and alpha components of the specified pixel starting at the specified offset.
"java.awt.image.IndexColorModel.getComponents(Object,int[],int)",int[],an array containing the color and alpha components of the specified pixel starting at the specified offset.
"java.awt.image.IndexColorModel.getDataElement(int[],int)",int,an int pixel value in this ColorModel corresponding to the specified components.
"java.awt.image.IndexColorModel.getDataElements(int[],int,Object)",Object,an Object representing an array of color and alpha components.
"java.awt.image.IndexColorModel.createCompatibleWritableRaster(int,int)",WritableRaster,a WritableRaster object with the specified width and height.
java.awt.image.IndexColorModel.isCompatibleRaster(Raster),boolean,true if raster is compatible with this ColorModel; false otherwise.
"java.awt.image.IndexColorModel.createCompatibleSampleModel(int,int)",SampleModel,a SampleModel object with the specified width and height.
java.awt.image.IndexColorModel.isCompatibleSampleModel(SampleModel),boolean,true if the specified SampleModel is compatible with this ColorModel; false otherwise.
"java.awt.image.IndexColorModel.convertToIntDiscrete(Raster,boolean)",BufferedImage,a BufferedImage created with the specified Raster
java.awt.image.IndexColorModel.isValid(int),boolean,true if pixel is valid; false otherwise.
java.awt.image.IndexColorModel.isValid(),boolean,true if all pixels are valid; false otherwise.
java.awt.image.IndexColorModel.getValidPixels(),BigInteger,a BigInteger indicating the valid/invalid pixels.
java.awt.image.IndexColorModel.finalize(),voidize(),
java.awt.image.IndexColorModel.toString(),String,a String representing the contents of this ColorModel object.
java.awt.image.Kernel.getXOrigin(),int,the X origin.
java.awt.image.Kernel.getYOrigin(),int,the Y origin.
java.awt.image.Kernel.getWidth(),int,the width of this Kernel.
java.awt.image.Kernel.getHeight(),int,the height of this Kernel.
java.awt.image.Kernel.getKernelData(float[]),float[],"the data array containing the kernel data in row major order or, if data is null, a newly allocated array containing the kernel data in row major order"
java.awt.image.Kernel.clone(),Object,a clone of this object.
java.awt.image.LookupOp.getTable(),LookupTable,the LookupTable of this LookupOp.
"java.awt.image.LookupOp.filter(BufferedImage,BufferedImage)",BufferedImage,the filtered BufferedImage.
"java.awt.image.LookupOp.filter(Raster,WritableRaster)",WritableRaster,the filtered WritableRaster.
java.awt.image.LookupOp.getBounds2D(BufferedImage),Rectangle2D,the bounds of the filtered definition image.
java.awt.image.LookupOp.getBounds2D(Raster),Rectangle2D,the bounds of the filtered definition Raster.
"java.awt.image.LookupOp.createCompatibleDestImage(BufferedImage,ColorModel)",BufferedImage,a filtered destination BufferedImage.
java.awt.image.LookupOp.createCompatibleDestRaster(Raster),WritableRaster,the zeroed-destination Raster.
"java.awt.image.LookupOp.getPoint2D(Point2D,Point2D)",Point2D,the Point2D in the destination that corresponds to the specified point in the source.
java.awt.image.LookupOp.getRenderingHints(),RenderingHints,the RenderingHints object associated with this op.
java.awt.image.LookupTable.getNumComponents(),int,the number of components in this LookupTable.
java.awt.image.LookupTable.getOffset(),int,the offset of this LookupTable.
"java.awt.image.LookupTable.lookupPixel(int[],int[])",abstractint[],an int array of components for one pixel.
java.awt.image.MemoryImageSource.addConsumer(ImageConsumer),void,
java.awt.image.MemoryImageSource.isConsumer(ImageConsumer),boolean,true if the ImageConsumer is on the list; false otherwise.
java.awt.image.MemoryImageSource.removeConsumer(ImageConsumer),void,
java.awt.image.MemoryImageSource.startProduction(ImageConsumer),void,
java.awt.image.MemoryImageSource.requestTopDownLeftRightResend(ImageConsumer),void,
java.awt.image.MemoryImageSource.setAnimated(boolean),void,
java.awt.image.MemoryImageSource.setFullBufferUpdates(boolean),void,
java.awt.image.MemoryImageSource.newPixels(),void,
"java.awt.image.MemoryImageSource.newPixels(int,int,int,int)",void,
"java.awt.image.MemoryImageSource.newPixels(int,int,int,int,boolean)",void,
"java.awt.image.MemoryImageSource.newPixels(byte[],ColorModel,int,int)",void,
"java.awt.image.MemoryImageSource.newPixels(int[],ColorModel,int,int)",void,
"java.awt.image.MultiPixelPackedSampleModel.createCompatibleSampleModel(int,int)",SampleModel,a SampleModel with the specified width and height and with the same storage data type and number of bits per pixel as this MultiPixelPackedSampleModel.
java.awt.image.MultiPixelPackedSampleModel.createDataBuffer(),DataBuffer,a DataBuffer with the same data type and size as this MultiPixelPackedSampleModel.
java.awt.image.MultiPixelPackedSampleModel.getNumDataElements(),int,the number of data elements.
java.awt.image.MultiPixelPackedSampleModel.getSampleSize(),int[],the number of bits per sample.
java.awt.image.MultiPixelPackedSampleModel.getSampleSize(int),int,the number of bits per sample for the specified band.
"java.awt.image.MultiPixelPackedSampleModel.getOffset(int,int)",int,the offset of the specified pixel.
java.awt.image.MultiPixelPackedSampleModel.getBitOffset(int),int,the bit offset of the specified pixel.
java.awt.image.MultiPixelPackedSampleModel.getScanlineStride(),int,the scanline stride of this MultiPixelPackedSampleModel.
java.awt.image.MultiPixelPackedSampleModel.getPixelBitStride(),int,the pixelBitStride of this MultiPixelPackedSampleModel.
java.awt.image.MultiPixelPackedSampleModel.getDataBitOffset(),int,the dataBitOffset of this MultiPixelPackedSampleModel.
java.awt.image.MultiPixelPackedSampleModel.getTransferType(),int,the transfertype.
java.awt.image.MultiPixelPackedSampleModel.createSubsetSampleModel(int[]),SampleModel,a new SampleModel with a subset of bands of this MultiPixelPackedSampleModel.
"java.awt.image.MultiPixelPackedSampleModel.getSample(int,int,int,DataBuffer)",int,the specified band containing the sample of the specified pixel.
"java.awt.image.MultiPixelPackedSampleModel.setSample(int,int,int,int,DataBuffer)",void,
"java.awt.image.MultiPixelPackedSampleModel.getDataElements(int,int,Object,DataBuffer)",Object,an Object containing data for the specified pixel.
"java.awt.image.MultiPixelPackedSampleModel.getPixel(int,int,int[],DataBuffer)",int[],an array containing the specified pixel.
"java.awt.image.MultiPixelPackedSampleModel.setDataElements(int,int,Object,DataBuffer)",void,
"java.awt.image.MultiPixelPackedSampleModel.setPixel(int,int,int[],DataBuffer)",void,
java.awt.image.MultiPixelPackedSampleModel.equals(Object),boolean,
java.awt.image.MultiPixelPackedSampleModel.hashCode(),int,
java.awt.image.PackedColorModel.getMask(int),int,"the mask, which indicates which bits of the int pixel representation contain the color or alpha sample specified by index."
java.awt.image.PackedColorModel.getMasks(),int[],"the mask array , which indicates which bits of the int pixel representation contain the color or alpha samples."
"java.awt.image.PackedColorModel.createCompatibleSampleModel(int,int)",SampleModel,the newly created SampleModel.
java.awt.image.PackedColorModel.isCompatibleSampleModel(SampleModel),boolean,true if the specified SampleModel is compatible with this ColorModel; false otherwise.
java.awt.image.PackedColorModel.getAlphaRaster(WritableRaster),WritableRaster,a WritableRaster that represents the alpha channel of the image contained in raster.
java.awt.image.PackedColorModel.equals(Object),boolean,true if the specified Object is an instance of PackedColorModel and equals this PackedColorModel; false otherwise.
java.awt.image.PixelGrabber.startGrabbing(),void,
java.awt.image.PixelGrabber.abortGrabbing(),void,
java.awt.image.PixelGrabber.grabPixels(),boolean,"true if the pixels were successfully grabbed, false on abort, error or timeout"
java.awt.image.PixelGrabber.grabPixels(long),boolean,
java.awt.image.PixelGrabber.getStatus(),int,the bitwise OR of all relevant ImageObserver flags
java.awt.image.PixelGrabber.getWidth(),int,the final width used for the pixel buffer or -1 if the width is not yet known
java.awt.image.PixelGrabber.getHeight(),int,the final height used for the pixel buffer or -1 if the height is not yet known
java.awt.image.PixelGrabber.getPixels(),Object,either a byte array or an int array
java.awt.image.PixelGrabber.getColorModel(),ColorModel,the ColorModel object used for storing the pixels
"java.awt.image.PixelGrabber.setDimensions(int,int)",void,
java.awt.image.PixelGrabber.setHints(int),void,
"java.awt.image.PixelGrabber.setProperties(Hashtable&lt;?,?&gt;)",void,
java.awt.image.PixelGrabber.setColorModel(ColorModel),void,
"java.awt.image.PixelGrabber.setPixels(int,int,int,int,ColorModel,byte[],int,int)",void,
"java.awt.image.PixelGrabber.setPixels(int,int,int,int,ColorModel,int[],int,int)",void,
java.awt.image.PixelGrabber.imageComplete(int),void,
java.awt.image.PixelGrabber.status(),int,the bitwise OR of all relevant ImageObserver flags
"java.awt.image.PixelInterleavedSampleModel.createCompatibleSampleModel(int,int)",SampleModel,a new SampleModel with the specified width and height.
java.awt.image.PixelInterleavedSampleModel.createSubsetSampleModel(int[]),SampleModel,a ComponentSampleModel created with a subset of bands from this ComponentSampleModel.
java.awt.image.PixelInterleavedSampleModel.hashCode(),int,
"java.awt.image.Raster.createInterleavedRaster(int,int,int,int,Point)",WritableRaster,"a WritableRaster object with the specified data type, width, height and number of bands."
"java.awt.image.Raster.createInterleavedRaster(int,int,int,int,int,int[],Point)",WritableRaster,"a WritableRaster object with the specified data type, width, height, scanline stride, pixel stride and band offsets."
"java.awt.image.Raster.createBandedRaster(int,int,int,int,Point)",WritableRaster,"a WritableRaster object with the specified data type, width, height and number of bands."
"java.awt.image.Raster.createBandedRaster(int,int,int,int,int[],int[],Point)",WritableRaster,"a WritableRaster object with the specified data type, width, height, scanline stride, bank indices and band offsets."
"java.awt.image.Raster.createPackedRaster(int,int,int,int[],Point)",WritableRaster,"a WritableRaster object with the specified data type, width, height, and band masks."
"java.awt.image.Raster.createPackedRaster(int,int,int,int,int,Point)",WritableRaster,"a WritableRaster object with the specified data type, width, height, number of bands, and bits per band."
"java.awt.image.Raster.createInterleavedRaster(DataBuffer,int,int,int,int,int[],Point)",WritableRaster,"a WritableRaster object with the specified DataBuffer, width, height, scanline stride, pixel stride and band offsets."
"java.awt.image.Raster.createBandedRaster(DataBuffer,int,int,int,int[],int[],Point)",WritableRaster,"a WritableRaster object with the specified DataBuffer, width, height, scanline stride, bank indices and band offsets."
"java.awt.image.Raster.createPackedRaster(DataBuffer,int,int,int,int[],Point)",WritableRaster,"a WritableRaster object with the specified DataBuffer, width, height, scanline stride, and band masks."
"java.awt.image.Raster.createPackedRaster(DataBuffer,int,int,int,Point)",WritableRaster,"a WritableRaster object with the specified DataBuffer, width, height, and bits per pixel."
"java.awt.image.Raster.createRaster(SampleModel,DataBuffer,Point)",Raster,"a Raster with the specified SampleModel, DataBuffer, and location."
"java.awt.image.Raster.createWritableRaster(SampleModel,Point)",WritableRaster,a WritableRaster with the specified SampleModel and location.
"java.awt.image.Raster.createWritableRaster(SampleModel,DataBuffer,Point)",WritableRaster,"a WritableRaster with the specified SampleModel, DataBuffer, and location."
java.awt.image.Raster.getParent(),Raster,the parent Raster or null.
java.awt.image.Raster.getSampleModelTranslateX(),int,the X translation from the coordinate space of the Raster's SampleModel to that of the Raster.
java.awt.image.Raster.getSampleModelTranslateY(),int,the Y translation from the coordinate space of the Raster's SampleModel to that of the Raster.
java.awt.image.Raster.createCompatibleWritableRaster(),WritableRaster,a compatible WritableRaster with the same sample model and a new data buffer.
"java.awt.image.Raster.createCompatibleWritableRaster(int,int)",WritableRaster,a compatible WritableRaster with the specified size and a new sample model and data buffer.
java.awt.image.Raster.createCompatibleWritableRaster(Rectangle),WritableRaster,a compatible WritableRaster with the specified size and location and a new sample model and data buffer.
"java.awt.image.Raster.createCompatibleWritableRaster(int,int,int,int)",WritableRaster,a compatible WritableRaster with the specified size and location and a new sample model and data buffer.
"java.awt.image.Raster.createTranslatedChild(int,int)",Raster,"a new Raster with the same size, SampleModel, and DataBuffer as this Raster, but with the specified location."
"java.awt.image.Raster.createChild(int,int,int,int,int,int,int[])",Raster,a new Raster.
java.awt.image.Raster.getBounds(),Rectangle,the bounding box of this Raster.
java.awt.image.Raster.getMinX(),int,the minimum x coordinate of this Raster.
java.awt.image.Raster.getMinY(),int,the minimum y coordinate of this Raster.
java.awt.image.Raster.getWidth(),int,the width of this Raster.
java.awt.image.Raster.getHeight(),int,the height of this Raster.
java.awt.image.Raster.getNumBands(),int,the number of bands of this Raster.
java.awt.image.Raster.getNumDataElements(),int,the number of data elements.
java.awt.image.Raster.getTransferType(),int,this transfer type.
java.awt.image.Raster.getDataBuffer(),DataBuffer,the DataBuffer of this Raster.
java.awt.image.Raster.getSampleModel(),SampleModel,the SampleModel of this Raster.
"java.awt.image.Raster.getDataElements(int,int,Object)",Object,An object reference to an array of type defined by getTransferType() with the requested pixel data.
"java.awt.image.Raster.getDataElements(int,int,int,int,Object)",Object,An object reference to an array of type defined by getTransferType() with the requested pixel data.
"java.awt.image.Raster.getPixel(int,int,int[])",int[],the samples for the specified pixel.
"java.awt.image.Raster.getPixel(int,int,float[])",float[],the samples for the specified pixel.
"java.awt.image.Raster.getPixel(int,int,double[])",double[],the samples for the specified pixel.
"java.awt.image.Raster.getPixels(int,int,int,int,int[])",int[],the samples for the specified rectangle of pixels.
"java.awt.image.Raster.getPixels(int,int,int,int,float[])",float[],the samples for the specified rectangle of pixels.
"java.awt.image.Raster.getPixels(int,int,int,int,double[])",double[],the samples for the specified rectangle of pixels.
"java.awt.image.Raster.getSample(int,int,int)",int,the sample in the specified band for the pixel at the specified coordinate.
"java.awt.image.Raster.getSampleFloat(int,int,int)",float,the sample in the specified band for the pixel at the specified coordinate.
"java.awt.image.Raster.getSampleDouble(int,int,int)",double,the sample in the specified band for the pixel at the specified coordinate.
"java.awt.image.Raster.getSamples(int,int,int,int,int,int[])",int[],the samples for the specified band for the specified rectangle of pixels.
"java.awt.image.Raster.getSamples(int,int,int,int,int,float[])",float[],the samples for the specified band for the specified rectangle of pixels.
"java.awt.image.Raster.getSamples(int,int,int,int,int,double[])",double[],the samples for the specified band for the specified rectangle of pixels.
"java.awt.image.ReplicateScaleFilter.setProperties(Hashtable&lt;?,?&gt;)",void,
"java.awt.image.ReplicateScaleFilter.setDimensions(int,int)",void,
"java.awt.image.ReplicateScaleFilter.setPixels(int,int,int,int,ColorModel,byte[],int,int)",void,
"java.awt.image.ReplicateScaleFilter.setPixels(int,int,int,int,ColorModel,int[],int,int)",void,
java.awt.image.RescaleOp.getScaleFactors(float[]),float[],the scale factors of this RescaleOp.
java.awt.image.RescaleOp.getOffsets(float[]),float[],the offsets of this RescaleOp.
java.awt.image.RescaleOp.getNumFactors(),int,the number of scaling factors and offsets of this RescaleOp.
"java.awt.image.RescaleOp.filter(BufferedImage,BufferedImage)",BufferedImage,the filtered BufferedImage.
"java.awt.image.RescaleOp.filter(Raster,WritableRaster)",WritableRaster,the filtered WritableRaster.
java.awt.image.RescaleOp.getBounds2D(BufferedImage),Rectangle2D,The Rectangle2D representing the destination image's bounding box.
java.awt.image.RescaleOp.getBounds2D(Raster),Rectangle2D,the bounds of the specified Raster.
"java.awt.image.RescaleOp.createCompatibleDestImage(BufferedImage,ColorModel)",BufferedImage,the zeroed-destination image.
java.awt.image.RescaleOp.createCompatibleDestRaster(Raster),WritableRaster,the zeroed-destination Raster.
"java.awt.image.RescaleOp.getPoint2D(Point2D,Point2D)",Point2D,the location of the destination point.
java.awt.image.RescaleOp.getRenderingHints(),RenderingHints,the rendering hints of this RescaleOp.
java.awt.image.RGBImageFilter.setColorModel(ColorModel),void,
"java.awt.image.RGBImageFilter.substituteColorModel(ColorModel,ColorModel)",void,
java.awt.image.RGBImageFilter.filterIndexColorModel(IndexColorModel),IndexColorModel,a new IndexColorModel representing the filtered colors
"java.awt.image.RGBImageFilter.filterRGBPixels(int,int,int,int,int[],int,int)",void,
"java.awt.image.RGBImageFilter.setPixels(int,int,int,int,ColorModel,byte[],int,int)",void,
"java.awt.image.RGBImageFilter.setPixels(int,int,int,int,ColorModel,int[],int,int)",void,
"java.awt.image.RGBImageFilter.filterRGB(int,int,int)",abstractint,a filtered pixel in the default RGB color model.
java.awt.image.SampleModel.getWidth(),int,the width in pixels of the region of image data that this SampleModel describes.
java.awt.image.SampleModel.getHeight(),int,the height in pixels of the region of image data that this SampleModel describes.
java.awt.image.SampleModel.getNumBands(),int,the number of bands of image data that this SampleModel describes.
java.awt.image.SampleModel.getNumDataElements(),abstractint,the number of data elements.
java.awt.image.SampleModel.getDataType(),int,the data type.
java.awt.image.SampleModel.getTransferType(),int,the transfer type.
"java.awt.image.SampleModel.getPixel(int,int,int[],DataBuffer)",int[],the samples for the specified pixel.
"java.awt.image.SampleModel.getDataElements(int,int,Object,DataBuffer)",abstractObject,the data elements for the specified pixel.
"java.awt.image.SampleModel.getDataElements(int,int,int,int,Object,DataBuffer)",Object,the data elements for the specified region of pixels.
"java.awt.image.SampleModel.setDataElements(int,int,Object,DataBuffer)",abstractvoid,
"java.awt.image.SampleModel.setDataElements(int,int,int,int,Object,DataBuffer)",void,
"java.awt.image.SampleModel.getPixel(int,int,float[],DataBuffer)",float[],the samples for the specified pixel.
"java.awt.image.SampleModel.getPixel(int,int,double[],DataBuffer)",double[],the samples for the specified pixel.
"java.awt.image.SampleModel.getPixels(int,int,int,int,int[],DataBuffer)",int[],the samples for the specified region of pixels.
"java.awt.image.SampleModel.getPixels(int,int,int,int,float[],DataBuffer)",float[],the samples for the specified region of pixels.
"java.awt.image.SampleModel.getPixels(int,int,int,int,double[],DataBuffer)",double[],the samples for the specified region of pixels.
"java.awt.image.SampleModel.getSample(int,int,int,DataBuffer)",abstractint,the sample in a specified band for the specified pixel.
"java.awt.image.SampleModel.getSampleFloat(int,int,int,DataBuffer)",float,the sample in a specified band for the specified pixel.
"java.awt.image.SampleModel.getSampleDouble(int,int,int,DataBuffer)",double,the sample in a specified band for the specified pixel.
"java.awt.image.SampleModel.getSamples(int,int,int,int,int,int[],DataBuffer)",int[],the samples for the specified band for the specified region of pixels.
"java.awt.image.SampleModel.getSamples(int,int,int,int,int,float[],DataBuffer)",float[],the samples for the specified band for the specified region of pixels.
"java.awt.image.SampleModel.getSamples(int,int,int,int,int,double[],DataBuffer)",double[],the samples for the specified band for the specified region of pixels.
"java.awt.image.SampleModel.setPixel(int,int,int[],DataBuffer)",void,
"java.awt.image.SampleModel.setPixel(int,int,float[],DataBuffer)",void,
"java.awt.image.SampleModel.setPixel(int,int,double[],DataBuffer)",void,
"java.awt.image.SampleModel.setPixels(int,int,int,int,int[],DataBuffer)",void,
"java.awt.image.SampleModel.setPixels(int,int,int,int,float[],DataBuffer)",void,
"java.awt.image.SampleModel.setPixels(int,int,int,int,double[],DataBuffer)",void,
"java.awt.image.SampleModel.setSample(int,int,int,int,DataBuffer)",abstractvoid,
"java.awt.image.SampleModel.setSample(int,int,int,float,DataBuffer)",void,
"java.awt.image.SampleModel.setSample(int,int,int,double,DataBuffer)",void,
"java.awt.image.SampleModel.setSamples(int,int,int,int,int,int[],DataBuffer)",void,
"java.awt.image.SampleModel.setSamples(int,int,int,int,int,float[],DataBuffer)",void,
"java.awt.image.SampleModel.setSamples(int,int,int,int,int,double[],DataBuffer)",void,
"java.awt.image.SampleModel.createCompatibleSampleModel(int,int)",abstractSampleModel,"a SampleModel describing the same image data as this SampleModel, but with a different size."
java.awt.image.SampleModel.createSubsetSampleModel(int[]),abstractSampleModel,a SampleModel with a subset of bands of this SampleModel.
java.awt.image.SampleModel.createDataBuffer(),abstractDataBuffer,a DataBuffer corresponding to this SampleModel.
java.awt.image.SampleModel.getSampleSize(),abstractint[],the size of samples for all bands.
java.awt.image.SampleModel.getSampleSize(int),abstractint,the size of the samples of the specified band.
java.awt.image.ShortLookupTable.getTable(),short[][],ShortLookupTable data array.
"java.awt.image.ShortLookupTable.lookupPixel(int[],int[])",int[],"the array dst, an int array of samples."
"java.awt.image.ShortLookupTable.lookupPixel(short[],short[])",short[],"the array dst, an int array of samples."
java.awt.image.SinglePixelPackedSampleModel.getNumDataElements(),int,the number of data elements.
"java.awt.image.SinglePixelPackedSampleModel.createCompatibleSampleModel(int,int)",SampleModel,a SinglePixelPackedSampleModel with the specified width and height.
java.awt.image.SinglePixelPackedSampleModel.createDataBuffer(),DataBuffer,a DataBuffer corresponding to this SampleModel.
java.awt.image.SinglePixelPackedSampleModel.getSampleSize(),int[],the size of samples for all bands.
java.awt.image.SinglePixelPackedSampleModel.getSampleSize(int),int,the size of the samples of the specified band.
"java.awt.image.SinglePixelPackedSampleModel.getOffset(int,int)",int,the offset of the specified pixel.
java.awt.image.SinglePixelPackedSampleModel.getBitOffsets(),int[],the bit offsets representing a pixel for all bands.
java.awt.image.SinglePixelPackedSampleModel.getBitMasks(),int[],the bit masks for all bands.
java.awt.image.SinglePixelPackedSampleModel.getScanlineStride(),int,the scanline stride of this SinglePixelPackedSampleModel.
java.awt.image.SinglePixelPackedSampleModel.createSubsetSampleModel(int[]),SampleModel,a SampleModel with a subset of bands of this SampleModel.
"java.awt.image.SinglePixelPackedSampleModel.getDataElements(int,int,Object,DataBuffer)",Object,the data for the specified pixel.
"java.awt.image.SinglePixelPackedSampleModel.getPixel(int,int,int[],DataBuffer)",int[],all samples for the specified pixel.
"java.awt.image.SinglePixelPackedSampleModel.getPixels(int,int,int,int,int[],DataBuffer)",int[],all samples for the specified region of pixels.
"java.awt.image.SinglePixelPackedSampleModel.getSample(int,int,int,DataBuffer)",int,the sample in a specified band for the specified pixel.
"java.awt.image.SinglePixelPackedSampleModel.getSamples(int,int,int,int,int,int[],DataBuffer)",int[],the samples for the specified band for the specified region of pixels.
"java.awt.image.SinglePixelPackedSampleModel.setDataElements(int,int,Object,DataBuffer)",void,
"java.awt.image.SinglePixelPackedSampleModel.setPixel(int,int,int[],DataBuffer)",void,
"java.awt.image.SinglePixelPackedSampleModel.setPixels(int,int,int,int,int[],DataBuffer)",void,
"java.awt.image.SinglePixelPackedSampleModel.setSample(int,int,int,int,DataBuffer)",void,
"java.awt.image.SinglePixelPackedSampleModel.setSamples(int,int,int,int,int,int[],DataBuffer)",void,
java.awt.image.SinglePixelPackedSampleModel.equals(Object),boolean,
java.awt.image.SinglePixelPackedSampleModel.hashCode(),int,
java.awt.image.VolatileImage.getSnapshot(),abstractBufferedImage,a BufferedImage representation of this VolatileImage
java.awt.image.VolatileImage.getWidth(),abstractint,the width of this VolatileImage.
java.awt.image.VolatileImage.getHeight(),abstractint,the height of this VolatileImage.
java.awt.image.VolatileImage.getSource(),ImageProducer,an ImageProducer that can be used to produce the pixels for a BufferedImage representation of this Image.
java.awt.image.VolatileImage.getGraphics(),Graphics,"a Graphics2D, which can be used to draw into this image."
java.awt.image.VolatileImage.createGraphics(),abstractGraphics2D,"a Graphics2D, used for drawing into this image."
java.awt.image.VolatileImage.validate(GraphicsConfiguration),abstractint,"IMAGE_OK if the image did not need validationIMAGE_RESTORED if the image needed restoration. Restoration implies that the contents of the image may have been affected and the image may need to be re-rendered.IMAGE_INCOMPATIBLE if the image is incompatible with the GraphicsConfiguration object passed into the validate method. Incompatibility implies that the image may need to be recreated with a new Component or GraphicsConfiguration in order to get an image that can be used successfully with this GraphicsConfiguration. An incompatible image is not checked for whether restoration was necessary, so the state of the image is unchanged after a return value of IMAGE_INCOMPATIBLE and this return value implies nothing about whether the image needs to be restored."
java.awt.image.VolatileImage.contentsLost(),abstractboolean,true if the drawing surface needs to be restored; false otherwise.
java.awt.image.VolatileImage.getCapabilities(),abstractImageCapabilities,an ImageCapabilities object that contains the capabilities of this VolatileImage.
java.awt.image.VolatileImage.getTransparency(),int,the transparency of this VolatileImage.
java.awt.image.WritableRaster.getWritableParent(),WritableRaster,"the parent of this WritableRaster, or null."
"java.awt.image.WritableRaster.createWritableTranslatedChild(int,int)",WritableRaster,a WritableRaster the same as this one except for the specified location.
"java.awt.image.WritableRaster.createWritableChild(int,int,int,int,int,int,int[])",WritableRaster,a WritableRaster sharing all or part of the DataBuffer of this WritableRaster.
"java.awt.image.WritableRaster.setDataElements(int,int,Object)",void,
"java.awt.image.WritableRaster.setDataElements(int,int,Raster)",void,
"java.awt.image.WritableRaster.setDataElements(int,int,int,int,Object)",void,
java.awt.image.WritableRaster.setRect(Raster),void,
"java.awt.image.WritableRaster.setRect(int,int,Raster)",void,
"java.awt.image.WritableRaster.setPixel(int,int,int[])",void,
"java.awt.image.WritableRaster.setPixel(int,int,float[])",void,
"java.awt.image.WritableRaster.setPixel(int,int,double[])",void,
"java.awt.image.WritableRaster.setPixels(int,int,int,int,int[])",void,
"java.awt.image.WritableRaster.setPixels(int,int,int,int,float[])",void,
"java.awt.image.WritableRaster.setPixels(int,int,int,int,double[])",void,
"java.awt.image.WritableRaster.setSample(int,int,int,int)",void,
"java.awt.image.WritableRaster.setSample(int,int,int,float)",void,
"java.awt.image.WritableRaster.setSample(int,int,int,double)",void,
"java.awt.image.WritableRaster.setSamples(int,int,int,int,int,int[])",void,
"java.awt.image.WritableRaster.setSamples(int,int,int,int,int,float[])",void,
"java.awt.image.WritableRaster.setSamples(int,int,int,int,int,double[])",void,
java.awt.image.renderable.ParameterBlock.shallowClone(),Object,an Object clone of the ParameterBlock.
java.awt.image.renderable.ParameterBlock.clone(),Object,an Object clone of the ParameterBlock.
java.awt.image.renderable.ParameterBlock.addSource(Object),ParameterBlock,a new ParameterBlock containing the specified source.
java.awt.image.renderable.ParameterBlock.getSource(int),Object,an Object that represents the source located at the specified index in the sourcesVector.
"java.awt.image.renderable.ParameterBlock.setSource(Object,int)",ParameterBlock,a new ParameterBlock that contains the specified source at the specified index.
java.awt.image.renderable.ParameterBlock.getRenderedSource(int),RenderedImage,a RenderedImage that represents the source image that is at the specified index in the sources Vector.
java.awt.image.renderable.ParameterBlock.getRenderableSource(int),RenderableImage,a RenderableImage that represents the source image that is at the specified index in the sources Vector.
java.awt.image.renderable.ParameterBlock.getNumSources(),int,the number of source images in the sourcesVector.
java.awt.image.renderable.ParameterBlock.getSources(),Vector&lt;Object&gt;,the sources Vector.
java.awt.image.renderable.ParameterBlock.setSources(Vector&lt;Object&gt;),void,
java.awt.image.renderable.ParameterBlock.removeSources(),void,
java.awt.image.renderable.ParameterBlock.getNumParameters(),int,the number of parameters in the parametersVector.
java.awt.image.renderable.ParameterBlock.getParameters(),Vector&lt;Object&gt;,the parameters Vector.
java.awt.image.renderable.ParameterBlock.setParameters(Vector&lt;Object&gt;),void,
java.awt.image.renderable.ParameterBlock.removeParameters(),void,
java.awt.image.renderable.ParameterBlock.add(Object),ParameterBlock,a new ParameterBlock containing the specified parameter.
java.awt.image.renderable.ParameterBlock.add(byte),ParameterBlock,a new ParameterBlock containing the specified parameter.
java.awt.image.renderable.ParameterBlock.add(char),ParameterBlock,a new ParameterBlock containing the specified parameter.
java.awt.image.renderable.ParameterBlock.add(short),ParameterBlock,a new ParameterBlock containing the specified parameter.
java.awt.image.renderable.ParameterBlock.add(int),ParameterBlock,a new ParameterBlock containing the specified parameter.
java.awt.image.renderable.ParameterBlock.add(long),ParameterBlock,a new ParameterBlock containing the specified parameter.
java.awt.image.renderable.ParameterBlock.add(float),ParameterBlock,a new ParameterBlock containing the specified parameter.
java.awt.image.renderable.ParameterBlock.add(double),ParameterBlock,a new ParameterBlock containing the specified parameter.
"java.awt.image.renderable.ParameterBlock.set(Object,int)",ParameterBlock,a new ParameterBlock containing the specified parameter.
"java.awt.image.renderable.ParameterBlock.set(byte,int)",ParameterBlock,a new ParameterBlock containing the specified parameter.
"java.awt.image.renderable.ParameterBlock.set(char,int)",ParameterBlock,a new ParameterBlock containing the specified parameter.
"java.awt.image.renderable.ParameterBlock.set(short,int)",ParameterBlock,a new ParameterBlock containing the specified parameter.
"java.awt.image.renderable.ParameterBlock.set(int,int)",ParameterBlock,a new ParameterBlock containing the specified parameter.
"java.awt.image.renderable.ParameterBlock.set(long,int)",ParameterBlock,a new ParameterBlock containing the specified parameter.
"java.awt.image.renderable.ParameterBlock.set(float,int)",ParameterBlock,a new ParameterBlock containing the specified parameter.
"java.awt.image.renderable.ParameterBlock.set(double,int)",ParameterBlock,a new ParameterBlock containing the specified parameter.
java.awt.image.renderable.ParameterBlock.getObjectParameter(int),Object,an Object representing the the parameter at the specified index into the parametersVector.
java.awt.image.renderable.ParameterBlock.getByteParameter(int),byte,the parameter at the specified index as a byte value.
java.awt.image.renderable.ParameterBlock.getCharParameter(int),char,the parameter at the specified index as a char value.
java.awt.image.renderable.ParameterBlock.getShortParameter(int),short,the parameter at the specified index as a short value.
java.awt.image.renderable.ParameterBlock.getIntParameter(int),int,the parameter at the specified index as a int value.
java.awt.image.renderable.ParameterBlock.getLongParameter(int),long,the parameter at the specified index as a long value.
java.awt.image.renderable.ParameterBlock.getFloatParameter(int),float,the parameter at the specified index as a float value.
java.awt.image.renderable.ParameterBlock.getDoubleParameter(int),double,the parameter at the specified index as a double value.
java.awt.image.renderable.ParameterBlock.getParamClasses(),Class[],an array of Class objects.
java.awt.image.renderable.RenderableImageOp.getSources(),Vector&lt;RenderableImage&gt;,"a (possibly empty) Vector of RenderableImages, or null."
java.awt.image.renderable.RenderableImageOp.getProperty(String),Object,"a reference to the property Object, or the value java.awt.Image.UndefinedProperty."
java.awt.image.renderable.RenderableImageOp.getPropertyNames(),String[],a list of property names.
java.awt.image.renderable.RenderableImageOp.isDynamic(),boolean,true if successive renderings with the same arguments might produce different results; false otherwise.
java.awt.image.renderable.RenderableImageOp.getWidth(),float,the width of the image in user coordinates.
java.awt.image.renderable.RenderableImageOp.getHeight(),float,the height of the image in user coordinates.
java.awt.image.renderable.RenderableImageOp.getMinX(),float,the minimum X coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImageOp.getMinY(),float,the minimum Y coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImageOp.setParameterBlock(ParameterBlock),ParameterBlock,the old ParameterBlock.
java.awt.image.renderable.RenderableImageOp.getParameterBlock(),ParameterBlock,the ParameterBlock of this RenderableImageOp.
"java.awt.image.renderable.RenderableImageOp.createScaledRendering(int,int,RenderingHints)",RenderedImage,a RenderedImage containing the rendered data.
java.awt.image.renderable.RenderableImageOp.createDefaultRendering(),RenderedImage,a RenderedImage containing the rendered data.
java.awt.image.renderable.RenderableImageOp.createRendering(RenderContext),RenderedImage,
java.awt.image.renderable.RenderableImageProducer.setRenderContext(RenderContext),void,
java.awt.image.renderable.RenderableImageProducer.addConsumer(ImageConsumer),void,
java.awt.image.renderable.RenderableImageProducer.isConsumer(ImageConsumer),boolean,true if the ImageConsumer is on the list; false otherwise.
java.awt.image.renderable.RenderableImageProducer.removeConsumer(ImageConsumer),void,
java.awt.image.renderable.RenderableImageProducer.startProduction(ImageConsumer),void,
java.awt.image.renderable.RenderableImageProducer.requestTopDownLeftRightResend(ImageConsumer),void,
java.awt.image.renderable.RenderableImageProducer.run(),void,
java.awt.image.renderable.RenderContext.getRenderingHints(),RenderingHints,a RenderingHints object that represents the rendering hints of this RenderContext.
java.awt.image.renderable.RenderContext.setRenderingHints(RenderingHints),void,
java.awt.image.renderable.RenderContext.setTransform(AffineTransform),void,
java.awt.image.renderable.RenderContext.preConcatenateTransform(AffineTransform),void,
java.awt.image.renderable.RenderContext.preConcetenateTransform(AffineTransform),void,
java.awt.image.renderable.RenderContext.concatenateTransform(AffineTransform),void,
java.awt.image.renderable.RenderContext.concetenateTransform(AffineTransform),void,
java.awt.image.renderable.RenderContext.getTransform(),AffineTransform,a reference to the current AffineTransform.
java.awt.image.renderable.RenderContext.setAreaOfInterest(Shape),void,
java.awt.image.renderable.RenderContext.getAreaOfInterest(),Shape,"a reference to the area of interest of the RenderContext, or null if none is specified."
java.awt.image.renderable.RenderContext.clone(),Object,the new cloned RenderContext.
java.awt.print.Book.getNumberOfPages(),int,the number of pages this Book contains.
java.awt.print.Book.getPageFormat(int),PageFormat,the PageFormat describing the size and orientation of the page.
java.awt.print.Book.getPrintable(int),Printable,the Printable that renders the page.
"java.awt.print.Book.setPage(int,Printable,PageFormat)",void,
"java.awt.print.Book.append(Printable,PageFormat)",void,
"java.awt.print.Book.append(Printable,PageFormat,int)",void,
java.awt.print.PageFormat.clone(),Object,a copy of this PageFormat.
java.awt.print.PageFormat.getWidth(),double,the width of the page.
java.awt.print.PageFormat.getHeight(),double,the height of the page.
java.awt.print.PageFormat.getImageableX(),double,the x coordinate of the upper left point of the imageable area of the Paper object associated with this PageFormat.
java.awt.print.PageFormat.getImageableY(),double,the y coordinate of the upper left point of the imageable area of the Paper object associated with this PageFormat.
java.awt.print.PageFormat.getImageableWidth(),double,the width of the page.
java.awt.print.PageFormat.getImageableHeight(),double,the height of the page.
java.awt.print.PageFormat.getPaper(),Paper,a copy of the Paper object associated with this PageFormat.
java.awt.print.PageFormat.setPaper(Paper),void,
java.awt.print.PageFormat.setOrientation(int),void,
java.awt.print.PageFormat.getOrientation(),int,this PageFormat object's orientation.
java.awt.print.PageFormat.getMatrix(),double[],the matrix used to translate user space rendering to the orientation of the page.
java.awt.print.Paper.clone(),Object,a copy of this Paper.
java.awt.print.Paper.getHeight(),double,the height of the page described by this Paper.
"java.awt.print.Paper.setSize(double,double)",void,
java.awt.print.Paper.getWidth(),double,the width of the page described by this Paper.
"java.awt.print.Paper.setImageableArea(double,double,double,double)",void,
java.awt.print.Paper.getImageableX(),double,the x coordinate of the imageable area.
java.awt.print.Paper.getImageableY(),double,the y coordinate of the imageable area.
java.awt.print.Paper.getImageableWidth(),double,the width of the imageable area.
java.awt.print.Paper.getImageableHeight(),double,the height of the imageable area.
java.awt.print.PrinterJob.getPrinterJob(),PrinterJob,a new PrinterJob.
java.awt.print.PrinterJob.lookupPrintServices(),PrintService[],a possibly empty array of 2D print services.
java.awt.print.PrinterJob.lookupStreamPrintServices(String),StreamPrintServiceFactory[],a possibly empty array of 2D stream print service factories.
java.awt.print.PrinterJob.getPrintService(),PrintService,the service for this printer job.
java.awt.print.PrinterJob.setPrintService(PrintService),void,
java.awt.print.PrinterJob.setPrintable(Printable),abstractvoid,
"java.awt.print.PrinterJob.setPrintable(Printable,PageFormat)",abstractvoid,
java.awt.print.PrinterJob.setPageable(Pageable),abstractvoid,
java.awt.print.PrinterJob.printDialog(),abstractboolean,true if the user does not cancel the dialog; false otherwise.
java.awt.print.PrinterJob.printDialog(PrintRequestAttributeSet),boolean,true if the user does not cancel the dialog; false otherwise.
java.awt.print.PrinterJob.pageDialog(PageFormat),abstractPageFormat,the original page object if the dialog is cancelled; a new PageFormat object containing the format indicated by the user if the dialog is acknowledged.
java.awt.print.PrinterJob.pageDialog(PrintRequestAttributeSet),PageFormat,a page format if the user does not cancel the dialog; null otherwise.
java.awt.print.PrinterJob.defaultPage(PageFormat),abstractPageFormat,"clone of page, altered to describe a default PageFormat."
java.awt.print.PrinterJob.defaultPage(),PageFormat,a PageFormat set to a default size and orientation.
java.awt.print.PrinterJob.getPageFormat(PrintRequestAttributeSet),PageFormat,a PageFormat whose settings conform with those of the current service and the specified attributes.
java.awt.print.PrinterJob.validatePage(PageFormat),abstractPageFormat,a PageFormat that is cloned from page and whose settings are changed to conform with this PrinterJob.
java.awt.print.PrinterJob.print(),abstractvoid,
java.awt.print.PrinterJob.print(PrintRequestAttributeSet),void,
java.awt.print.PrinterJob.setCopies(int),abstractvoid,
java.awt.print.PrinterJob.getCopies(),abstractint,the number of copies to be printed.
java.awt.print.PrinterJob.getUserName(),abstractString,the name of the printing user
java.awt.print.PrinterJob.setJobName(String),abstractvoid,
java.awt.print.PrinterJob.getJobName(),abstractString,the name of the document to be printed.
java.awt.print.PrinterJob.cancel(),abstractvoid,
java.awt.print.PrinterJob.isCancelled(),abstractboolean,true if the job in progress is going to be cancelled; false otherwise.
java.beans.BeanDescriptor.getBeanClass(),Class&lt;?&gt;,The Class object for the bean.
java.beans.BeanDescriptor.getCustomizerClass(),Class&lt;?&gt;,The Class object for the bean's customizer. This may be null if the bean doesn't have a customizer.
"java.beans.Beans.instantiate(ClassLoader,String)",Object,a JavaBean
"java.beans.Beans.instantiate(ClassLoader,String,BeanContext)",Object,a JavaBean
"java.beans.Beans.instantiate(ClassLoader,String,BeanContext,AppletInitializer)",Object,a JavaBean
"java.beans.Beans.getInstanceOf(Object,Class&lt;?&gt;)",Object,an object representing a specified type view of the source object
"java.beans.Beans.isInstanceOf(Object,Class&lt;?&gt;)",boolean,"""true"" if the given bean supports the given targetType."
java.beans.Beans.isDesignTime(),boolean,True if we are running in an application construction environment.
java.beans.Beans.isGuiAvailable(),boolean,"True if we are running in an environment where beans can assume that an interactive GUI is available, so they can pop up dialog boxes, etc. This will normally return true in a windowing environment, and will normally return false in a server environment or if an application is running as part of a batch job."
java.beans.Beans.setDesignTime(boolean),void,
java.beans.Beans.setGuiAvailable(boolean),void,
"java.beans.DefaultPersistenceDelegate.mutatesTo(Object,Object)",boolean,True if an equivalent copy of newInstance may be created by applying a series of mutations to oldInstance.
"java.beans.DefaultPersistenceDelegate.instantiate(Object,Encoder)",Expression,An expression whose value is oldInstance.
"java.beans.DefaultPersistenceDelegate.initialize(Class&lt;?&gt;,Object,Object,Encoder)",void,
java.beans.Encoder.writeObject(Object),void,
java.beans.Encoder.setExceptionListener(ExceptionListener),void,
java.beans.Encoder.getExceptionListener(),ExceptionListener,The exception handler for this stream; Will return the default exception listener if this has not explicitly been set.
java.beans.Encoder.getPersistenceDelegate(Class&lt;?&gt;),PersistenceDelegate,
"java.beans.Encoder.setPersistenceDelegate(Class&lt;?&gt;,PersistenceDelegate)",void,
java.beans.Encoder.remove(Object),Object,The entry that was removed.
java.beans.Encoder.get(Object),Object,"The object, null if the object has not been seen before."
java.beans.Encoder.writeStatement(Statement),void,
java.beans.Encoder.writeExpression(Expression),void,
java.beans.EventHandler.getTarget(),Object,the target of this event handler
java.beans.EventHandler.getAction(),String,the action of this event handler
java.beans.EventHandler.getEventPropertyName(),String,the property of the event
java.beans.EventHandler.getListenerMethodName(),String,the name of the method that will trigger the action
"java.beans.EventHandler.invoke(Object,Method,Object[])",Object,the result of applying the action to the target
"java.beans.EventHandler.create(Class&lt;T&gt;,Object,String)",&lt;T&gt;T,an object that implements listenerInterface
"java.beans.EventHandler.create(Class&lt;T&gt;,Object,String,String)",&lt;T&gt;T,an object that implements listenerInterface
"java.beans.EventHandler.create(Class&lt;T&gt;,Object,String,String,String)",&lt;T&gt;T,an object that implements listenerInterface
java.beans.EventSetDescriptor.getListenerType(),Class&lt;?&gt;,The Class object for the target interface that will get invoked when the event is fired.
java.beans.EventSetDescriptor.getListenerMethods(),Method[],An array of Method objects for the target methods within the target listener interface that will get called when events are fired.
java.beans.EventSetDescriptor.getListenerMethodDescriptors(),MethodDescriptor[],An array of MethodDescriptor objects for the target methods within the target listener interface that will get called when events are fired.
java.beans.EventSetDescriptor.getAddListenerMethod(),Method,The method used to register a listener at the event source.
java.beans.EventSetDescriptor.getRemoveListenerMethod(),Method,The method used to remove a listener at the event source.
java.beans.EventSetDescriptor.getGetListenerMethod(),Method,The method used to access the array of listeners at the event source or null if it doesn't exist.
java.beans.EventSetDescriptor.setUnicast(boolean),void,
java.beans.EventSetDescriptor.isUnicast(),boolean,true if the event set is unicast. Defaults to false.
java.beans.EventSetDescriptor.setInDefaultEventSet(boolean),void,
java.beans.EventSetDescriptor.isInDefaultEventSet(),boolean,"true if the event set is in the ""default"" set. Defaults to true."
java.beans.Expression.execute(),void,
java.beans.Expression.getValue(),Object,The result of applying this method to these arguments.
java.beans.Expression.setValue(Object),void,
java.beans.Expression.toString(),String,a string representation of the object.
java.beans.FeatureDescriptor.getName(),String,The programmatic name of the property/method/event
java.beans.FeatureDescriptor.setName(String),void,
java.beans.FeatureDescriptor.getDisplayName(),String,The localized display name for the property/method/event. This defaults to the same as its programmatic name from getName.
java.beans.FeatureDescriptor.setDisplayName(String),void,
java.beans.FeatureDescriptor.isExpert(),boolean,True if this feature is intended for use by experts only.
java.beans.FeatureDescriptor.setExpert(boolean),void,
java.beans.FeatureDescriptor.isHidden(),boolean,True if this feature should be hidden from human users.
java.beans.FeatureDescriptor.setHidden(boolean),void,
java.beans.FeatureDescriptor.isPreferred(),boolean,True if this feature should be preferentially shown to human users.
java.beans.FeatureDescriptor.setPreferred(boolean),void,
java.beans.FeatureDescriptor.getShortDescription(),String,A localized short description associated with this property/method/event. This defaults to be the display name.
java.beans.FeatureDescriptor.setShortDescription(String),void,
"java.beans.FeatureDescriptor.setValue(String,Object)",void,
java.beans.FeatureDescriptor.getValue(String),Object,The value of the attribute. May be null if the attribute is unknown.
java.beans.FeatureDescriptor.attributeNames(),Enumeration&lt;String&gt;,An enumeration of the locale-independent names of any attributes that have been registered with setValue.
java.beans.FeatureDescriptor.toString(),String,a string representation of the object
java.beans.IndexedPropertyChangeEvent.getIndex(),int,The index specifying the property element that was changed.
java.beans.IndexedPropertyDescriptor.getIndexedReadMethod(),Method,The method that should be used to read an indexed property value. May return null if the property isn't indexed or is write-only.
java.beans.IndexedPropertyDescriptor.setIndexedReadMethod(Method),void,
java.beans.IndexedPropertyDescriptor.getIndexedWriteMethod(),Method,The method that should be used to write an indexed property value. May return null if the property isn't indexed or is read-only.
java.beans.IndexedPropertyDescriptor.setIndexedWriteMethod(Method),void,
java.beans.IndexedPropertyDescriptor.getIndexedPropertyType(),Class&lt;?&gt;,"the Class object that represents the Java type info, or null if the type cannot be determined"
java.beans.IndexedPropertyDescriptor.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.beans.IndexedPropertyDescriptor.hashCode(),int,a hash code value for this object.
java.beans.Introspector.getBeanInfo(Class&lt;?&gt;),BeanInfo,A BeanInfo object describing the target bean.
"java.beans.Introspector.getBeanInfo(Class&lt;?&gt;,int)",BeanInfo,A BeanInfo object describing the target bean.
"java.beans.Introspector.getBeanInfo(Class&lt;?&gt;,Class&lt;?&gt;)",BeanInfo,the BeanInfo for the bean
"java.beans.Introspector.getBeanInfo(Class&lt;?&gt;,Class&lt;?&gt;,int)",BeanInfo,a BeanInfo object describing the target bean
java.beans.Introspector.decapitalize(String),String,The decapitalized version of the string.
java.beans.Introspector.getBeanInfoSearchPath(),String[],"The array of package names that will be searched in order to find BeanInfo classes. The default value for this array is implementation-dependent; e.g. Sun implementation initially sets to {""sun.beans.infos""}."
java.beans.Introspector.setBeanInfoSearchPath(String[]),void,
java.beans.Introspector.flushCaches(),void,
java.beans.Introspector.flushFromCaches(Class&lt;?&gt;),void,
java.beans.MethodDescriptor.getMethod(),Method,The low-level description of the method
java.beans.MethodDescriptor.getParameterDescriptors(),ParameterDescriptor[],The locale-independent names of the parameters. May return a null array if the parameter names aren't known.
"java.beans.PersistenceDelegate.writeObject(Object,Encoder)",void,
"java.beans.PersistenceDelegate.mutatesTo(Object,Object)",boolean,True if an equivalent copy of newInstance may be created by applying a series of mutations to oldInstance.
"java.beans.PersistenceDelegate.instantiate(Object,Encoder)",abstractExpression,An expression whose value is oldInstance.
"java.beans.PersistenceDelegate.initialize(Class&lt;?&gt;,Object,Object,Encoder)",void,
java.beans.PropertyChangeEvent.getPropertyName(),String,The programmatic name of the property that was changed. May be null if multiple properties have changed.
java.beans.PropertyChangeEvent.getNewValue(),Object,"The new value for the property, expressed as an Object. May be null if multiple properties have changed."
java.beans.PropertyChangeEvent.getOldValue(),Object,"The old value for the property, expressed as an Object. May be null if multiple properties have changed."
java.beans.PropertyChangeEvent.setPropagationId(Object),void,
java.beans.PropertyChangeEvent.getPropagationId(),Object,the propagationId object associated with a bound/constrained property update.
java.beans.PropertyChangeEvent.toString(),String,a string representation of the object
java.beans.PropertyChangeListenerProxy.propertyChange(PropertyChangeEvent),void,
java.beans.PropertyChangeListenerProxy.getPropertyName(),String,the name of the named property associated with the listener
java.beans.PropertyChangeSupport.addPropertyChangeListener(PropertyChangeListener),void,
java.beans.PropertyChangeSupport.removePropertyChangeListener(PropertyChangeListener),void,
java.beans.PropertyChangeSupport.getPropertyChangeListeners(),PropertyChangeListener[],all of the PropertyChangeListeners added or an empty array if no listeners have been added
"java.beans.PropertyChangeSupport.addPropertyChangeListener(String,PropertyChangeListener)",void,
"java.beans.PropertyChangeSupport.removePropertyChangeListener(String,PropertyChangeListener)",void,
java.beans.PropertyChangeSupport.getPropertyChangeListeners(String),PropertyChangeListener[],"all of the PropertyChangeListeners associated with the named property. If no such listeners have been added, or if propertyName is null, an empty array is returned."
"java.beans.PropertyChangeSupport.firePropertyChange(String,Object,Object)",void,
"java.beans.PropertyChangeSupport.firePropertyChange(String,int,int)",void,
"java.beans.PropertyChangeSupport.firePropertyChange(String,boolean,boolean)",void,
java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeEvent),void,
"java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String,int,Object,Object)",void,
"java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String,int,int,int)",void,
"java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String,int,boolean,boolean)",void,
java.beans.PropertyChangeSupport.hasListeners(String),boolean,true if there are one or more listeners for the given property
java.beans.PropertyDescriptor.getPropertyType(),Class&lt;?&gt;,"the Class object that represents the Java type info, or null if the type cannot be determined"
java.beans.PropertyDescriptor.getReadMethod(),Method,The method that should be used to read the property value. May return null if the property can't be read.
java.beans.PropertyDescriptor.setReadMethod(Method),void,
java.beans.PropertyDescriptor.getWriteMethod(),Method,The method that should be used to write the property value. May return null if the property can't be written.
java.beans.PropertyDescriptor.setWriteMethod(Method),void,
java.beans.PropertyDescriptor.isBound(),boolean,True if this is a bound property.
java.beans.PropertyDescriptor.setBound(boolean),void,
java.beans.PropertyDescriptor.isConstrained(),boolean,True if this is a constrained property.
java.beans.PropertyDescriptor.setConstrained(boolean),void,
java.beans.PropertyDescriptor.setPropertyEditorClass(Class&lt;?&gt;),void,
java.beans.PropertyDescriptor.getPropertyEditorClass(),Class&lt;?&gt;,"Any explicit PropertyEditor Class that has been registered for this property. Normally this will return ""null"", indicating that no special editor has been registered, so the PropertyEditorManager should be used to locate a suitable PropertyEditor."
java.beans.PropertyDescriptor.createPropertyEditor(Object),PropertyEditor,a property editor instance or null if a property editor has not been defined or cannot be created
java.beans.PropertyDescriptor.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.beans.PropertyDescriptor.hashCode(),int,a hash code value for this object.
"java.beans.PropertyEditorManager.registerEditor(Class&lt;?&gt;,Class&lt;?&gt;)",void,
java.beans.PropertyEditorManager.findEditor(Class&lt;?&gt;),PropertyEditor,An editor object for the given target class. The result is null if no suitable editor can be found.
java.beans.PropertyEditorManager.getEditorSearchPath(),String[],"The array of package names that will be searched in order to find property editors. The default value for this array is implementation-dependent, e.g. Sun implementation initially sets to {""sun.beans.editors""}."
java.beans.PropertyEditorManager.setEditorSearchPath(String[]),void,
java.beans.PropertyEditorSupport.getSource(),Object,the source object or this instance
java.beans.PropertyEditorSupport.setSource(Object),void,
java.beans.PropertyEditorSupport.setValue(Object),void,
java.beans.PropertyEditorSupport.getValue(),Object,The value of the property.
java.beans.PropertyEditorSupport.isPaintable(),boolean,True if the class will honor the paintValue method.
"java.beans.PropertyEditorSupport.paintValue(Graphics,Rectangle)",void,
java.beans.PropertyEditorSupport.getJavaInitializationString(),String,A fragment of Java code representing an initializer for the current value.
java.beans.PropertyEditorSupport.getAsText(),String,"The property value as a string suitable for presentation to a human to edit. Returns null if the value can't be expressed as a string. If a non-null value is returned, then the PropertyEditor should be prepared to parse that string back in setAsText()."
java.beans.PropertyEditorSupport.setAsText(String),void,
java.beans.PropertyEditorSupport.getTags(),String[],The tag values for this property. May be null if this property cannot be represented as a tagged value.
java.beans.PropertyEditorSupport.getCustomEditor(),Component,A java.awt.Component that will allow a human to directly edit the current property value. May be null if this is not supported.
java.beans.PropertyEditorSupport.supportsCustomEditor(),boolean,True if the propertyEditor can provide a custom editor.
java.beans.PropertyEditorSupport.addPropertyChangeListener(PropertyChangeListener),void,
java.beans.PropertyEditorSupport.removePropertyChangeListener(PropertyChangeListener),void,
java.beans.PropertyEditorSupport.firePropertyChange(),void,
java.beans.SimpleBeanInfo.getBeanDescriptor(),BeanDescriptor,"a BeanDescriptor object, or null if the information is to be obtained through the automatic analysis"
java.beans.SimpleBeanInfo.getPropertyDescriptors(),PropertyDescriptor[],"an array of PropertyDescriptor objects, or null if the information is to be obtained through the automatic analysis"
java.beans.SimpleBeanInfo.getDefaultPropertyIndex(),int,"index of the default property in the PropertyDescriptor array returned by the getPropertyDescriptors method, or -1 if there is no default property"
java.beans.SimpleBeanInfo.getEventSetDescriptors(),EventSetDescriptor[],"an array of EventSetDescriptor objects, or null if the information is to be obtained through the automatic analysis"
java.beans.SimpleBeanInfo.getDefaultEventIndex(),int,"index of the default event in the EventSetDescriptor array returned by the getEventSetDescriptors method, or -1 if there is no default event"
java.beans.SimpleBeanInfo.getMethodDescriptors(),MethodDescriptor[],"an array of MethodDescriptor objects, or null if the information is to be obtained through the automatic analysis"
java.beans.SimpleBeanInfo.getAdditionalBeanInfo(),BeanInfo[],"an array of BeanInfo objects, or null if there are no additional BeanInfo objects"
java.beans.SimpleBeanInfo.getIcon(int),Image,"an image object representing the requested icon, or null if no suitable icon is available"
java.beans.SimpleBeanInfo.loadImage(String),Image,an image object. May be null if the load failed.
java.beans.Statement.getTarget(),Object,the target object of this statement
java.beans.Statement.getMethodName(),String,the name of the method
java.beans.Statement.getArguments(),Object[],the array of arguments
java.beans.Statement.execute(),void,
java.beans.Statement.toString(),String,a string representation of the object.
java.beans.VetoableChangeListenerProxy.vetoableChange(PropertyChangeEvent),void,
java.beans.VetoableChangeListenerProxy.getPropertyName(),String,the name of the named property associated with the listener
java.beans.VetoableChangeSupport.addVetoableChangeListener(VetoableChangeListener),void,
java.beans.VetoableChangeSupport.removeVetoableChangeListener(VetoableChangeListener),void,
java.beans.VetoableChangeSupport.getVetoableChangeListeners(),VetoableChangeListener[],all of the VetoableChangeListeners added or an empty array if no listeners have been added
"java.beans.VetoableChangeSupport.addVetoableChangeListener(String,VetoableChangeListener)",void,
"java.beans.VetoableChangeSupport.removeVetoableChangeListener(String,VetoableChangeListener)",void,
java.beans.VetoableChangeSupport.getVetoableChangeListeners(String),VetoableChangeListener[],"all the VetoableChangeListeners associated with the named property. If no such listeners have been added, or if propertyName is null, an empty array is returned."
"java.beans.VetoableChangeSupport.fireVetoableChange(String,Object,Object)",void,
"java.beans.VetoableChangeSupport.fireVetoableChange(String,int,int)",void,
"java.beans.VetoableChangeSupport.fireVetoableChange(String,boolean,boolean)",void,
java.beans.VetoableChangeSupport.fireVetoableChange(PropertyChangeEvent),void,
java.beans.VetoableChangeSupport.hasListeners(String),boolean,true if there are one or more listeners for the given property
java.beans.XMLDecoder.close(),void,
java.beans.XMLDecoder.setExceptionListener(ExceptionListener),void,
java.beans.XMLDecoder.getExceptionListener(),ExceptionListener,The exception handler for this stream. Will return the default exception listener if this has not explicitly been set.
java.beans.XMLDecoder.readObject(),Object,the next object read
java.beans.XMLDecoder.setOwner(Object),void,
java.beans.XMLDecoder.getOwner(),Object,The owner of this decoder.
"java.beans.XMLDecoder.createHandler(Object,ExceptionListener,ClassLoader)",DefaultHandler,an instance of DefaultHandler for SAX parser
java.beans.XMLEncoder.setOwner(Object),void,
java.beans.XMLEncoder.getOwner(),Object,The owner of this encoder.
java.beans.XMLEncoder.writeObject(Object),void,
java.beans.XMLEncoder.writeStatement(Statement),void,
java.beans.XMLEncoder.writeExpression(Expression),void,
java.beans.XMLEncoder.flush(),void,
java.beans.XMLEncoder.close(),void,
java.beans.beancontext.BeanContextChildSupport.setBeanContext(BeanContext),void,
java.beans.beancontext.BeanContextChildSupport.getBeanContext(),BeanContext,the nesting BeanContext for this BeanContextChildSupport.
"java.beans.beancontext.BeanContextChildSupport.addPropertyChangeListener(String,PropertyChangeListener)",void,
"java.beans.beancontext.BeanContextChildSupport.removePropertyChangeListener(String,PropertyChangeListener)",void,
"java.beans.beancontext.BeanContextChildSupport.addVetoableChangeListener(String,VetoableChangeListener)",void,
"java.beans.beancontext.BeanContextChildSupport.removeVetoableChangeListener(String,VetoableChangeListener)",void,
java.beans.beancontext.BeanContextChildSupport.serviceRevoked(BeanContextServiceRevokedEvent),void,
java.beans.beancontext.BeanContextChildSupport.serviceAvailable(BeanContextServiceAvailableEvent),void,
java.beans.beancontext.BeanContextChildSupport.getBeanContextChildPeer(),BeanContextChild,the BeanContextChild peer of this class
java.beans.beancontext.BeanContextChildSupport.isDelegated(),boolean,true if this class is a delegate of another
"java.beans.beancontext.BeanContextChildSupport.firePropertyChange(String,Object,Object)",void,
"java.beans.beancontext.BeanContextChildSupport.fireVetoableChange(String,Object,Object)",void,
java.beans.beancontext.BeanContextChildSupport.validatePendingSetBeanContext(BeanContext),boolean,true if the change operation is to be vetoed
java.beans.beancontext.BeanContextChildSupport.releaseBeanContextResources(),void,
java.beans.beancontext.BeanContextChildSupport.initializeBeanContextResources(),void,
java.beans.beancontext.BeanContextEvent.getBeanContext(),BeanContext,the BeanContext associated with this event.
java.beans.beancontext.BeanContextEvent.setPropagatedFrom(BeanContext),void,
java.beans.beancontext.BeanContextEvent.getPropagatedFrom(),BeanContext,the BeanContext from which this event was propagated
java.beans.beancontext.BeanContextEvent.isPropagated(),boolean,"true if propagated, false if not"
java.beans.beancontext.BeanContextMembershipEvent.size(),int,the number of children affected by the notification
java.beans.beancontext.BeanContextMembershipEvent.contains(Object),boolean,"true if affected, false if not"
java.beans.beancontext.BeanContextMembershipEvent.toArray(),Object[],the array of children affected
java.beans.beancontext.BeanContextMembershipEvent.iterator(),Iterator,the array of children effected
java.beans.beancontext.BeanContextServiceAvailableEvent.getSourceAsBeanContextServices(),BeanContextServices,The context in which the service has become available
java.beans.beancontext.BeanContextServiceAvailableEvent.getServiceClass(),Class,A Class reference to the newly available service
java.beans.beancontext.BeanContextServiceAvailableEvent.getCurrentServiceSelectors(),Iterator,the current selectors available from the service
java.beans.beancontext.BeanContextServiceRevokedEvent.getSourceAsBeanContextServices(),BeanContextServices,the BeanContextServices from which this service is being revoked
java.beans.beancontext.BeanContextServiceRevokedEvent.getServiceClass(),Class,A Class reference to the service that is being revoked
java.beans.beancontext.BeanContextServiceRevokedEvent.isServiceClass(Class),boolean,true if the service being revoked is of the same class as the specified service
java.beans.beancontext.BeanContextServiceRevokedEvent.isCurrentServiceInvalidNow(),boolean,true if current service is being forcibly revoked
java.beans.beancontext.BeanContextServicesSupport.initialize(),void,
java.beans.beancontext.BeanContextServicesSupport.getBeanContextServicesPeer(),BeanContextServices,the instance of BeanContext this object is providing the implementation for.
"java.beans.beancontext.BeanContextServicesSupport.createBCSChild(Object,Object)",BeanContextSupport.BCSChild,
"java.beans.beancontext.BeanContextServicesSupport.createBCSSServiceProvider(Class,BeanContextServiceProvider)",BeanContextServicesSupport.BCSSServiceProvider,a service provider without overriding addService()
java.beans.beancontext.BeanContextServicesSupport.addBeanContextServicesListener(BeanContextServicesListener),void,
java.beans.beancontext.BeanContextServicesSupport.removeBeanContextServicesListener(BeanContextServicesListener),void,
"java.beans.beancontext.BeanContextServicesSupport.addService(Class,BeanContextServiceProvider)",boolean,"true if the service was successful added, false otherwise"
"java.beans.beancontext.BeanContextServicesSupport.addService(Class,BeanContextServiceProvider,boolean)",boolean,true if the service was successfully added
"java.beans.beancontext.BeanContextServicesSupport.revokeService(Class,BeanContextServiceProvider,boolean)",void,
java.beans.beancontext.BeanContextServicesSupport.hasService(Class),boolean,true if the service is available
"java.beans.beancontext.BeanContextServicesSupport.getService(BeanContextChild,Object,Class,Object,BeanContextServiceRevokedListener)",Object,a reference to this context's named Service as requested or null
"java.beans.beancontext.BeanContextServicesSupport.releaseService(BeanContextChild,Object,Object)",void,
java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceClasses(),Iterator,an iterator for all the currently registered service classes.
java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceSelectors(Class),Iterator,an iterator for all the currently available service selectors (if any) available for the specified service.
java.beans.beancontext.BeanContextServicesSupport.serviceAvailable(BeanContextServiceAvailableEvent),void,
java.beans.beancontext.BeanContextServicesSupport.serviceRevoked(BeanContextServiceRevokedEvent),void,
java.beans.beancontext.BeanContextServicesSupport.getChildBeanContextServicesListener(Object),BeanContextServicesListener,the BeanContextServicesListener (if any) of the specified child
"java.beans.beancontext.BeanContextServicesSupport.childJustRemovedHook(Object,BeanContextSupport.BCSChild)",void,
java.beans.beancontext.BeanContextServicesSupport.releaseBeanContextResources(),void,
java.beans.beancontext.BeanContextServicesSupport.initializeBeanContextResources(),void,
java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(Class),void,
java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(BeanContextServiceAvailableEvent),void,
java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(BeanContextServiceRevokedEvent),void,
"java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(Class,boolean)",void,
java.beans.beancontext.BeanContextServicesSupport.bcsPreSerializationHook(ObjectOutputStream),void,
java.beans.beancontext.BeanContextServicesSupport.bcsPreDeserializationHook(ObjectInputStream),void,
java.beans.beancontext.BeanContextServicesSupport.BCSSServiceProvider.getServiceProvider(),BeanContextServiceProvider,the service provider
java.beans.beancontext.BeanContextSupport.getBeanContextPeer(),BeanContext,the BeanContext instance
java.beans.beancontext.BeanContextSupport.instantiateChild(String),Object,the new object
java.beans.beancontext.BeanContextSupport.size(),int,number of children
java.beans.beancontext.BeanContextSupport.isEmpty(),boolean,if there are not children
java.beans.beancontext.BeanContextSupport.contains(Object),boolean,if this object is a child
java.beans.beancontext.BeanContextSupport.containsKey(Object),boolean,if this object is a child
java.beans.beancontext.BeanContextSupport.iterator(),Iterator,an Iterator of the nested children
java.beans.beancontext.BeanContextSupport.toArray(),Object[],an array containing all of the elements in this collection
java.beans.beancontext.BeanContextSupport.toArray(Object[]),Object[],an array of children
"java.beans.beancontext.BeanContextSupport.createBCSChild(Object,Object)",BeanContextSupport.BCSChild,
java.beans.beancontext.BeanContextSupport.add(Object),boolean,true if the child was added successfully.
java.beans.beancontext.BeanContextSupport.remove(Object),boolean,true if an element was removed as a result of this call
"java.beans.beancontext.BeanContextSupport.remove(Object,boolean)",boolean,whether or not was present before being removed
java.beans.beancontext.BeanContextSupport.containsAll(Collection),boolean,"true if all objects in the collection are children of this BeanContext, false if not."
java.beans.beancontext.BeanContextSupport.addAll(Collection),boolean,this implementation unconditionally throws UnsupportedOperationException
java.beans.beancontext.BeanContextSupport.removeAll(Collection),boolean,this implementation unconditionally throws UnsupportedOperationException
java.beans.beancontext.BeanContextSupport.retainAll(Collection),boolean,this implementation unconditionally throws UnsupportedOperationException
java.beans.beancontext.BeanContextSupport.clear(),void,
java.beans.beancontext.BeanContextSupport.addBeanContextMembershipListener(BeanContextMembershipListener),void,
java.beans.beancontext.BeanContextSupport.removeBeanContextMembershipListener(BeanContextMembershipListener),void,
"java.beans.beancontext.BeanContextSupport.getResourceAsStream(String,BeanContextChild)",InputStream,the requested resource as an InputStream
"java.beans.beancontext.BeanContextSupport.getResource(String,BeanContextChild)",URL,the requested resource as an InputStream
java.beans.beancontext.BeanContextSupport.setDesignTime(boolean),void,
java.beans.beancontext.BeanContextSupport.isDesignTime(),boolean,"true if in design time mode, false if not"
java.beans.beancontext.BeanContextSupport.setLocale(Locale),void,
java.beans.beancontext.BeanContextSupport.getLocale(),Locale,the current Locale of the BeanContext
java.beans.beancontext.BeanContextSupport.needsGui(),boolean,true if the implementor needs a GUI
java.beans.beancontext.BeanContextSupport.dontUseGui(),void,
java.beans.beancontext.BeanContextSupport.okToUseGui(),void,
java.beans.beancontext.BeanContextSupport.avoidingGui(),boolean,is this instance avoiding using its GUI?
java.beans.beancontext.BeanContextSupport.isSerializing(),boolean,if this BeanContext is currently being serialized
java.beans.beancontext.BeanContextSupport.bcsChildren(),Iterator,an iterator for all the current BCSChild values
java.beans.beancontext.BeanContextSupport.bcsPreSerializationHook(ObjectOutputStream),void,
java.beans.beancontext.BeanContextSupport.bcsPreDeserializationHook(ObjectInputStream),void,
"java.beans.beancontext.BeanContextSupport.childDeserializedHook(Object,BeanContextSupport.BCSChild)",void,
"java.beans.beancontext.BeanContextSupport.serialize(ObjectOutputStream,Collection)",void,
"java.beans.beancontext.BeanContextSupport.deserialize(ObjectInputStream,Collection)",void,
java.beans.beancontext.BeanContextSupport.writeChildren(ObjectOutputStream),void,
java.beans.beancontext.BeanContextSupport.readChildren(ObjectInputStream),void,
java.beans.beancontext.BeanContextSupport.vetoableChange(PropertyChangeEvent),void,
java.beans.beancontext.BeanContextSupport.propertyChange(PropertyChangeEvent),void,
java.beans.beancontext.BeanContextSupport.validatePendingAdd(Object),boolean,"true iff the child may be added to this BeanContext, otherwise false."
java.beans.beancontext.BeanContextSupport.validatePendingRemove(Object),boolean,"true iff the child may be removed from this BeanContext, otherwise false."
"java.beans.beancontext.BeanContextSupport.childJustAddedHook(Object,BeanContextSupport.BCSChild)",void,
"java.beans.beancontext.BeanContextSupport.childJustRemovedHook(Object,BeanContextSupport.BCSChild)",void,
java.beans.beancontext.BeanContextSupport.getChildVisibility(Object),Visibility,the Component (if any) associated with the specified child.
java.beans.beancontext.BeanContextSupport.getChildSerializable(Object),Serializable,the Serializable (if any) associated with the specified Child
java.beans.beancontext.BeanContextSupport.getChildPropertyChangeListener(Object),PropertyChangeListener,the PropertyChangeListener (if any) of the specified child
java.beans.beancontext.BeanContextSupport.getChildVetoableChangeListener(Object),VetoableChangeListener,the VetoableChangeListener (if any) of the specified child
java.beans.beancontext.BeanContextSupport.getChildBeanContextMembershipListener(Object),BeanContextMembershipListener,the BeanContextMembershipListener (if any) of the specified child
java.beans.beancontext.BeanContextSupport.getChildBeanContextChild(Object),BeanContextChild,the BeanContextChild (if any) of the specified child
java.beans.beancontext.BeanContextSupport.fireChildrenAdded(BeanContextMembershipEvent),void,
java.beans.beancontext.BeanContextSupport.fireChildrenRemoved(BeanContextMembershipEvent),void,
java.beans.beancontext.BeanContextSupport.initialize(),void,
java.beans.beancontext.BeanContextSupport.copyChildren(),Object[],a copy of the current nested children
"java.beans.beancontext.BeanContextSupport.classEquals(Class,Class)",boolean,"true if equal, false if not"
java.beans.beancontext.BeanContextSupport.BCSIterator.hasNext(),boolean,true if the iteration has more elements
java.beans.beancontext.BeanContextSupport.BCSIterator.next(),Object,the next element in the iteration
java.beans.beancontext.BeanContextSupport.BCSIterator.remove(),void,
java.io.BufferedInputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached."
"java.io.BufferedInputStream.read(byte[],int,int)",int,
java.io.BufferedInputStream.skip(long),long,the actual number of bytes skipped.
java.io.BufferedInputStream.available(),int,an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking.
java.io.BufferedInputStream.mark(int),void,
java.io.BufferedInputStream.reset(),void,
java.io.BufferedInputStream.markSupported(),boolean,a boolean indicating if this stream type supports the mark and reset methods.
java.io.BufferedInputStream.close(),void,
java.io.BufferedOutputStream.write(int),void,
"java.io.BufferedOutputStream.write(byte[],int,int)",void,
java.io.BufferedOutputStream.flush(),void,
java.io.BufferedReader.read(),int,"The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached"
"java.io.BufferedReader.read(char[],int,int)",int,
java.io.BufferedReader.readLine(),String,"A String containing the contents of the line, not including any line-termination characters, or null if the end of the stream has been reached"
java.io.BufferedReader.skip(long),long,The number of characters actually skipped
java.io.BufferedReader.ready(),boolean,"True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."
java.io.BufferedReader.markSupported(),boolean,true if and only if this stream supports the mark operation.
java.io.BufferedReader.mark(int),void,
java.io.BufferedReader.reset(),void,
java.io.BufferedReader.close(),void,
java.io.BufferedReader.lines(),Stream&lt;String&gt;,a Stream&lt;String&gt; providing the lines of text described by this BufferedReader
java.io.BufferedWriter.write(int),void,
"java.io.BufferedWriter.write(char[],int,int)",void,
"java.io.BufferedWriter.write(String,int,int)",void,
java.io.BufferedWriter.newLine(),void,
java.io.BufferedWriter.flush(),void,
java.io.BufferedWriter.close(),void,
java.io.ByteArrayInputStream.read(),int,"the next byte of data, or -1 if the end of the stream has been reached."
"java.io.ByteArrayInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
java.io.ByteArrayInputStream.skip(long),long,the actual number of bytes skipped.
java.io.ByteArrayInputStream.available(),int,the number of remaining bytes that can be read (or skipped over) from this input stream without blocking.
java.io.ByteArrayInputStream.markSupported(),boolean,true if this stream instance supports the mark and reset methods; false otherwise.
java.io.ByteArrayInputStream.mark(int),void,
java.io.ByteArrayInputStream.reset(),void,
java.io.ByteArrayInputStream.close(),void,
java.io.ByteArrayOutputStream.write(int),void,
"java.io.ByteArrayOutputStream.write(byte[],int,int)",void,
java.io.ByteArrayOutputStream.writeTo(OutputStream),void,
java.io.ByteArrayOutputStream.reset(),void,
java.io.ByteArrayOutputStream.toByteArray(),byte[],"the current contents of this output stream, as a byte array."
java.io.ByteArrayOutputStream.size(),int,"the value of the count field, which is the number of valid bytes in this output stream."
java.io.ByteArrayOutputStream.toString(),String,String decoded from the buffer's contents.
java.io.ByteArrayOutputStream.toString(String),String,String decoded from the buffer's contents.
java.io.ByteArrayOutputStream.toString(int),String,"the current contents of the output stream, as a string."
java.io.ByteArrayOutputStream.close(),void,
java.io.CharArrayReader.read(),int,"The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached"
"java.io.CharArrayReader.read(char[],int,int)",int,"The actual number of characters read, or -1 if the end of the stream has been reached"
java.io.CharArrayReader.skip(long),long,The number of characters actually skipped
java.io.CharArrayReader.ready(),boolean,"True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."
java.io.CharArrayReader.markSupported(),boolean,true if and only if this stream supports the mark operation.
java.io.CharArrayReader.mark(int),void,
java.io.CharArrayReader.reset(),void,
java.io.CharArrayReader.close(),void,
java.io.CharArrayWriter.write(int),void,
"java.io.CharArrayWriter.write(char[],int,int)",void,
"java.io.CharArrayWriter.write(String,int,int)",void,
java.io.CharArrayWriter.writeTo(Writer),void,
java.io.CharArrayWriter.append(CharSequence),CharArrayWriter,This writer
"java.io.CharArrayWriter.append(CharSequence,int,int)",CharArrayWriter,This writer
java.io.CharArrayWriter.append(char),CharArrayWriter,This writer
java.io.CharArrayWriter.reset(),void,
java.io.CharArrayWriter.toCharArray(),char[],an array of chars copied from the input data.
java.io.CharArrayWriter.size(),int,an int representing the current size of the buffer.
java.io.CharArrayWriter.toString(),String,the string.
java.io.CharArrayWriter.flush(),void,
java.io.CharArrayWriter.close(),void,
java.io.Console.writer(),PrintWriter,The printwriter associated with this console
java.io.Console.reader(),Reader,The reader associated with this console
"java.io.Console.format(String,Object...)",Console,This console
"java.io.Console.printf(String,Object...)",Console,This console
"java.io.Console.readLine(String,Object...)",String,"A string containing the line read from the console, not including any line-termination characters, or null if an end of stream has been reached."
java.io.Console.readLine(),String,"A string containing the line read from the console, not including any line-termination characters, or null if an end of stream has been reached."
"java.io.Console.readPassword(String,Object...)",char[],"A character array containing the password or passphrase read from the console, not including any line-termination characters, or null if an end of stream has been reached."
java.io.Console.readPassword(),char[],"A character array containing the password or passphrase read from the console, not including any line-termination characters, or null if an end of stream has been reached."
java.io.Console.flush(),void,
java.io.DataInputStream.read(byte[]),int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
"java.io.DataInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
java.io.DataInputStream.readFully(byte[]),void,
"java.io.DataInputStream.readFully(byte[],int,int)",void,
java.io.DataInputStream.skipBytes(int),int,the actual number of bytes skipped.
java.io.DataInputStream.readBoolean(),boolean,the boolean value read.
java.io.DataInputStream.readByte(),byte,the next byte of this input stream as a signed 8-bit byte.
java.io.DataInputStream.readUnsignedByte(),int,"the next byte of this input stream, interpreted as an unsigned 8-bit number."
java.io.DataInputStream.readShort(),short,"the next two bytes of this input stream, interpreted as a signed 16-bit number."
java.io.DataInputStream.readUnsignedShort(),int,"the next two bytes of this input stream, interpreted as an unsigned 16-bit integer."
java.io.DataInputStream.readChar(),char,"the next two bytes of this input stream, interpreted as a char."
java.io.DataInputStream.readInt(),int,"the next four bytes of this input stream, interpreted as an int."
java.io.DataInputStream.readLong(),long,"the next eight bytes of this input stream, interpreted as a long."
java.io.DataInputStream.readFloat(),float,"the next four bytes of this input stream, interpreted as a float."
java.io.DataInputStream.readDouble(),double,"the next eight bytes of this input stream, interpreted as a double."
java.io.DataInputStream.readLine(),String,the next line of text from this input stream.
java.io.DataInputStream.readUTF(),String,a Unicode string.
java.io.DataInputStream.readUTF(DataInput),String,a Unicode string.
java.io.DataOutputStream.write(int),void,
"java.io.DataOutputStream.write(byte[],int,int)",void,
java.io.DataOutputStream.flush(),void,
java.io.DataOutputStream.writeBoolean(boolean),void,
java.io.DataOutputStream.writeByte(int),void,
java.io.DataOutputStream.writeShort(int),void,
java.io.DataOutputStream.writeChar(int),void,
java.io.DataOutputStream.writeInt(int),void,
java.io.DataOutputStream.writeLong(long),void,
java.io.DataOutputStream.writeFloat(float),void,
java.io.DataOutputStream.writeDouble(double),void,
java.io.DataOutputStream.writeBytes(String),void,
java.io.DataOutputStream.writeChars(String),void,
java.io.DataOutputStream.writeUTF(String),void,
java.io.DataOutputStream.size(),int,the value of the written field.
java.io.File.getName(),String,"The name of the file or directory denoted by this abstract pathname, or the empty string if this pathname's name sequence is empty"
java.io.File.getParent(),String,"The pathname string of the parent directory named by this abstract pathname, or null if this pathname does not name a parent"
java.io.File.getParentFile(),File,"The abstract pathname of the parent directory named by this abstract pathname, or null if this pathname does not name a parent"
java.io.File.getPath(),String,The string form of this abstract pathname
java.io.File.isAbsolute(),boolean,"true if this abstract pathname is absolute, false otherwise"
java.io.File.getAbsolutePath(),String,The absolute pathname string denoting the same file or directory as this abstract pathname
java.io.File.getAbsoluteFile(),File,The absolute abstract pathname denoting the same file or directory as this abstract pathname
java.io.File.getCanonicalPath(),String,The canonical pathname string denoting the same file or directory as this abstract pathname
java.io.File.getCanonicalFile(),File,The canonical pathname string denoting the same file or directory as this abstract pathname
java.io.File.toURL(),URL,A URL object representing the equivalent file URL
java.io.File.toURI(),URI,"An absolute, hierarchical URI with a scheme equal to ""file"", a path representing this abstract pathname, and undefined authority, query, and fragment components"
java.io.File.canRead(),boolean,true if and only if the file specified by this abstract pathname exists and can be read by the application; false otherwise
java.io.File.canWrite(),boolean,true if and only if the file system actually contains a file denoted by this abstract pathname and the application is allowed to write to the file; false otherwise.
java.io.File.exists(),boolean,true if and only if the file or directory denoted by this abstract pathname exists; false otherwise
java.io.File.isDirectory(),boolean,true if and only if the file denoted by this abstract pathname exists and is a directory; false otherwise
java.io.File.isFile(),boolean,true if and only if the file denoted by this abstract pathname exists and is a normal file; false otherwise
java.io.File.isHidden(),boolean,true if and only if the file denoted by this abstract pathname is hidden according to the conventions of the underlying platform
java.io.File.lastModified(),long,"A long value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or 0L if the file does not exist or if an I/O error occurs"
java.io.File.length(),long,"The length, in bytes, of the file denoted by this abstract pathname, or 0L if the file does not exist. Some operating systems may return 0L for pathnames denoting system-dependent entities such as devices or pipes."
java.io.File.createNewFile(),boolean,true if the named file does not exist and was successfully created; false if the named file already exists
java.io.File.delete(),boolean,true if and only if the file or directory is successfully deleted; false otherwise
java.io.File.deleteOnExit(),void,
java.io.File.list(),String[],"An array of strings naming the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."
java.io.File.list(FilenameFilter),String[],"An array of strings naming the files and directories in the directory denoted by this abstract pathname that were accepted by the given filter. The array will be empty if the directory is empty or if no names were accepted by the filter. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."
java.io.File.listFiles(),File[],"An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."
java.io.File.listFiles(FilenameFilter),File[],"An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."
java.io.File.listFiles(FileFilter),File[],"An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."
java.io.File.mkdir(),boolean,true if and only if the directory was created; false otherwise
java.io.File.mkdirs(),boolean,"true if and only if the directory was created, along with all necessary parent directories; false otherwise"
java.io.File.renameTo(File),boolean,true if and only if the renaming succeeded; false otherwise
java.io.File.setLastModified(long),boolean,true if and only if the operation succeeded; false otherwise
java.io.File.setReadOnly(),boolean,true if and only if the operation succeeded; false otherwise
"java.io.File.setWritable(boolean,boolean)",boolean,true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname.
java.io.File.setWritable(boolean),boolean,true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname.
"java.io.File.setReadable(boolean,boolean)",boolean,"true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If readable is false and the underlying file system does not implement a read permission, then the operation will fail."
java.io.File.setReadable(boolean),boolean,"true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If readable is false and the underlying file system does not implement a read permission, then the operation will fail."
"java.io.File.setExecutable(boolean,boolean)",boolean,"true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If executable is false and the underlying file system does not implement an execute permission, then the operation will fail."
java.io.File.setExecutable(boolean),boolean,"true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If executable is false and the underlying file system does not implement an execute permission, then the operation will fail."
java.io.File.canExecute(),boolean,true if and only if the abstract pathname exists and the application is allowed to execute the file
java.io.File.listRoots(),File[],"An array of File objects denoting the available filesystem roots, or null if the set of roots could not be determined. The array will be empty if there are no filesystem roots."
java.io.File.getTotalSpace(),long,"The size, in bytes, of the partition or 0L if this abstract pathname does not name a partition"
java.io.File.getFreeSpace(),long,The number of unallocated bytes on the partition or 0L if the abstract pathname does not name a partition. This value will be less than or equal to the total file system size returned by getTotalSpace().
java.io.File.getUsableSpace(),long,"The number of available bytes on the partition or 0L if the abstract pathname does not name a partition. On systems where this information is not available, this method will be equivalent to a call to getFreeSpace()."
"java.io.File.createTempFile(String,String,File)",File,
"java.io.File.createTempFile(String,String)",File,An abstract pathname denoting a newly-created empty file
java.io.File.compareTo(File),int,"Zero if the argument is equal to this abstract pathname, a value less than zero if this abstract pathname is lexicographically less than the argument, or a value greater than zero if this abstract pathname is lexicographically greater than the argument"
java.io.File.equals(Object),boolean,true if and only if the objects are the same; false otherwise
java.io.File.hashCode(),int,A hash code for this abstract pathname
java.io.File.toString(),String,The string form of this abstract pathname
java.io.File.toPath(),Path,a Path constructed from this abstract path
java.io.FileDescriptor.valid(),boolean,"true if the file descriptor object represents a valid, open file, socket, or other active I/O connection; false otherwise."
java.io.FileDescriptor.sync(),void,
java.io.FileInputStream.read(),int,"the next byte of data, or -1 if the end of the file is reached."
java.io.FileInputStream.read(byte[]),int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."
"java.io.FileInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."
java.io.FileInputStream.skip(long),long,the actual number of bytes skipped.
java.io.FileInputStream.available(),int,an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking.
java.io.FileInputStream.close(),void,
java.io.FileInputStream.getFD(),FileDescriptor,the file descriptor object associated with this stream.
java.io.FileInputStream.getChannel(),FileChannel,the file channel associated with this file input stream
java.io.FileInputStream.finalize(),"voidize()
                 throws IOException",
java.io.FileOutputStream.write(int),void,
java.io.FileOutputStream.write(byte[]),void,
"java.io.FileOutputStream.write(byte[],int,int)",void,
java.io.FileOutputStream.close(),void,
java.io.FileOutputStream.getFD(),FileDescriptor,the FileDescriptor object that represents the connection to the file in the file system being used by this FileOutputStream object.
java.io.FileOutputStream.getChannel(),FileChannel,the file channel associated with this file output stream
java.io.FileOutputStream.finalize(),"voidize()
                 throws IOException",
java.io.FilePermission.implies(Permission),boolean,
java.io.FilePermission.equals(Object),boolean,"true if obj is a FilePermission, and has the same pathname and actions as this FilePermission object, false otherwise."
java.io.FilePermission.hashCode(),int,a hash code value for this object.
java.io.FilePermission.getActions(),String,the canonical string representation of the actions.
java.io.FilePermission.newPermissionCollection(),PermissionCollection,
java.io.FilterInputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached."
java.io.FilterInputStream.read(byte[]),int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
"java.io.FilterInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
java.io.FilterInputStream.skip(long),long,the actual number of bytes skipped.
java.io.FilterInputStream.available(),int,an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking.
java.io.FilterInputStream.close(),void,
java.io.FilterInputStream.mark(int),void,
java.io.FilterInputStream.reset(),void,
java.io.FilterInputStream.markSupported(),boolean,true if this stream type supports the mark and reset method; false otherwise.
java.io.FilterOutputStream.write(int),void,
java.io.FilterOutputStream.write(byte[]),void,
"java.io.FilterOutputStream.write(byte[],int,int)",void,
java.io.FilterOutputStream.flush(),void,
java.io.FilterOutputStream.close(),void,
java.io.FilterReader.read(),int,"The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached"
"java.io.FilterReader.read(char[],int,int)",int,"The number of characters read, or -1 if the end of the stream has been reached"
java.io.FilterReader.skip(long),long,The number of characters actually skipped
java.io.FilterReader.ready(),boolean,"True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."
java.io.FilterReader.markSupported(),boolean,true if and only if this stream supports the mark operation.
java.io.FilterReader.mark(int),void,
java.io.FilterReader.reset(),void,
java.io.FilterReader.close(),void,
java.io.FilterWriter.write(int),void,
"java.io.FilterWriter.write(char[],int,int)",void,
"java.io.FilterWriter.write(String,int,int)",void,
java.io.FilterWriter.flush(),void,
java.io.FilterWriter.close(),void,
java.io.InputStream.read(),abstractint,"the next byte of data, or -1 if the end of the stream is reached."
java.io.InputStream.read(byte[]),int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
"java.io.InputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
java.io.InputStream.skip(long),long,the actual number of bytes skipped.
java.io.InputStream.available(),int,an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking or 0 when it reaches the end of the input stream.
java.io.InputStream.close(),void,
java.io.InputStream.mark(int),void,
java.io.InputStream.reset(),void,
java.io.InputStream.markSupported(),boolean,true if this stream instance supports the mark and reset methods; false otherwise.
java.io.InputStreamReader.getEncoding(),String,"The historical name of this encoding, or null if the stream has been closed"
java.io.InputStreamReader.read(),int,"The character read, or -1 if the end of the stream has been reached"
"java.io.InputStreamReader.read(char[],int,int)",int,"The number of characters read, or -1 if the end of the stream has been reached"
java.io.InputStreamReader.ready(),boolean,"True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."
java.io.InputStreamReader.close(),void,
java.io.LineNumberInputStream.read(),int,"the next byte of data, or -1 if the end of this stream is reached."
"java.io.LineNumberInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of this stream has been reached."
java.io.LineNumberInputStream.skip(long),long,the actual number of bytes skipped.
java.io.LineNumberInputStream.setLineNumber(int),void,
java.io.LineNumberInputStream.getLineNumber(),int,the current line number.
java.io.LineNumberInputStream.available(),int,the number of bytes that can be read from this input stream without blocking.
java.io.LineNumberInputStream.mark(int),void,
java.io.LineNumberInputStream.reset(),void,
java.io.LineNumberReader.setLineNumber(int),void,
java.io.LineNumberReader.getLineNumber(),int,The current line number
java.io.LineNumberReader.read(),int,"The character read, or -1 if the end of the stream has been reached"
"java.io.LineNumberReader.read(char[],int,int)",int,"The number of bytes read, or -1 if the end of the stream has already been reached"
java.io.LineNumberReader.readLine(),String,"A String containing the contents of the line, not including any line termination characters, or null if the end of the stream has been reached"
java.io.LineNumberReader.skip(long),long,The number of characters actually skipped
java.io.LineNumberReader.mark(int),void,
java.io.LineNumberReader.reset(),void,
java.io.ObjectInputStream.readObject(),Object,the object read from the stream
java.io.ObjectInputStream.readObjectOverride(),Object,the Object read from the stream.
java.io.ObjectInputStream.readUnshared(),Object,
java.io.ObjectInputStream.defaultReadObject(),void,
java.io.ObjectInputStream.readFields(),ObjectInputStream.GetField,the GetField object representing the persistent fields of the object being deserialized
"java.io.ObjectInputStream.registerValidation(ObjectInputValidation,int)",void,
java.io.ObjectInputStream.resolveClass(ObjectStreamClass),Class&lt;?&gt;,a Class object corresponding to desc
java.io.ObjectInputStream.resolveProxyClass(String[]),Class&lt;?&gt;,a proxy class for the specified interfaces
java.io.ObjectInputStream.resolveObject(Object),Object,the substituted object
java.io.ObjectInputStream.enableResolveObject(boolean),boolean,the previous setting before this method was invoked
java.io.ObjectInputStream.readStreamHeader(),void,
java.io.ObjectInputStream.readClassDescriptor(),ObjectStreamClass,the class descriptor read
java.io.ObjectInputStream.read(),int,"the byte read, or -1 if the end of the stream is reached."
"java.io.ObjectInputStream.read(byte[],int,int)",int,"the actual number of bytes read, -1 is returned when the end of the stream is reached."
java.io.ObjectInputStream.available(),int,the number of available bytes.
java.io.ObjectInputStream.close(),void,
java.io.ObjectInputStream.readBoolean(),boolean,the boolean read.
java.io.ObjectInputStream.readByte(),byte,the 8 bit byte read.
java.io.ObjectInputStream.readUnsignedByte(),int,the 8 bit byte read.
java.io.ObjectInputStream.readChar(),char,the 16 bit char read.
java.io.ObjectInputStream.readShort(),short,the 16 bit short read.
java.io.ObjectInputStream.readUnsignedShort(),int,the 16 bit short read.
java.io.ObjectInputStream.readInt(),int,the 32 bit integer read.
java.io.ObjectInputStream.readLong(),long,the read 64 bit long.
java.io.ObjectInputStream.readFloat(),float,the 32 bit float read.
java.io.ObjectInputStream.readDouble(),double,the 64 bit double read.
java.io.ObjectInputStream.readFully(byte[]),void,
"java.io.ObjectInputStream.readFully(byte[],int,int)",void,
java.io.ObjectInputStream.skipBytes(int),int,the actual number of bytes skipped.
java.io.ObjectInputStream.readLine(),String,a String copy of the line.
java.io.ObjectInputStream.readUTF(),String,the String.
java.io.ObjectInputStream.GetField.getObjectStreamClass(),abstractObjectStreamClass,the descriptor class that describes the serializable fields
java.io.ObjectInputStream.GetField.defaulted(String),abstractboolean,"true, if and only if the named field is defaulted"
"java.io.ObjectInputStream.GetField.get(String,boolean)",abstractboolean,the value of the named boolean field
"java.io.ObjectInputStream.GetField.get(String,byte)",abstractbyte,the value of the named byte field
"java.io.ObjectInputStream.GetField.get(String,char)",abstractchar,the value of the named char field
"java.io.ObjectInputStream.GetField.get(String,short)",abstractshort,the value of the named short field
"java.io.ObjectInputStream.GetField.get(String,int)",abstractint,the value of the named int field
"java.io.ObjectInputStream.GetField.get(String,long)",abstractlong,the value of the named long field
"java.io.ObjectInputStream.GetField.get(String,float)",abstractfloat,the value of the named float field
"java.io.ObjectInputStream.GetField.get(String,double)",abstractdouble,the value of the named double field
"java.io.ObjectInputStream.GetField.get(String,Object)",abstractObject,the value of the named Object field
java.io.ObjectOutputStream.useProtocolVersion(int),void,
java.io.ObjectOutputStream.writeObject(Object),void,
java.io.ObjectOutputStream.writeObjectOverride(Object),void,
java.io.ObjectOutputStream.writeUnshared(Object),void,
java.io.ObjectOutputStream.defaultWriteObject(),void,
java.io.ObjectOutputStream.putFields(),ObjectOutputStream.PutField,an instance of the class Putfield that holds the serializable fields
java.io.ObjectOutputStream.writeFields(),void,
java.io.ObjectOutputStream.reset(),void,
java.io.ObjectOutputStream.annotateClass(Class&lt;?&gt;),void,
java.io.ObjectOutputStream.annotateProxyClass(Class&lt;?&gt;),void,
java.io.ObjectOutputStream.replaceObject(Object),Object,the alternate object that replaced the specified one
java.io.ObjectOutputStream.enableReplaceObject(boolean),boolean,the previous setting before this method was invoked
java.io.ObjectOutputStream.writeStreamHeader(),void,
java.io.ObjectOutputStream.writeClassDescriptor(ObjectStreamClass),void,
java.io.ObjectOutputStream.write(int),void,
java.io.ObjectOutputStream.write(byte[]),void,
"java.io.ObjectOutputStream.write(byte[],int,int)",void,
java.io.ObjectOutputStream.flush(),void,
java.io.ObjectOutputStream.drain(),void,
java.io.ObjectOutputStream.close(),void,
java.io.ObjectOutputStream.writeBoolean(boolean),void,
java.io.ObjectOutputStream.writeByte(int),void,
java.io.ObjectOutputStream.writeShort(int),void,
java.io.ObjectOutputStream.writeChar(int),void,
java.io.ObjectOutputStream.writeInt(int),void,
java.io.ObjectOutputStream.writeLong(long),void,
java.io.ObjectOutputStream.writeFloat(float),void,
java.io.ObjectOutputStream.writeDouble(double),void,
java.io.ObjectOutputStream.writeBytes(String),void,
java.io.ObjectOutputStream.writeChars(String),void,
java.io.ObjectOutputStream.writeUTF(String),void,
"java.io.ObjectOutputStream.PutField.put(String,boolean)",abstractvoid,
"java.io.ObjectOutputStream.PutField.put(String,byte)",abstractvoid,
"java.io.ObjectOutputStream.PutField.put(String,char)",abstractvoid,
"java.io.ObjectOutputStream.PutField.put(String,short)",abstractvoid,
"java.io.ObjectOutputStream.PutField.put(String,int)",abstractvoid,
"java.io.ObjectOutputStream.PutField.put(String,long)",abstractvoid,
"java.io.ObjectOutputStream.PutField.put(String,float)",abstractvoid,
"java.io.ObjectOutputStream.PutField.put(String,double)",abstractvoid,
"java.io.ObjectOutputStream.PutField.put(String,Object)",abstractvoid,
java.io.ObjectOutputStream.PutField.write(ObjectOutput),abstractvoid,
java.io.ObjectStreamClass.lookup(Class&lt;?&gt;),ObjectStreamClass,the class descriptor for the specified class
java.io.ObjectStreamClass.lookupAny(Class&lt;?&gt;),ObjectStreamClass,the class descriptor for the specified class
java.io.ObjectStreamClass.getName(),String,a string representing the name of the class
java.io.ObjectStreamClass.getSerialVersionUID(),long,the SUID of the class described by this descriptor
java.io.ObjectStreamClass.forClass(),Class&lt;?&gt;,the Class instance that this descriptor represents
java.io.ObjectStreamClass.getFields(),ObjectStreamField[],an array containing an element for each persistent field of this class. Returns an array of length zero if there are no fields.
java.io.ObjectStreamClass.getField(String),ObjectStreamField,The ObjectStreamField object of the named field or null if there is no such named field.
java.io.ObjectStreamClass.toString(),String,a string representation of the object.
java.io.ObjectStreamField.getName(),String,a String representing the name of the serializable field
java.io.ObjectStreamField.getType(),Class&lt;?&gt;,a Class object representing the type of the serializable field
java.io.ObjectStreamField.getTypeCode(),char,the typecode of the serializable field
java.io.ObjectStreamField.getTypeString(),String,null if this field has a primitive type.
java.io.ObjectStreamField.getOffset(),int,the offset of this field
java.io.ObjectStreamField.setOffset(int),void,
java.io.ObjectStreamField.isPrimitive(),boolean,true if and only if this field corresponds to a primitive type
java.io.ObjectStreamField.isUnshared(),boolean,true if this field is unshared
java.io.ObjectStreamField.compareTo(Object),int,"a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object."
java.io.ObjectStreamField.toString(),String,a string representation of the object.
java.io.OutputStream.write(int),abstractvoid,
java.io.OutputStream.write(byte[]),void,
"java.io.OutputStream.write(byte[],int,int)",void,
java.io.OutputStream.flush(),void,
java.io.OutputStream.close(),void,
java.io.OutputStreamWriter.getEncoding(),String,"The historical name of this encoding, or possibly null if the stream has been closed"
java.io.OutputStreamWriter.write(int),void,
"java.io.OutputStreamWriter.write(char[],int,int)",void,
"java.io.OutputStreamWriter.write(String,int,int)",void,
java.io.OutputStreamWriter.flush(),void,
java.io.OutputStreamWriter.close(),void,
java.io.PipedInputStream.connect(PipedOutputStream),void,
java.io.PipedInputStream.receive(int),void,
java.io.PipedInputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached."
"java.io.PipedInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
java.io.PipedInputStream.available(),int,"the number of bytes that can be read from this input stream without blocking, or 0 if this input stream has been closed by invoking its close() method, or if the pipe is unconnected, or broken."
java.io.PipedInputStream.close(),void,
java.io.PipedOutputStream.connect(PipedInputStream),void,
java.io.PipedOutputStream.write(int),void,
"java.io.PipedOutputStream.write(byte[],int,int)",void,
java.io.PipedOutputStream.flush(),void,
java.io.PipedOutputStream.close(),void,
java.io.PipedReader.connect(PipedWriter),void,
java.io.PipedReader.read(),int,"the next character of data, or -1 if the end of the stream is reached."
"java.io.PipedReader.read(char[],int,int)",int,"the total number of characters read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
java.io.PipedReader.ready(),boolean,"True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."
java.io.PipedReader.close(),void,
java.io.PipedWriter.connect(PipedReader),void,
java.io.PipedWriter.write(int),void,
"java.io.PipedWriter.write(char[],int,int)",void,
java.io.PipedWriter.flush(),void,
java.io.PipedWriter.close(),void,
java.io.PrintStream.flush(),void,
java.io.PrintStream.close(),void,
java.io.PrintStream.checkError(),boolean,"true if and only if this stream has encountered an IOException other than InterruptedIOException, or the setError method has been invoked"
java.io.PrintStream.setError(),void,
java.io.PrintStream.clearError(),void,
java.io.PrintStream.write(int),void,
"java.io.PrintStream.write(byte[],int,int)",void,
java.io.PrintStream.print(boolean),void,
java.io.PrintStream.print(char),void,
java.io.PrintStream.print(int),void,
java.io.PrintStream.print(long),void,
java.io.PrintStream.print(float),void,
java.io.PrintStream.print(double),void,
java.io.PrintStream.print(char[]),void,
java.io.PrintStream.print(String),void,
java.io.PrintStream.print(Object),void,
java.io.PrintStream.println(),void,
java.io.PrintStream.println(boolean),void,
java.io.PrintStream.println(char),void,
java.io.PrintStream.println(int),void,
java.io.PrintStream.println(long),void,
java.io.PrintStream.println(float),void,
java.io.PrintStream.println(double),void,
java.io.PrintStream.println(char[]),void,
java.io.PrintStream.println(String),void,
java.io.PrintStream.println(Object),void,
"java.io.PrintStream.printf(String,Object...)",PrintStream,This output stream
"java.io.PrintStream.printf(Locale,String,Object...)",PrintStream,This output stream
"java.io.PrintStream.format(String,Object...)",PrintStream,This output stream
"java.io.PrintStream.format(Locale,String,Object...)",PrintStream,This output stream
java.io.PrintStream.append(CharSequence),PrintStream,This output stream
"java.io.PrintStream.append(CharSequence,int,int)",PrintStream,This output stream
java.io.PrintStream.append(char),PrintStream,This output stream
java.io.PrintWriter.flush(),void,
java.io.PrintWriter.close(),void,
java.io.PrintWriter.checkError(),boolean,"true if the print stream has encountered an error, either on the underlying output stream or during a format conversion."
java.io.PrintWriter.setError(),void,
java.io.PrintWriter.clearError(),void,
java.io.PrintWriter.write(int),void,
"java.io.PrintWriter.write(char[],int,int)",void,
java.io.PrintWriter.write(char[]),void,
"java.io.PrintWriter.write(String,int,int)",void,
java.io.PrintWriter.write(String),void,
java.io.PrintWriter.print(boolean),void,
java.io.PrintWriter.print(char),void,
java.io.PrintWriter.print(int),void,
java.io.PrintWriter.print(long),void,
java.io.PrintWriter.print(float),void,
java.io.PrintWriter.print(double),void,
java.io.PrintWriter.print(char[]),void,
java.io.PrintWriter.print(String),void,
java.io.PrintWriter.print(Object),void,
java.io.PrintWriter.println(),void,
java.io.PrintWriter.println(boolean),void,
java.io.PrintWriter.println(char),void,
java.io.PrintWriter.println(int),void,
java.io.PrintWriter.println(long),void,
java.io.PrintWriter.println(float),void,
java.io.PrintWriter.println(double),void,
java.io.PrintWriter.println(char[]),void,
java.io.PrintWriter.println(String),void,
java.io.PrintWriter.println(Object),void,
"java.io.PrintWriter.printf(String,Object...)",PrintWriter,This writer
"java.io.PrintWriter.printf(Locale,String,Object...)",PrintWriter,This writer
"java.io.PrintWriter.format(String,Object...)",PrintWriter,This writer
"java.io.PrintWriter.format(Locale,String,Object...)",PrintWriter,This writer
java.io.PrintWriter.append(CharSequence),PrintWriter,This writer
"java.io.PrintWriter.append(CharSequence,int,int)",PrintWriter,This writer
java.io.PrintWriter.append(char),PrintWriter,This writer
java.io.PushbackInputStream.read(),int,"the next byte of data, or -1 if the end of the stream has been reached."
"java.io.PushbackInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
java.io.PushbackInputStream.unread(int),void,
"java.io.PushbackInputStream.unread(byte[],int,int)",void,
java.io.PushbackInputStream.unread(byte[]),void,
java.io.PushbackInputStream.available(),int,the number of bytes that can be read (or skipped over) from the input stream without blocking.
java.io.PushbackInputStream.skip(long),long,the actual number of bytes skipped.
java.io.PushbackInputStream.markSupported(),boolean,"false, since this class does not support the mark and reset methods."
java.io.PushbackInputStream.mark(int),void,
java.io.PushbackInputStream.reset(),void,
java.io.PushbackInputStream.close(),void,
java.io.PushbackReader.read(),int,"The character read, or -1 if the end of the stream has been reached"
"java.io.PushbackReader.read(char[],int,int)",int,"The number of characters read, or -1 if the end of the stream has been reached"
java.io.PushbackReader.unread(int),void,
"java.io.PushbackReader.unread(char[],int,int)",void,
java.io.PushbackReader.unread(char[]),void,
java.io.PushbackReader.ready(),boolean,"True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."
java.io.PushbackReader.mark(int),void,
java.io.PushbackReader.reset(),void,
java.io.PushbackReader.markSupported(),boolean,true if and only if this stream supports the mark operation.
java.io.PushbackReader.close(),void,
java.io.PushbackReader.skip(long),long,The number of characters actually skipped
java.io.RandomAccessFile.getFD(),FileDescriptor,the file descriptor object associated with this stream.
java.io.RandomAccessFile.getChannel(),FileChannel,the file channel associated with this file
java.io.RandomAccessFile.read(),int,"the next byte of data, or -1 if the end of the file has been reached."
"java.io.RandomAccessFile.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."
java.io.RandomAccessFile.read(byte[]),int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of this file has been reached."
java.io.RandomAccessFile.readFully(byte[]),void,
"java.io.RandomAccessFile.readFully(byte[],int,int)",void,
java.io.RandomAccessFile.skipBytes(int),int,the actual number of bytes skipped.
java.io.RandomAccessFile.write(int),void,
java.io.RandomAccessFile.write(byte[]),void,
"java.io.RandomAccessFile.write(byte[],int,int)",void,
java.io.RandomAccessFile.getFilePointer(),long,"the offset from the beginning of the file, in bytes, at which the next read or write occurs."
java.io.RandomAccessFile.seek(long),void,
java.io.RandomAccessFile.length(),long,"the length of this file, measured in bytes."
java.io.RandomAccessFile.setLength(long),void,
java.io.RandomAccessFile.close(),void,
java.io.RandomAccessFile.readBoolean(),boolean,the boolean value read.
java.io.RandomAccessFile.readByte(),byte,the next byte of this file as a signed eight-bit byte.
java.io.RandomAccessFile.readUnsignedByte(),int,"the next byte of this file, interpreted as an unsigned eight-bit number."
java.io.RandomAccessFile.readShort(),short,"the next two bytes of this file, interpreted as a signed 16-bit number."
java.io.RandomAccessFile.readUnsignedShort(),int,"the next two bytes of this file, interpreted as an unsigned 16-bit integer."
java.io.RandomAccessFile.readChar(),char,"the next two bytes of this file, interpreted as a char."
java.io.RandomAccessFile.readInt(),int,"the next four bytes of this file, interpreted as an int."
java.io.RandomAccessFile.readLong(),long,"the next eight bytes of this file, interpreted as a long."
java.io.RandomAccessFile.readFloat(),float,"the next four bytes of this file, interpreted as a float."
java.io.RandomAccessFile.readDouble(),double,"the next eight bytes of this file, interpreted as a double."
java.io.RandomAccessFile.readLine(),String,"the next line of text from this file, or null if end of file is encountered before even one byte is read."
java.io.RandomAccessFile.readUTF(),String,a Unicode string.
java.io.RandomAccessFile.writeBoolean(boolean),void,
java.io.RandomAccessFile.writeByte(int),void,
java.io.RandomAccessFile.writeShort(int),void,
java.io.RandomAccessFile.writeChar(int),void,
java.io.RandomAccessFile.writeInt(int),void,
java.io.RandomAccessFile.writeLong(long),void,
java.io.RandomAccessFile.writeFloat(float),void,
java.io.RandomAccessFile.writeDouble(double),void,
java.io.RandomAccessFile.writeBytes(String),void,
java.io.RandomAccessFile.writeChars(String),void,
java.io.RandomAccessFile.writeUTF(String),void,
java.io.Reader.read(CharBuffer),int,"The number of characters added to the buffer, or -1 if this source of characters is at its end"
java.io.Reader.read(),int,"The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached"
java.io.Reader.read(char[]),int,"The number of characters read, or -1 if the end of the stream has been reached"
"java.io.Reader.read(char[],int,int)",abstractint,"The number of characters read, or -1 if the end of the stream has been reached"
java.io.Reader.skip(long),long,The number of characters actually skipped
java.io.Reader.ready(),boolean,"True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."
java.io.Reader.markSupported(),boolean,true if and only if this stream supports the mark operation.
java.io.Reader.mark(int),void,
java.io.Reader.reset(),void,
java.io.Reader.close(),abstractvoid,
java.io.SequenceInputStream.available(),int,an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking or 0 if this input stream has been closed by invoking its close() method
java.io.SequenceInputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached."
"java.io.SequenceInputStream.read(byte[],int,int)",int,int the number of bytes read.
java.io.SequenceInputStream.close(),void,
java.io.StreamTokenizer.resetSyntax(),void,
"java.io.StreamTokenizer.wordChars(int,int)",void,
"java.io.StreamTokenizer.whitespaceChars(int,int)",void,
"java.io.StreamTokenizer.ordinaryChars(int,int)",void,
java.io.StreamTokenizer.ordinaryChar(int),void,
java.io.StreamTokenizer.commentChar(int),void,
java.io.StreamTokenizer.quoteChar(int),void,
java.io.StreamTokenizer.parseNumbers(),void,
java.io.StreamTokenizer.eolIsSignificant(boolean),void,
java.io.StreamTokenizer.slashStarComments(boolean),void,
java.io.StreamTokenizer.slashSlashComments(boolean),void,
java.io.StreamTokenizer.lowerCaseMode(boolean),void,
java.io.StreamTokenizer.nextToken(),int,the value of the ttype field.
java.io.StreamTokenizer.pushBack(),void,
java.io.StreamTokenizer.lineno(),int,the current line number of this stream tokenizer.
java.io.StreamTokenizer.toString(),String,a string representation of the token
java.io.StringBufferInputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached."
"java.io.StringBufferInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
java.io.StringBufferInputStream.skip(long),long,the actual number of bytes skipped.
java.io.StringBufferInputStream.available(),int,"the value of count-pos, which is the number of bytes remaining to be read from the input buffer."
java.io.StringBufferInputStream.reset(),void,
java.io.StringReader.read(),int,"The character read, or -1 if the end of the stream has been reached"
"java.io.StringReader.read(char[],int,int)",int,"The number of characters read, or -1 if the end of the stream has been reached"
java.io.StringReader.skip(long),long,The number of characters actually skipped
java.io.StringReader.ready(),boolean,True if the next read() is guaranteed not to block for input
java.io.StringReader.markSupported(),boolean,true if and only if this stream supports the mark operation.
java.io.StringReader.mark(int),void,
java.io.StringReader.reset(),void,
java.io.StringReader.close(),void,
java.io.StringWriter.write(int),void,
"java.io.StringWriter.write(char[],int,int)",void,
java.io.StringWriter.write(String),void,
"java.io.StringWriter.write(String,int,int)",void,
java.io.StringWriter.append(CharSequence),StringWriter,This writer
"java.io.StringWriter.append(CharSequence,int,int)",StringWriter,This writer
java.io.StringWriter.append(char),StringWriter,This writer
java.io.StringWriter.toString(),String,a string representation of the object.
java.io.StringWriter.getBuffer(),StringBuffer,StringBuffer holding the current buffer value.
java.io.StringWriter.flush(),void,
java.io.StringWriter.close(),void,
java.io.Writer.write(int),void,
java.io.Writer.write(char[]),void,
"java.io.Writer.write(char[],int,int)",abstractvoid,
java.io.Writer.write(String),void,
"java.io.Writer.write(String,int,int)",void,
java.io.Writer.append(CharSequence),Writer,This writer
"java.io.Writer.append(CharSequence,int,int)",Writer,This writer
java.io.Writer.append(char),Writer,This writer
java.io.Writer.flush(),abstractvoid,
java.io.Writer.close(),abstractvoid,
java.lang.Boolean.parseBoolean(String),boolean,the boolean represented by the string argument
java.lang.Boolean.booleanValue(),boolean,the primitive boolean value of this object.
java.lang.Boolean.valueOf(boolean),Boolean,a Boolean instance representing b.
java.lang.Boolean.valueOf(String),Boolean,the Boolean value represented by the string.
java.lang.Boolean.toString(boolean),String,the string representation of the specified boolean
java.lang.Boolean.toString(),String,a string representation of this object.
java.lang.Boolean.hashCode(),int,the integer 1231 if this object represents true; returns the integer 1237 if this object represents false.
java.lang.Boolean.hashCode(boolean),int,a hash code value for a boolean value.
java.lang.Boolean.equals(Object),boolean,true if the Boolean objects represent the same value; false otherwise.
java.lang.Boolean.getBoolean(String),boolean,the boolean value of the system property.
java.lang.Boolean.compareTo(Boolean),int,zero if this object represents the same boolean value as the argument; a positive value if this object represents true and the argument represents false; and a negative value if this object represents false and the argument represents true
"java.lang.Boolean.compare(boolean,boolean)",int,the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a value greater than 0 if x &amp;&amp; !y
"java.lang.Boolean.logicalAnd(boolean,boolean)",boolean,the logical AND of a and b
"java.lang.Boolean.logicalOr(boolean,boolean)",boolean,the logical OR of a and b
"java.lang.Boolean.logicalXor(boolean,boolean)",boolean,the logical XOR of a and b
java.lang.Byte.toString(byte),String,the string representation of the specified byte
java.lang.Byte.valueOf(byte),Byte,a Byte instance representing b.
"java.lang.Byte.parseByte(String,int)",byte,
java.lang.Byte.parseByte(String),byte,the byte value represented by the argument in decimal
"java.lang.Byte.valueOf(String,int)",Byte,a Byte object holding the value represented by the string argument in the specified radix.
java.lang.Byte.valueOf(String),Byte,a Byte object holding the value represented by the string argument
java.lang.Byte.decode(String),Byte,a Byte object holding the byte value represented by nm
java.lang.Byte.byteValue(),byte,the numeric value represented by this object after conversion to type byte.
java.lang.Byte.shortValue(),short,the numeric value represented by this object after conversion to type short.
java.lang.Byte.intValue(),int,the numeric value represented by this object after conversion to type int.
java.lang.Byte.longValue(),long,the numeric value represented by this object after conversion to type long.
java.lang.Byte.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.lang.Byte.doubleValue(),double,the numeric value represented by this object after conversion to type double.
java.lang.Byte.toString(),String,a string representation of the value of this object in base10.
java.lang.Byte.hashCode(),int,a hash code value for this Byte
java.lang.Byte.hashCode(byte),int,a hash code value for a byte value.
java.lang.Byte.equals(Object),boolean,true if the objects are the same; false otherwise.
java.lang.Byte.compareTo(Byte),int,the value 0 if this Byte is equal to the argument Byte; a value less than 0 if this Byte is numerically less than the argument Byte; and a value greater than 0 if this Byte is numerically greater than the argument Byte (signed comparison).
"java.lang.Byte.compare(byte,byte)",int,the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x &gt; y
java.lang.Byte.toUnsignedInt(byte),int,the argument converted to int by an unsigned conversion
java.lang.Byte.toUnsignedLong(byte),long,the argument converted to long by an unsigned conversion
java.lang.Character.valueOf(char),Character,a Character instance representing c.
java.lang.Character.charValue(),char,the primitive char value represented by this object.
java.lang.Character.hashCode(),int,a hash code value for this Character
java.lang.Character.hashCode(char),int,a hash code value for a char value.
java.lang.Character.equals(Object),boolean,true if the objects are the same; false otherwise.
java.lang.Character.toString(),String,a string representation of this object.
java.lang.Character.toString(char),String,the string representation of the specified char
java.lang.Character.isValidCodePoint(int),boolean,true if the specified code point value is between MIN_CODE_POINT and MAX_CODE_POINT inclusive; false otherwise.
java.lang.Character.isBmpCodePoint(int),boolean,true if the specified code point is between MIN_VALUE and MAX_VALUE inclusive; false otherwise.
java.lang.Character.isSupplementaryCodePoint(int),boolean,true if the specified code point is between MIN_SUPPLEMENTARY_CODE_POINT and MAX_CODE_POINT inclusive; false otherwise.
java.lang.Character.isHighSurrogate(char),boolean,true if the char value is between MIN_HIGH_SURROGATE and MAX_HIGH_SURROGATE inclusive; false otherwise.
java.lang.Character.isLowSurrogate(char),boolean,true if the char value is between MIN_LOW_SURROGATE and MAX_LOW_SURROGATE inclusive; false otherwise.
java.lang.Character.isSurrogate(char),boolean,true if the char value is between MIN_SURROGATE and MAX_SURROGATE inclusive; false otherwise.
"java.lang.Character.isSurrogatePair(char,char)",boolean,true if the specified high and low-surrogate code values represent a valid surrogate pair; false otherwise.
java.lang.Character.charCount(int),int,2 if the character is a valid supplementary character; 1 otherwise.
"java.lang.Character.toCodePoint(char,char)",int,the supplementary code point composed from the specified surrogate pair.
"java.lang.Character.codePointAt(CharSequence,int)",int,the Unicode code point at the given index
"java.lang.Character.codePointAt(char[],int)",int,the Unicode code point at the given index
"java.lang.Character.codePointAt(char[],int,int)",int,the Unicode code point at the given index
"java.lang.Character.codePointBefore(CharSequence,int)",int,the Unicode code point value before the given index.
"java.lang.Character.codePointBefore(char[],int)",int,the Unicode code point value before the given index.
"java.lang.Character.codePointBefore(char[],int,int)",int,the Unicode code point value before the given index.
java.lang.Character.highSurrogate(int),char,the leading surrogate code unit used to represent the character in the UTF-16 encoding
java.lang.Character.lowSurrogate(int),char,the trailing surrogate code unit used to represent the character in the UTF-16 encoding
"java.lang.Character.toChars(int,char[],int)",int,"1 if the code point is a BMP code point, 2 if the code point is a supplementary code point."
java.lang.Character.toChars(int),char[],a char array having codePoint's UTF-16 representation.
"java.lang.Character.codePointCount(CharSequence,int,int)",int,the number of Unicode code points in the specified text range
"java.lang.Character.codePointCount(char[],int,int)",int,the number of Unicode code points in the specified subarray
"java.lang.Character.offsetByCodePoints(CharSequence,int,int)",int,the index within the char sequence
"java.lang.Character.offsetByCodePoints(char[],int,int,int,int)",int,the index within the subarray
java.lang.Character.isLowerCase(char),boolean,true if the character is lowercase; false otherwise.
java.lang.Character.isLowerCase(int),boolean,true if the character is lowercase; false otherwise.
java.lang.Character.isUpperCase(char),boolean,true if the character is uppercase; false otherwise.
java.lang.Character.isUpperCase(int),boolean,true if the character is uppercase; false otherwise.
java.lang.Character.isTitleCase(char),boolean,
java.lang.Character.isTitleCase(int),boolean,
java.lang.Character.isDigit(char),boolean,
java.lang.Character.isDigit(int),boolean,
java.lang.Character.isDefined(char),boolean,
java.lang.Character.isDefined(int),boolean,
java.lang.Character.isLetter(char),boolean,
java.lang.Character.isLetter(int),boolean,
java.lang.Character.isLetterOrDigit(char),boolean,true if the character is a letter or digit; false otherwise.
java.lang.Character.isLetterOrDigit(int),boolean,true if the character is a letter or digit; false otherwise.
java.lang.Character.isJavaLetter(char),boolean,
java.lang.Character.isJavaLetterOrDigit(char),boolean,
java.lang.Character.isAlphabetic(int),boolean,
java.lang.Character.isIdeographic(int),boolean,"true if the character is a Unicode ideograph character, false otherwise."
java.lang.Character.isJavaIdentifierStart(char),boolean,
java.lang.Character.isJavaIdentifierStart(int),boolean,
java.lang.Character.isJavaIdentifierPart(char),boolean,
java.lang.Character.isJavaIdentifierPart(int),boolean,
java.lang.Character.isUnicodeIdentifierStart(char),boolean,
java.lang.Character.isUnicodeIdentifierStart(int),boolean,
java.lang.Character.isUnicodeIdentifierPart(char),boolean,
java.lang.Character.isUnicodeIdentifierPart(int),boolean,
java.lang.Character.isIdentifierIgnorable(char),boolean,
java.lang.Character.isIdentifierIgnorable(int),boolean,
java.lang.Character.toLowerCase(char),char,"the lowercase equivalent of the character, if any; otherwise, the character itself."
java.lang.Character.toLowerCase(int),int,"the lowercase equivalent of the character (Unicode code point), if any; otherwise, the character itself."
java.lang.Character.toUpperCase(char),char,"the uppercase equivalent of the character, if any; otherwise, the character itself."
java.lang.Character.toUpperCase(int),int,"the uppercase equivalent of the character, if any; otherwise, the character itself."
java.lang.Character.toTitleCase(char),char,"the titlecase equivalent of the character, if any; otherwise, the character itself."
java.lang.Character.toTitleCase(int),int,"the titlecase equivalent of the character, if any; otherwise, the character itself."
"java.lang.Character.digit(char,int)",int,
"java.lang.Character.digit(int,int)",int,
java.lang.Character.getNumericValue(char),int,"the numeric value of the character, as a nonnegative int value; -2 if the character has a numeric value that is not a nonnegative integer; -1 if the character has no numeric value."
java.lang.Character.getNumericValue(int),int,"the numeric value of the character, as a nonnegative int value; -2 if the character has a numeric value that is not a nonnegative integer; -1 if the character has no numeric value."
java.lang.Character.isSpace(char),boolean,true if the character is ISO-LATIN-1 white space; false otherwise.
java.lang.Character.isSpaceChar(char),boolean,
java.lang.Character.isSpaceChar(int),boolean,
java.lang.Character.isWhitespace(char),boolean,
java.lang.Character.isWhitespace(int),boolean,
java.lang.Character.isISOControl(char),boolean,true if the character is an ISO control character; false otherwise.
java.lang.Character.isISOControl(int),boolean,true if the character is an ISO control character; false otherwise.
java.lang.Character.getType(char),int,a value of type int representing the character's general category.
java.lang.Character.getType(int),int,a value of type int representing the character's general category.
"java.lang.Character.forDigit(int,int)",char,the char representation of the specified digit in the specified radix.
java.lang.Character.getDirectionality(char),byte,the directionality property of the char value.
java.lang.Character.getDirectionality(int),byte,the directionality property of the character.
java.lang.Character.isMirrored(char),boolean,"true if the char is mirrored, false if the char is not mirrored or is not defined."
java.lang.Character.isMirrored(int),boolean,"true if the character is mirrored, false if the character is not mirrored or is not defined."
java.lang.Character.compareTo(Character),int,the value 0 if the argument Character is equal to this Character; a value less than 0 if this Character is numerically less than the Character argument; and a value greater than 0 if this Character is numerically greater than the Character argument (unsigned comparison). Note that this is strictly a numerical comparison; it is not locale-dependent.
"java.lang.Character.compare(char,char)",int,the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x &gt; y
java.lang.Character.reverseBytes(char),char,"the value obtained by reversing (or, equivalently, swapping) the bytes in the specified char value."
java.lang.Character.getName(int),String,"the Unicode name of the specified character, or null if the code point is unassigned."
java.lang.Character.Subset.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.lang.Character.Subset.hashCode(),int,a hash code value for this object.
java.lang.Character.Subset.toString(),String,a string representation of the object.
java.lang.Character.UnicodeBlock.of(char),Character.UnicodeBlock,"The UnicodeBlock instance representing the Unicode block of which this character is a member, or null if the character is not a member of any Unicode block"
java.lang.Character.UnicodeBlock.of(int),Character.UnicodeBlock,"The UnicodeBlock instance representing the Unicode block of which this character is a member, or null if the character is not a member of any Unicode block"
java.lang.Character.UnicodeBlock.forName(String),Character.UnicodeBlock,
java.lang.Class.toString(),String,a string representation of this class object.
java.lang.Class.toGenericString(),String,"a string describing this Class, including information about modifiers and type parameters"
java.lang.Class.forName(String),Class&lt;?&gt;,the Class object for the class with the specified name.
"java.lang.Class.forName(String,boolean,ClassLoader)",Class&lt;?&gt;,class object representing the desired class
java.lang.Class.newInstance(),T,a newly allocated instance of the class represented by this object.
java.lang.Class.isInstance(Object),boolean,true if obj is an instance of this class
java.lang.Class.isAssignableFrom(Class&lt;?&gt;),boolean,the boolean value indicating whether objects of the type cls can be assigned to objects of this class
java.lang.Class.isInterface(),boolean,true if this object represents an interface; false otherwise.
java.lang.Class.isArray(),boolean,true if this object represents an array class; false otherwise.
java.lang.Class.isPrimitive(),boolean,true if and only if this class represents a primitive type
java.lang.Class.isAnnotation(),boolean,true if this class object represents an annotation type; false otherwise
java.lang.Class.isSynthetic(),boolean,true if and only if this class is a synthetic class as defined by the Java Language Specification.
java.lang.Class.getName(),String,the name of the class or interface represented by this object.
java.lang.Class.getClassLoader(),ClassLoader,the class loader that loaded the class or interface represented by this object.
java.lang.Class.getTypeParameters(),TypeVariable&lt;Class&lt;T&gt;&gt;[],an array of TypeVariable objects that represent the type variables declared by this generic declaration
java.lang.Class.getSuperclass(),Class&lt;? super T&gt;,the superclass of the class represented by this object.
java.lang.Class.getGenericSuperclass(),Type,the superclass of the class represented by this object
java.lang.Class.getPackage(),Package,"the package of the class, or null if no package information is available from the archive or codebase."
java.lang.Class.getInterfaces(),Class&lt;?&gt;[],an array of interfaces implemented by this class.
java.lang.Class.getGenericInterfaces(),Type[],an array of interfaces implemented by this class
java.lang.Class.getComponentType(),Class&lt;?&gt;,the Class representing the component type of this class if this class is an array
java.lang.Class.getModifiers(),int,the int representing the modifiers for this class
java.lang.Class.getSigners(),Object[],"the signers of this class, or null if there are no signers. In particular, this method returns null if this object represents a primitive type or void."
java.lang.Class.getEnclosingMethod(),Method,"the immediately enclosing method of the underlying class, if that class is a local or anonymous class; otherwise null."
java.lang.Class.getEnclosingConstructor(),Constructor&lt;?&gt;,"the immediately enclosing constructor of the underlying class, if that class is a local or anonymous class; otherwise null."
java.lang.Class.getDeclaringClass(),Class&lt;?&gt;,the declaring class for this class
java.lang.Class.getEnclosingClass(),Class&lt;?&gt;,the immediately enclosing class of the underlying class
java.lang.Class.getSimpleName(),String,the simple name of the underlying class
java.lang.Class.getTypeName(),String,an informative string for the name of this type
java.lang.Class.getCanonicalName(),String,"the canonical name of the underlying class if it exists, and null otherwise."
java.lang.Class.isAnonymousClass(),boolean,true if and only if this class is an anonymous class.
java.lang.Class.isLocalClass(),boolean,true if and only if this class is a local class.
java.lang.Class.isMemberClass(),boolean,true if and only if this class is a member class.
java.lang.Class.getClasses(),Class&lt;?&gt;[],the array of Class objects representing the public members of this class
java.lang.Class.getFields(),Field[],the array of Field objects representing the public fields
java.lang.Class.getMethods(),Method[],the array of Method objects representing the public methods of this class
java.lang.Class.getConstructors(),Constructor&lt;?&gt;[],the array of Constructor objects representing the public constructors of this class
java.lang.Class.getField(String),Field,
"java.lang.Class.getMethod(String,Class&lt;?&gt;...)",Method,
java.lang.Class.getConstructor(Class&lt;?&gt;...),Constructor&lt;T&gt;,the Constructor object of the public constructor that matches the specified parameterTypes
java.lang.Class.getDeclaredClasses(),Class&lt;?&gt;[],the array of Class objects representing all the declared members of this class
java.lang.Class.getDeclaredFields(),Field[],the array of Field objects representing all the declared fields of this class
java.lang.Class.getDeclaredMethods(),Method[],the array of Method objects representing all the declared methods of this class
java.lang.Class.getDeclaredConstructors(),Constructor&lt;?&gt;[],the array of Constructor objects representing all the declared constructors of this class
java.lang.Class.getDeclaredField(String),Field,the Field object for the specified field in this class
"java.lang.Class.getDeclaredMethod(String,Class&lt;?&gt;...)",Method,the Method object for the method of this class matching the specified name and parameters
java.lang.Class.getDeclaredConstructor(Class&lt;?&gt;...),Constructor&lt;T&gt;,The Constructor object for the constructor with the specified parameter list
java.lang.Class.getResourceAsStream(String),InputStream,
java.lang.Class.getResource(String),URL,
java.lang.Class.getProtectionDomain(),ProtectionDomain,the ProtectionDomain of this class
java.lang.Class.desiredAssertionStatus(),boolean,the desired assertion status of the specified class.
java.lang.Class.isEnum(),boolean,true if and only if this class was declared as an enum in the source code
java.lang.Class.getEnumConstants(),T[],"an array containing the values comprising the enum class represented by this Class object in the order they're declared, or null if this Class object does not represent an enum type"
java.lang.Class.cast(Object),T,"the object after casting, or null if obj is null"
java.lang.Class.asSubclass(Class&lt;U&gt;),&lt;U&gt;Class&lt;? extends U&gt;,"this Class object, cast to represent a subclass of the specified class object."
java.lang.Class.getAnnotation(Class&lt;A&gt;),&lt;A extends Annotation&gt;A,"this element's annotation for the specified annotation type if present on this element, else null"
java.lang.Class.isAnnotationPresent(Class&lt;?),boolean,"true if an annotation for the specified annotation type is present on this element, else false"
java.lang.Class.getAnnotationsByType(Class&lt;A&gt;),&lt;A extends Annotation&gt;A[],"all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"
java.lang.Class.getAnnotations(),Annotation[],annotations present on this element
java.lang.Class.getDeclaredAnnotation(Class&lt;A&gt;),&lt;A extends Annotation&gt;A,"this element's annotation for the specified annotation type if directly present on this element, else null"
java.lang.Class.getDeclaredAnnotationsByType(Class&lt;A&gt;),&lt;A extends Annotation&gt;A[],"all this element's annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"
java.lang.Class.getDeclaredAnnotations(),Annotation[],annotations directly present on this element
java.lang.Class.getAnnotatedSuperclass(),AnnotatedType,an object representing the superclass
java.lang.Class.getAnnotatedInterfaces(),AnnotatedType[],an array representing the superinterfaces
java.lang.ClassLoader.loadClass(String),Class&lt;?&gt;,The resulting Class object
"java.lang.ClassLoader.loadClass(String,boolean)",Class&lt;?&gt;,
java.lang.ClassLoader.getClassLoadingLock(String),Object,the lock for class loading operations
java.lang.ClassLoader.findClass(String),Class&lt;?&gt;,The resulting Class object
"java.lang.ClassLoader.defineClass(byte[],int,int)",Class&lt;?&gt;,The Class object that was created from the specified class data
"java.lang.ClassLoader.defineClass(String,byte[],int,int)",Class&lt;?&gt;,The Class object that was created from the specified class data.
"java.lang.ClassLoader.defineClass(String,byte[],int,int,ProtectionDomain)",Class&lt;?&gt;,"The Class object created from the data, and optional ProtectionDomain."
"java.lang.ClassLoader.defineClass(String,ByteBuffer,ProtectionDomain)",Class&lt;?&gt;,"The Class object created from the data, and optional ProtectionDomain."
java.lang.ClassLoader.resolveClass(Class&lt;?&gt;),void,
java.lang.ClassLoader.findSystemClass(String),Class&lt;?&gt;,The Class object for the specified name
java.lang.ClassLoader.findLoadedClass(String),Class&lt;?&gt;,"The Class object, or null if the class has not been loaded"
"java.lang.ClassLoader.setSigners(Class&lt;?&gt;,Object[])",void,
java.lang.ClassLoader.getResource(String),URL,"A URL object for reading the resource, or null if the resource could not be found or the invoker doesn't have adequate privileges to get the resource."
java.lang.ClassLoader.getResources(String),Enumeration&lt;URL&gt;,"An enumeration of URL objects for the resource. If no resources could be found, the enumeration will be empty. Resources that the class loader doesn't have access to will not be in the enumeration."
java.lang.ClassLoader.findResource(String),URL,"A URL object for reading the resource, or null if the resource could not be found"
java.lang.ClassLoader.findResources(String),Enumeration&lt;URL&gt;,An enumeration of URL objects for the resources
java.lang.ClassLoader.registerAsParallelCapable(),boolean,
java.lang.ClassLoader.getSystemResource(String),URL,"A URL object for reading the resource, or null if the resource could not be found"
java.lang.ClassLoader.getSystemResources(String),Enumeration&lt;URL&gt;,An enumeration of resource URL objects
java.lang.ClassLoader.getResourceAsStream(String),InputStream,"An input stream for reading the resource, or null if the resource could not be found"
java.lang.ClassLoader.getSystemResourceAsStream(String),InputStream,"An input stream for reading the resource, or null if the resource could not be found"
java.lang.ClassLoader.getParent(),ClassLoader,The parent ClassLoader
java.lang.ClassLoader.getSystemClassLoader(),ClassLoader,"The system ClassLoader for delegation, or null if none"
"java.lang.ClassLoader.definePackage(String,String,String,String,String,String,String,URL)",Package,The newly defined Package object
java.lang.ClassLoader.getPackage(String),Package,"The Package corresponding to the given name, or null if not found"
java.lang.ClassLoader.getPackages(),Package[],The array of Package objects defined by this ClassLoader
java.lang.ClassLoader.findLibrary(String),String,The absolute path of the native library
java.lang.ClassLoader.setDefaultAssertionStatus(boolean),void,
"java.lang.ClassLoader.setPackageAssertionStatus(String,boolean)",void,
"java.lang.ClassLoader.setClassAssertionStatus(String,boolean)",void,
java.lang.ClassLoader.clearAssertionStatus(),void,
java.lang.ClassValue.computeValue(Class&lt;?&gt;),abstractT,"the newly computed value associated with this ClassValue, for the given class or interface"
java.lang.ClassValue.get(Class&lt;?&gt;),T,"the current value associated with this ClassValue, for the given class or interface"
java.lang.ClassValue.remove(Class&lt;?&gt;),void,
java.lang.Compiler.compileClass(Class&lt;?&gt;),boolean,true if the compilation succeeded; false if the compilation failed or no compiler is available
java.lang.Compiler.compileClasses(String),boolean,true if the compilation succeeded; false if the compilation failed or no compiler is available
java.lang.Compiler.command(Object),Object,"A compiler-specific value, or null if no compiler is available"
java.lang.Compiler.enable(),void,
java.lang.Compiler.disable(),void,
java.lang.Double.toString(double),String,
java.lang.Double.toHexString(double),String,
java.lang.Double.valueOf(String),Double,a Double object holding the value represented by the String argument.
java.lang.Double.valueOf(double),Double,a Double instance representing d.
java.lang.Double.parseDouble(String),double,the double value represented by the string argument.
java.lang.Double.isNaN(double),boolean,true if the value of the argument is NaN; false otherwise.
java.lang.Double.isInfinite(double),boolean,true if the value of the argument is positive infinity or negative infinity; false otherwise.
java.lang.Double.isFinite(double),boolean,"true if the argument is a finite floating-point value, false otherwise."
java.lang.Double.isNaN(),boolean,true if the value represented by this object is NaN; false otherwise.
java.lang.Double.isInfinite(),boolean,true if the value represented by this object is positive infinity or negative infinity; false otherwise.
java.lang.Double.toString(),String,a String representation of this object.
java.lang.Double.byteValue(),byte,the double value represented by this object converted to type byte
java.lang.Double.shortValue(),short,the double value represented by this object converted to type short
java.lang.Double.intValue(),int,the double value represented by this object converted to type int
java.lang.Double.longValue(),long,the double value represented by this object converted to type long
java.lang.Double.floatValue(),float,the double value represented by this object converted to type float
java.lang.Double.doubleValue(),double,the double value represented by this object
java.lang.Double.hashCode(),int,a hash code value for this object.
java.lang.Double.hashCode(double),int,a hash code value for a double value.
java.lang.Double.equals(Object),boolean,
java.lang.Double.doubleToLongBits(double),long,the bits that represent the floating-point number.
java.lang.Double.doubleToRawLongBits(double),long,the bits that represent the floating-point number.
java.lang.Double.longBitsToDouble(long),double,the double floating-point value with the same bit pattern.
java.lang.Double.compareTo(Double),int,
"java.lang.Double.compare(double,double)",int,the value 0 if d1 is numerically equal to d2; a value less than 0 if d1 is numerically less than d2; and a value greater than 0 if d1 is numerically greater than d2.
"java.lang.Double.sum(double,double)",double,the sum of a and b
"java.lang.Double.max(double,double)",double,the greater of a and b
"java.lang.Double.min(double,double)",double,the smaller of a and b.
java.lang.Enum.name(),String,the name of this enum constant
java.lang.Enum.ordinal(),int,the ordinal of this enumeration constant
java.lang.Enum.toString(),String,the name of this enum constant
java.lang.Enum.equals(Object),boolean,true if the specified object is equal to this enum constant.
java.lang.Enum.hashCode(),int,a hash code for this enum constant.
java.lang.Enum.clone(),Object,(never returns)
java.lang.Enum.compareTo(E),int,"a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object."
java.lang.Enum.getDeclaringClass(),Class&lt;E&gt;,the Class object corresponding to this enum constant's enum type
"java.lang.Enum.valueOf(Class&lt;T&gt;,String)",&lt;T extends Enum&lt;T&gt;&gt;T,the enum constant of the specified enum type with the specified name
java.lang.Enum.finalize(),voidize(),
java.lang.Float.toString(float),String,
java.lang.Float.toHexString(float),String,
java.lang.Float.valueOf(String),Float,a Float object holding the value represented by the String argument.
java.lang.Float.valueOf(float),Float,a Float instance representing f.
java.lang.Float.parseFloat(String),float,the float value represented by the string argument.
java.lang.Float.isNaN(float),boolean,true if the argument is NaN; false otherwise.
java.lang.Float.isInfinite(float),boolean,true if the argument is positive infinity or negative infinity; false otherwise.
java.lang.Float.isFinite(float),boolean,"true if the argument is a finite floating-point value, false otherwise."
java.lang.Float.isNaN(),boolean,true if the value represented by this object is NaN; false otherwise.
java.lang.Float.isInfinite(),boolean,true if the value represented by this object is positive infinity or negative infinity; false otherwise.
java.lang.Float.toString(),String,a String representation of this object.
java.lang.Float.byteValue(),byte,the float value represented by this object converted to type byte
java.lang.Float.shortValue(),short,the float value represented by this object converted to type short
java.lang.Float.intValue(),int,the float value represented by this object converted to type int
java.lang.Float.longValue(),long,the float value represented by this object converted to type long
java.lang.Float.floatValue(),float,the float value represented by this object
java.lang.Float.doubleValue(),double,the float value represented by this object converted to type double
java.lang.Float.hashCode(),int,a hash code value for this object.
java.lang.Float.hashCode(float),int,a hash code value for a float value.
java.lang.Float.equals(Object),boolean,
java.lang.Float.floatToIntBits(float),int,the bits that represent the floating-point number.
java.lang.Float.floatToRawIntBits(float),int,the bits that represent the floating-point number.
java.lang.Float.intBitsToFloat(int),float,the float floating-point value with the same bit pattern.
java.lang.Float.compareTo(Float),int,
"java.lang.Float.compare(float,float)",int,the value 0 if f1 is numerically equal to f2; a value less than 0 if f1 is numerically less than f2; and a value greater than 0 if f1 is numerically greater than f2.
"java.lang.Float.sum(float,float)",float,the sum of a and b
"java.lang.Float.max(float,float)",float,the greater of a and b
"java.lang.Float.min(float,float)",float,the smaller of a and b
java.lang.InheritableThreadLocal.childValue(T),T,the child thread's initial value
"java.lang.Integer.toString(int,int)",String,a string representation of the argument in the specified radix.
"java.lang.Integer.toUnsignedString(int,int)",String,an unsigned string representation of the argument in the specified radix.
java.lang.Integer.toHexString(int),String,the string representation of the unsigned integer value represented by the argument in hexadecimal (base16).
java.lang.Integer.toOctalString(int),String,the string representation of the unsigned integer value represented by the argument in octal (base8).
java.lang.Integer.toBinaryString(int),String,the string representation of the unsigned integer value represented by the argument in binary (base2).
java.lang.Integer.toString(int),String,a string representation of the argument in base10.
java.lang.Integer.toUnsignedString(int),String,an unsigned string representation of the argument.
"java.lang.Integer.parseInt(String,int)",int,
java.lang.Integer.parseInt(String),int,the integer value represented by the argument in decimal.
"java.lang.Integer.parseUnsignedInt(String,int)",int,
java.lang.Integer.parseUnsignedInt(String),int,the unsigned integer value represented by the argument in decimal.
"java.lang.Integer.valueOf(String,int)",Integer,an Integer object holding the value represented by the string argument in the specified radix.
java.lang.Integer.valueOf(String),Integer,an Integer object holding the value represented by the string argument.
java.lang.Integer.valueOf(int),Integer,an Integer instance representing i.
java.lang.Integer.byteValue(),byte,the numeric value represented by this object after conversion to type byte.
java.lang.Integer.shortValue(),short,the numeric value represented by this object after conversion to type short.
java.lang.Integer.intValue(),int,the numeric value represented by this object after conversion to type int.
java.lang.Integer.longValue(),long,the numeric value represented by this object after conversion to type long.
java.lang.Integer.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.lang.Integer.doubleValue(),double,the numeric value represented by this object after conversion to type double.
java.lang.Integer.toString(),String,a string representation of the value of this object in base10.
java.lang.Integer.hashCode(),int,"a hash code value for this object, equal to the primitive int value represented by this Integer object."
java.lang.Integer.hashCode(int),int,a hash code value for a int value.
java.lang.Integer.equals(Object),boolean,true if the objects are the same; false otherwise.
java.lang.Integer.getInteger(String),Integer,the Integer value of the property.
"java.lang.Integer.getInteger(String,int)",Integer,the Integer value of the property.
"java.lang.Integer.getInteger(String,Integer)",Integer,
java.lang.Integer.decode(String),Integer,an Integer object holding the int value represented by nm
java.lang.Integer.compareTo(Integer),int,the value 0 if this Integer is equal to the argument Integer; a value less than 0 if this Integer is numerically less than the argument Integer; and a value greater than 0 if this Integer is numerically greater than the argument Integer (signed comparison).
"java.lang.Integer.compare(int,int)",int,the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x &gt; y
"java.lang.Integer.compareUnsigned(int,int)",int,the value 0 if x == y; a value less than 0 if x &lt; y as unsigned values; and a value greater than 0 if x &gt; y as unsigned values
java.lang.Integer.toUnsignedLong(int),long,the argument converted to long by an unsigned conversion
"java.lang.Integer.divideUnsigned(int,int)",int,the unsigned quotient of the first argument divided by the second argument
"java.lang.Integer.remainderUnsigned(int,int)",int,the unsigned remainder of the first argument divided by the second argument
java.lang.Integer.highestOneBit(int),int,"an int value with a single one-bit, in the position of the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."
java.lang.Integer.lowestOneBit(int),int,"an int value with a single one-bit, in the position of the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."
java.lang.Integer.numberOfLeadingZeros(int),int,
java.lang.Integer.numberOfTrailingZeros(int),int,"the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified int value, or 32 if the value is equal to zero."
java.lang.Integer.bitCount(int),int,the number of one-bits in the two's complement binary representation of the specified int value.
"java.lang.Integer.rotateLeft(int,int)",int,the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits.
"java.lang.Integer.rotateRight(int,int)",int,the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits.
java.lang.Integer.reverse(int),int,the value obtained by reversing order of the bits in the specified int value.
java.lang.Integer.signum(int),int,the signum function of the specified int value.
java.lang.Integer.reverseBytes(int),int,the value obtained by reversing the bytes in the specified int value.
"java.lang.Integer.sum(int,int)",int,the sum of a and b
"java.lang.Integer.max(int,int)",int,the greater of a and b
"java.lang.Integer.min(int,int)",int,the smaller of a and b
"java.lang.Long.toString(long,int)",String,a string representation of the argument in the specified radix.
"java.lang.Long.toUnsignedString(long,int)",String,an unsigned string representation of the argument in the specified radix.
java.lang.Long.toHexString(long),String,the string representation of the unsigned long value represented by the argument in hexadecimal (base16).
java.lang.Long.toOctalString(long),String,the string representation of the unsigned long value represented by the argument in octal (base8).
java.lang.Long.toBinaryString(long),String,the string representation of the unsigned long value represented by the argument in binary (base2).
java.lang.Long.toString(long),String,a string representation of the argument in base10.
java.lang.Long.toUnsignedString(long),String,an unsigned string representation of the argument.
"java.lang.Long.parseLong(String,int)",long,
java.lang.Long.parseLong(String),long,the long represented by the argument in decimal.
"java.lang.Long.parseUnsignedLong(String,int)",long,
java.lang.Long.parseUnsignedLong(String),long,the unsigned long value represented by the decimal string argument
"java.lang.Long.valueOf(String,int)",Long,a Long object holding the value represented by the string argument in the specified radix.
java.lang.Long.valueOf(String),Long,a Long object holding the value represented by the string argument.
java.lang.Long.valueOf(long),Long,a Long instance representing l.
java.lang.Long.decode(String),Long,a Long object holding the long value represented by nm
java.lang.Long.byteValue(),byte,the numeric value represented by this object after conversion to type byte.
java.lang.Long.shortValue(),short,the numeric value represented by this object after conversion to type short.
java.lang.Long.intValue(),int,the numeric value represented by this object after conversion to type int.
java.lang.Long.longValue(),long,the numeric value represented by this object after conversion to type long.
java.lang.Long.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.lang.Long.doubleValue(),double,the numeric value represented by this object after conversion to type double.
java.lang.Long.toString(),String,a string representation of the value of this object in base10.
java.lang.Long.hashCode(),int,a hash code value for this object.
java.lang.Long.hashCode(long),int,a hash code value for a long value.
java.lang.Long.equals(Object),boolean,true if the objects are the same; false otherwise.
java.lang.Long.getLong(String),Long,the Long value of the property.
"java.lang.Long.getLong(String,long)",Long,the Long value of the property.
"java.lang.Long.getLong(String,Long)",Long,
java.lang.Long.compareTo(Long),int,the value 0 if this Long is equal to the argument Long; a value less than 0 if this Long is numerically less than the argument Long; and a value greater than 0 if this Long is numerically greater than the argument Long (signed comparison).
"java.lang.Long.compare(long,long)",int,the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x &gt; y
"java.lang.Long.compareUnsigned(long,long)",int,the value 0 if x == y; a value less than 0 if x &lt; y as unsigned values; and a value greater than 0 if x &gt; y as unsigned values
"java.lang.Long.divideUnsigned(long,long)",long,the unsigned quotient of the first argument divided by the second argument
"java.lang.Long.remainderUnsigned(long,long)",long,the unsigned remainder of the first argument divided by the second argument
java.lang.Long.highestOneBit(long),long,"a long value with a single one-bit, in the position of the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."
java.lang.Long.lowestOneBit(long),long,"a long value with a single one-bit, in the position of the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."
java.lang.Long.numberOfLeadingZeros(long),int,
java.lang.Long.numberOfTrailingZeros(long),int,"the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified long value, or 64 if the value is equal to zero."
java.lang.Long.bitCount(long),int,the number of one-bits in the two's complement binary representation of the specified long value.
"java.lang.Long.rotateLeft(long,int)",long,the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits.
"java.lang.Long.rotateRight(long,int)",long,the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits.
java.lang.Long.reverse(long),long,the value obtained by reversing order of the bits in the specified long value.
java.lang.Long.signum(long),int,the signum function of the specified long value.
java.lang.Long.reverseBytes(long),long,the value obtained by reversing the bytes in the specified long value.
"java.lang.Long.sum(long,long)",long,the sum of a and b
"java.lang.Long.max(long,long)",long,the greater of a and b
"java.lang.Long.min(long,long)",long,the smaller of a and b
java.lang.Math.sin(double),double,
java.lang.Math.cos(double),double,
java.lang.Math.tan(double),double,
java.lang.Math.asin(double),double,
java.lang.Math.acos(double),double,
java.lang.Math.atan(double),double,
java.lang.Math.toRadians(double),double,the measurement of the angle angdeg in radians.
java.lang.Math.toDegrees(double),double,the measurement of the angle angrad in degrees.
java.lang.Math.exp(double),double,
java.lang.Math.log(double),double,
java.lang.Math.log10(double),double,
java.lang.Math.sqrt(double),double,
java.lang.Math.cbrt(double),double,
"java.lang.Math.IEEEremainder(double,double)",double,
java.lang.Math.ceil(double),double,
java.lang.Math.floor(double),double,
java.lang.Math.rint(double),double,
"java.lang.Math.atan2(double,double)",double,
"java.lang.Math.pow(double,double)",double,
java.lang.Math.round(float),int,
java.lang.Math.round(double),long,
java.lang.Math.random(),double,a pseudorandom double greater than or equal to 0.0 and less than 1.0.
"java.lang.Math.addExact(int,int)",int,the result
"java.lang.Math.addExact(long,long)",long,the result
"java.lang.Math.subtractExact(int,int)",int,the result
"java.lang.Math.subtractExact(long,long)",long,the result
"java.lang.Math.multiplyExact(int,int)",int,the result
"java.lang.Math.multiplyExact(long,long)",long,the result
java.lang.Math.incrementExact(int),int,the result
java.lang.Math.incrementExact(long),long,the result
java.lang.Math.decrementExact(int),int,the result
java.lang.Math.decrementExact(long),long,the result
java.lang.Math.negateExact(int),int,the result
java.lang.Math.negateExact(long),long,the result
java.lang.Math.toIntExact(long),int,the argument as an int
"java.lang.Math.floorDiv(int,int)",int,
"java.lang.Math.floorDiv(long,long)",long,the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient.
"java.lang.Math.floorMod(int,int)",int,
"java.lang.Math.floorMod(long,long)",long,
java.lang.Math.abs(int),int,the absolute value of the argument.
java.lang.Math.abs(long),long,the absolute value of the argument.
java.lang.Math.abs(float),float,
java.lang.Math.abs(double),double,
"java.lang.Math.max(int,int)",int,the larger of a and b.
"java.lang.Math.max(long,long)",long,the larger of a and b.
"java.lang.Math.max(float,float)",float,the larger of a and b.
"java.lang.Math.max(double,double)",double,the larger of a and b.
"java.lang.Math.min(int,int)",int,the smaller of a and b.
"java.lang.Math.min(long,long)",long,the smaller of a and b.
"java.lang.Math.min(float,float)",float,the smaller of a and b.
"java.lang.Math.min(double,double)",double,the smaller of a and b.
java.lang.Math.ulp(double),double,
java.lang.Math.ulp(float),float,
java.lang.Math.signum(double),double,
java.lang.Math.signum(float),float,
java.lang.Math.sinh(double),double,
java.lang.Math.cosh(double),double,
java.lang.Math.tanh(double),double,
"java.lang.Math.hypot(double,double)",double,
java.lang.Math.expm1(double),double,
java.lang.Math.log1p(double),double,
"java.lang.Math.copySign(double,double)",double,a value with the magnitude of magnitude and the sign of sign.
"java.lang.Math.copySign(float,float)",float,a value with the magnitude of magnitude and the sign of sign.
java.lang.Math.getExponent(float),int,
java.lang.Math.getExponent(double),int,
"java.lang.Math.nextAfter(double,double)",double,
"java.lang.Math.nextAfter(float,double)",float,
java.lang.Math.nextUp(double),double,
java.lang.Math.nextUp(float),float,
java.lang.Math.nextDown(double),double,
java.lang.Math.nextDown(float),float,
"java.lang.Math.scalb(double,int)",double,
"java.lang.Math.scalb(float,int)",float,
java.lang.Number.intValue(),abstractint,the numeric value represented by this object after conversion to type int.
java.lang.Number.longValue(),abstractlong,the numeric value represented by this object after conversion to type long.
java.lang.Number.floatValue(),abstractfloat,the numeric value represented by this object after conversion to type float.
java.lang.Number.doubleValue(),abstractdouble,the numeric value represented by this object after conversion to type double.
java.lang.Number.byteValue(),byte,the numeric value represented by this object after conversion to type byte.
java.lang.Number.shortValue(),short,the numeric value represented by this object after conversion to type short.
java.lang.Object.getClass(),Class&lt;?&gt;,The Class object that represents the runtime class of this object.
java.lang.Object.hashCode(),int,
java.lang.Object.equals(Object),boolean,
java.lang.Object.clone(),Object,a clone of this instance.
java.lang.Object.toString(),String,a string representation of the object.
java.lang.Object.notify(),void,
java.lang.Object.notifyAll(),void,
java.lang.Object.wait(long),void,
"java.lang.Object.wait(long,int)",void,
java.lang.Object.wait(),void,
java.lang.Object.finalize(),"voidize()
                 throws Throwable",
java.lang.Package.getName(),String,"The fully-qualified name of this package as defined in section 6.5.3 of The Java™ Language Specification, for example, java.lang"
java.lang.Package.getSpecificationTitle(),String,"the specification title, null is returned if it is not known."
java.lang.Package.getSpecificationVersion(),String,"the specification version, null is returned if it is not known."
java.lang.Package.getSpecificationVendor(),String,"the specification vendor, null is returned if it is not known."
java.lang.Package.getImplementationTitle(),String,"the title of the implementation, null is returned if it is not known."
java.lang.Package.getImplementationVersion(),String,"the version of the implementation, null is returned if it is not known."
java.lang.Package.getImplementationVendor(),String,the vendor that implemented this package..
java.lang.Package.isSealed(),boolean,"true if the package is sealed, false otherwise"
java.lang.Package.isSealed(URL),boolean,true if this package is sealed with respect to url
java.lang.Package.isCompatibleWith(String),boolean,true if this package's version number is greater than or equal to the desired version number
java.lang.Package.getPackage(String),Package,the package of the requested name. It may be null if no package information is available from the archive or codebase.
java.lang.Package.getPackages(),Package[],a new array of packages known to the callers ClassLoader instance. An zero length array is returned if none are known.
java.lang.Package.hashCode(),int,the hash code computed from the package name.
java.lang.Package.toString(),String,the string representation of the package.
java.lang.Package.getAnnotation(Class&lt;A&gt;),&lt;A extends Annotation&gt;A,"this element's annotation for the specified annotation type if present on this element, else null"
java.lang.Package.isAnnotationPresent(Class&lt;?),boolean,"true if an annotation for the specified annotation type is present on this element, else false"
java.lang.Package.getAnnotationsByType(Class&lt;A&gt;),&lt;A extends Annotation&gt;A[],"all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"
java.lang.Package.getAnnotations(),Annotation[],annotations present on this element
java.lang.Package.getDeclaredAnnotation(Class&lt;A&gt;),&lt;A extends Annotation&gt;A,"this element's annotation for the specified annotation type if directly present on this element, else null"
java.lang.Package.getDeclaredAnnotationsByType(Class&lt;A&gt;),&lt;A extends Annotation&gt;A[],"all this element's annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"
java.lang.Package.getDeclaredAnnotations(),Annotation[],annotations directly present on this element
java.lang.Process.getOutputStream(),abstractOutputStream,the output stream connected to the normal input of the subprocess
java.lang.Process.getInputStream(),abstractInputStream,the input stream connected to the normal output of the subprocess
java.lang.Process.getErrorStream(),abstractInputStream,the input stream connected to the error output of the subprocess
java.lang.Process.waitFor(),abstractint,"the exit value of the subprocess represented by this Process object. By convention, the value 0 indicates normal termination."
"java.lang.Process.waitFor(long,TimeUnit)",boolean,true if the subprocess has exited and false if the waiting time elapsed before the subprocess has exited.
java.lang.Process.exitValue(),abstractint,"the exit value of the subprocess represented by this Process object. By convention, the value 0 indicates normal termination."
java.lang.Process.destroy(),abstractvoid,
java.lang.Process.destroyForcibly(),Process,the Process object representing the subprocess to be forcibly destroyed.
java.lang.Process.isAlive(),boolean,true if the subprocess represented by this Process object has not yet terminated.
java.lang.ProcessBuilder.command(List&lt;String&gt;),ProcessBuilder,this process builder
java.lang.ProcessBuilder.command(String...),ProcessBuilder,this process builder
java.lang.ProcessBuilder.command(),List&lt;String&gt;,this process builder's program and its arguments
java.lang.ProcessBuilder.environment(),"Map&lt;String,String&gt;",this process builder's environment
java.lang.ProcessBuilder.directory(),File,this process builder's working directory
java.lang.ProcessBuilder.directory(File),ProcessBuilder,this process builder
java.lang.ProcessBuilder.redirectInput(ProcessBuilder.Redirect),ProcessBuilder,this process builder
java.lang.ProcessBuilder.redirectOutput(ProcessBuilder.Redirect),ProcessBuilder,this process builder
java.lang.ProcessBuilder.redirectError(ProcessBuilder.Redirect),ProcessBuilder,this process builder
java.lang.ProcessBuilder.redirectInput(File),ProcessBuilder,this process builder
java.lang.ProcessBuilder.redirectOutput(File),ProcessBuilder,this process builder
java.lang.ProcessBuilder.redirectError(File),ProcessBuilder,this process builder
java.lang.ProcessBuilder.redirectInput(),ProcessBuilder.Redirect,this process builder's standard input source
java.lang.ProcessBuilder.redirectOutput(),ProcessBuilder.Redirect,this process builder's standard output destination
java.lang.ProcessBuilder.redirectError(),ProcessBuilder.Redirect,this process builder's standard error destination
java.lang.ProcessBuilder.inheritIO(),ProcessBuilder,this process builder
java.lang.ProcessBuilder.redirectErrorStream(),boolean,this process builder's redirectErrorStream property
java.lang.ProcessBuilder.redirectErrorStream(boolean),ProcessBuilder,this process builder
java.lang.ProcessBuilder.start(),Process,
java.lang.ProcessBuilder.Redirect.type(),abstractProcessBuilder.Redirect.Type,the type of this Redirect
java.lang.ProcessBuilder.Redirect.file(),File,"the file associated with this redirect, or null if there is no such file"
java.lang.ProcessBuilder.Redirect.from(File),ProcessBuilder.Redirect,a redirect to read from the specified file
java.lang.ProcessBuilder.Redirect.to(File),ProcessBuilder.Redirect,a redirect to write to the specified file
java.lang.ProcessBuilder.Redirect.appendTo(File),ProcessBuilder.Redirect,a redirect to append to the specified file
java.lang.ProcessBuilder.Redirect.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.lang.ProcessBuilder.Redirect.hashCode(),int,a hash code value for this Redirect
java.lang.Runtime.getRuntime(),Runtime,the Runtime object associated with the current Java application.
java.lang.Runtime.exit(int),void,
java.lang.Runtime.addShutdownHook(Thread),void,
java.lang.Runtime.removeShutdownHook(Thread),boolean,"true if the specified hook had previously been registered and was successfully de-registered, false otherwise."
java.lang.Runtime.halt(int),void,
java.lang.Runtime.runFinalizersOnExit(boolean),void,
java.lang.Runtime.exec(String),Process,A new Process object for managing the subprocess
"java.lang.Runtime.exec(String,String[])",Process,A new Process object for managing the subprocess
"java.lang.Runtime.exec(String,String[],File)",Process,A new Process object for managing the subprocess
java.lang.Runtime.exec(String[]),Process,A new Process object for managing the subprocess
"java.lang.Runtime.exec(String[],String[])",Process,A new Process object for managing the subprocess
"java.lang.Runtime.exec(String[],String[],File)",Process,
java.lang.Runtime.availableProcessors(),int,the maximum number of processors available to the virtual machine; never smaller than one
java.lang.Runtime.freeMemory(),long,"an approximation to the total amount of memory currently available for future allocated objects, measured in bytes."
java.lang.Runtime.totalMemory(),long,"the total amount of memory currently available for current and future objects, measured in bytes."
java.lang.Runtime.maxMemory(),long,"the maximum amount of memory that the virtual machine will attempt to use, measured in bytes"
java.lang.Runtime.gc(),void,
java.lang.Runtime.runFinalization(),void,
java.lang.Runtime.traceInstructions(boolean),void,
java.lang.Runtime.traceMethodCalls(boolean),void,
java.lang.Runtime.load(String),void,
java.lang.Runtime.loadLibrary(String),void,
java.lang.Runtime.getLocalizedInputStream(InputStream),InputStream,a localized input stream
java.lang.Runtime.getLocalizedOutputStream(OutputStream),OutputStream,a localized output stream
java.lang.SecurityManager.getInCheck(),boolean,"the value of the inCheck field. This field should contain true if a security check is in progress, false otherwise."
java.lang.SecurityManager.getClassContext(),Class[],the execution stack.
java.lang.SecurityManager.currentClassLoader(),ClassLoader,
java.lang.SecurityManager.currentLoadedClass(),Class&lt;?&gt;,
java.lang.SecurityManager.classDepth(String),int,the depth on the stack frame of the first occurrence of a method from a class with the specified name; -1 if such a frame cannot be found.
java.lang.SecurityManager.classLoaderDepth(),int,
java.lang.SecurityManager.inClass(String),boolean,true if a method from a class with the specified name is on the execution stack; false otherwise.
java.lang.SecurityManager.inClassLoader(),boolean,true if a call to currentClassLoader has a non-null return value.
java.lang.SecurityManager.getSecurityContext(),Object,an implementation-dependent object that encapsulates sufficient information about the current execution environment to perform some security checks later.
java.lang.SecurityManager.checkPermission(Permission),void,
"java.lang.SecurityManager.checkPermission(Permission,Object)",void,
java.lang.SecurityManager.checkCreateClassLoader(),void,
java.lang.SecurityManager.checkAccess(Thread),void,
java.lang.SecurityManager.checkAccess(ThreadGroup),void,
java.lang.SecurityManager.checkExit(int),void,
java.lang.SecurityManager.checkExec(String),void,
java.lang.SecurityManager.checkLink(String),void,
java.lang.SecurityManager.checkRead(FileDescriptor),void,
java.lang.SecurityManager.checkRead(String),void,
"java.lang.SecurityManager.checkRead(String,Object)",void,
java.lang.SecurityManager.checkWrite(FileDescriptor),void,
java.lang.SecurityManager.checkWrite(String),void,
java.lang.SecurityManager.checkDelete(String),void,
"java.lang.SecurityManager.checkConnect(String,int)",void,
"java.lang.SecurityManager.checkConnect(String,int,Object)",void,
java.lang.SecurityManager.checkListen(int),void,
"java.lang.SecurityManager.checkAccept(String,int)",void,
java.lang.SecurityManager.checkMulticast(InetAddress),void,
"java.lang.SecurityManager.checkMulticast(InetAddress,byte)",void,
java.lang.SecurityManager.checkPropertiesAccess(),void,
java.lang.SecurityManager.checkPropertyAccess(String),void,
java.lang.SecurityManager.checkTopLevelWindow(Object),boolean,true if the calling thread is trusted to put up top-level windows; false otherwise.
java.lang.SecurityManager.checkPrintJobAccess(),void,
java.lang.SecurityManager.checkSystemClipboardAccess(),void,
java.lang.SecurityManager.checkAwtEventQueueAccess(),void,
java.lang.SecurityManager.checkPackageAccess(String),void,
java.lang.SecurityManager.checkPackageDefinition(String),void,
java.lang.SecurityManager.checkSetFactory(),void,
"java.lang.SecurityManager.checkMemberAccess(Class&lt;?&gt;,int)",void,
java.lang.SecurityManager.checkSecurityAccess(String),void,
java.lang.SecurityManager.getThreadGroup(),ThreadGroup,ThreadGroup that new threads are instantiated into
java.lang.Short.toString(short),String,the string representation of the specified short
"java.lang.Short.parseShort(String,int)",short,
java.lang.Short.parseShort(String),short,the short value represented by the argument in decimal.
"java.lang.Short.valueOf(String,int)",Short,a Short object holding the value represented by the string argument in the specified radix.
java.lang.Short.valueOf(String),Short,a Short object holding the value represented by the string argument
java.lang.Short.valueOf(short),Short,a Short instance representing s.
java.lang.Short.decode(String),Short,a Short object holding the short value represented by nm
java.lang.Short.byteValue(),byte,the numeric value represented by this object after conversion to type byte.
java.lang.Short.shortValue(),short,the numeric value represented by this object after conversion to type short.
java.lang.Short.intValue(),int,the numeric value represented by this object after conversion to type int.
java.lang.Short.longValue(),long,the numeric value represented by this object after conversion to type long.
java.lang.Short.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.lang.Short.doubleValue(),double,the numeric value represented by this object after conversion to type double.
java.lang.Short.toString(),String,a string representation of the value of this object in base10.
java.lang.Short.hashCode(),int,a hash code value for this Short
java.lang.Short.hashCode(short),int,a hash code value for a short value.
java.lang.Short.equals(Object),boolean,true if the objects are the same; false otherwise.
java.lang.Short.compareTo(Short),int,the value 0 if this Short is equal to the argument Short; a value less than 0 if this Short is numerically less than the argument Short; and a value greater than 0 if this Short is numerically greater than the argument Short (signed comparison).
"java.lang.Short.compare(short,short)",int,the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x &gt; y
java.lang.Short.reverseBytes(short),short,"the value obtained by reversing (or, equivalently, swapping) the bytes in the specified short value."
java.lang.Short.toUnsignedInt(short),int,the argument converted to int by an unsigned conversion
java.lang.Short.toUnsignedLong(short),long,the argument converted to long by an unsigned conversion
java.lang.StackTraceElement.getFileName(),String,"the name of the file containing the execution point represented by this stack trace element, or null if this information is unavailable."
java.lang.StackTraceElement.getLineNumber(),int,"the line number of the source line containing the execution point represented by this stack trace element, or a negative number if this information is unavailable."
java.lang.StackTraceElement.getClassName(),String,the fully qualified name of the Class containing the execution point represented by this stack trace element.
java.lang.StackTraceElement.getMethodName(),String,the name of the method containing the execution point represented by this stack trace element.
java.lang.StackTraceElement.isNativeMethod(),boolean,true if the method containing the execution point represented by this stack trace element is a native method.
java.lang.StackTraceElement.toString(),String,
java.lang.StackTraceElement.equals(Object),boolean,true if the specified object is another StackTraceElement instance representing the same execution point as this instance.
java.lang.StackTraceElement.hashCode(),int,a hash code value for this object.
java.lang.StrictMath.sin(double),double,
java.lang.StrictMath.cos(double),double,
java.lang.StrictMath.tan(double),double,
java.lang.StrictMath.asin(double),double,
java.lang.StrictMath.acos(double),double,
java.lang.StrictMath.atan(double),double,
java.lang.StrictMath.toRadians(double),double,the measurement of the angle angdeg in radians.
java.lang.StrictMath.toDegrees(double),double,the measurement of the angle angrad in degrees.
java.lang.StrictMath.exp(double),double,
java.lang.StrictMath.log(double),double,
java.lang.StrictMath.log10(double),double,
java.lang.StrictMath.sqrt(double),double,
java.lang.StrictMath.cbrt(double),double,
"java.lang.StrictMath.IEEEremainder(double,double)",double,
java.lang.StrictMath.ceil(double),double,
java.lang.StrictMath.floor(double),double,
java.lang.StrictMath.rint(double),double,
"java.lang.StrictMath.atan2(double,double)",double,
"java.lang.StrictMath.pow(double,double)",double,
java.lang.StrictMath.round(float),int,
java.lang.StrictMath.round(double),long,
java.lang.StrictMath.random(),double,a pseudorandom double greater than or equal to 0.0 and less than 1.0.
"java.lang.StrictMath.addExact(int,int)",int,the result
"java.lang.StrictMath.addExact(long,long)",long,the result
"java.lang.StrictMath.subtractExact(int,int)",int,the result
"java.lang.StrictMath.subtractExact(long,long)",long,the result
"java.lang.StrictMath.multiplyExact(int,int)",int,the result
"java.lang.StrictMath.multiplyExact(long,long)",long,the result
java.lang.StrictMath.toIntExact(long),int,the argument as an int
"java.lang.StrictMath.floorDiv(int,int)",int,the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient.
"java.lang.StrictMath.floorDiv(long,long)",long,the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient.
"java.lang.StrictMath.floorMod(int,int)",int,
"java.lang.StrictMath.floorMod(long,long)",long,
java.lang.StrictMath.abs(int),int,the absolute value of the argument.
java.lang.StrictMath.abs(long),long,the absolute value of the argument.
java.lang.StrictMath.abs(float),float,
java.lang.StrictMath.abs(double),double,
"java.lang.StrictMath.max(int,int)",int,the larger of a and b.
"java.lang.StrictMath.max(long,long)",long,the larger of a and b.
"java.lang.StrictMath.max(float,float)",float,the larger of a and b.
"java.lang.StrictMath.max(double,double)",double,the larger of a and b.
"java.lang.StrictMath.min(int,int)",int,the smaller of a and b.
"java.lang.StrictMath.min(long,long)",long,the smaller of a and b.
"java.lang.StrictMath.min(float,float)",float,the smaller of a and b.
"java.lang.StrictMath.min(double,double)",double,the smaller of a and b.
java.lang.StrictMath.ulp(double),double,
java.lang.StrictMath.ulp(float),float,
java.lang.StrictMath.signum(double),double,
java.lang.StrictMath.signum(float),float,
java.lang.StrictMath.sinh(double),double,
java.lang.StrictMath.cosh(double),double,
java.lang.StrictMath.tanh(double),double,
"java.lang.StrictMath.hypot(double,double)",double,
java.lang.StrictMath.expm1(double),double,
java.lang.StrictMath.log1p(double),double,
"java.lang.StrictMath.copySign(double,double)",double,a value with the magnitude of magnitude and the sign of sign.
"java.lang.StrictMath.copySign(float,float)",float,a value with the magnitude of magnitude and the sign of sign.
java.lang.StrictMath.getExponent(float),int,
java.lang.StrictMath.getExponent(double),int,
"java.lang.StrictMath.nextAfter(double,double)",double,
"java.lang.StrictMath.nextAfter(float,double)",float,
java.lang.StrictMath.nextUp(double),double,
java.lang.StrictMath.nextUp(float),float,
java.lang.StrictMath.nextDown(double),double,
java.lang.StrictMath.nextDown(float),float,
"java.lang.StrictMath.scalb(double,int)",double,
"java.lang.StrictMath.scalb(float,int)",float,
java.lang.String.length(),int,the length of the sequence of characters represented by this object.
java.lang.String.isEmpty(),boolean,"true if length() is 0, otherwise false"
java.lang.String.charAt(int),char,the char value at the specified index of this string. The first char value is at index 0.
java.lang.String.codePointAt(int),int,the code point value of the character at the index
java.lang.String.codePointBefore(int),int,the Unicode code point value before the given index.
"java.lang.String.codePointCount(int,int)",int,the number of Unicode code points in the specified text range
"java.lang.String.offsetByCodePoints(int,int)",int,the index within this String
"java.lang.String.getChars(int,int,char[],int)",void,
"java.lang.String.getBytes(int,int,byte[],int)",void,
java.lang.String.getBytes(String),byte[],The resultant byte array
java.lang.String.getBytes(Charset),byte[],The resultant byte array
java.lang.String.getBytes(),byte[],The resultant byte array
java.lang.String.equals(Object),boolean,"true if the given object represents a String equivalent to this string, false otherwise"
java.lang.String.contentEquals(StringBuffer),boolean,"true if this String represents the same sequence of characters as the specified StringBuffer, false otherwise"
java.lang.String.contentEquals(CharSequence),boolean,"true if this String represents the same sequence of char values as the specified sequence, false otherwise"
java.lang.String.equalsIgnoreCase(String),boolean,
java.lang.String.compareTo(String),int,the value 0 if the argument string is equal to this string; a value less than 0 if this string is lexicographically less than the string argument; and a value greater than 0 if this string is lexicographically greater than the string argument.
java.lang.String.compareToIgnoreCase(String),int,"a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations."
"java.lang.String.regionMatches(int,String,int,int)",boolean,
"java.lang.String.regionMatches(boolean,int,String,int,int)",boolean,
"java.lang.String.startsWith(String,int)",boolean,true if the character sequence represented by the argument is a prefix of the substring of this object starting at index toffset; false otherwise. The result is false if toffset is negative or greater than the length of this String object; otherwise the result is the same as the result of the expression this.substring(toffset).startsWith(prefix)
java.lang.String.startsWith(String),boolean,true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise. Note also that true will be returned if the argument is an empty string or is equal to this String object as determined by the equals(Object) method.
java.lang.String.endsWith(String),boolean,true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise. Note that the result will be true if the argument is the empty string or is equal to this String object as determined by the equals(Object) method.
java.lang.String.hashCode(),int,a hash code value for this object.
java.lang.String.indexOf(int),int,"the index of the first occurrence of the character in the character sequence represented by this object, or -1 if the character does not occur."
"java.lang.String.indexOf(int,int)",int,"the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to fromIndex, or -1 if the character does not occur."
java.lang.String.lastIndexOf(int),int,"the index of the last occurrence of the character in the character sequence represented by this object, or -1 if the character does not occur."
"java.lang.String.lastIndexOf(int,int)",int,"the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to fromIndex, or -1 if the character does not occur before that point."
java.lang.String.indexOf(String),int,"the index of the first occurrence of the specified substring, or -1 if there is no such occurrence."
"java.lang.String.indexOf(String,int)",int,"the index of the first occurrence of the specified substring, starting at the specified index, or -1 if there is no such occurrence."
java.lang.String.lastIndexOf(String),int,"the index of the last occurrence of the specified substring, or -1 if there is no such occurrence."
"java.lang.String.lastIndexOf(String,int)",int,"the index of the last occurrence of the specified substring, searching backward from the specified index, or -1 if there is no such occurrence."
java.lang.String.substring(int),String,the specified substring.
"java.lang.String.substring(int,int)",String,the specified substring.
"java.lang.String.subSequence(int,int)",CharSequence,the specified subsequence.
java.lang.String.concat(String),String,a string that represents the concatenation of this object's characters followed by the string argument's characters.
"java.lang.String.replace(char,char)",String,a string derived from this string by replacing every occurrence of oldChar with newChar.
java.lang.String.matches(String),boolean,"true if, and only if, this string matches the given regular expression"
java.lang.String.contains(CharSequence),boolean,"true if this string contains s, false otherwise"
"java.lang.String.replaceFirst(String,String)",String,The resulting String
"java.lang.String.replaceAll(String,String)",String,The resulting String
"java.lang.String.replace(CharSequence,CharSequence)",String,The resulting string
"java.lang.String.split(String,int)",String[],the array of strings computed by splitting this string around matches of the given regular expression
java.lang.String.split(String),String[],the array of strings computed by splitting this string around matches of the given regular expression
"java.lang.String.join(CharSequence,CharSequence...)",String,a new String that is composed of the elements separated by the delimiter
"java.lang.String.join(CharSequence,Iterable&lt;?)",String,a new String that is composed from the elements argument
java.lang.String.toLowerCase(Locale),String,"the String, converted to lowercase."
java.lang.String.toLowerCase(),String,"the String, converted to lowercase."
java.lang.String.toUpperCase(Locale),String,"the String, converted to uppercase."
java.lang.String.toUpperCase(),String,"the String, converted to uppercase."
java.lang.String.trim(),String,"A string whose value is this string, with any leading and trailing white space removed, or this string if it has no leading or trailing white space."
java.lang.String.toString(),String,the string itself.
java.lang.String.toCharArray(),char[],a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string.
"java.lang.String.format(String,Object...)",String,A formatted string
"java.lang.String.format(Locale,String,Object...)",String,A formatted string
java.lang.String.valueOf(Object),String,"if the argument is null, then a string equal to ""null""; otherwise, the value of obj.toString() is returned."
java.lang.String.valueOf(char[]),String,a String that contains the characters of the character array.
"java.lang.String.valueOf(char[],int,int)",String,a String that contains the characters of the specified subarray of the character array.
"java.lang.String.copyValueOf(char[],int,int)",String,a String that contains the characters of the specified subarray of the character array.
java.lang.String.copyValueOf(char[]),String,a String that contains the characters of the character array.
java.lang.String.valueOf(boolean),String,"if the argument is true, a string equal to ""true"" is returned; otherwise, a string equal to ""false"" is returned."
java.lang.String.valueOf(char),String,a string of length 1 containing as its single character the argument c.
java.lang.String.valueOf(int),String,a string representation of the int argument.
java.lang.String.valueOf(long),String,a string representation of the long argument.
java.lang.String.valueOf(float),String,a string representation of the float argument.
java.lang.String.valueOf(double),String,a string representation of the double argument.
java.lang.String.intern(),String,"a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings."
java.lang.StringBuffer.length(),int,the length of the sequence of characters currently represented by this object
java.lang.StringBuffer.capacity(),int,the current capacity
java.lang.StringBuffer.ensureCapacity(int),void,
java.lang.StringBuffer.trimToSize(),void,
java.lang.StringBuffer.setLength(int),void,
java.lang.StringBuffer.charAt(int),char,the char value at the specified index.
java.lang.StringBuffer.codePointAt(int),int,the code point value of the character at the index
java.lang.StringBuffer.codePointBefore(int),int,the Unicode code point value before the given index.
"java.lang.StringBuffer.codePointCount(int,int)",int,the number of Unicode code points in the specified text range
"java.lang.StringBuffer.offsetByCodePoints(int,int)",int,the index within this sequence
"java.lang.StringBuffer.getChars(int,int,char[],int)",void,
"java.lang.StringBuffer.setCharAt(int,char)",void,
java.lang.StringBuffer.append(Object),StringBuffer,a reference to this object.
java.lang.StringBuffer.append(String),StringBuffer,a reference to this object.
java.lang.StringBuffer.append(StringBuffer),StringBuffer,a reference to this object.
java.lang.StringBuffer.append(CharSequence),StringBuffer,a reference to this object.
"java.lang.StringBuffer.append(CharSequence,int,int)",StringBuffer,a reference to this object.
java.lang.StringBuffer.append(char[]),StringBuffer,a reference to this object.
"java.lang.StringBuffer.append(char[],int,int)",StringBuffer,a reference to this object.
java.lang.StringBuffer.append(boolean),StringBuffer,a reference to this object.
java.lang.StringBuffer.append(char),StringBuffer,a reference to this object.
java.lang.StringBuffer.append(int),StringBuffer,a reference to this object.
java.lang.StringBuffer.appendCodePoint(int),StringBuffer,a reference to this object.
java.lang.StringBuffer.append(long),StringBuffer,a reference to this object.
java.lang.StringBuffer.append(float),StringBuffer,a reference to this object.
java.lang.StringBuffer.append(double),StringBuffer,a reference to this object.
"java.lang.StringBuffer.delete(int,int)",StringBuffer,This object.
java.lang.StringBuffer.deleteCharAt(int),StringBuffer,This object.
"java.lang.StringBuffer.replace(int,int,String)",StringBuffer,This object.
java.lang.StringBuffer.substring(int),String,The new string.
"java.lang.StringBuffer.subSequence(int,int)",CharSequence,the specified subsequence.
"java.lang.StringBuffer.substring(int,int)",String,The new string.
"java.lang.StringBuffer.insert(int,char[],int,int)",StringBuffer,This object
"java.lang.StringBuffer.insert(int,Object)",StringBuffer,a reference to this object.
"java.lang.StringBuffer.insert(int,String)",StringBuffer,
"java.lang.StringBuffer.insert(int,char[])",StringBuffer,a reference to this object.
"java.lang.StringBuffer.insert(int,CharSequence)",StringBuffer,a reference to this object.
"java.lang.StringBuffer.insert(int,CharSequence,int,int)",StringBuffer,
"java.lang.StringBuffer.insert(int,boolean)",StringBuffer,a reference to this object.
"java.lang.StringBuffer.insert(int,char)",StringBuffer,a reference to this object.
"java.lang.StringBuffer.insert(int,int)",StringBuffer,a reference to this object.
"java.lang.StringBuffer.insert(int,long)",StringBuffer,a reference to this object.
"java.lang.StringBuffer.insert(int,float)",StringBuffer,a reference to this object.
"java.lang.StringBuffer.insert(int,double)",StringBuffer,a reference to this object.
java.lang.StringBuffer.indexOf(String),int,"if the string argument occurs as a substring within this object, then the index of the first character of the first such substring is returned; if it does not occur as a substring, -1 is returned."
"java.lang.StringBuffer.indexOf(String,int)",int,"the index within this string of the first occurrence of the specified substring, starting at the specified index."
java.lang.StringBuffer.lastIndexOf(String),int,"if the string argument occurs one or more times as a substring within this object, then the index of the first character of the last such substring is returned. If it does not occur as a substring, -1 is returned."
"java.lang.StringBuffer.lastIndexOf(String,int)",int,the index within this sequence of the last occurrence of the specified substring.
java.lang.StringBuffer.reverse(),StringBuffer,a reference to this object.
java.lang.StringBuffer.toString(),String,a string representation of this sequence of characters.
java.lang.StringBuilder.append(Object),StringBuilder,a reference to this object.
java.lang.StringBuilder.append(String),StringBuilder,a reference to this object.
java.lang.StringBuilder.append(StringBuffer),StringBuilder,a reference to this object.
java.lang.StringBuilder.append(CharSequence),StringBuilder,A reference to this Appendable
"java.lang.StringBuilder.append(CharSequence,int,int)",StringBuilder,a reference to this object.
java.lang.StringBuilder.append(char[]),StringBuilder,a reference to this object.
"java.lang.StringBuilder.append(char[],int,int)",StringBuilder,a reference to this object.
java.lang.StringBuilder.append(boolean),StringBuilder,a reference to this object.
java.lang.StringBuilder.append(char),StringBuilder,a reference to this object.
java.lang.StringBuilder.append(int),StringBuilder,a reference to this object.
java.lang.StringBuilder.append(long),StringBuilder,a reference to this object.
java.lang.StringBuilder.append(float),StringBuilder,a reference to this object.
java.lang.StringBuilder.append(double),StringBuilder,a reference to this object.
java.lang.StringBuilder.appendCodePoint(int),StringBuilder,a reference to this object.
"java.lang.StringBuilder.delete(int,int)",StringBuilder,This object.
java.lang.StringBuilder.deleteCharAt(int),StringBuilder,This object.
"java.lang.StringBuilder.replace(int,int,String)",StringBuilder,This object.
"java.lang.StringBuilder.insert(int,char[],int,int)",StringBuilder,This object
"java.lang.StringBuilder.insert(int,Object)",StringBuilder,a reference to this object.
"java.lang.StringBuilder.insert(int,String)",StringBuilder,
"java.lang.StringBuilder.insert(int,char[])",StringBuilder,a reference to this object.
"java.lang.StringBuilder.insert(int,CharSequence)",StringBuilder,a reference to this object.
"java.lang.StringBuilder.insert(int,CharSequence,int,int)",StringBuilder,
"java.lang.StringBuilder.insert(int,boolean)",StringBuilder,a reference to this object.
"java.lang.StringBuilder.insert(int,char)",StringBuilder,a reference to this object.
"java.lang.StringBuilder.insert(int,int)",StringBuilder,a reference to this object.
"java.lang.StringBuilder.insert(int,long)",StringBuilder,a reference to this object.
"java.lang.StringBuilder.insert(int,float)",StringBuilder,a reference to this object.
"java.lang.StringBuilder.insert(int,double)",StringBuilder,a reference to this object.
java.lang.StringBuilder.indexOf(String),int,"if the string argument occurs as a substring within this object, then the index of the first character of the first such substring is returned; if it does not occur as a substring, -1 is returned."
"java.lang.StringBuilder.indexOf(String,int)",int,"the index within this string of the first occurrence of the specified substring, starting at the specified index."
java.lang.StringBuilder.lastIndexOf(String),int,"if the string argument occurs one or more times as a substring within this object, then the index of the first character of the last such substring is returned. If it does not occur as a substring, -1 is returned."
"java.lang.StringBuilder.lastIndexOf(String,int)",int,the index within this sequence of the last occurrence of the specified substring.
java.lang.StringBuilder.reverse(),StringBuilder,a reference to this object.
java.lang.StringBuilder.toString(),String,a string representation of this sequence of characters.
java.lang.StringBuilder.length(),int,the length of the sequence of characters currently represented by this object
java.lang.StringBuilder.capacity(),int,the current capacity
java.lang.StringBuilder.ensureCapacity(int),void,
java.lang.StringBuilder.trimToSize(),void,
java.lang.StringBuilder.setLength(int),void,
java.lang.StringBuilder.charAt(int),char,the char value at the specified index.
java.lang.StringBuilder.codePointAt(int),int,the code point value of the character at the index
java.lang.StringBuilder.codePointBefore(int),int,the Unicode code point value before the given index.
"java.lang.StringBuilder.codePointCount(int,int)",int,the number of Unicode code points in the specified text range
"java.lang.StringBuilder.offsetByCodePoints(int,int)",int,the index within this sequence
"java.lang.StringBuilder.getChars(int,int,char[],int)",void,
"java.lang.StringBuilder.setCharAt(int,char)",void,
java.lang.StringBuilder.substring(int),String,The new string.
"java.lang.StringBuilder.subSequence(int,int)",CharSequence,the specified subsequence.
"java.lang.StringBuilder.substring(int,int)",String,The new string.
java.lang.System.setIn(InputStream),void,
java.lang.System.setOut(PrintStream),void,
java.lang.System.setErr(PrintStream),void,
java.lang.System.console(),Console,"The system console, if any, otherwise null."
java.lang.System.inheritedChannel(),Channel,"The inherited channel, if any, otherwise null."
java.lang.System.setSecurityManager(SecurityManager),void,
java.lang.System.getSecurityManager(),SecurityManager,"if a security manager has already been established for the current application, then that security manager is returned; otherwise, null is returned."
java.lang.System.currentTimeMillis(),long,"the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC."
java.lang.System.nanoTime(),long,"the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds"
"java.lang.System.arraycopy(Object,int,Object,int,int)",void,
java.lang.System.identityHashCode(Object),int,the hashCode
java.lang.System.getProperties(),Properties,the system properties
java.lang.System.lineSeparator(),String,the system-dependent line separator string
java.lang.System.setProperties(Properties),void,
java.lang.System.getProperty(String),String,"the string value of the system property, or null if there is no property with that key."
"java.lang.System.getProperty(String,String)",String,"the string value of the system property, or the default value if there is no property with that key."
"java.lang.System.setProperty(String,String)",String,"the previous value of the system property, or null if it did not have one."
java.lang.System.clearProperty(String),String,"the previous string value of the system property, or null if there was no property with that key."
java.lang.System.getenv(String),String,"the string value of the variable, or null if the variable is not defined in the system environment"
java.lang.System.getenv(),"Map&lt;String,String&gt;",the environment as a map of variable names to values
java.lang.System.exit(int),void,
java.lang.System.gc(),void,
java.lang.System.runFinalization(),void,
java.lang.System.runFinalizersOnExit(boolean),void,
java.lang.System.load(String),void,
java.lang.System.loadLibrary(String),void,
java.lang.System.mapLibraryName(String),String,a platform-dependent native library name.
java.lang.Thread.currentThread(),Thread,the currently executing thread.
java.lang.Thread.yield(),void,
java.lang.Thread.sleep(long),void,
"java.lang.Thread.sleep(long,int)",void,
java.lang.Thread.clone(),Object,a clone of this instance.
java.lang.Thread.start(),void,
java.lang.Thread.run(),void,
java.lang.Thread.stop(),void,
java.lang.Thread.stop(Throwable),void,
java.lang.Thread.interrupt(),void,
java.lang.Thread.interrupted(),boolean,true if the current thread has been interrupted; false otherwise.
java.lang.Thread.isInterrupted(),boolean,true if this thread has been interrupted; false otherwise.
java.lang.Thread.destroy(),void,
java.lang.Thread.isAlive(),boolean,true if this thread is alive; false otherwise.
java.lang.Thread.suspend(),void,
java.lang.Thread.resume(),void,
java.lang.Thread.setPriority(int),void,
java.lang.Thread.getPriority(),int,this thread's priority.
java.lang.Thread.setName(String),void,
java.lang.Thread.getName(),String,this thread's name.
java.lang.Thread.getThreadGroup(),ThreadGroup,this thread's thread group.
java.lang.Thread.activeCount(),int,an estimate of the number of active threads in the current thread's thread group and in any other thread group that has the current thread's thread group as an ancestor
java.lang.Thread.enumerate(Thread[]),int,the number of threads put into the array
java.lang.Thread.countStackFrames(),int,the number of stack frames in this thread.
java.lang.Thread.join(long),void,
"java.lang.Thread.join(long,int)",void,
java.lang.Thread.join(),void,
java.lang.Thread.dumpStack(),void,
java.lang.Thread.setDaemon(boolean),void,
java.lang.Thread.isDaemon(),boolean,true if this thread is a daemon thread; false otherwise.
java.lang.Thread.checkAccess(),void,
java.lang.Thread.toString(),String,a string representation of this thread.
java.lang.Thread.getContextClassLoader(),ClassLoader,"the context ClassLoader for this Thread, or null indicating the system class loader (or, failing that, the bootstrap class loader)"
java.lang.Thread.setContextClassLoader(ClassLoader),void,
java.lang.Thread.holdsLock(Object),boolean,true if the current thread holds the monitor lock on the specified object.
java.lang.Thread.getStackTrace(),StackTraceElement[],"an array of StackTraceElement, each represents one stack frame."
java.lang.Thread.getAllStackTraces(),"Map&lt;Thread,StackTraceElement[]&gt;",a Map from Thread to an array of StackTraceElement that represents the stack trace of the corresponding thread.
java.lang.Thread.getId(),long,this thread's ID.
java.lang.Thread.getState(),Thread.State,this thread's state.
java.lang.Thread.setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler),void,
java.lang.Thread.getDefaultUncaughtExceptionHandler(),Thread.UncaughtExceptionHandler,the default uncaught exception handler for all threads
java.lang.Thread.getUncaughtExceptionHandler(),Thread.UncaughtExceptionHandler,the uncaught exception handler for this thread
java.lang.Thread.setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler),void,
java.lang.ThreadGroup.getName(),String,the name of this thread group.
java.lang.ThreadGroup.getParent(),ThreadGroup,the parent of this thread group. The top-level thread group is the only thread group whose parent is null.
java.lang.ThreadGroup.getMaxPriority(),int,the maximum priority that a thread in this thread group can have.
java.lang.ThreadGroup.isDaemon(),boolean,true if this thread group is a daemon thread group; false otherwise.
java.lang.ThreadGroup.isDestroyed(),boolean,true if this object is destroyed
java.lang.ThreadGroup.setDaemon(boolean),void,
java.lang.ThreadGroup.setMaxPriority(int),void,
java.lang.ThreadGroup.parentOf(ThreadGroup),boolean,true if this thread group is the thread group argument or one of its ancestor thread groups; false otherwise.
java.lang.ThreadGroup.checkAccess(),void,
java.lang.ThreadGroup.activeCount(),int,an estimate of the number of active threads in this thread group and in any other thread group that has this thread group as an ancestor
java.lang.ThreadGroup.enumerate(Thread[]),int,the number of threads put into the array
"java.lang.ThreadGroup.enumerate(Thread[],boolean)",int,the number of threads put into the array
java.lang.ThreadGroup.activeGroupCount(),int,the number of active thread groups with this thread group as an ancestor
java.lang.ThreadGroup.enumerate(ThreadGroup[]),int,the number of thread groups put into the array
"java.lang.ThreadGroup.enumerate(ThreadGroup[],boolean)",int,the number of thread groups put into the array
java.lang.ThreadGroup.stop(),void,
java.lang.ThreadGroup.interrupt(),void,
java.lang.ThreadGroup.suspend(),void,
java.lang.ThreadGroup.resume(),void,
java.lang.ThreadGroup.destroy(),void,
java.lang.ThreadGroup.list(),void,
"java.lang.ThreadGroup.uncaughtException(Thread,Throwable)",void,
java.lang.ThreadGroup.allowThreadSuspension(boolean),boolean,true on success
java.lang.ThreadGroup.toString(),String,a string representation of this thread group.
java.lang.ThreadLocal.initialValue(),T,the initial value for this thread-local
java.lang.ThreadLocal.withInitial(Supplier&lt;?),&lt;S&gt;ThreadLocal&lt;S&gt;,a new thread local variable
java.lang.ThreadLocal.get(),T,the current thread's value of this thread-local
java.lang.ThreadLocal.set(T),void,
java.lang.ThreadLocal.remove(),void,
java.lang.Throwable.getMessage(),String,the detail message string of this Throwable instance (which may be null).
java.lang.Throwable.getLocalizedMessage(),String,The localized description of this throwable.
java.lang.Throwable.getCause(),Throwable,the cause of this throwable or null if the cause is nonexistent or unknown.
java.lang.Throwable.initCause(Throwable),Throwable,a reference to this Throwable instance.
java.lang.Throwable.toString(),String,
java.lang.Throwable.printStackTrace(),void,
java.lang.Throwable.printStackTrace(PrintStream),void,
java.lang.Throwable.printStackTrace(PrintWriter),void,
java.lang.Throwable.fillInStackTrace(),Throwable,a reference to this Throwable instance.
java.lang.Throwable.getStackTrace(),StackTraceElement[],an array of stack trace elements representing the stack trace pertaining to this throwable.
java.lang.Throwable.setStackTrace(StackTraceElement[]),void,
java.lang.Throwable.addSuppressed(Throwable),void,
java.lang.Throwable.getSuppressed(),Throwable[],an array containing all of the exceptions that were suppressed to deliver this exception.
java.lang.instrument.ClassDefinition.getDefinitionClass(),Class&lt;?&gt;,the Class object referred to.
java.lang.instrument.ClassDefinition.getDefinitionClassFile(),byte[],the class file bytes.
java.lang.invoke.CallSite.type(),MethodType,"the type of the current target, which is also the type of any future target"
java.lang.invoke.CallSite.getTarget(),abstractMethodHandle,"the current linkage state of the call site, its target method handle"
java.lang.invoke.CallSite.setTarget(MethodHandle),abstractvoid,
java.lang.invoke.CallSite.dynamicInvoker(),abstractMethodHandle,a method handle which always invokes this call site's current target
java.lang.invoke.ConstantCallSite.getTarget(),MethodHandle,"the immutable linkage state of this call site, a constant method handle"
java.lang.invoke.ConstantCallSite.setTarget(MethodHandle),void,
java.lang.invoke.ConstantCallSite.dynamicInvoker(),MethodHandle,"the immutable linkage state of this call site, a constant method handle"
"java.lang.invoke.LambdaMetafactory.metafactory(MethodHandles.Lookup,String,MethodType,MethodType,MethodHandle,MethodType)",CallSite,"a CallSite whose target can be used to perform capture, generating instances of the interface named by invokedType"
"java.lang.invoke.LambdaMetafactory.altMetafactory(MethodHandles.Lookup,String,MethodType,Object...)",CallSite,
java.lang.invoke.MethodHandle.type(),MethodType,the method handle type
java.lang.invoke.MethodHandle.invokeExact(Object...),Object,"the signature-polymorphic result, statically represented using Object"
java.lang.invoke.MethodHandle.invoke(Object...),Object,"the signature-polymorphic result, statically represented using Object"
java.lang.invoke.MethodHandle.invokeWithArguments(Object...),Object,
java.lang.invoke.MethodHandle.invokeWithArguments(List&lt;?&gt;),Object,the result returned by the target
java.lang.invoke.MethodHandle.asType(MethodType),MethodHandle,
"java.lang.invoke.MethodHandle.asSpreader(Class&lt;?&gt;,int)",MethodHandle,"a new method handle which spreads its final array argument, before calling the original method handle"
"java.lang.invoke.MethodHandle.asCollector(Class&lt;?&gt;,int)",MethodHandle,"a new method handle which collects some trailing argument into an array, before calling the original method handle"
java.lang.invoke.MethodHandle.asVarargsCollector(Class&lt;?&gt;),MethodHandle,"a new method handle which can collect any number of trailing arguments into an array, before calling the original method handle"
java.lang.invoke.MethodHandle.isVarargsCollector(),boolean,
java.lang.invoke.MethodHandle.asFixedArity(),MethodHandle,a new method handle which accepts only a fixed number of arguments
java.lang.invoke.MethodHandle.bindTo(Object),MethodHandle,"a new method handle which prepends the given value to the incoming argument list, before calling the original method handle"
java.lang.invoke.MethodHandle.toString(),String,a string representation of the method handle
"java.lang.invoke.MethodHandleProxies.asInterfaceInstance(Class&lt;T&gt;,MethodHandle)",&lt;T&gt;T,a correctly-typed wrapper for the given target
java.lang.invoke.MethodHandleProxies.isWrapperInstance(Object),boolean,true if the reference is not null and points to an object produced by asInterfaceInstance
java.lang.invoke.MethodHandleProxies.wrapperInstanceTarget(Object),MethodHandle,a method handle implementing the unique method
java.lang.invoke.MethodHandleProxies.wrapperInstanceType(Object),Class&lt;?&gt;,the single-method interface type for which the wrapper was created
java.lang.invoke.MethodHandles.lookup(),MethodHandles.Lookup,"a lookup object for the caller of this method, with private access"
java.lang.invoke.MethodHandles.publicLookup(),MethodHandles.LookupLookup(),a lookup object which is trusted minimally
"java.lang.invoke.MethodHandles.reflectAs(Class&lt;T&gt;,MethodHandle)",&lt;T extends Member&gt;T,"a reference to the method, constructor, or field object"
java.lang.invoke.MethodHandles.arrayElementGetter(Class&lt;?&gt;),MethodHandle,a method handle which can load values from the given array type
java.lang.invoke.MethodHandles.arrayElementSetter(Class&lt;?&gt;),MethodHandle,a method handle which can store values into the array type
"java.lang.invoke.MethodHandles.spreadInvoker(MethodType,int)",MethodHandle,
java.lang.invoke.MethodHandles.exactInvoker(MethodType),MethodHandle,a method handle suitable for invoking any method handle of the given type
java.lang.invoke.MethodHandles.invoker(MethodType),MethodHandle,a method handle suitable for invoking any method handle convertible to the given type
"java.lang.invoke.MethodHandles.explicitCastArguments(MethodHandle,MethodType)",MethodHandle,
"java.lang.invoke.MethodHandles.permuteArguments(MethodHandle,MethodType,int...)",MethodHandle,a method handle which delegates to the target after it drops unused arguments and moves and/or duplicates the other arguments
"java.lang.invoke.MethodHandles.constant(Class&lt;?&gt;,Object)",MethodHandle,"a method handle of the given return type and no arguments, which always returns the given value"
java.lang.invoke.MethodHandles.identity(Class&lt;?&gt;),MethodHandle,a unary method handle which accepts and returns the given type
"java.lang.invoke.MethodHandles.insertArguments(MethodHandle,int,Object...)",MethodHandle,"a method handle which inserts an additional argument, before calling the original method handle"
"java.lang.invoke.MethodHandles.dropArguments(MethodHandle,int,List&lt;Class&lt;?&gt;&gt;)",MethodHandle,"a method handle which drops arguments of the given types, before calling the original method handle"
"java.lang.invoke.MethodHandles.dropArguments(MethodHandle,int,Class&lt;?&gt;...)",MethodHandle,"a method handle which drops arguments of the given types, before calling the original method handle"
"java.lang.invoke.MethodHandles.filterArguments(MethodHandle,int,MethodHandle...)",MethodHandle,method handle which incorporates the specified argument filtering logic
"java.lang.invoke.MethodHandles.collectArguments(MethodHandle,int,MethodHandle)",MethodHandle,method handle which incorporates the specified argument subsequence filtering logic
"java.lang.invoke.MethodHandles.filterReturnValue(MethodHandle,MethodHandle)",MethodHandle,method handle which incorporates the specified return value filtering logic
"java.lang.invoke.MethodHandles.foldArguments(MethodHandle,MethodHandle)",MethodHandle,method handle which incorporates the specified argument folding logic
"java.lang.invoke.MethodHandles.guardWithTest(MethodHandle,MethodHandle,MethodHandle)",MethodHandle,method handle which incorporates the specified if/then/else logic
"java.lang.invoke.MethodHandles.catchException(MethodHandle,Class&lt;?,MethodHandle)",MethodHandle,method handle which incorporates the specified try/catch logic
"java.lang.invoke.MethodHandles.throwException(Class&lt;?&gt;,Class&lt;?)",MethodHandle,method handle which can throw the given exceptions
java.lang.invoke.MethodHandles.Lookup.lookupClass(),Class&lt;?&gt;,"the lookup class, on behalf of which this lookup object finds members"
java.lang.invoke.MethodHandles.Lookup.lookupModes(),int,"the lookup modes, which limit the kinds of access performed by this lookup object"
java.lang.invoke.MethodHandles.Lookup.in(Class&lt;?&gt;),MethodHandles.Lookup,
java.lang.invoke.MethodHandles.Lookup.toString(),String,
"java.lang.invoke.MethodHandles.Lookup.findStatic(Class&lt;?&gt;,String,MethodType)",MethodHandle,the desired method handle
"java.lang.invoke.MethodHandles.Lookup.findVirtual(Class&lt;?&gt;,String,MethodType)",MethodHandle,the desired method handle
"java.lang.invoke.MethodHandles.Lookup.findConstructor(Class&lt;?&gt;,MethodType)",MethodHandle,the desired method handle
"java.lang.invoke.MethodHandles.Lookup.findSpecial(Class&lt;?&gt;,String,MethodType,Class&lt;?&gt;)",MethodHandle,the desired method handle
"java.lang.invoke.MethodHandles.Lookup.findGetter(Class&lt;?&gt;,String,Class&lt;?&gt;)",MethodHandle,a method handle which can load values from the field
"java.lang.invoke.MethodHandles.Lookup.findSetter(Class&lt;?&gt;,String,Class&lt;?&gt;)",MethodHandle,a method handle which can store values into the field
"java.lang.invoke.MethodHandles.Lookup.findStaticGetter(Class&lt;?&gt;,String,Class&lt;?&gt;)",MethodHandle,a method handle which can load values from the field
"java.lang.invoke.MethodHandles.Lookup.findStaticSetter(Class&lt;?&gt;,String,Class&lt;?&gt;)",MethodHandle,a method handle which can store values into the field
"java.lang.invoke.MethodHandles.Lookup.bind(Object,String,MethodType)",MethodHandle,the desired method handle
java.lang.invoke.MethodHandles.Lookup.unreflect(Method),MethodHandle,a method handle which can invoke the reflected method
"java.lang.invoke.MethodHandles.Lookup.unreflectSpecial(Method,Class&lt;?&gt;)",MethodHandle,a method handle which can invoke the reflected method
java.lang.invoke.MethodHandles.Lookup.unreflectConstructor(Constructor&lt;?&gt;),MethodHandle,a method handle which can invoke the reflected constructor
java.lang.invoke.MethodHandles.Lookup.unreflectGetter(Field),MethodHandle,a method handle which can load values from the reflected field
java.lang.invoke.MethodHandles.Lookup.unreflectSetter(Field),MethodHandle,a method handle which can store values into the reflected field
java.lang.invoke.MethodHandles.Lookup.revealDirect(MethodHandle),MethodHandleInfo,a symbolic reference which can be used to reconstruct this method handle from this lookup object
"java.lang.invoke.MethodType.methodType(Class&lt;?&gt;,Class&lt;?&gt;[])",MethodType,a method type with the given components
"java.lang.invoke.MethodType.methodType(Class&lt;?&gt;,List&lt;Class&lt;?&gt;&gt;)",MethodType,a method type with the given components
"java.lang.invoke.MethodType.methodType(Class&lt;?&gt;,Class&lt;?&gt;,Class&lt;?&gt;...)",MethodType,a method type with the given components
java.lang.invoke.MethodType.methodType(Class&lt;?&gt;),MethodType,a method type with the given return value
"java.lang.invoke.MethodType.methodType(Class&lt;?&gt;,Class&lt;?&gt;)",MethodType,a method type with the given return value and parameter type
"java.lang.invoke.MethodType.methodType(Class&lt;?&gt;,MethodType)",MethodType,a method type with the given components
"java.lang.invoke.MethodType.genericMethodType(int,boolean)",MethodType,"a generally applicable method type, for all calls of the given fixed argument count and a collected array of further arguments"
java.lang.invoke.MethodType.genericMethodType(int),MethodType,"a generally applicable method type, for all calls of the given argument count"
"java.lang.invoke.MethodType.changeParameterType(int,Class&lt;?&gt;)",MethodType,"the same type, except with the selected parameter changed"
"java.lang.invoke.MethodType.insertParameterTypes(int,Class&lt;?&gt;...)",MethodType,"the same type, except with the selected parameter(s) inserted"
java.lang.invoke.MethodType.appendParameterTypes(Class&lt;?&gt;...),MethodType,"the same type, except with the selected parameter(s) appended"
"java.lang.invoke.MethodType.insertParameterTypes(int,List&lt;Class&lt;?&gt;&gt;)",MethodType,"the same type, except with the selected parameter(s) inserted"
java.lang.invoke.MethodType.appendParameterTypes(List&lt;Class&lt;?&gt;&gt;),MethodType,"the same type, except with the selected parameter(s) appended"
"java.lang.invoke.MethodType.dropParameterTypes(int,int)",MethodType,"the same type, except with the selected parameter(s) removed"
java.lang.invoke.MethodType.changeReturnType(Class&lt;?&gt;),MethodType,"the same type, except with the return type change"
java.lang.invoke.MethodType.hasPrimitives(),boolean,true if any of the types are primitives
java.lang.invoke.MethodType.hasWrappers(),boolean,true if any of the types are wrappers
java.lang.invoke.MethodType.erase(),MethodType,a version of the original type with all reference types replaced
java.lang.invoke.MethodType.generic(),MethodType,a version of the original type with all types replaced
java.lang.invoke.MethodType.wrap(),MethodType,a version of the original type with all primitive types replaced
java.lang.invoke.MethodType.unwrap(),MethodType,a version of the original type with all wrapper types replaced
java.lang.invoke.MethodType.parameterType(int),Class&lt;?&gt;,the selected parameter type
java.lang.invoke.MethodType.parameterCount(),int,the number of parameter types
java.lang.invoke.MethodType.returnType(),Class&lt;?&gt;,the return type
java.lang.invoke.MethodType.parameterList(),List&lt;Class&lt;?&gt;&gt;,the parameter types (as an immutable list)
java.lang.invoke.MethodType.parameterArray(),Class&lt;?&gt;[],the parameter types (as a fresh copy if necessary)
java.lang.invoke.MethodType.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.lang.invoke.MethodType.hashCode(),int,the hash code value for this method type
java.lang.invoke.MethodType.toString(),String,a string representation of the object.
"java.lang.invoke.MethodType.fromMethodDescriptorString(String,ClassLoader)",MethodType,a method type matching the bytecode-level type descriptor
java.lang.invoke.MethodType.toMethodDescriptorString(),String,the bytecode type descriptor representation
java.lang.invoke.MutableCallSite.getTarget(),MethodHandle,"the linkage state of this call site, a method handle which can change over time"
java.lang.invoke.MutableCallSite.setTarget(MethodHandle),void,
java.lang.invoke.MutableCallSite.dynamicInvoker(),MethodHandle,a method handle which always invokes this call site's current target
java.lang.invoke.MutableCallSite.syncAll(MutableCallSite[]),void,
java.lang.invoke.SerializedLambda.getCapturingClass(),String,the name of the class that captured this lambda
java.lang.invoke.SerializedLambda.getFunctionalInterfaceClass(),String,the name of the functional interface class to which this lambda has been converted
java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodName(),String,the name of the primary methods of the functional interface
java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodSignature(),String,the signature of the primary method of the functional interface
java.lang.invoke.SerializedLambda.getImplClass(),String,the name of the class containing the implementation method
java.lang.invoke.SerializedLambda.getImplMethodName(),String,the name of the implementation method
java.lang.invoke.SerializedLambda.getImplMethodSignature(),String,the signature of the implementation method
java.lang.invoke.SerializedLambda.getImplMethodKind(),int,the method handle kind of the implementation method
java.lang.invoke.SerializedLambda.getInstantiatedMethodType(),String,the signature of the primary functional interface method after type variable processing
java.lang.invoke.SerializedLambda.getCapturedArgCount(),int,the count of dynamic arguments to the lambda capture site
java.lang.invoke.SerializedLambda.getCapturedArg(int),Object,a dynamic argument to the lambda capture site
java.lang.invoke.SerializedLambda.toString(),String,a string representation of the object.
java.lang.invoke.SwitchPoint.hasBeenInvalidated(),boolean,true if this switch point has been invalidated
"java.lang.invoke.SwitchPoint.guardWithTest(MethodHandle,MethodHandle)",MethodHandle,a combined method handle which always calls either the target or fallback
java.lang.invoke.SwitchPoint.invalidateAll(SwitchPoint[]),void,
java.lang.invoke.VolatileCallSite.getTarget(),MethodHandle,"the linkage state of this call site, a method handle which can change over time"
java.lang.invoke.VolatileCallSite.setTarget(MethodHandle),void,
java.lang.invoke.VolatileCallSite.dynamicInvoker(),MethodHandle,a method handle which always invokes this call site's current target
java.lang.management.LockInfo.getClassName(),String,the fully qualified name of the class of the lock object.
java.lang.management.LockInfo.getIdentityHashCode(),int,the identity hash code of the lock object.
java.lang.management.LockInfo.from(CompositeData),LockInfo,a LockInfo object represented by cd if cd is not null; null otherwise.
java.lang.management.LockInfo.toString(),String,the string representation of a lock.
java.lang.management.ManagementFactory.getClassLoadingMXBean(),ClassLoadingMXBean,a ClassLoadingMXBean object for the Java virtual machine.
java.lang.management.ManagementFactory.getMemoryMXBean(),MemoryMXBean,a MemoryMXBean object for the Java virtual machine.
java.lang.management.ManagementFactory.getThreadMXBean(),ThreadMXBean,a ThreadMXBean object for the Java virtual machine.
java.lang.management.ManagementFactory.getRuntimeMXBean(),RuntimeMXBean,a RuntimeMXBean object for the Java virtual machine.
java.lang.management.ManagementFactory.getCompilationMXBean(),CompilationMXBean,a CompilationMXBean object for the Java virtual machine or null if the Java virtual machine has no compilation system.
java.lang.management.ManagementFactory.getOperatingSystemMXBean(),OperatingSystemMXBean,an OperatingSystemMXBean object for the Java virtual machine.
java.lang.management.ManagementFactory.getMemoryPoolMXBeans(),List&lt;MemoryPoolMXBean&gt;,a list of MemoryPoolMXBean objects.
java.lang.management.ManagementFactory.getMemoryManagerMXBeans(),List&lt;MemoryManagerMXBean&gt;,a list of MemoryManagerMXBean objects.
java.lang.management.ManagementFactory.getGarbageCollectorMXBeans(),List&lt;GarbageCollectorMXBean&gt;,a list of GarbageCollectorMXBean objects.
java.lang.management.ManagementFactory.getPlatformMBeanServer(),MBeanServer,the platform MBeanServer; the platform MXBeans are registered into the platform MBeanServer at the first time this method is called.
"java.lang.management.ManagementFactory.newPlatformMXBeanProxy(MBeanServerConnection,String,Class&lt;T&gt;)",&lt;T&gt;T,
java.lang.management.ManagementFactory.getPlatformMXBean(Class&lt;T&gt;),&lt;T extends PlatformManagedObject&gt;T,"the platform MXBean that implements mxbeanInterface, or null if not exist."
java.lang.management.ManagementFactory.getPlatformMXBeans(Class&lt;T&gt;),&lt;T extends PlatformManagedObject&gt;List&lt;T&gt;,the list of platform MXBeans that implement mxbeanInterface.
"java.lang.management.ManagementFactory.getPlatformMXBean(MBeanServerConnection,Class&lt;T&gt;)",&lt;T extends PlatformManagedObject&gt;T,"the platform MXBean proxy for forwarding the method calls of the mxbeanInterface through the given MBeanServerConnection, or null if not exist."
"java.lang.management.ManagementFactory.getPlatformMXBeans(MBeanServerConnection,Class&lt;T&gt;)",&lt;T extends PlatformManagedObject&gt;List&lt;T&gt;,the list of platform MXBean proxies for forwarding the method calls of the mxbeanInterface through the given MBeanServerConnection.
java.lang.management.ManagementFactory.getPlatformManagementInterfaces(),Set&lt;Class&lt;? extends PlatformManagedObject&gt;&gt;,"the set of Class objects, subinterface of PlatformManagedObject representing the management interfaces for monitoring and managing the Java platform."
java.lang.management.MemoryNotificationInfo.getPoolName(),String,the name of the memory pool that triggers this notification.
java.lang.management.MemoryNotificationInfo.getUsage(),MemoryUsage,the memory usage of the memory pool when this notification was constructed.
java.lang.management.MemoryNotificationInfo.getCount(),long,the number of times that the memory usage has crossed a threshold when the notification was constructed.
java.lang.management.MemoryNotificationInfo.from(CompositeData),MemoryNotificationInfo,a MemoryNotificationInfo object represented by cd if cd is not null; null otherwise.
java.lang.management.MemoryUsage.getInit(),long,the initial size of memory in bytes; -1 if undefined.
java.lang.management.MemoryUsage.getUsed(),long,the amount of used memory in bytes.
java.lang.management.MemoryUsage.getCommitted(),long,the amount of committed memory in bytes.
java.lang.management.MemoryUsage.getMax(),long,the maximum amount of memory in bytes; -1 if undefined.
java.lang.management.MemoryUsage.toString(),String,a string representation of the object.
java.lang.management.MemoryUsage.from(CompositeData),MemoryUsage,a MemoryUsage object represented by cd if cd is not null; null otherwise.
java.lang.management.MonitorInfo.getLockedStackDepth(),int,"the depth in the stack trace where the object monitor was locked, or a negative number if not available."
java.lang.management.MonitorInfo.getLockedStackFrame(),StackTraceElement,"StackTraceElement that locked the object monitor, or null if not available."
java.lang.management.MonitorInfo.from(CompositeData),MonitorInfo,a MonitorInfo object represented by cd if cd is not null; null otherwise.
java.lang.management.ThreadInfo.getThreadId(),long,the ID of the associated thread.
java.lang.management.ThreadInfo.getThreadName(),String,the name of the associated thread.
java.lang.management.ThreadInfo.getThreadState(),Thread.State,Thread.State of the associated thread.
java.lang.management.ThreadInfo.getBlockedTime(),long,the approximate accumulated elapsed time in milliseconds that a thread entered the BLOCKED state; -1 if thread contention monitoring is disabled.
java.lang.management.ThreadInfo.getBlockedCount(),long,the total number of times that the thread entered the BLOCKED state.
java.lang.management.ThreadInfo.getWaitedTime(),long,the approximate accumulated elapsed time in milliseconds that a thread has been in the WAITING or TIMED_WAITING state; -1 if thread contention monitoring is disabled.
java.lang.management.ThreadInfo.getWaitedCount(),long,the total number of times that the thread was in the WAITING or TIMED_WAITING state.
java.lang.management.ThreadInfo.getLockInfo(),LockInfo,
java.lang.management.ThreadInfo.getLockName(),String,the string representation of the object on which the thread is blocked if any; null otherwise.
java.lang.management.ThreadInfo.getLockOwnerId(),long,the thread ID of the owner thread of the object this thread is blocked on; -1 if this thread is not blocked or if the object is not owned by any thread.
java.lang.management.ThreadInfo.getLockOwnerName(),String,the name of the thread that owns the object this thread is blocked on; null if this thread is not blocked or if the object is not owned by any thread.
java.lang.management.ThreadInfo.getStackTrace(),StackTraceElement[],an array of StackTraceElement objects of the thread.
java.lang.management.ThreadInfo.isSuspended(),boolean,true if the thread is suspended; false otherwise.
java.lang.management.ThreadInfo.isInNative(),boolean,true if the thread is executing native code; false otherwise.
java.lang.management.ThreadInfo.toString(),String,a string representation of this thread info.
java.lang.management.ThreadInfo.from(CompositeData),ThreadInfo,a ThreadInfo object represented by cd if cd is not null; null otherwise.
java.lang.management.ThreadInfo.getLockedMonitors(),MonitorInfo[],an array of MonitorInfo objects representing the object monitors locked by the thread.
java.lang.management.ThreadInfo.getLockedSynchronizers(),LockInfo[],an array of LockInfo objects representing the ownable synchronizers locked by the thread.
java.lang.ref.PhantomReference.get(),T,null
java.lang.ref.Reference.get(),T,"The object to which this reference refers, or null if this reference object has been cleared"
java.lang.ref.Reference.clear(),void,
java.lang.ref.Reference.isEnqueued(),boolean,true if and only if this reference object has been enqueued
java.lang.ref.Reference.enqueue(),boolean,true if this reference object was successfully enqueued; false if it was already enqueued or if it was not registered with a queue when it was created
java.lang.ref.ReferenceQueue.poll(),Reference&lt;? extends T&gt;,"A reference object, if one was immediately available, otherwise null"
java.lang.ref.ReferenceQueue.remove(long),Reference&lt;? extends T&gt;,"A reference object, if one was available within the specified timeout period, otherwise null"
java.lang.ref.ReferenceQueue.remove(),Reference&lt;? extends T&gt;,"A reference object, blocking until one becomes available"
java.lang.ref.SoftReference.get(),T,"The object to which this reference refers, or null if this reference object has been cleared"
"java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject[],boolean)",void,
java.lang.reflect.AccessibleObject.setAccessible(boolean),void,
java.lang.reflect.AccessibleObject.isAccessible(),boolean,the value of the object's accessible flag
java.lang.reflect.AccessibleObject.getAnnotation(Class&lt;T&gt;),&lt;T extends Annotation&gt;T,"this element's annotation for the specified annotation type if present on this element, else null"
java.lang.reflect.AccessibleObject.isAnnotationPresent(Class&lt;?),boolean,"true if an annotation for the specified annotation type is present on this element, else false"
java.lang.reflect.AccessibleObject.getAnnotationsByType(Class&lt;T&gt;),&lt;T extends Annotation&gt;T[],"all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"
java.lang.reflect.AccessibleObject.getAnnotations(),Annotation[],annotations present on this element
java.lang.reflect.AccessibleObject.getDeclaredAnnotation(Class&lt;T&gt;),&lt;T extends Annotation&gt;T,"this element's annotation for the specified annotation type if directly present on this element, else null"
java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(Class&lt;T&gt;),&lt;T extends Annotation&gt;T[],"all this element's annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"
java.lang.reflect.AccessibleObject.getDeclaredAnnotations(),Annotation[],annotations directly present on this element
"java.lang.reflect.Array.newInstance(Class&lt;?&gt;,int)",Object,the new array
"java.lang.reflect.Array.newInstance(Class&lt;?&gt;,int...)",Object,the new array
java.lang.reflect.Array.getLength(Object),int,the length of the array
"java.lang.reflect.Array.get(Object,int)",Object,the (possibly wrapped) value of the indexed component in the specified array
"java.lang.reflect.Array.getBoolean(Object,int)",boolean,the value of the indexed component in the specified array
"java.lang.reflect.Array.getByte(Object,int)",byte,the value of the indexed component in the specified array
"java.lang.reflect.Array.getChar(Object,int)",char,the value of the indexed component in the specified array
"java.lang.reflect.Array.getShort(Object,int)",short,the value of the indexed component in the specified array
"java.lang.reflect.Array.getInt(Object,int)",int,the value of the indexed component in the specified array
"java.lang.reflect.Array.getLong(Object,int)",long,the value of the indexed component in the specified array
"java.lang.reflect.Array.getFloat(Object,int)",float,the value of the indexed component in the specified array
"java.lang.reflect.Array.getDouble(Object,int)",double,the value of the indexed component in the specified array
"java.lang.reflect.Array.set(Object,int,Object)",void,
"java.lang.reflect.Array.setBoolean(Object,int,boolean)",void,
"java.lang.reflect.Array.setByte(Object,int,byte)",void,
"java.lang.reflect.Array.setChar(Object,int,char)",void,
"java.lang.reflect.Array.setShort(Object,int,short)",void,
"java.lang.reflect.Array.setInt(Object,int,int)",void,
"java.lang.reflect.Array.setLong(Object,int,long)",void,
"java.lang.reflect.Array.setFloat(Object,int,float)",void,
"java.lang.reflect.Array.setDouble(Object,int,double)",void,
java.lang.reflect.Constructor.getDeclaringClass(),Class&lt;T&gt;,an object representing the declaring class of the underlying member
java.lang.reflect.Constructor.getName(),String,the simple name of the underlying member
java.lang.reflect.Constructor.getModifiers(),int,the Java language modifiers for the underlying member
java.lang.reflect.Constructor.getTypeParameters(),TypeVariable&lt;Constructor&lt;T&gt;&gt;[],an array of TypeVariable objects that represent the type variables declared by this generic declaration
java.lang.reflect.Constructor.getParameterTypes(),Class&lt;?&gt;[],the parameter types for the executable this object represents
java.lang.reflect.Constructor.getParameterCount(),int,The number of formal parameters for the executable this object represents
java.lang.reflect.Constructor.getGenericParameterTypes(),Type[],"an array of Types that represent the formal parameter types of the underlying executable, in declaration order"
java.lang.reflect.Constructor.getExceptionTypes(),Class&lt;?&gt;[],the exception types declared as being thrown by the executable this object represents
java.lang.reflect.Constructor.getGenericExceptionTypes(),Type[],an array of Types that represent the exception types thrown by the underlying executable
java.lang.reflect.Constructor.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.lang.reflect.Constructor.hashCode(),int,a hash code value for this object.
java.lang.reflect.Constructor.toString(),String,a string describing this Constructor
java.lang.reflect.Constructor.toGenericString(),String,"a string describing this Constructor, include type parameters"
java.lang.reflect.Constructor.newInstance(Object...),T,a new object created by calling the constructor this object represents
java.lang.reflect.Constructor.isVarArgs(),boolean,true if an only if this executable was declared to take a variable number of arguments.
java.lang.reflect.Constructor.isSynthetic(),boolean,true if and only if this executable is a synthetic construct as defined by The Java™ Language Specification.
java.lang.reflect.Constructor.getAnnotation(Class&lt;T&gt;),&lt;T extends Annotation&gt;T,"this element's annotation for the specified annotation type if present on this element, else null"
java.lang.reflect.Constructor.getDeclaredAnnotations(),Annotation[],annotations directly present on this element
java.lang.reflect.Constructor.getParameterAnnotations(),Annotation[][],"an array of arrays that represent the annotations on the formal and implicit parameters, in declaration order, of the executable represented by this object"
java.lang.reflect.Constructor.getAnnotatedReturnType(),AnnotatedType,an object representing the return type of the method or constructor represented by this Executable
java.lang.reflect.Constructor.getAnnotatedReceiverType(),AnnotatedType,an object representing the receiver type of the method or constructor represented by this Executable
java.lang.reflect.Executable.getDeclaringClass(),abstractClass&lt;?&gt;,an object representing the declaring class of the underlying member
java.lang.reflect.Executable.getName(),abstractString,the simple name of the underlying member
java.lang.reflect.Executable.getModifiers(),abstractint,the Java language modifiers for the underlying member
java.lang.reflect.Executable.getTypeParameters(),abstractTypeVariable&lt;?&gt;[],an array of TypeVariable objects that represent the type variables declared by this generic declaration
java.lang.reflect.Executable.getParameterTypes(),abstractClass&lt;?&gt;[],the parameter types for the executable this object represents
java.lang.reflect.Executable.getParameterCount(),int,The number of formal parameters for the executable this object represents
java.lang.reflect.Executable.getGenericParameterTypes(),Type[],"an array of Types that represent the formal parameter types of the underlying executable, in declaration order"
java.lang.reflect.Executable.getParameters(),Parameter[],an array of Parameter objects representing all the parameters to the executable this object represents.
java.lang.reflect.Executable.getExceptionTypes(),abstractClass&lt;?&gt;[],the exception types declared as being thrown by the executable this object represents
java.lang.reflect.Executable.getGenericExceptionTypes(),Type[],an array of Types that represent the exception types thrown by the underlying executable
java.lang.reflect.Executable.toGenericString(),abstractString,"a string describing this Executable, including any type parameters"
java.lang.reflect.Executable.isVarArgs(),boolean,true if an only if this executable was declared to take a variable number of arguments.
java.lang.reflect.Executable.isSynthetic(),boolean,true if and only if this executable is a synthetic construct as defined by The Java™ Language Specification.
java.lang.reflect.Executable.getParameterAnnotations(),abstractAnnotation[][],"an array of arrays that represent the annotations on the formal and implicit parameters, in declaration order, of the executable represented by this object"
java.lang.reflect.Executable.getAnnotation(Class&lt;T&gt;),&lt;T extends Annotation&gt;T,"this element's annotation for the specified annotation type if present on this element, else null"
java.lang.reflect.Executable.getAnnotationsByType(Class&lt;T&gt;),&lt;T extends Annotation&gt;T[],"all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"
java.lang.reflect.Executable.getDeclaredAnnotations(),Annotation[],annotations directly present on this element
java.lang.reflect.Executable.getAnnotatedReturnType(),abstractAnnotatedType,an object representing the return type of the method or constructor represented by this Executable
java.lang.reflect.Executable.getAnnotatedReceiverType(),AnnotatedType,an object representing the receiver type of the method or constructor represented by this Executable
java.lang.reflect.Executable.getAnnotatedParameterTypes(),AnnotatedType[],an array of objects representing the types of the formal parameters of the method or constructor represented by this Executable
java.lang.reflect.Executable.getAnnotatedExceptionTypes(),AnnotatedType[],an array of objects representing the declared exceptions of the method or constructor represented by this Executable
java.lang.reflect.Field.getDeclaringClass(),Class&lt;?&gt;,an object representing the declaring class of the underlying member
java.lang.reflect.Field.getName(),String,the simple name of the underlying member
java.lang.reflect.Field.getModifiers(),int,the Java language modifiers for the underlying member
java.lang.reflect.Field.isEnumConstant(),boolean,true if and only if this field represents an element of an enumerated type.
java.lang.reflect.Field.isSynthetic(),boolean,true if and only if this field is a synthetic field as defined by the Java Language Specification.
java.lang.reflect.Field.getType(),Class&lt;?&gt;,a Class object identifying the declared type of the field represented by this object
java.lang.reflect.Field.getGenericType(),Type,a Type object that represents the declared type for the field represented by this Field object
java.lang.reflect.Field.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.lang.reflect.Field.hashCode(),int,a hash code value for this object.
java.lang.reflect.Field.toString(),String,a string describing this Field
java.lang.reflect.Field.toGenericString(),String,"a string describing this Field, including its generic type"
java.lang.reflect.Field.get(Object),Object,the value of the represented field in object obj; primitive values are wrapped in an appropriate object before being returned
java.lang.reflect.Field.getBoolean(Object),boolean,the value of the boolean field
java.lang.reflect.Field.getByte(Object),byte,the value of the byte field
java.lang.reflect.Field.getChar(Object),char,the value of the field converted to type char
java.lang.reflect.Field.getShort(Object),short,the value of the field converted to type short
java.lang.reflect.Field.getInt(Object),int,the value of the field converted to type int
java.lang.reflect.Field.getLong(Object),long,the value of the field converted to type long
java.lang.reflect.Field.getFloat(Object),float,the value of the field converted to type float
java.lang.reflect.Field.getDouble(Object),double,the value of the field converted to type double
"java.lang.reflect.Field.set(Object,Object)",void,
"java.lang.reflect.Field.setBoolean(Object,boolean)",void,
"java.lang.reflect.Field.setByte(Object,byte)",void,
"java.lang.reflect.Field.setChar(Object,char)",void,
"java.lang.reflect.Field.setShort(Object,short)",void,
"java.lang.reflect.Field.setInt(Object,int)",void,
"java.lang.reflect.Field.setLong(Object,long)",void,
"java.lang.reflect.Field.setFloat(Object,float)",void,
"java.lang.reflect.Field.setDouble(Object,double)",void,
java.lang.reflect.Field.getAnnotation(Class&lt;T&gt;),&lt;T extends Annotation&gt;T,"this element's annotation for the specified annotation type if present on this element, else null"
java.lang.reflect.Field.getAnnotationsByType(Class&lt;T&gt;),&lt;T extends Annotation&gt;T[],"all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"
java.lang.reflect.Field.getDeclaredAnnotations(),Annotation[],annotations directly present on this element
java.lang.reflect.Field.getAnnotatedType(),AnnotatedType,an object representing the declared type of the field represented by this Field
java.lang.reflect.Method.getDeclaringClass(),Class&lt;?&gt;,an object representing the declaring class of the underlying member
java.lang.reflect.Method.getName(),String,the simple name of the underlying member
java.lang.reflect.Method.getModifiers(),int,the Java language modifiers for the underlying member
java.lang.reflect.Method.getTypeParameters(),TypeVariable&lt;Method&gt;[],an array of TypeVariable objects that represent the type variables declared by this generic declaration
java.lang.reflect.Method.getReturnType(),Class&lt;?&gt;,the return type for the method this object represents
java.lang.reflect.Method.getGenericReturnType(),Type,a Type object that represents the formal return type of the underlying method
java.lang.reflect.Method.getParameterTypes(),Class&lt;?&gt;[],the parameter types for the executable this object represents
java.lang.reflect.Method.getParameterCount(),int,The number of formal parameters for the executable this object represents
java.lang.reflect.Method.getGenericParameterTypes(),Type[],"an array of Types that represent the formal parameter types of the underlying executable, in declaration order"
java.lang.reflect.Method.getExceptionTypes(),Class&lt;?&gt;[],the exception types declared as being thrown by the executable this object represents
java.lang.reflect.Method.getGenericExceptionTypes(),Type[],an array of Types that represent the exception types thrown by the underlying executable
java.lang.reflect.Method.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.lang.reflect.Method.hashCode(),int,a hash code value for this object.
java.lang.reflect.Method.toString(),String,a string describing this Method
java.lang.reflect.Method.toGenericString(),String,"a string describing this Method, include type parameters"
"java.lang.reflect.Method.invoke(Object,Object...)",Object,the result of dispatching the method represented by this object on obj with parameters args
java.lang.reflect.Method.isBridge(),boolean,true if and only if this method is a bridge method as defined by the Java Language Specification.
java.lang.reflect.Method.isVarArgs(),boolean,true if an only if this executable was declared to take a variable number of arguments.
java.lang.reflect.Method.isSynthetic(),boolean,true if and only if this executable is a synthetic construct as defined by The Java™ Language Specification.
java.lang.reflect.Method.isDefault(),boolean,true if and only if this method is a default method as defined by the Java Language Specification.
java.lang.reflect.Method.getDefaultValue(),Object,the default value for the annotation member represented by this Method instance.
java.lang.reflect.Method.getAnnotation(Class&lt;T&gt;),&lt;T extends Annotation&gt;T,"this element's annotation for the specified annotation type if present on this element, else null"
java.lang.reflect.Method.getDeclaredAnnotations(),Annotation[],annotations directly present on this element
java.lang.reflect.Method.getParameterAnnotations(),Annotation[][],"an array of arrays that represent the annotations on the formal and implicit parameters, in declaration order, of the executable represented by this object"
java.lang.reflect.Method.getAnnotatedReturnType(),AnnotatedType,an object representing the return type of the method or constructor represented by this Executable
java.lang.reflect.Modifier.isPublic(int),boolean,true if mod includes the public modifier; false otherwise.
java.lang.reflect.Modifier.isPrivate(int),boolean,true if mod includes the private modifier; false otherwise.
java.lang.reflect.Modifier.isProtected(int),boolean,true if mod includes the protected modifier; false otherwise.
java.lang.reflect.Modifier.isStatic(int),boolean,true if mod includes the static modifier; false otherwise.
java.lang.reflect.Modifier.isFinal(int),boolean,true if mod includes the final modifier; false otherwise.
java.lang.reflect.Modifier.isSynchronized(int),boolean,true if mod includes the synchronized modifier; false otherwise.
java.lang.reflect.Modifier.isVolatile(int),boolean,true if mod includes the volatile modifier; false otherwise.
java.lang.reflect.Modifier.isTransient(int),boolean,true if mod includes the transient modifier; false otherwise.
java.lang.reflect.Modifier.isNative(int),boolean,true if mod includes the native modifier; false otherwise.
java.lang.reflect.Modifier.isInterface(int),boolean,true if mod includes the interface modifier; false otherwise.
java.lang.reflect.Modifier.isAbstract(int),boolean,true if mod includes the abstract modifier; false otherwise.
java.lang.reflect.Modifier.isStrict(int),boolean,true if mod includes the strictfp modifier; false otherwise.
java.lang.reflect.Modifier.toString(int),String,a string representation of the set of modifiers represented by mod
java.lang.reflect.Modifier.classModifiers(),int,an int value OR-ing together the source language modifiers that can be applied to a class.
java.lang.reflect.Modifier.interfaceModifiers(),int,an int value OR-ing together the source language modifiers that can be applied to an interface.
java.lang.reflect.Modifier.constructorModifiers(),int,an int value OR-ing together the source language modifiers that can be applied to a constructor.
java.lang.reflect.Modifier.methodModifiers(),int,an int value OR-ing together the source language modifiers that can be applied to a method.
java.lang.reflect.Modifier.fieldModifiers(),int,an int value OR-ing together the source language modifiers that can be applied to a field.
java.lang.reflect.Modifier.parameterModifiers(),int,an int value OR-ing together the source language modifiers that can be applied to a parameter.
java.lang.reflect.Parameter.equals(Object),boolean,Whether or not this is equal to the argument.
java.lang.reflect.Parameter.hashCode(),int,A hash code based on the executable's hash code.
java.lang.reflect.Parameter.isNamePresent(),boolean,true if and only if the parameter has a name according to the class file.
java.lang.reflect.Parameter.toString(),String,A string representation of the parameter and associated information.
java.lang.reflect.Parameter.getDeclaringExecutable(),Executable,The Executable declaring this parameter.
java.lang.reflect.Parameter.getModifiers(),int,The modifier flags for this parameter.
java.lang.reflect.Parameter.getName(),String,"The name of the parameter, either provided by the class file or synthesized if the class file does not provide a name."
java.lang.reflect.Parameter.getParameterizedType(),Type,a Type object identifying the parameterized type of the parameter represented by this object
java.lang.reflect.Parameter.getType(),Class&lt;?&gt;,a Class object identifying the declared type of the parameter represented by this object
java.lang.reflect.Parameter.getAnnotatedType(),AnnotatedType,an AnnotatedType object representing the use of a type to specify the type of the formal parameter represented by this Parameter
java.lang.reflect.Parameter.isImplicit(),boolean,true if and only if this parameter is implicitly declared as defined by The Java™ Language Specification.
java.lang.reflect.Parameter.isSynthetic(),boolean,true if and only if this parameter is a synthetic construct as defined by The Java™ Language Specification.
java.lang.reflect.Parameter.isVarArgs(),boolean,true if an only if this parameter represents a variable argument list.
java.lang.reflect.Parameter.getAnnotation(Class&lt;T&gt;),&lt;T extends Annotation&gt;T,"this element's annotation for the specified annotation type if present on this element, else null"
java.lang.reflect.Parameter.getAnnotationsByType(Class&lt;T&gt;),&lt;T extends Annotation&gt;T[],"all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"
java.lang.reflect.Parameter.getDeclaredAnnotations(),Annotation[],annotations directly present on this element
java.lang.reflect.Parameter.getDeclaredAnnotation(Class&lt;T&gt;),&lt;T extends Annotation&gt;T,"this element's annotation for the specified annotation type if directly present on this element, else null"
java.lang.reflect.Parameter.getDeclaredAnnotationsByType(Class&lt;T&gt;),&lt;T extends Annotation&gt;T[],"all this element's annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"
java.lang.reflect.Parameter.getAnnotations(),Annotation[],annotations present on this element
"java.lang.reflect.Proxy.getProxyClass(ClassLoader,Class&lt;?&gt;...)",Class&lt;?&gt;,
"java.lang.reflect.Proxy.newProxyInstance(ClassLoader,Class&lt;?&gt;[],InvocationHandler)",Object,a proxy instance with the specified invocation handler of a proxy class that is defined by the specified class loader and that implements the specified interfaces
java.lang.reflect.Proxy.isProxyClass(Class&lt;?&gt;),boolean,true if the class is a proxy class and false otherwise
java.lang.reflect.Proxy.getInvocationHandler(Object),InvocationHandler,the invocation handler for the proxy instance
"java.math.BigDecimal.valueOf(long,int)",BigDecimal,a BigDecimal whose value is (unscaledVal × 10-scale).
java.math.BigDecimal.valueOf(long),BigDecimal,a BigDecimal whose value is val.
java.math.BigDecimal.valueOf(double),BigDecimal,a BigDecimal whose value is equal to or approximately equal to the value of val.
java.math.BigDecimal.add(BigDecimal),BigDecimal,this + augend
"java.math.BigDecimal.add(BigDecimal,MathContext)",BigDecimal,"this + augend, rounded as necessary."
java.math.BigDecimal.subtract(BigDecimal),BigDecimal,this - subtrahend
"java.math.BigDecimal.subtract(BigDecimal,MathContext)",BigDecimal,"this - subtrahend, rounded as necessary."
java.math.BigDecimal.multiply(BigDecimal),BigDecimal,this * multiplicand
"java.math.BigDecimal.multiply(BigDecimal,MathContext)",BigDecimal,"this * multiplicand, rounded as necessary."
"java.math.BigDecimal.divide(BigDecimal,int,int)",BigDecimal,this / divisor
"java.math.BigDecimal.divide(BigDecimal,int,RoundingMode)",BigDecimal,this / divisor
"java.math.BigDecimal.divide(BigDecimal,int)",BigDecimal,this / divisor
"java.math.BigDecimal.divide(BigDecimal,RoundingMode)",BigDecimal,this / divisor
java.math.BigDecimal.divide(BigDecimal),BigDecimal,this / divisor
"java.math.BigDecimal.divide(BigDecimal,MathContext)",BigDecimal,"this / divisor, rounded as necessary."
java.math.BigDecimal.divideToIntegralValue(BigDecimal),BigDecimal,The integer part of this / divisor.
"java.math.BigDecimal.divideToIntegralValue(BigDecimal,MathContext)",BigDecimal,The integer part of this / divisor.
java.math.BigDecimal.remainder(BigDecimal),BigDecimal,this % divisor.
"java.math.BigDecimal.remainder(BigDecimal,MathContext)",BigDecimal,"this % divisor, rounded as necessary."
java.math.BigDecimal.divideAndRemainder(BigDecimal),BigDecimal[],a two element BigDecimal array: the quotient (the result of divideToIntegralValue) is the initial element and the remainder is the final element.
"java.math.BigDecimal.divideAndRemainder(BigDecimal,MathContext)",BigDecimal[],a two element BigDecimal array: the quotient (the result of divideToIntegralValue) is the initial element and the remainder is the final element.
java.math.BigDecimal.pow(int),BigDecimal,thisn
"java.math.BigDecimal.pow(int,MathContext)",BigDecimal,
java.math.BigDecimal.abs(),BigDecimal,abs(this)
java.math.BigDecimal.abs(MathContext),BigDecimal,"abs(this), rounded as necessary."
java.math.BigDecimal.negate(),BigDecimal,-this.
java.math.BigDecimal.negate(MathContext),BigDecimal,"-this, rounded as necessary."
java.math.BigDecimal.plus(),BigDecimal,this.
java.math.BigDecimal.plus(MathContext),BigDecimal,"this, rounded as necessary. A zero result will have a scale of 0."
java.math.BigDecimal.signum(),int,"-1, 0, or 1 as the value of this BigDecimal is negative, zero, or positive."
java.math.BigDecimal.scale(),int,the scale of this BigDecimal.
java.math.BigDecimal.precision(),int,the precision of this BigDecimal.
java.math.BigDecimal.unscaledValue(),BigInteger,the unscaled value of this BigDecimal.
java.math.BigDecimal.round(MathContext),BigDecimal,a BigDecimal rounded according to the MathContext settings.
"java.math.BigDecimal.setScale(int,RoundingMode)",BigDecimal,"a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value."
"java.math.BigDecimal.setScale(int,int)",BigDecimal,"a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value."
java.math.BigDecimal.setScale(int),BigDecimal,"a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value."
java.math.BigDecimal.movePointLeft(int),BigDecimal,a BigDecimal which is equivalent to this one with the decimal point moved n places to the left.
java.math.BigDecimal.movePointRight(int),BigDecimal,a BigDecimal which is equivalent to this one with the decimal point moved n places to the right.
java.math.BigDecimal.scaleByPowerOfTen(int),BigDecimal,a BigDecimal whose numerical value is equal to (this * 10n)
java.math.BigDecimal.stripTrailingZeros(),BigDecimal,a numerically equal BigDecimal with any trailing zeros removed.
java.math.BigDecimal.compareTo(BigDecimal),int,"-1, 0, or 1 as this BigDecimal is numerically less than, equal to, or greater than val."
java.math.BigDecimal.equals(Object),boolean,true if and only if the specified Object is a BigDecimal whose value and scale are equal to this BigDecimal's.
java.math.BigDecimal.min(BigDecimal),BigDecimal,"the BigDecimal whose value is the lesser of this BigDecimal and val. If they are equal, as defined by the compareTo method, this is returned."
java.math.BigDecimal.max(BigDecimal),BigDecimal,"the BigDecimal whose value is the greater of this BigDecimal and val. If they are equal, as defined by the compareTo method, this is returned."
java.math.BigDecimal.hashCode(),int,hash code for this BigDecimal.
java.math.BigDecimal.toString(),String,
java.math.BigDecimal.toEngineeringString(),String,"string representation of this BigDecimal, using engineering notation if an exponent is needed."
java.math.BigDecimal.toPlainString(),String,a string representation of this BigDecimal without an exponent field.
java.math.BigDecimal.toBigInteger(),BigInteger,this BigDecimal converted to a BigInteger.
java.math.BigDecimal.toBigIntegerExact(),BigInteger,this BigDecimal converted to a BigInteger.
java.math.BigDecimal.longValue(),long,this BigDecimal converted to a long.
java.math.BigDecimal.longValueExact(),long,this BigDecimal converted to a long.
java.math.BigDecimal.intValue(),int,this BigDecimal converted to an int.
java.math.BigDecimal.intValueExact(),int,this BigDecimal converted to an int.
java.math.BigDecimal.shortValueExact(),short,this BigDecimal converted to a short.
java.math.BigDecimal.byteValueExact(),byte,this BigDecimal converted to a byte.
java.math.BigDecimal.floatValue(),float,this BigDecimal converted to a float.
java.math.BigDecimal.doubleValue(),double,this BigDecimal converted to a double.
java.math.BigDecimal.ulp(),BigDecimal,the size of an ulp of this
"java.math.BigInteger.probablePrime(int,Random)",BigInteger,a BigInteger of bitLength bits that is probably prime
java.math.BigInteger.nextProbablePrime(),BigInteger,the first integer greater than this BigInteger that is probably prime.
java.math.BigInteger.valueOf(long),BigInteger,a BigInteger with the specified value.
java.math.BigInteger.add(BigInteger),BigInteger,this + val
java.math.BigInteger.subtract(BigInteger),BigInteger,this - val
java.math.BigInteger.multiply(BigInteger),BigInteger,this * val
java.math.BigInteger.divide(BigInteger),BigInteger,this / val
java.math.BigInteger.divideAndRemainder(BigInteger),BigInteger[],"an array of two BigIntegers: the quotient (this / val) is the initial element, and the remainder (this % val) is the final element."
java.math.BigInteger.remainder(BigInteger),BigInteger,this % val
java.math.BigInteger.pow(int),BigInteger,thisexponent
java.math.BigInteger.gcd(BigInteger),BigInteger,"GCD(abs(this), abs(val))"
java.math.BigInteger.abs(),BigInteger,abs(this)
java.math.BigInteger.negate(),BigInteger,-this
java.math.BigInteger.signum(),int,"-1, 0 or 1 as the value of this BigInteger is negative, zero or positive."
java.math.BigInteger.mod(BigInteger),BigInteger,this mod m
"java.math.BigInteger.modPow(BigInteger,BigInteger)",BigInteger,thisexponent mod m
java.math.BigInteger.modInverse(BigInteger),BigInteger,this-1 mod m.
java.math.BigInteger.shiftLeft(int),BigInteger,this &lt;&lt; n
java.math.BigInteger.shiftRight(int),BigInteger,this &gt;&gt; n
java.math.BigInteger.and(BigInteger),BigInteger,this &amp; val
java.math.BigInteger.or(BigInteger),BigInteger,this | val
java.math.BigInteger.xor(BigInteger),BigInteger,this ^ val
java.math.BigInteger.not(),BigInteger,~this
java.math.BigInteger.andNot(BigInteger),BigInteger,this &amp; ~val
java.math.BigInteger.testBit(int),boolean,true if and only if the designated bit is set.
java.math.BigInteger.setBit(int),BigInteger,this | (1&lt;&lt;n)
java.math.BigInteger.clearBit(int),BigInteger,this &amp; ~(1&lt;&lt;n)
java.math.BigInteger.flipBit(int),BigInteger,this ^ (1&lt;&lt;n)
java.math.BigInteger.getLowestSetBit(),int,index of the rightmost one bit in this BigInteger.
java.math.BigInteger.bitLength(),int,"number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit."
java.math.BigInteger.bitCount(),int,number of bits in the two's complement representation of this BigInteger that differ from its sign bit.
java.math.BigInteger.isProbablePrime(int),boolean,"true if this BigInteger is probably prime, false if it's definitely composite."
java.math.BigInteger.compareTo(BigInteger),int,"-1, 0 or 1 as this BigInteger is numerically less than, equal to, or greater than val."
java.math.BigInteger.equals(Object),boolean,true if and only if the specified Object is a BigInteger whose value is numerically equal to this BigInteger.
java.math.BigInteger.min(BigInteger),BigInteger,"the BigInteger whose value is the lesser of this BigInteger and val. If they are equal, either may be returned."
java.math.BigInteger.max(BigInteger),BigInteger,"the BigInteger whose value is the greater of this and val. If they are equal, either may be returned."
java.math.BigInteger.hashCode(),int,hash code for this BigInteger.
java.math.BigInteger.toString(int),String,String representation of this BigInteger in the given radix.
java.math.BigInteger.toString(),String,decimal String representation of this BigInteger.
java.math.BigInteger.toByteArray(),byte[],a byte array containing the two's-complement representation of this BigInteger.
java.math.BigInteger.intValue(),int,this BigInteger converted to an int.
java.math.BigInteger.longValue(),long,this BigInteger converted to a long.
java.math.BigInteger.floatValue(),float,this BigInteger converted to a float.
java.math.BigInteger.doubleValue(),double,this BigInteger converted to a double.
java.math.BigInteger.longValueExact(),long,this BigInteger converted to a long.
java.math.BigInteger.intValueExact(),int,this BigInteger converted to an int.
java.math.BigInteger.shortValueExact(),short,this BigInteger converted to a short.
java.math.BigInteger.byteValueExact(),byte,this BigInteger converted to a byte.
java.math.MathContext.getPrecision(),int,an int which is the value of the precision setting
java.math.MathContext.getRoundingMode(),RoundingMode,a RoundingMode object which is the value of the roundingMode setting
java.math.MathContext.equals(Object),boolean,true if and only if the specified Object is a MathContext object which has exactly the same settings as this object
java.math.MathContext.hashCode(),int,hash code for this MathContext
java.math.MathContext.toString(),String,
java.net.Authenticator.setDefault(Authenticator),void,
"java.net.Authenticator.requestPasswordAuthentication(InetAddress,int,String,String,String)",PasswordAuthentication,"The username/password, or null if one can't be gotten."
"java.net.Authenticator.requestPasswordAuthentication(String,InetAddress,int,String,String,String)",PasswordAuthentication,"The username/password, or null if one can't be gotten."
"java.net.Authenticator.requestPasswordAuthentication(String,InetAddress,int,String,String,String,URL,Authenticator.RequestorType)",PasswordAuthentication,"The username/password, or null if one can't be gotten."
java.net.Authenticator.getRequestingHost(),String,"the hostname of the connection requiring authentication, or null if it's not available."
java.net.Authenticator.getRequestingSite(),InetAddress,"the InetAddress of the site requesting authorization, or null if it's not available."
java.net.Authenticator.getRequestingPort(),int,an int indicating the port for the requested connection.
java.net.Authenticator.getRequestingProtocol(),String,"the protocol, optionally followed by ""/version"", where version is a version number."
java.net.Authenticator.getRequestingPrompt(),String,the prompt string given by the requestor (realm for http requests)
java.net.Authenticator.getRequestingScheme(),String,the scheme of the requestor
java.net.Authenticator.getPasswordAuthentication(),PasswordAuthentication,"The PasswordAuthentication collected from the user, or null if none is provided."
java.net.Authenticator.getRequestingURL(),URL,the requesting URL
java.net.Authenticator.getRequestorType(),Authenticator.RequestorType,the authentication type of the requestor
java.net.CacheRequest.getBody(),abstractOutputStream,an OutputStream to which the response body can be written
java.net.CacheRequest.abort(),abstractvoid,
java.net.CacheResponse.getHeaders(),"abstractMap&lt;String,List&lt;String&gt;&gt;",An immutable Map from response header field names to lists of field values. The status line has null as its field name.
java.net.CacheResponse.getBody(),abstractInputStream,an InputStream from which the response body can be accessed
java.net.ContentHandler.getContent(URLConnection),abstractObject,the object read by the ContentHandler.
"java.net.ContentHandler.getContent(URLConnection,Class[])",Object,the object read by the ContentHandler that is the first match of the suggested types. null if none of the requested are supported.
java.net.CookieHandler.getDefault(),CookieHandler,the system-wide cookie handler; A null return means there is no system-wide cookie handler currently set.
java.net.CookieHandler.setDefault(CookieHandler),void,
"java.net.CookieHandler.get(URI,Map&lt;String,List&lt;String&gt;&gt;)","abstractMap&lt;String,List&lt;String&gt;&gt;","an immutable map from state management headers, with field names ""Cookie"" or ""Cookie2"" to a list of cookies containing state information"
"java.net.CookieHandler.put(URI,Map&lt;String,List&lt;String&gt;&gt;)",abstractvoid,
java.net.CookieManager.setCookiePolicy(CookiePolicy),void,
java.net.CookieManager.getCookieStore(),CookieStore,the cookie store currently used by cookie manager.
"java.net.CookieManager.get(URI,Map&lt;String,List&lt;String&gt;&gt;)","Map&lt;String,List&lt;String&gt;&gt;","an immutable map from state management headers, with field names ""Cookie"" or ""Cookie2"" to a list of cookies containing state information"
"java.net.CookieManager.put(URI,Map&lt;String,List&lt;String&gt;&gt;)",void,
java.net.DatagramPacket.getAddress(),InetAddress,the IP address of the machine to which this datagram is being sent or from which the datagram was received.
java.net.DatagramPacket.getPort(),int,the port number on the remote host to which this datagram is being sent or from which the datagram was received.
java.net.DatagramPacket.getData(),byte[],the buffer used to receive or send data
java.net.DatagramPacket.getOffset(),int,the offset of the data to be sent or the offset of the data received.
java.net.DatagramPacket.getLength(),int,the length of the data to be sent or the length of the data received.
"java.net.DatagramPacket.setData(byte[],int,int)",void,
java.net.DatagramPacket.setAddress(InetAddress),void,
java.net.DatagramPacket.setPort(int),void,
java.net.DatagramPacket.setSocketAddress(SocketAddress),void,
java.net.DatagramPacket.getSocketAddress(),SocketAddress,the SocketAddress
java.net.DatagramPacket.setData(byte[]),void,
java.net.DatagramPacket.setLength(int),void,
java.net.DatagramSocket.bind(SocketAddress),void,
"java.net.DatagramSocket.connect(InetAddress,int)",void,
java.net.DatagramSocket.connect(SocketAddress),void,
java.net.DatagramSocket.disconnect(),void,
java.net.DatagramSocket.isBound(),boolean,true if the socket successfully bound to an address
java.net.DatagramSocket.isConnected(),boolean,true if the socket successfully connected to a server
java.net.DatagramSocket.getInetAddress(),InetAddress,the address to which this socket is connected.
java.net.DatagramSocket.getPort(),int,the port number to which this socket is connected.
java.net.DatagramSocket.getRemoteSocketAddress(),SocketAddress,"a SocketAddress representing the remote endpoint of this socket, or null if it is not connected yet."
java.net.DatagramSocket.getLocalSocketAddress(),SocketAddress,"a SocketAddress representing the local endpoint of this socket, or null if it is closed or not bound yet."
java.net.DatagramSocket.send(DatagramPacket),void,
java.net.DatagramSocket.receive(DatagramPacket),void,
java.net.DatagramSocket.getLocalAddress(),InetAddress,"the local address to which the socket is bound, null if the socket is closed, or an InetAddress representing wildcard address if either the socket is not bound, or the security manager checkConnect method does not allow the operation"
java.net.DatagramSocket.getLocalPort(),int,"the port number on the local host to which this socket is bound, -1 if the socket is closed, or 0 if it is not bound yet."
java.net.DatagramSocket.setSoTimeout(int),void,
java.net.DatagramSocket.getSoTimeout(),int,the setting for SO_TIMEOUT
java.net.DatagramSocket.setSendBufferSize(int),void,
java.net.DatagramSocket.getSendBufferSize(),int,the value of the SO_SNDBUF option for this DatagramSocket
java.net.DatagramSocket.setReceiveBufferSize(int),void,
java.net.DatagramSocket.getReceiveBufferSize(),int,the value of the SO_RCVBUF option for this DatagramSocket
java.net.DatagramSocket.setReuseAddress(boolean),void,
java.net.DatagramSocket.getReuseAddress(),boolean,a boolean indicating whether or not SO_REUSEADDR is enabled.
java.net.DatagramSocket.setBroadcast(boolean),void,
java.net.DatagramSocket.getBroadcast(),boolean,a boolean indicating whether or not SO_BROADCAST is enabled.
java.net.DatagramSocket.setTrafficClass(int),void,
java.net.DatagramSocket.getTrafficClass(),int,the traffic class or type-of-service already set
java.net.DatagramSocket.close(),void,
java.net.DatagramSocket.isClosed(),boolean,true if the socket has been closed
java.net.DatagramSocket.getChannel(),DatagramChannel,"the datagram channel associated with this datagram socket, or null if this socket was not created for a channel"
java.net.DatagramSocket.setDatagramSocketImplFactory(DatagramSocketImplFactory),void,
java.net.DatagramSocketImpl.create(),abstractvoid,
"java.net.DatagramSocketImpl.bind(int,InetAddress)",abstractvoid,
java.net.DatagramSocketImpl.send(DatagramPacket),abstractvoid,
"java.net.DatagramSocketImpl.connect(InetAddress,int)",void,
java.net.DatagramSocketImpl.disconnect(),void,
java.net.DatagramSocketImpl.peek(InetAddress),abstractint,the port number which the packet came from.
java.net.DatagramSocketImpl.peekData(DatagramPacket),abstractint,the port number which the packet came from.
java.net.DatagramSocketImpl.receive(DatagramPacket),abstractvoid,
java.net.DatagramSocketImpl.setTTL(byte),abstractvoid,
java.net.DatagramSocketImpl.getTTL(),abstractbyte,a byte representing the TTL value
java.net.DatagramSocketImpl.setTimeToLive(int),abstractvoid,
java.net.DatagramSocketImpl.getTimeToLive(),abstractint,an int representing the time-to-live value
java.net.DatagramSocketImpl.join(InetAddress),abstractvoid,
java.net.DatagramSocketImpl.leave(InetAddress),abstractvoid,
"java.net.DatagramSocketImpl.joinGroup(SocketAddress,NetworkInterface)",abstractvoid,
"java.net.DatagramSocketImpl.leaveGroup(SocketAddress,NetworkInterface)",abstractvoid,
java.net.DatagramSocketImpl.close(),abstractvoid,
java.net.DatagramSocketImpl.getLocalPort(),int,an int representing the local port value
java.net.DatagramSocketImpl.getFileDescriptor(),FileDescriptor,a FileDescriptor object representing the datagram socket file descriptor
java.net.HttpCookie.parse(String),List&lt;HttpCookie&gt;,a List of cookie parsed from header line string
java.net.HttpCookie.hasExpired(),boolean,"true to indicate this HTTP cookie has expired; otherwise, false"
java.net.HttpCookie.setComment(String),void,
java.net.HttpCookie.getComment(),String,"a String containing the comment, or null if none"
java.net.HttpCookie.setCommentURL(String),void,
java.net.HttpCookie.getCommentURL(),String,"a String containing the comment URL, or null if none"
java.net.HttpCookie.setDiscard(boolean),void,
java.net.HttpCookie.getDiscard(),boolean,a boolean to represent this cookie's discard attribute
java.net.HttpCookie.setPortlist(String),void,
java.net.HttpCookie.getPortlist(),String,a String contains the port list or null if none
java.net.HttpCookie.setDomain(String),void,
java.net.HttpCookie.getDomain(),String,a String containing the domain name
java.net.HttpCookie.setMaxAge(long),void,
java.net.HttpCookie.getMaxAge(),long,an integer specifying the maximum age of the cookie in seconds
java.net.HttpCookie.setPath(String),void,
java.net.HttpCookie.getPath(),String,"a String specifying a path that contains a servlet name, for example, /catalog"
java.net.HttpCookie.setSecure(boolean),void,
java.net.HttpCookie.getSecure(),boolean,"false if the cookie can be sent over any standard protocol; otherwise, true"
java.net.HttpCookie.getName(),String,a String specifying the cookie's name
java.net.HttpCookie.setValue(String),void,
java.net.HttpCookie.getValue(),String,a String containing the cookie's present value
java.net.HttpCookie.getVersion(),int,0 if the cookie complies with the original Netscape specification; 1 if the cookie complies with RFC 2965/2109
java.net.HttpCookie.setVersion(int),void,
java.net.HttpCookie.isHttpOnly(),boolean,true if this cookie should be considered HTTPOnly
java.net.HttpCookie.setHttpOnly(boolean),void,
"java.net.HttpCookie.domainMatches(String,String)",boolean,
java.net.HttpCookie.toString(),String,a string form of the cookie. The string has the defined format
java.net.HttpCookie.equals(Object),boolean,"true if two HTTP cookies equal to each other; otherwise, false"
java.net.HttpCookie.hashCode(),int,this HTTP cookie's hash code
java.net.HttpCookie.clone(),Object,a clone of this HTTP cookie
java.net.HttpURLConnection.getHeaderFieldKey(int),String,"the key for the nth header field, or null if the key does not exist."
java.net.HttpURLConnection.setFixedLengthStreamingMode(int),void,
java.net.HttpURLConnection.setFixedLengthStreamingMode(long),void,
java.net.HttpURLConnection.setChunkedStreamingMode(int),void,
java.net.HttpURLConnection.getHeaderField(int),String,"the value of the nth header field, or null if the value does not exist."
java.net.HttpURLConnection.setFollowRedirects(boolean),void,
java.net.HttpURLConnection.getFollowRedirects(),boolean,"true if HTTP redirects should be automatically followed, false if not."
java.net.HttpURLConnection.setInstanceFollowRedirects(boolean),void,
java.net.HttpURLConnection.getInstanceFollowRedirects(),boolean,the value of this HttpURLConnection's instanceFollowRedirects field.
java.net.HttpURLConnection.setRequestMethod(String),void,
java.net.HttpURLConnection.getRequestMethod(),String,the HTTP request method
java.net.HttpURLConnection.getResponseCode(),int,"the HTTP Status-Code, or -1"
java.net.HttpURLConnection.getResponseMessage(),String,"the HTTP response message, or null"
"java.net.HttpURLConnection.getHeaderFieldDate(String,long)",long,"the value of the field, parsed as a date. The value of the Default argument is returned if the field is missing or malformed."
java.net.HttpURLConnection.disconnect(),abstractvoid,
java.net.HttpURLConnection.usingProxy(),abstractboolean,a boolean indicating if the connection is using a proxy.
java.net.HttpURLConnection.getPermission(),Permission,a SocketPermission object representing the permission necessary to connect to the destination host and port.
java.net.HttpURLConnection.getErrorStream(),InputStream,"an error stream if any, null if there have been no errors, the connection is not connected or the server sent no useful data."
"java.net.IDN.toASCII(String,int)",String,the translated String
java.net.IDN.toASCII(String),String,the translated String
"java.net.IDN.toUnicode(String,int)",String,the translated String
java.net.IDN.toUnicode(String),String,the translated String
java.net.Inet4Address.isMulticastAddress(),boolean,a boolean indicating if the InetAddress is an IP multicast address
java.net.Inet4Address.isAnyLocalAddress(),boolean,a boolean indicating if the Inetaddress is a wildcard address.
java.net.Inet4Address.isLoopbackAddress(),boolean,a boolean indicating if the InetAddress is a loopback address; or false otherwise.
java.net.Inet4Address.isLinkLocalAddress(),boolean,a boolean indicating if the InetAddress is a link local address; or false if address is not a link local unicast address.
java.net.Inet4Address.isSiteLocalAddress(),boolean,a boolean indicating if the InetAddress is a site local address; or false if address is not a site local unicast address.
java.net.Inet4Address.isMCGlobal(),boolean,"a boolean indicating if the address has is a multicast address of global scope, false if it is not of global scope or it is not a multicast address"
java.net.Inet4Address.isMCNodeLocal(),boolean,"a boolean indicating if the address has is a multicast address of node-local scope, false if it is not of node-local scope or it is not a multicast address"
java.net.Inet4Address.isMCLinkLocal(),boolean,"a boolean indicating if the address has is a multicast address of link-local scope, false if it is not of link-local scope or it is not a multicast address"
java.net.Inet4Address.isMCSiteLocal(),boolean,"a boolean indicating if the address has is a multicast address of site-local scope, false if it is not of site-local scope or it is not a multicast address"
java.net.Inet4Address.isMCOrgLocal(),boolean,"a boolean indicating if the address has is a multicast address of organization-local scope, false if it is not of organization-local scope or it is not a multicast address"
java.net.Inet4Address.getAddress(),byte[],the raw IP address of this object.
java.net.Inet4Address.getHostAddress(),String,the raw IP address in a string format.
java.net.Inet4Address.hashCode(),int,a hash code value for this IP address.
java.net.Inet4Address.equals(Object),boolean,true if the objects are the same; false otherwise.
"java.net.Inet6Address.getByAddress(String,byte[],NetworkInterface)",Inet6Address,an Inet6Address object created from the raw IP address.
"java.net.Inet6Address.getByAddress(String,byte[],int)",Inet6Address,an Inet6Address object created from the raw IP address.
java.net.Inet6Address.isMulticastAddress(),boolean,a boolean indicating if the InetAddress is an IP multicast address
java.net.Inet6Address.isAnyLocalAddress(),boolean,a boolean indicating if the Inetaddress is a wildcard address.
java.net.Inet6Address.isLoopbackAddress(),boolean,a boolean indicating if the InetAddress is a loopback address; or false otherwise.
java.net.Inet6Address.isLinkLocalAddress(),boolean,a boolean indicating if the InetAddress is a link local address; or false if address is not a link local unicast address.
java.net.Inet6Address.isSiteLocalAddress(),boolean,a boolean indicating if the InetAddress is a site local address; or false if address is not a site local unicast address.
java.net.Inet6Address.isMCGlobal(),boolean,"a boolean indicating if the address has is a multicast address of global scope, false if it is not of global scope or it is not a multicast address"
java.net.Inet6Address.isMCNodeLocal(),boolean,"a boolean indicating if the address has is a multicast address of node-local scope, false if it is not of node-local scope or it is not a multicast address"
java.net.Inet6Address.isMCLinkLocal(),boolean,"a boolean indicating if the address has is a multicast address of link-local scope, false if it is not of link-local scope or it is not a multicast address"
java.net.Inet6Address.isMCSiteLocal(),boolean,"a boolean indicating if the address has is a multicast address of site-local scope, false if it is not of site-local scope or it is not a multicast address"
java.net.Inet6Address.isMCOrgLocal(),boolean,"a boolean indicating if the address has is a multicast address of organization-local scope, false if it is not of organization-local scope or it is not a multicast address"
java.net.Inet6Address.getAddress(),byte[],the raw IP address of this object.
java.net.Inet6Address.getScopeId(),int,"the scopeId, or zero if not set."
java.net.Inet6Address.getScopedInterface(),NetworkInterface,"the scoped interface, or null if not set."
java.net.Inet6Address.getHostAddress(),String,the raw IP address in a string format.
java.net.Inet6Address.hashCode(),int,a hash code value for this IP address.
java.net.Inet6Address.equals(Object),boolean,true if the objects are the same; false otherwise.
java.net.Inet6Address.isIPv4CompatibleAddress(),boolean,a boolean indicating if the InetAddress is an IPv4 compatible IPv6 address; or false if address is IPv4 address.
java.net.InetAddress.isMulticastAddress(),boolean,a boolean indicating if the InetAddress is an IP multicast address
java.net.InetAddress.isAnyLocalAddress(),boolean,a boolean indicating if the Inetaddress is a wildcard address.
java.net.InetAddress.isLoopbackAddress(),boolean,a boolean indicating if the InetAddress is a loopback address; or false otherwise.
java.net.InetAddress.isLinkLocalAddress(),boolean,a boolean indicating if the InetAddress is a link local address; or false if address is not a link local unicast address.
java.net.InetAddress.isSiteLocalAddress(),boolean,a boolean indicating if the InetAddress is a site local address; or false if address is not a site local unicast address.
java.net.InetAddress.isMCGlobal(),boolean,"a boolean indicating if the address has is a multicast address of global scope, false if it is not of global scope or it is not a multicast address"
java.net.InetAddress.isMCNodeLocal(),boolean,"a boolean indicating if the address has is a multicast address of node-local scope, false if it is not of node-local scope or it is not a multicast address"
java.net.InetAddress.isMCLinkLocal(),boolean,"a boolean indicating if the address has is a multicast address of link-local scope, false if it is not of link-local scope or it is not a multicast address"
java.net.InetAddress.isMCSiteLocal(),boolean,"a boolean indicating if the address has is a multicast address of site-local scope, false if it is not of site-local scope or it is not a multicast address"
java.net.InetAddress.isMCOrgLocal(),boolean,"a boolean indicating if the address has is a multicast address of organization-local scope, false if it is not of organization-local scope or it is not a multicast address"
java.net.InetAddress.isReachable(int),boolean,a boolean indicating if the address is reachable.
"java.net.InetAddress.isReachable(NetworkInterface,int,int)",boolean,a booleanindicating if the address is reachable.
java.net.InetAddress.getHostName(),String,"the host name for this IP address, or if the operation is not allowed by the security check, the textual representation of the IP address."
java.net.InetAddress.getCanonicalHostName(),String,"the fully qualified domain name for this IP address, or if the operation is not allowed by the security check, the textual representation of the IP address."
java.net.InetAddress.getAddress(),byte[],the raw IP address of this object.
java.net.InetAddress.getHostAddress(),String,the raw IP address in a string format.
java.net.InetAddress.hashCode(),int,a hash code value for this IP address.
java.net.InetAddress.equals(Object),boolean,true if the objects are the same; false otherwise.
java.net.InetAddress.toString(),String,a string representation of this IP address.
"java.net.InetAddress.getByAddress(String,byte[])",InetAddress,an InetAddress object created from the raw IP address.
java.net.InetAddress.getByName(String),InetAddress,an IP address for the given host name.
java.net.InetAddress.getAllByName(String),InetAddress[],an array of all the IP addresses for a given host name.
java.net.InetAddress.getLoopbackAddress(),InetAddress,the InetAddress loopback instance.
java.net.InetAddress.getByAddress(byte[]),InetAddress,an InetAddress object created from the raw IP address.
java.net.InetAddress.getLocalHost(),InetAddress,the address of the local host.
"java.net.InetSocketAddress.createUnresolved(String,int)",InetSocketAddress,a InetSocketAddress representing the unresolved socket address
java.net.InetSocketAddress.getPort(),int,the port number.
java.net.InetSocketAddress.getAddress(),InetAddress,the InetAdress or null if it is unresolved.
java.net.InetSocketAddress.getHostName(),String,the hostname part of the address.
java.net.InetSocketAddress.getHostString(),String,"the hostname, or String representation of the address."
java.net.InetSocketAddress.isUnresolved(),boolean,true if the hostname couldn't be resolved into an InetAddress.
java.net.InetSocketAddress.toString(),String,a string representation of this object.
java.net.InetSocketAddress.equals(Object),boolean,true if the objects are the same; false otherwise.
java.net.InetSocketAddress.hashCode(),int,a hash code value for this socket address.
java.net.InterfaceAddress.getAddress(),InetAddress,the InetAddress for this address.
java.net.InterfaceAddress.getBroadcast(),InetAddress,the InetAddress representing the broadcast address or null if there is no broadcast address.
java.net.InterfaceAddress.getNetworkPrefixLength(),short,a short representing the prefix length for the subnet of that address.
java.net.InterfaceAddress.equals(Object),boolean,true if the objects are the same; false otherwise.
java.net.InterfaceAddress.hashCode(),int,a hash code value for this Interface address.
java.net.InterfaceAddress.toString(),String,a string representation of this Interface address.
java.net.JarURLConnection.getJarFileURL(),URL,the URL for the Jar file for this connection.
java.net.JarURLConnection.getEntryName(),String,"the entry name for this connection, if any."
java.net.JarURLConnection.getJarFile(),abstractJarFile,"the JAR file for this connection. If the connection is a connection to an entry of a JAR file, the JAR file object is returned"
java.net.JarURLConnection.getManifest(),Manifest,the manifest object corresponding to the JAR file object for this connection.
java.net.JarURLConnection.getJarEntry(),JarEntry,"the JAR entry object for this connection, or null if the JAR URL for this connection points to a JAR file."
java.net.JarURLConnection.getAttributes(),Attributes,"the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise."
java.net.JarURLConnection.getMainAttributes(),Attributes,the main Attributes for the JAR file for this connection.
java.net.JarURLConnection.getCertificates(),Certificate[],"the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise."
java.net.MulticastSocket.setTTL(byte),void,
java.net.MulticastSocket.setTimeToLive(int),void,
java.net.MulticastSocket.getTTL(),byte,the default time-to-live value
java.net.MulticastSocket.getTimeToLive(),int,the default time-to-live value
java.net.MulticastSocket.joinGroup(InetAddress),void,
java.net.MulticastSocket.leaveGroup(InetAddress),void,
"java.net.MulticastSocket.joinGroup(SocketAddress,NetworkInterface)",void,
"java.net.MulticastSocket.leaveGroup(SocketAddress,NetworkInterface)",void,
java.net.MulticastSocket.setInterface(InetAddress),void,
java.net.MulticastSocket.getInterface(),InetAddress,An InetAddress representing the address of the network interface used for multicast packets.
java.net.MulticastSocket.setNetworkInterface(NetworkInterface),void,
java.net.MulticastSocket.getNetworkInterface(),NetworkInterface,the multicast NetworkInterface currently set
java.net.MulticastSocket.setLoopbackMode(boolean),void,
java.net.MulticastSocket.getLoopbackMode(),boolean,true if the LoopbackMode has been disabled
"java.net.MulticastSocket.send(DatagramPacket,byte)",void,
java.net.NetworkInterface.getName(),String,the name of this network interface
java.net.NetworkInterface.getInetAddresses(),Enumeration&lt;InetAddress&gt;,an Enumeration object with all or a subset of the InetAddresses bound to this network interface
java.net.NetworkInterface.getInterfaceAddresses(),List&lt;InterfaceAddress&gt;,a List object with all or a subset of the InterfaceAddresss of this network interface
java.net.NetworkInterface.getSubInterfaces(),Enumeration&lt;NetworkInterface&gt;,an Enumeration object with all of the subinterfaces of this network interface
java.net.NetworkInterface.getParent(),NetworkInterface,The NetworkInterface this interface is attached to.
java.net.NetworkInterface.getIndex(),int,the index of this network interface or -1 if the index is unknown
java.net.NetworkInterface.getDisplayName(),String,"a non-empty string representing the display name of this network interface, or null if no display name is available."
java.net.NetworkInterface.getByName(String),NetworkInterface,"A NetworkInterface with the specified name, or null if there is no network interface with the specified name."
java.net.NetworkInterface.getByIndex(int),NetworkInterface,"the NetworkInterface obtained from its index, or null if there is no interface with such an index on the system"
java.net.NetworkInterface.getByInetAddress(InetAddress),NetworkInterface,A NetworkInterface or null if there is no network interface with the specified IP address.
java.net.NetworkInterface.getNetworkInterfaces(),Enumeration&lt;NetworkInterface&gt;,an Enumeration of NetworkInterfaces found on this machine
java.net.NetworkInterface.isUp(),boolean,true if the interface is up and running.
java.net.NetworkInterface.isLoopback(),boolean,true if the interface is a loopback interface.
java.net.NetworkInterface.isPointToPoint(),boolean,true if the interface is a point to point interface.
java.net.NetworkInterface.supportsMulticast(),boolean,true if the interface supports Multicasting.
java.net.NetworkInterface.getHardwareAddress(),byte[],"a byte array containing the address, or null if the address doesn't exist, is not accessible or a security manager is set and the caller does not have the permission NetPermission(""getNetworkInformation"")"
java.net.NetworkInterface.getMTU(),int,the value of the MTU for that interface.
java.net.NetworkInterface.isVirtual(),boolean,true if this interface is a virtual interface.
java.net.NetworkInterface.equals(Object),boolean,true if the objects are the same; false otherwise.
java.net.NetworkInterface.hashCode(),int,
java.net.NetworkInterface.toString(),String,a string representation of the object.
java.net.PasswordAuthentication.getUserName(),String,the user name
java.net.PasswordAuthentication.getPassword(),char[],the password
java.net.Proxy.type(),Proxy.Type,a Type representing the proxy type
java.net.Proxy.address(),SocketAddress,a SocketAddress representing the socket end point of the proxy
java.net.Proxy.toString(),String,a string representation of this object.
java.net.Proxy.equals(Object),boolean,true if the objects are the same; false otherwise.
java.net.Proxy.hashCode(),int,a hash code value for this Proxy.
java.net.ProxySelector.getDefault(),ProxySelector,the system-wide ProxySelector
java.net.ProxySelector.setDefault(ProxySelector),void,
java.net.ProxySelector.select(URI),abstractList&lt;Proxy&gt;,
"java.net.ProxySelector.connectFailed(URI,SocketAddress,IOException)",abstractvoid,
java.net.ResponseCache.getDefault(),ResponseCache,the system-wide ResponseCache
java.net.ResponseCache.setDefault(ResponseCache),void,
"java.net.ResponseCache.get(URI,String,Map&lt;String,List&lt;String&gt;&gt;)",abstractCacheResponse,"a CacheResponse instance if available from cache, or null otherwise"
"java.net.ResponseCache.put(URI,URLConnection)",abstractCacheRequest,a CacheRequest for recording the response to be cached. Null return indicates that the caller does not intend to cache the response.
java.net.SecureCacheResponse.getCipherSuite(),abstractString,a string representing the cipher suite
java.net.SecureCacheResponse.getLocalCertificateChain(),abstractList&lt;Certificate&gt;,"an immutable List of Certificate representing the certificate chain that was sent to the server. If no certificate chain was sent, null will be returned."
java.net.SecureCacheResponse.getServerCertificateChain(),abstractList&lt;Certificate&gt;,an immutable List of Certificate representing the server's certificate chain.
java.net.SecureCacheResponse.getPeerPrincipal(),abstractPrincipal,"the server's principal. Returns an X500Principal of the end-entity certiticate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites."
java.net.SecureCacheResponse.getLocalPrincipal(),abstractPrincipal,"the principal sent to the server. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned."
java.net.ServerSocket.bind(SocketAddress),void,
"java.net.ServerSocket.bind(SocketAddress,int)",void,
java.net.ServerSocket.getInetAddress(),InetAddress,"the address to which this socket is bound, or the loopback address if denied by the security manager, or null if the socket is unbound."
java.net.ServerSocket.getLocalPort(),int,the port number to which this socket is listening or -1 if the socket is not bound yet.
java.net.ServerSocket.getLocalSocketAddress(),SocketAddress,"a SocketAddress representing the local endpoint of this socket, or a SocketAddress representing the loopback address if denied by the security manager, or null if the socket is not bound yet."
java.net.ServerSocket.accept(),Socket,the new Socket
java.net.ServerSocket.implAccept(Socket),void,
java.net.ServerSocket.close(),void,
java.net.ServerSocket.getChannel(),ServerSocketChannel,"the server-socket channel associated with this socket, or null if this socket was not created for a channel"
java.net.ServerSocket.isBound(),boolean,true if the ServerSocket successfully bound to an address
java.net.ServerSocket.isClosed(),boolean,true if the socket has been closed
java.net.ServerSocket.setSoTimeout(int),void,
java.net.ServerSocket.getSoTimeout(),int,the SO_TIMEOUT value
java.net.ServerSocket.setReuseAddress(boolean),void,
java.net.ServerSocket.getReuseAddress(),boolean,a boolean indicating whether or not SO_REUSEADDR is enabled.
java.net.ServerSocket.toString(),String,a string representation of this socket.
java.net.ServerSocket.setSocketFactory(SocketImplFactory),void,
java.net.ServerSocket.setReceiveBufferSize(int),void,
java.net.ServerSocket.getReceiveBufferSize(),int,the value of the SO_RCVBUF option for this Socket.
"java.net.ServerSocket.setPerformancePreferences(int,int,int)",void,
java.net.Socket.connect(SocketAddress),void,
"java.net.Socket.connect(SocketAddress,int)",void,
java.net.Socket.bind(SocketAddress),void,
java.net.Socket.getInetAddress(),InetAddress,"the remote IP address to which this socket is connected, or null if the socket is not connected."
java.net.Socket.getLocalAddress(),InetAddress,"the local address to which the socket is bound, the loopback address if denied by the security manager, or the wildcard address if the socket is closed or not bound yet."
java.net.Socket.getPort(),int,"the remote port number to which this socket is connected, or 0 if the socket is not connected yet."
java.net.Socket.getLocalPort(),int,the local port number to which this socket is bound or -1 if the socket is not bound yet.
java.net.Socket.getRemoteSocketAddress(),SocketAddress,"a SocketAddress representing the remote endpoint of this socket, or null if it is not connected yet."
java.net.Socket.getLocalSocketAddress(),SocketAddress,"a SocketAddress representing the local endpoint of this socket, or a SocketAddress representing the loopback address if denied by the security manager, or null if the socket is not bound yet."
java.net.Socket.getChannel(),SocketChannel,"the socket channel associated with this socket, or null if this socket was not created for a channel"
java.net.Socket.getInputStream(),InputStream,
java.net.Socket.getOutputStream(),OutputStream,an output stream for writing bytes to this socket.
java.net.Socket.setTcpNoDelay(boolean),void,
java.net.Socket.getTcpNoDelay(),boolean,a boolean indicating whether or not TCP_NODELAY is enabled.
"java.net.Socket.setSoLinger(boolean,int)",void,
java.net.Socket.getSoLinger(),int,the setting for SO_LINGER.
java.net.Socket.sendUrgentData(int),void,
java.net.Socket.setOOBInline(boolean),void,
java.net.Socket.getOOBInline(),boolean,a boolean indicating whether or not SO_OOBINLINEis enabled.
java.net.Socket.setSoTimeout(int),void,
java.net.Socket.getSoTimeout(),int,the setting for SO_TIMEOUT
java.net.Socket.setSendBufferSize(int),void,
java.net.Socket.getSendBufferSize(),int,the value of the SO_SNDBUF option for this Socket.
java.net.Socket.setReceiveBufferSize(int),void,
java.net.Socket.getReceiveBufferSize(),int,the value of the SO_RCVBUF option for this Socket.
java.net.Socket.setKeepAlive(boolean),void,
java.net.Socket.getKeepAlive(),boolean,a boolean indicating whether or not SO_KEEPALIVE is enabled.
java.net.Socket.setTrafficClass(int),void,
java.net.Socket.getTrafficClass(),int,the traffic class or type-of-service already set
java.net.Socket.setReuseAddress(boolean),void,
java.net.Socket.getReuseAddress(),boolean,a boolean indicating whether or not SO_REUSEADDR is enabled.
java.net.Socket.close(),void,
java.net.Socket.shutdownInput(),void,
java.net.Socket.shutdownOutput(),void,
java.net.Socket.toString(),String,a string representation of this socket.
java.net.Socket.isConnected(),boolean,true if the socket was successfuly connected to a server
java.net.Socket.isBound(),boolean,true if the socket was successfuly bound to an address
java.net.Socket.isClosed(),boolean,true if the socket has been closed
java.net.Socket.isInputShutdown(),boolean,true if the input of the socket has been shutdown
java.net.Socket.isOutputShutdown(),boolean,true if the output of the socket has been shutdown
java.net.Socket.setSocketImplFactory(SocketImplFactory),void,
"java.net.Socket.setPerformancePreferences(int,int,int)",void,
java.net.SocketImpl.create(boolean),abstractvoid,
"java.net.SocketImpl.connect(String,int)",abstractvoid,
"java.net.SocketImpl.connect(InetAddress,int)",abstractvoid,
"java.net.SocketImpl.connect(SocketAddress,int)",abstractvoid,
"java.net.SocketImpl.bind(InetAddress,int)",abstractvoid,
java.net.SocketImpl.listen(int),abstractvoid,
java.net.SocketImpl.accept(SocketImpl),abstractvoid,
java.net.SocketImpl.getInputStream(),abstractInputStream,a stream for reading from this socket.
java.net.SocketImpl.getOutputStream(),abstractOutputStream,an output stream for writing to this socket.
java.net.SocketImpl.available(),abstractint,the number of bytes that can be read from this socket without blocking.
java.net.SocketImpl.close(),abstractvoid,
java.net.SocketImpl.shutdownInput(),void,
java.net.SocketImpl.shutdownOutput(),void,
java.net.SocketImpl.getFileDescriptor(),FileDescriptor,the value of this socket's fd field.
java.net.SocketImpl.getInetAddress(),InetAddress,the value of this socket's address field.
java.net.SocketImpl.getPort(),int,the value of this socket's port field.
java.net.SocketImpl.supportsUrgentData(),boolean,true if urgent data supported
java.net.SocketImpl.sendUrgentData(int),abstractvoid,
java.net.SocketImpl.getLocalPort(),int,the value of this socket's localport field.
java.net.SocketImpl.toString(),String,a string representation of this socket.
"java.net.SocketImpl.setPerformancePreferences(int,int,int)",void,
java.net.SocketPermission.implies(Permission),boolean,
java.net.SocketPermission.equals(Object),boolean,"true if obj is a SocketPermission, and has the same hostname, port range, and actions as this SocketPermission object. However, port range will be ignored in the comparison if obj only contains the action, 'resolve'."
java.net.SocketPermission.hashCode(),int,a hash code value for this object.
java.net.SocketPermission.getActions(),String,the canonical string representation of the actions.
java.net.SocketPermission.newPermissionCollection(),PermissionCollection,a new PermissionCollection object suitable for storing SocketPermissions.
java.net.URI.create(String),URI,The new URI
java.net.URI.parseServerAuthority(),URI,A URI whose authority field has been parsed as a server-based authority
java.net.URI.normalize(),URI,
java.net.URI.resolve(URI),URI,
java.net.URI.resolve(String),URI,The resulting URI
java.net.URI.relativize(URI),URI,
java.net.URI.toURL(),URL,A URL constructed from this URI
java.net.URI.getScheme(),String,"The scheme component of this URI, or null if the scheme is undefined"
java.net.URI.isAbsolute(),boolean,"true if, and only if, this URI is absolute"
java.net.URI.isOpaque(),boolean,"true if, and only if, this URI is opaque"
java.net.URI.getRawSchemeSpecificPart(),String,The raw scheme-specific part of this URI (never null)
java.net.URI.getSchemeSpecificPart(),String,The decoded scheme-specific part of this URI (never null)
java.net.URI.getRawAuthority(),String,"The raw authority component of this URI, or null if the authority is undefined"
java.net.URI.getAuthority(),String,"The decoded authority component of this URI, or null if the authority is undefined"
java.net.URI.getRawUserInfo(),String,"The raw user-information component of this URI, or null if the user information is undefined"
java.net.URI.getUserInfo(),String,"The decoded user-information component of this URI, or null if the user information is undefined"
java.net.URI.getHost(),String,
java.net.URI.getPort(),int,"The port component of this URI, or -1 if the port is undefined"
java.net.URI.getRawPath(),String,"The path component of this URI, or null if the path is undefined"
java.net.URI.getPath(),String,"The decoded path component of this URI, or null if the path is undefined"
java.net.URI.getRawQuery(),String,"The raw query component of this URI, or null if the query is undefined"
java.net.URI.getQuery(),String,"The decoded query component of this URI, or null if the query is undefined"
java.net.URI.getRawFragment(),String,"The raw fragment component of this URI, or null if the fragment is undefined"
java.net.URI.getFragment(),String,"The decoded fragment component of this URI, or null if the fragment is undefined"
java.net.URI.equals(Object),boolean,"true if, and only if, the given object is a URI that is identical to this URI"
java.net.URI.hashCode(),int,A hash-code value for this URI
java.net.URI.compareTo(URI),int,
java.net.URI.toString(),String,The string form of this URI
java.net.URI.toASCIIString(),String,"The string form of this URI, encoded as needed so that it only contains characters in the US-ASCII charset"
java.net.URL.getQuery(),String,"the query part of this URL, or null if one does not exist"
java.net.URL.getPath(),String,"the path part of this URL, or an empty string if one does not exist"
java.net.URL.getUserInfo(),String,"the userInfo part of this URL, or null if one does not exist"
java.net.URL.getAuthority(),String,the authority part of this URL
java.net.URL.getPort(),int,"the port number, or -1 if the port is not set"
java.net.URL.getDefaultPort(),int,the port number
java.net.URL.getProtocol(),String,the protocol of this URL.
java.net.URL.getHost(),String,the host name of this URL.
java.net.URL.getFile(),String,"the file name of this URL, or an empty string if one does not exist"
java.net.URL.getRef(),String,"the anchor (also known as the ""reference"") of this URL, or null if one does not exist"
java.net.URL.equals(Object),boolean,true if the objects are the same; false otherwise.
java.net.URL.hashCode(),int,a hash code for this URL.
java.net.URL.sameFile(URL),boolean,true if they reference the same remote object; false otherwise.
java.net.URL.toString(),String,a string representation of this object.
java.net.URL.toExternalForm(),String,a string representation of this object.
java.net.URL.toURI(),URI,a URI instance equivalent to this URL.
java.net.URL.openConnection(),URLConnection,a URLConnection linking to the URL.
java.net.URL.openConnection(Proxy),URLConnection,a URLConnection to the URL.
java.net.URL.openStream(),InputStream,an input stream for reading from the URL connection.
java.net.URL.getContent(),Object,the contents of this URL.
java.net.URL.getContent(Class[]),Object,the content object of this URL that is the first match of the types specified in the classes array. null if none of the requested types are supported.
java.net.URL.setURLStreamHandlerFactory(URLStreamHandlerFactory),void,
java.net.URLClassLoader.getResourceAsStream(String),InputStream,"An input stream for reading the resource, or null if the resource could not be found"
java.net.URLClassLoader.close(),void,
java.net.URLClassLoader.addURL(URL),void,
java.net.URLClassLoader.getURLs(),URL[],the search path of URLs for loading classes and resources.
java.net.URLClassLoader.findClass(String),Class&lt;?&gt;,the resulting class
"java.net.URLClassLoader.definePackage(String,Manifest,URL)",Package,the newly defined Package object
java.net.URLClassLoader.findResource(String),URL,"a URL for the resource, or null if the resource could not be found, or if the loader is closed."
java.net.URLClassLoader.findResources(String),Enumeration&lt;URL&gt;,"an Enumeration of URLs If the loader is closed, the Enumeration will be empty."
java.net.URLClassLoader.getPermissions(CodeSource),PermissionCollection,the permissions granted to the codesource
"java.net.URLClassLoader.newInstance(URL[],ClassLoader)",URLClassLoader,the resulting class loader
java.net.URLClassLoader.newInstance(URL[]),URLClassLoader,the resulting class loader
java.net.URLConnection.getFileNameMap(),FileNameMap,the FileNameMap
java.net.URLConnection.setFileNameMap(FileNameMap),void,
java.net.URLConnection.connect(),abstractvoid,
java.net.URLConnection.setConnectTimeout(int),void,
java.net.URLConnection.getConnectTimeout(),int,an int that indicates the connect timeout value in milliseconds
java.net.URLConnection.setReadTimeout(int),void,
java.net.URLConnection.getReadTimeout(),int,an int that indicates the read timeout value in milliseconds
java.net.URLConnection.getURL(),URL,the value of this URLConnection's URL field.
java.net.URLConnection.getContentLength(),int,"the content length of the resource that this connection's URL references, -1 if the content length is not known, or if the content length is greater than Integer.MAX_VALUE."
java.net.URLConnection.getContentLengthLong(),long,"the content length of the resource that this connection's URL references, or -1 if the content length is not known."
java.net.URLConnection.getContentType(),String,"the content type of the resource that the URL references, or null if not known."
java.net.URLConnection.getContentEncoding(),String,"the content encoding of the resource that the URL references, or null if not known."
java.net.URLConnection.getExpiration(),long,"the expiration date of the resource that this URL references, or 0 if not known. The value is the number of milliseconds since January 1, 1970 GMT."
java.net.URLConnection.getDate(),long,"the sending date of the resource that the URL references, or 0 if not known. The value returned is the number of milliseconds since January 1, 1970 GMT."
java.net.URLConnection.getLastModified(),long,"the date the resource referenced by this URLConnection was last modified, or 0 if not known."
java.net.URLConnection.getHeaderField(String),String,"the value of the named header field, or null if there is no such field in the header."
java.net.URLConnection.getHeaderFields(),"Map&lt;String,List&lt;String&gt;&gt;",a Map of header fields
"java.net.URLConnection.getHeaderFieldInt(String,int)",int,"the value of the named field, parsed as an integer. The Default value is returned if the field is missing or malformed."
"java.net.URLConnection.getHeaderFieldLong(String,long)",long,"the value of the named field, parsed as a long. The Default value is returned if the field is missing or malformed."
"java.net.URLConnection.getHeaderFieldDate(String,long)",long,"the value of the field, parsed as a date. The value of the Default argument is returned if the field is missing or malformed."
java.net.URLConnection.getHeaderFieldKey(int),String,"the key for the nth header field, or null if there are fewer than n+1 fields."
java.net.URLConnection.getHeaderField(int),String,the value of the nth header field or null if there are fewer than n+1 fields
java.net.URLConnection.getContent(),Object,
java.net.URLConnection.getContent(Class[]),Object,the object fetched that is the first match of the type specified in the classes array. null if none of the requested types are supported. The instanceof operator should be used to determine the specific kind of object returned.
java.net.URLConnection.getPermission(),Permission,the permission object representing the permission necessary to make the connection represented by this URLConnection.
java.net.URLConnection.getInputStream(),InputStream,an input stream that reads from this open connection.
java.net.URLConnection.getOutputStream(),OutputStream,an output stream that writes to this connection.
java.net.URLConnection.toString(),String,a string representation of this URLConnection.
java.net.URLConnection.setDoInput(boolean),void,
java.net.URLConnection.getDoInput(),boolean,the value of this URLConnection's doInput flag.
java.net.URLConnection.setDoOutput(boolean),void,
java.net.URLConnection.getDoOutput(),boolean,the value of this URLConnection's doOutput flag.
java.net.URLConnection.setAllowUserInteraction(boolean),void,
java.net.URLConnection.getAllowUserInteraction(),boolean,the value of the allowUserInteraction field for this object.
java.net.URLConnection.setDefaultAllowUserInteraction(boolean),void,
java.net.URLConnection.getDefaultAllowUserInteraction(),boolean,the default value of the allowUserInteraction field.
java.net.URLConnection.setUseCaches(boolean),void,
java.net.URLConnection.getUseCaches(),boolean,the value of this URLConnection's useCaches field.
java.net.URLConnection.setIfModifiedSince(long),void,
java.net.URLConnection.getIfModifiedSince(),long,the value of this object's ifModifiedSince field.
java.net.URLConnection.getDefaultUseCaches(),boolean,the default value of a URLConnection's useCaches flag.
java.net.URLConnection.setDefaultUseCaches(boolean),void,
"java.net.URLConnection.setRequestProperty(String,String)",void,
"java.net.URLConnection.addRequestProperty(String,String)",void,
java.net.URLConnection.getRequestProperty(String),String,"the value of the named general request property for this connection. If key is null, then null is returned."
java.net.URLConnection.getRequestProperties(),"Map&lt;String,List&lt;String&gt;&gt;",a Map of the general request properties for this connection.
"java.net.URLConnection.setDefaultRequestProperty(String,String)",void,
java.net.URLConnection.getDefaultRequestProperty(String),String,the value of the default request property for the specified key.
java.net.URLConnection.setContentHandlerFactory(ContentHandlerFactory),void,
java.net.URLConnection.guessContentTypeFromName(String),String,"a guess as to what the content type of the object is, based upon its file name."
java.net.URLConnection.guessContentTypeFromStream(InputStream),String,"a guess at the content type, or null if none can be determined."
java.net.URLDecoder.decode(String),String,the newly decoded String
"java.net.URLDecoder.decode(String,String)",String,the newly decoded String
java.net.URLEncoder.encode(String),String,the translated String.
"java.net.URLEncoder.encode(String,String)",String,the translated String.
java.net.URLPermission.getActions(),String,the actions of this Permission.
java.net.URLPermission.implies(Permission),boolean,
java.net.URLPermission.equals(Object),boolean,true if both Permission objects are equivalent.
java.net.URLPermission.hashCode(),int,a hash code value for this object.
java.net.URLStreamHandler.openConnection(URL),abstractURLConnection,a URLConnection object for the URL.
"java.net.URLStreamHandler.openConnection(URL,Proxy)",URLConnection,a URLConnection object for the URL.
"java.net.URLStreamHandler.parseURL(URL,String,int,int)",void,
java.net.URLStreamHandler.getDefaultPort(),int,the default port for a URL parsed by this handler.
"java.net.URLStreamHandler.equals(URL,URL)",boolean,"true if the two urls are considered equal, ie. they refer to the same fragment in the same file."
java.net.URLStreamHandler.hashCode(URL),int,an int suitable for hash table indexing
"java.net.URLStreamHandler.sameFile(URL,URL)",boolean,true if u1 and u2 refer to the same file
java.net.URLStreamHandler.getHostAddress(URL),InetAddress,an InetAddress representing the host IP address.
"java.net.URLStreamHandler.hostsEqual(URL,URL)",boolean,"true if and only if they are equal, false otherwise."
java.net.URLStreamHandler.toExternalForm(URL),String,a string representation of the URL argument.
"java.net.URLStreamHandler.setURL(URL,String,String,int,String,String,String,String,String)",void,
"java.net.URLStreamHandler.setURL(URL,String,String,int,String,String)",void,
java.nio.Buffer.capacity(),int,The capacity of this buffer
java.nio.Buffer.position(),int,The position of this buffer
java.nio.Buffer.position(int),Buffer,This buffer
java.nio.Buffer.limit(),int,The limit of this buffer
java.nio.Buffer.limit(int),Buffer,This buffer
java.nio.Buffer.mark(),Buffer,This buffer
java.nio.Buffer.reset(),Buffer,This buffer
java.nio.Buffer.clear(),Buffer,This buffer
java.nio.Buffer.flip(),Buffer,This buffer
java.nio.Buffer.rewind(),Buffer,This buffer
java.nio.Buffer.remaining(),int,The number of elements remaining in this buffer
java.nio.Buffer.hasRemaining(),boolean,"true if, and only if, there is at least one element remaining in this buffer"
java.nio.Buffer.isReadOnly(),abstractboolean,"true if, and only if, this buffer is read-only"
java.nio.Buffer.hasArray(),abstractboolean,"true if, and only if, this buffer is backed by an array and is not read-only"
java.nio.Buffer.array(),abstractObject,The array that backs this buffer
java.nio.Buffer.arrayOffset(),abstractint,The offset within this buffer's array of the first element of the buffer
java.nio.Buffer.isDirect(),abstractboolean,"true if, and only if, this buffer is direct"
java.nio.ByteBuffer.allocateDirect(int),ByteBuffer,The new byte buffer
java.nio.ByteBuffer.allocate(int),ByteBuffer,The new byte buffer
"java.nio.ByteBuffer.wrap(byte[],int,int)",ByteBuffer,The new byte buffer
java.nio.ByteBuffer.wrap(byte[]),ByteBuffer,The new byte buffer
java.nio.ByteBuffer.slice(),abstractByteBuffer,The new byte buffer
java.nio.ByteBuffer.duplicate(),abstractByteBuffer,The new byte buffer
java.nio.ByteBuffer.asReadOnlyBuffer(),abstractByteBuffer,"The new, read-only byte buffer"
java.nio.ByteBuffer.get(),abstractbyte,The byte at the buffer's current position
java.nio.ByteBuffer.put(byte),abstractByteBuffer,This buffer
java.nio.ByteBuffer.get(int),abstractbyte,The byte at the given index
"java.nio.ByteBuffer.put(int,byte)",abstractByteBuffer,This buffer
"java.nio.ByteBuffer.get(byte[],int,int)",ByteBuffer,This buffer
java.nio.ByteBuffer.get(byte[]),ByteBuffer,This buffer
java.nio.ByteBuffer.put(ByteBuffer),ByteBuffer,This buffer
"java.nio.ByteBuffer.put(byte[],int,int)",ByteBuffer,This buffer
java.nio.ByteBuffer.put(byte[]),ByteBuffer,This buffer
java.nio.ByteBuffer.hasArray(),boolean,"true if, and only if, this buffer is backed by an array and is not read-only"
java.nio.ByteBuffer.array(),byte[],The array that backs this buffer
java.nio.ByteBuffer.arrayOffset(),int,The offset within this buffer's array of the first element of the buffer
java.nio.ByteBuffer.compact(),abstractByteBuffer,This buffer
java.nio.ByteBuffer.isDirect(),abstractboolean,"true if, and only if, this buffer is direct"
java.nio.ByteBuffer.toString(),String,A summary string
java.nio.ByteBuffer.hashCode(),int,The current hash code of this buffer
java.nio.ByteBuffer.equals(Object),boolean,
java.nio.ByteBuffer.compareTo(ByteBuffer),int,"A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
java.nio.ByteBuffer.order(),ByteOrder,This buffer's byte order
java.nio.ByteBuffer.order(ByteOrder),ByteBuffer,This buffer
java.nio.ByteBuffer.getChar(),abstractchar,The char value at the buffer's current position
java.nio.ByteBuffer.putChar(char),abstractByteBuffer,This buffer
java.nio.ByteBuffer.getChar(int),abstractchar,The char value at the given index
"java.nio.ByteBuffer.putChar(int,char)",abstractByteBuffer,This buffer
java.nio.ByteBuffer.asCharBuffer(),abstractCharBuffer,A new char buffer
java.nio.ByteBuffer.getShort(),abstractshort,The short value at the buffer's current position
java.nio.ByteBuffer.putShort(short),abstractByteBuffer,This buffer
java.nio.ByteBuffer.getShort(int),abstractshort,The short value at the given index
"java.nio.ByteBuffer.putShort(int,short)",abstractByteBuffer,This buffer
java.nio.ByteBuffer.asShortBuffer(),abstractShortBuffer,A new short buffer
java.nio.ByteBuffer.getInt(),abstractint,The int value at the buffer's current position
java.nio.ByteBuffer.putInt(int),abstractByteBuffer,This buffer
java.nio.ByteBuffer.getInt(int),abstractint,The int value at the given index
"java.nio.ByteBuffer.putInt(int,int)",abstractByteBuffer,This buffer
java.nio.ByteBuffer.asIntBuffer(),abstractIntBuffer,A new int buffer
java.nio.ByteBuffer.getLong(),abstractlong,The long value at the buffer's current position
java.nio.ByteBuffer.putLong(long),abstractByteBuffer,This buffer
java.nio.ByteBuffer.getLong(int),abstractlong,The long value at the given index
"java.nio.ByteBuffer.putLong(int,long)",abstractByteBuffer,This buffer
java.nio.ByteBuffer.asLongBuffer(),abstractLongBuffer,A new long buffer
java.nio.ByteBuffer.getFloat(),abstractfloat,The float value at the buffer's current position
java.nio.ByteBuffer.putFloat(float),abstractByteBuffer,This buffer
java.nio.ByteBuffer.getFloat(int),abstractfloat,The float value at the given index
"java.nio.ByteBuffer.putFloat(int,float)",abstractByteBuffer,This buffer
java.nio.ByteBuffer.asFloatBuffer(),abstractFloatBuffer,A new float buffer
java.nio.ByteBuffer.getDouble(),abstractdouble,The double value at the buffer's current position
java.nio.ByteBuffer.putDouble(double),abstractByteBuffer,This buffer
java.nio.ByteBuffer.getDouble(int),abstractdouble,The double value at the given index
"java.nio.ByteBuffer.putDouble(int,double)",abstractByteBuffer,This buffer
java.nio.ByteBuffer.asDoubleBuffer(),abstractDoubleBuffer,A new double buffer
java.nio.ByteOrder.nativeOrder(),ByteOrder,The native byte order of the hardware upon which this Java virtual machine is running
java.nio.ByteOrder.toString(),String,The specified string
java.nio.CharBuffer.allocate(int),CharBuffer,The new char buffer
"java.nio.CharBuffer.wrap(char[],int,int)",CharBuffer,The new char buffer
java.nio.CharBuffer.wrap(char[]),CharBuffer,The new char buffer
java.nio.CharBuffer.read(CharBuffer),int,"The number of characters added to the buffer, or -1 if this source of characters is at its end"
"java.nio.CharBuffer.wrap(CharSequence,int,int)",CharBuffer,The new character buffer
java.nio.CharBuffer.wrap(CharSequence),CharBuffer,The new character buffer
java.nio.CharBuffer.slice(),abstractCharBuffer,The new char buffer
java.nio.CharBuffer.duplicate(),abstractCharBuffer,The new char buffer
java.nio.CharBuffer.asReadOnlyBuffer(),abstractCharBuffer,"The new, read-only char buffer"
java.nio.CharBuffer.get(),abstractchar,The char at the buffer's current position
java.nio.CharBuffer.put(char),abstractCharBuffer,This buffer
java.nio.CharBuffer.get(int),abstractchar,The char at the given index
"java.nio.CharBuffer.put(int,char)",abstractCharBuffer,This buffer
"java.nio.CharBuffer.get(char[],int,int)",CharBuffer,This buffer
java.nio.CharBuffer.get(char[]),CharBuffer,This buffer
java.nio.CharBuffer.put(CharBuffer),CharBuffer,This buffer
"java.nio.CharBuffer.put(char[],int,int)",CharBuffer,This buffer
java.nio.CharBuffer.put(char[]),CharBuffer,This buffer
"java.nio.CharBuffer.put(String,int,int)",CharBuffer,This buffer
java.nio.CharBuffer.put(String),CharBuffer,This buffer
java.nio.CharBuffer.hasArray(),boolean,"true if, and only if, this buffer is backed by an array and is not read-only"
java.nio.CharBuffer.array(),char[],The array that backs this buffer
java.nio.CharBuffer.arrayOffset(),int,The offset within this buffer's array of the first element of the buffer
java.nio.CharBuffer.compact(),abstractCharBuffer,This buffer
java.nio.CharBuffer.isDirect(),abstractboolean,"true if, and only if, this buffer is direct"
java.nio.CharBuffer.hashCode(),int,The current hash code of this buffer
java.nio.CharBuffer.equals(Object),boolean,
java.nio.CharBuffer.compareTo(CharBuffer),int,"A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
java.nio.CharBuffer.toString(),String,The specified string
java.nio.CharBuffer.length(),int,The length of this character buffer
java.nio.CharBuffer.charAt(int),char,The character at index position()+index
"java.nio.CharBuffer.subSequence(int,int)",abstractCharBuffer,The new character buffer
java.nio.CharBuffer.append(CharSequence),CharBuffer,This buffer
"java.nio.CharBuffer.append(CharSequence,int,int)",CharBuffer,This buffer
java.nio.CharBuffer.append(char),CharBuffer,This buffer
java.nio.CharBuffer.order(),abstractByteOrder,This buffer's byte order
java.nio.CharBuffer.chars(),IntStream,an IntStream of char values from this sequence
java.nio.DoubleBuffer.allocate(int),DoubleBuffer,The new double buffer
"java.nio.DoubleBuffer.wrap(double[],int,int)",DoubleBuffer,The new double buffer
java.nio.DoubleBuffer.wrap(double[]),DoubleBuffer,The new double buffer
java.nio.DoubleBuffer.slice(),abstractDoubleBuffer,The new double buffer
java.nio.DoubleBuffer.duplicate(),abstractDoubleBuffer,The new double buffer
java.nio.DoubleBuffer.asReadOnlyBuffer(),abstractDoubleBuffer,"The new, read-only double buffer"
java.nio.DoubleBuffer.get(),abstractdouble,The double at the buffer's current position
java.nio.DoubleBuffer.put(double),abstractDoubleBuffer,This buffer
java.nio.DoubleBuffer.get(int),abstractdouble,The double at the given index
"java.nio.DoubleBuffer.put(int,double)",abstractDoubleBuffer,This buffer
"java.nio.DoubleBuffer.get(double[],int,int)",DoubleBuffer,This buffer
java.nio.DoubleBuffer.get(double[]),DoubleBuffer,This buffer
java.nio.DoubleBuffer.put(DoubleBuffer),DoubleBuffer,This buffer
"java.nio.DoubleBuffer.put(double[],int,int)",DoubleBuffer,This buffer
java.nio.DoubleBuffer.put(double[]),DoubleBuffer,This buffer
java.nio.DoubleBuffer.hasArray(),boolean,"true if, and only if, this buffer is backed by an array and is not read-only"
java.nio.DoubleBuffer.array(),double[],The array that backs this buffer
java.nio.DoubleBuffer.arrayOffset(),int,The offset within this buffer's array of the first element of the buffer
java.nio.DoubleBuffer.compact(),abstractDoubleBuffer,This buffer
java.nio.DoubleBuffer.isDirect(),abstractboolean,"true if, and only if, this buffer is direct"
java.nio.DoubleBuffer.toString(),String,A summary string
java.nio.DoubleBuffer.hashCode(),int,The current hash code of this buffer
java.nio.DoubleBuffer.equals(Object),boolean,
java.nio.DoubleBuffer.compareTo(DoubleBuffer),int,"A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
java.nio.DoubleBuffer.order(),abstractByteOrder,This buffer's byte order
java.nio.FloatBuffer.allocate(int),FloatBuffer,The new float buffer
"java.nio.FloatBuffer.wrap(float[],int,int)",FloatBuffer,The new float buffer
java.nio.FloatBuffer.wrap(float[]),FloatBuffer,The new float buffer
java.nio.FloatBuffer.slice(),abstractFloatBuffer,The new float buffer
java.nio.FloatBuffer.duplicate(),abstractFloatBuffer,The new float buffer
java.nio.FloatBuffer.asReadOnlyBuffer(),abstractFloatBuffer,"The new, read-only float buffer"
java.nio.FloatBuffer.get(),abstractfloat,The float at the buffer's current position
java.nio.FloatBuffer.put(float),abstractFloatBuffer,This buffer
java.nio.FloatBuffer.get(int),abstractfloat,The float at the given index
"java.nio.FloatBuffer.put(int,float)",abstractFloatBuffer,This buffer
"java.nio.FloatBuffer.get(float[],int,int)",FloatBuffer,This buffer
java.nio.FloatBuffer.get(float[]),FloatBuffer,This buffer
java.nio.FloatBuffer.put(FloatBuffer),FloatBuffer,This buffer
"java.nio.FloatBuffer.put(float[],int,int)",FloatBuffer,This buffer
java.nio.FloatBuffer.put(float[]),FloatBuffer,This buffer
java.nio.FloatBuffer.hasArray(),boolean,"true if, and only if, this buffer is backed by an array and is not read-only"
java.nio.FloatBuffer.array(),float[],The array that backs this buffer
java.nio.FloatBuffer.arrayOffset(),int,The offset within this buffer's array of the first element of the buffer
java.nio.FloatBuffer.compact(),abstractFloatBuffer,This buffer
java.nio.FloatBuffer.isDirect(),abstractboolean,"true if, and only if, this buffer is direct"
java.nio.FloatBuffer.toString(),String,A summary string
java.nio.FloatBuffer.hashCode(),int,The current hash code of this buffer
java.nio.FloatBuffer.equals(Object),boolean,
java.nio.FloatBuffer.compareTo(FloatBuffer),int,"A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
java.nio.FloatBuffer.order(),abstractByteOrder,This buffer's byte order
java.nio.IntBuffer.allocate(int),IntBuffer,The new int buffer
"java.nio.IntBuffer.wrap(int[],int,int)",IntBuffer,The new int buffer
java.nio.IntBuffer.wrap(int[]),IntBuffer,The new int buffer
java.nio.IntBuffer.slice(),abstractIntBuffer,The new int buffer
java.nio.IntBuffer.duplicate(),abstractIntBuffer,The new int buffer
java.nio.IntBuffer.asReadOnlyBuffer(),abstractIntBuffer,"The new, read-only int buffer"
java.nio.IntBuffer.get(),abstractint,The int at the buffer's current position
java.nio.IntBuffer.put(int),abstractIntBuffer,This buffer
java.nio.IntBuffer.get(int),abstractint,The int at the given index
"java.nio.IntBuffer.put(int,int)",abstractIntBuffer,This buffer
"java.nio.IntBuffer.get(int[],int,int)",IntBuffer,This buffer
java.nio.IntBuffer.get(int[]),IntBuffer,This buffer
java.nio.IntBuffer.put(IntBuffer),IntBuffer,This buffer
"java.nio.IntBuffer.put(int[],int,int)",IntBuffer,This buffer
java.nio.IntBuffer.put(int[]),IntBuffer,This buffer
java.nio.IntBuffer.hasArray(),boolean,"true if, and only if, this buffer is backed by an array and is not read-only"
java.nio.IntBuffer.array(),int[],The array that backs this buffer
java.nio.IntBuffer.arrayOffset(),int,The offset within this buffer's array of the first element of the buffer
java.nio.IntBuffer.compact(),abstractIntBuffer,This buffer
java.nio.IntBuffer.isDirect(),abstractboolean,"true if, and only if, this buffer is direct"
java.nio.IntBuffer.toString(),String,A summary string
java.nio.IntBuffer.hashCode(),int,The current hash code of this buffer
java.nio.IntBuffer.equals(Object),boolean,
java.nio.IntBuffer.compareTo(IntBuffer),int,"A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
java.nio.IntBuffer.order(),abstractByteOrder,This buffer's byte order
java.nio.LongBuffer.allocate(int),LongBuffer,The new long buffer
"java.nio.LongBuffer.wrap(long[],int,int)",LongBuffer,The new long buffer
java.nio.LongBuffer.wrap(long[]),LongBuffer,The new long buffer
java.nio.LongBuffer.slice(),abstractLongBuffer,The new long buffer
java.nio.LongBuffer.duplicate(),abstractLongBuffer,The new long buffer
java.nio.LongBuffer.asReadOnlyBuffer(),abstractLongBuffer,"The new, read-only long buffer"
java.nio.LongBuffer.get(),abstractlong,The long at the buffer's current position
java.nio.LongBuffer.put(long),abstractLongBuffer,This buffer
java.nio.LongBuffer.get(int),abstractlong,The long at the given index
"java.nio.LongBuffer.put(int,long)",abstractLongBuffer,This buffer
"java.nio.LongBuffer.get(long[],int,int)",LongBuffer,This buffer
java.nio.LongBuffer.get(long[]),LongBuffer,This buffer
java.nio.LongBuffer.put(LongBuffer),LongBuffer,This buffer
"java.nio.LongBuffer.put(long[],int,int)",LongBuffer,This buffer
java.nio.LongBuffer.put(long[]),LongBuffer,This buffer
java.nio.LongBuffer.hasArray(),boolean,"true if, and only if, this buffer is backed by an array and is not read-only"
java.nio.LongBuffer.array(),long[],The array that backs this buffer
java.nio.LongBuffer.arrayOffset(),int,The offset within this buffer's array of the first element of the buffer
java.nio.LongBuffer.compact(),abstractLongBuffer,This buffer
java.nio.LongBuffer.isDirect(),abstractboolean,"true if, and only if, this buffer is direct"
java.nio.LongBuffer.toString(),String,A summary string
java.nio.LongBuffer.hashCode(),int,The current hash code of this buffer
java.nio.LongBuffer.equals(Object),boolean,
java.nio.LongBuffer.compareTo(LongBuffer),int,"A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
java.nio.LongBuffer.order(),abstractByteOrder,This buffer's byte order
java.nio.MappedByteBuffer.isLoaded(),boolean,true if it is likely that this buffer's content is resident in physical memory
java.nio.MappedByteBuffer.load(),MappedByteBuffer,This buffer
java.nio.MappedByteBuffer.force(),MappedByteBuffer,This buffer
java.nio.ShortBuffer.allocate(int),ShortBuffer,The new short buffer
"java.nio.ShortBuffer.wrap(short[],int,int)",ShortBuffer,The new short buffer
java.nio.ShortBuffer.wrap(short[]),ShortBuffer,The new short buffer
java.nio.ShortBuffer.slice(),abstractShortBuffer,The new short buffer
java.nio.ShortBuffer.duplicate(),abstractShortBuffer,The new short buffer
java.nio.ShortBuffer.asReadOnlyBuffer(),abstractShortBuffer,"The new, read-only short buffer"
java.nio.ShortBuffer.get(),abstractshort,The short at the buffer's current position
java.nio.ShortBuffer.put(short),abstractShortBuffer,This buffer
java.nio.ShortBuffer.get(int),abstractshort,The short at the given index
"java.nio.ShortBuffer.put(int,short)",abstractShortBuffer,This buffer
"java.nio.ShortBuffer.get(short[],int,int)",ShortBuffer,This buffer
java.nio.ShortBuffer.get(short[]),ShortBuffer,This buffer
java.nio.ShortBuffer.put(ShortBuffer),ShortBuffer,This buffer
"java.nio.ShortBuffer.put(short[],int,int)",ShortBuffer,This buffer
java.nio.ShortBuffer.put(short[]),ShortBuffer,This buffer
java.nio.ShortBuffer.hasArray(),boolean,"true if, and only if, this buffer is backed by an array and is not read-only"
java.nio.ShortBuffer.array(),short[],The array that backs this buffer
java.nio.ShortBuffer.arrayOffset(),int,The offset within this buffer's array of the first element of the buffer
java.nio.ShortBuffer.compact(),abstractShortBuffer,This buffer
java.nio.ShortBuffer.isDirect(),abstractboolean,"true if, and only if, this buffer is direct"
java.nio.ShortBuffer.toString(),String,A summary string
java.nio.ShortBuffer.hashCode(),int,The current hash code of this buffer
java.nio.ShortBuffer.equals(Object),boolean,
java.nio.ShortBuffer.compareTo(ShortBuffer),int,"A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
java.nio.ShortBuffer.order(),abstractByteOrder,This buffer's byte order
java.nio.channels.AsynchronousChannelGroup.provider(),AsynchronousChannelProvider,The provider that created this channel group
"java.nio.channels.AsynchronousChannelGroup.withFixedThreadPool(int,ThreadFactory)",AsynchronousChannelGroup,A new asynchronous channel group
"java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool(ExecutorService,int)",AsynchronousChannelGroup,A new asynchronous channel group
java.nio.channels.AsynchronousChannelGroup.withThreadPool(ExecutorService),AsynchronousChannelGroup,A new asynchronous channel group
java.nio.channels.AsynchronousChannelGroup.isShutdown(),abstractboolean,true if this asynchronous channel group is shutdown or has been marked for shutdown.
java.nio.channels.AsynchronousChannelGroup.isTerminated(),abstractboolean,true if this group has terminated
java.nio.channels.AsynchronousChannelGroup.shutdown(),abstractvoid,
java.nio.channels.AsynchronousChannelGroup.shutdownNow(),abstractvoid,
"java.nio.channels.AsynchronousChannelGroup.awaitTermination(long,TimeUnit)",abstractboolean,true if the group has terminated; false if the timeout elapsed before termination
"java.nio.channels.AsynchronousFileChannel.open(Path,Set&lt;?,ExecutorService,FileAttribute&lt;?&gt;...)",AsynchronousFileChannel,A new asynchronous file channel
"java.nio.channels.AsynchronousFileChannel.open(Path,OpenOption...)",AsynchronousFileChannel,A new asynchronous file channel
java.nio.channels.AsynchronousFileChannel.size(),abstractlong,"The current size of this channel's file, measured in bytes"
java.nio.channels.AsynchronousFileChannel.truncate(long),abstractAsynchronousFileChannel,This file channel
java.nio.channels.AsynchronousFileChannel.force(boolean),abstractvoid,
"java.nio.channels.AsynchronousFileChannel.lock(long,long,boolean,A,CompletionHandler&lt;FileLock,?)",abstract&lt;A&gt;void,
"java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler&lt;FileLock,?)",&lt;A&gt;void,
"java.nio.channels.AsynchronousFileChannel.lock(long,long,boolean)",abstractFuture&lt;FileLock&gt;,a Future object representing the pending result
java.nio.channels.AsynchronousFileChannel.lock(),Future&lt;FileLock&gt;,a Future object representing the pending result
"java.nio.channels.AsynchronousFileChannel.tryLock(long,long,boolean)",abstractFileLock,"A lock object representing the newly-acquired lock, or null if the lock could not be acquired because another program holds an overlapping lock"
java.nio.channels.AsynchronousFileChannel.tryLock(),FileLock,"A lock object representing the newly-acquired lock, or null if the lock could not be acquired because another program holds an overlapping lock"
"java.nio.channels.AsynchronousFileChannel.read(ByteBuffer,long,A,CompletionHandler&lt;Integer,?)",abstract&lt;A&gt;void,
"java.nio.channels.AsynchronousFileChannel.read(ByteBuffer,long)",abstractFuture&lt;Integer&gt;,A Future object representing the pending result
"java.nio.channels.AsynchronousFileChannel.write(ByteBuffer,long,A,CompletionHandler&lt;Integer,?)",abstract&lt;A&gt;void,
"java.nio.channels.AsynchronousFileChannel.write(ByteBuffer,long)",abstractFuture&lt;Integer&gt;,A Future object representing the pending result
java.nio.channels.AsynchronousServerSocketChannel.provider(),AsynchronousChannelProvider,The provider that created this channel
java.nio.channels.AsynchronousServerSocketChannel.open(AsynchronousChannelGroup),AsynchronousServerSocketChannel,A new asynchronous server socket channel
java.nio.channels.AsynchronousServerSocketChannel.open(),AsynchronousServerSocketChannel,A new asynchronous server socket channel
java.nio.channels.AsynchronousServerSocketChannel.bind(SocketAddress),AsynchronousServerSocketChannel,This channel
"java.nio.channels.AsynchronousServerSocketChannel.bind(SocketAddress,int)",abstractAsynchronousServerSocketChannel,This channel
"java.nio.channels.AsynchronousServerSocketChannel.setOption(SocketOption&lt;T&gt;,T)",abstract&lt;T&gt;AsynchronousServerSocketChannel,This channel
"java.nio.channels.AsynchronousServerSocketChannel.accept(A,CompletionHandler&lt;AsynchronousSocketChannel,?)",abstract&lt;A&gt;void,
java.nio.channels.AsynchronousServerSocketChannel.accept(),abstractFuture&lt;AsynchronousSocketChannel&gt;,a Future object representing the pending result
java.nio.channels.AsynchronousServerSocketChannel.getLocalAddress(),abstractSocketAddress,"The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"
java.nio.channels.AsynchronousSocketChannel.provider(),AsynchronousChannelProvider,The provider that created this channel
java.nio.channels.AsynchronousSocketChannel.open(AsynchronousChannelGroup),AsynchronousSocketChannel,A new asynchronous socket channel
java.nio.channels.AsynchronousSocketChannel.open(),AsynchronousSocketChannel,A new asynchronous socket channel
java.nio.channels.AsynchronousSocketChannel.bind(SocketAddress),abstractAsynchronousSocketChannel,This channel
"java.nio.channels.AsynchronousSocketChannel.setOption(SocketOption&lt;T&gt;,T)",abstract&lt;T&gt;AsynchronousSocketChannel,This channel
java.nio.channels.AsynchronousSocketChannel.shutdownInput(),abstractAsynchronousSocketChannel,The channel
java.nio.channels.AsynchronousSocketChannel.shutdownOutput(),abstractAsynchronousSocketChannel,The channel
java.nio.channels.AsynchronousSocketChannel.getRemoteAddress(),abstractSocketAddress,The remote address; null if the channel's socket is not connected
"java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress,A,CompletionHandler&lt;Void,?)",abstract&lt;A&gt;void,
java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress),abstractFuture&lt;Void&gt;,A Future object representing the pending result
"java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer,long,TimeUnit,A,CompletionHandler&lt;Integer,?)",abstract&lt;A&gt;void,
"java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer,A,CompletionHandler&lt;Integer,?)",&lt;A&gt;void,
java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer),abstractFuture&lt;Integer&gt;,A Future representing the result of the operation
"java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer[],int,int,long,TimeUnit,A,CompletionHandler&lt;Long,?)",abstract&lt;A&gt;void,
"java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer,long,TimeUnit,A,CompletionHandler&lt;Integer,?)",abstract&lt;A&gt;void,
"java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer,A,CompletionHandler&lt;Integer,?)",&lt;A&gt;void,
java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer),abstractFuture&lt;Integer&gt;,A Future representing the result of the operation
"java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer[],int,int,long,TimeUnit,A,CompletionHandler&lt;Long,?)",abstract&lt;A&gt;void,
java.nio.channels.AsynchronousSocketChannel.getLocalAddress(),abstractSocketAddress,"The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"
java.nio.channels.Channels.newInputStream(ReadableByteChannel),InputStream,A new input stream
java.nio.channels.Channels.newOutputStream(WritableByteChannel),OutputStream,A new output stream
java.nio.channels.Channels.newInputStream(AsynchronousByteChannel),InputStream,A new input stream
java.nio.channels.Channels.newOutputStream(AsynchronousByteChannel),OutputStream,A new output stream
java.nio.channels.Channels.newChannel(InputStream),ReadableByteChannel,A new readable byte channel
java.nio.channels.Channels.newChannel(OutputStream),WritableByteChannel,A new writable byte channel
"java.nio.channels.Channels.newReader(ReadableByteChannel,CharsetDecoder,int)",Reader,A new reader
"java.nio.channels.Channels.newReader(ReadableByteChannel,String)",Reader,A new reader
"java.nio.channels.Channels.newWriter(WritableByteChannel,CharsetEncoder,int)",Writer,A new writer
"java.nio.channels.Channels.newWriter(WritableByteChannel,String)",Writer,A new writer
java.nio.channels.DatagramChannel.open(),DatagramChannel,A new datagram channel
java.nio.channels.DatagramChannel.open(ProtocolFamily),DatagramChannel,A new datagram channel
java.nio.channels.DatagramChannel.validOps(),int,The valid-operation set
java.nio.channels.DatagramChannel.bind(SocketAddress),abstractDatagramChannel,This channel
"java.nio.channels.DatagramChannel.setOption(SocketOption&lt;T&gt;,T)",abstract&lt;T&gt;DatagramChannel,This channel
java.nio.channels.DatagramChannel.socket(),abstractDatagramSocket,A datagram socket associated with this channel
java.nio.channels.DatagramChannel.isConnected(),abstractboolean,"true if, and only if, this channel's socket is open and connected"
java.nio.channels.DatagramChannel.connect(SocketAddress),abstractDatagramChannel,This datagram channel
java.nio.channels.DatagramChannel.disconnect(),abstractDatagramChannel,This datagram channel
java.nio.channels.DatagramChannel.getRemoteAddress(),abstractSocketAddress,The remote address; null if the channel's socket is not connected
java.nio.channels.DatagramChannel.receive(ByteBuffer),abstractSocketAddress,"The datagram's source address, or null if this channel is in non-blocking mode and no datagram was immediately available"
"java.nio.channels.DatagramChannel.send(ByteBuffer,SocketAddress)",abstractint,"The number of bytes sent, which will be either the number of bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer"
java.nio.channels.DatagramChannel.read(ByteBuffer),abstractint,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
"java.nio.channels.DatagramChannel.read(ByteBuffer[],int,int)",abstractlong,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
java.nio.channels.DatagramChannel.read(ByteBuffer[]),long,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
java.nio.channels.DatagramChannel.write(ByteBuffer),abstractint,"The number of bytes written, possibly zero"
"java.nio.channels.DatagramChannel.write(ByteBuffer[],int,int)",abstractlong,"The number of bytes sent, which will be either the number of bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer"
java.nio.channels.DatagramChannel.write(ByteBuffer[]),long,"The number of bytes sent, which will be either the number of bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer"
java.nio.channels.DatagramChannel.getLocalAddress(),abstractSocketAddress,"The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"
"java.nio.channels.FileChannel.open(Path,Set&lt;?,FileAttribute&lt;?&gt;...)",FileChannel,A new file channel
"java.nio.channels.FileChannel.open(Path,OpenOption...)",FileChannel,A new file channel
java.nio.channels.FileChannel.read(ByteBuffer),abstractint,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
"java.nio.channels.FileChannel.read(ByteBuffer[],int,int)",abstractlong,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
java.nio.channels.FileChannel.read(ByteBuffer[]),long,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
java.nio.channels.FileChannel.write(ByteBuffer),abstractint,"The number of bytes written, possibly zero"
"java.nio.channels.FileChannel.write(ByteBuffer[],int,int)",abstractlong,"The number of bytes written, possibly zero"
java.nio.channels.FileChannel.write(ByteBuffer[]),long,"The number of bytes written, possibly zero"
java.nio.channels.FileChannel.position(),abstractlong,"This channel's file position, a non-negative integer counting the number of bytes from the beginning of the file to the current position"
java.nio.channels.FileChannel.position(long),abstractFileChannel,This file channel
java.nio.channels.FileChannel.size(),abstractlong,"The current size of this channel's file, measured in bytes"
java.nio.channels.FileChannel.truncate(long),abstractFileChannel,This file channel
java.nio.channels.FileChannel.force(boolean),abstractvoid,
"java.nio.channels.FileChannel.transferTo(long,long,WritableByteChannel)",abstractlong,"The number of bytes, possibly zero, that were actually transferred"
"java.nio.channels.FileChannel.transferFrom(ReadableByteChannel,long,long)",abstractlong,"The number of bytes, possibly zero, that were actually transferred"
"java.nio.channels.FileChannel.read(ByteBuffer,long)",abstractint,"The number of bytes read, possibly zero, or -1 if the given position is greater than or equal to the file's current size"
"java.nio.channels.FileChannel.write(ByteBuffer,long)",abstractint,"The number of bytes written, possibly zero"
"java.nio.channels.FileChannel.map(FileChannel.MapMode,long,long)",abstractMappedByteBuffer,
"java.nio.channels.FileChannel.lock(long,long,boolean)",abstractFileLock,A lock object representing the newly-acquired lock
java.nio.channels.FileChannel.lock(),FileLock,A lock object representing the newly-acquired lock
"java.nio.channels.FileChannel.tryLock(long,long,boolean)",abstractFileLock,"A lock object representing the newly-acquired lock, or null if the lock could not be acquired because another program holds an overlapping lock"
java.nio.channels.FileChannel.tryLock(),FileLock,"A lock object representing the newly-acquired lock, or null if the lock could not be acquired because another program holds an overlapping lock"
java.nio.channels.FileChannel.MapMode.toString(),String,A descriptive string
java.nio.channels.FileLock.channel(),FileChannel,"The file channel, or null if the file lock was not acquired by a file channel."
java.nio.channels.FileLock.acquiredBy(),Channel,The channel upon whose file this lock was acquired.
java.nio.channels.FileLock.position(),long,The position
java.nio.channels.FileLock.size(),long,The size of the locked region
java.nio.channels.FileLock.isShared(),boolean,"true if lock is shared, false if it is exclusive"
"java.nio.channels.FileLock.overlaps(long,long)",boolean,"true if, and only if, this lock and the given lock range overlap by at least one byte"
java.nio.channels.FileLock.isValid(),abstractboolean,"true if, and only if, this lock is valid"
java.nio.channels.FileLock.release(),abstractvoid,
java.nio.channels.FileLock.close(),void,
java.nio.channels.FileLock.toString(),String,A descriptive string
java.nio.channels.MembershipKey.isValid(),abstractboolean,"true if this membership key is valid, false otherwise"
java.nio.channels.MembershipKey.drop(),abstractvoid,
java.nio.channels.MembershipKey.block(InetAddress),abstractMembershipKey,This membership key
java.nio.channels.MembershipKey.unblock(InetAddress),abstractMembershipKey,This membership key
java.nio.channels.MembershipKey.channel(),abstractMulticastChannel,the channel
java.nio.channels.MembershipKey.group(),abstractInetAddress,the multicast group
java.nio.channels.MembershipKey.networkInterface(),abstractNetworkInterface,the network interface
java.nio.channels.MembershipKey.sourceAddress(),abstractInetAddress,"The source address if this membership key is source-specific, otherwise null"
java.nio.channels.Pipe.source(),abstractPipe.SourceChannel,This pipe's source channel
java.nio.channels.Pipe.sink(),abstractPipe.SinkChannel,This pipe's sink channel
java.nio.channels.Pipe.open(),Pipe,A new pipe
java.nio.channels.Pipe.SinkChannel.validOps(),int,The valid-operation set
java.nio.channels.Pipe.SourceChannel.validOps(),int,The valid-operation set
java.nio.channels.SelectableChannel.provider(),abstractSelectorProvider,The provider that created this channel
java.nio.channels.SelectableChannel.validOps(),abstractint,The valid-operation set
java.nio.channels.SelectableChannel.isRegistered(),abstractboolean,"true if, and only if, this channel is registered"
java.nio.channels.SelectableChannel.keyFor(Selector),abstractSelectionKey,"The key returned when this channel was last registered with the given selector, or null if this channel is not currently registered with that selector"
"java.nio.channels.SelectableChannel.register(Selector,int,Object)",abstractSelectionKey,A key representing the registration of this channel with the given selector
"java.nio.channels.SelectableChannel.register(Selector,int)",SelectionKey,A key representing the registration of this channel with the given selector
java.nio.channels.SelectableChannel.configureBlocking(boolean),abstractSelectableChannel,This selectable channel
java.nio.channels.SelectableChannel.isBlocking(),abstractboolean,"true if, and only if, this channel is in blocking mode"
java.nio.channels.SelectableChannel.blockingLock(),abstractObject,The blocking-mode lock object
java.nio.channels.SelectionKey.channel(),abstractSelectableChannel,This key's channel
java.nio.channels.SelectionKey.selector(),abstractSelector,This key's selector
java.nio.channels.SelectionKey.isValid(),abstractboolean,"true if, and only if, this key is valid"
java.nio.channels.SelectionKey.cancel(),abstractvoid,
java.nio.channels.SelectionKey.interestOps(),abstractint,This key's interest set
java.nio.channels.SelectionKey.interestOps(int),abstractSelectionKey,This selection key
java.nio.channels.SelectionKey.readyOps(),abstractint,This key's ready-operation set
java.nio.channels.SelectionKey.isReadable(),boolean,"true if, and only if, readyOps() &amp; OP_READ is nonzero"
java.nio.channels.SelectionKey.isWritable(),boolean,"true if, and only if, readyOps() &amp; OP_WRITE is nonzero"
java.nio.channels.SelectionKey.isConnectable(),boolean,"true if, and only if, readyOps() &amp; OP_CONNECT is nonzero"
java.nio.channels.SelectionKey.isAcceptable(),boolean,"true if, and only if, readyOps() &amp; OP_ACCEPT is nonzero"
java.nio.channels.SelectionKey.attach(Object),Object,"The previously-attached object, if any, otherwise null"
java.nio.channels.SelectionKey.attachment(),Object,"The object currently attached to this key, or null if there is no attachment"
java.nio.channels.Selector.open(),Selector,A new selector
java.nio.channels.Selector.isOpen(),abstractboolean,"true if, and only if, this selector is open"
java.nio.channels.Selector.provider(),abstractSelectorProvider,The provider that created this channel
java.nio.channels.Selector.keys(),abstractSet&lt;SelectionKey&gt;,This selector's key set
java.nio.channels.Selector.selectedKeys(),abstractSet&lt;SelectionKey&gt;,This selector's selected-key set
java.nio.channels.Selector.selectNow(),abstractint,"The number of keys, possibly zero, whose ready-operation sets were updated by the selection operation"
java.nio.channels.Selector.select(long),abstractint,"The number of keys, possibly zero, whose ready-operation sets were updated"
java.nio.channels.Selector.select(),abstractint,"The number of keys, possibly zero, whose ready-operation sets were updated"
java.nio.channels.Selector.wakeup(),abstractSelector,This selector
java.nio.channels.Selector.close(),abstractvoid,
java.nio.channels.ServerSocketChannel.open(),ServerSocketChannel,A new socket channel
java.nio.channels.ServerSocketChannel.validOps(),int,The valid-operation set
java.nio.channels.ServerSocketChannel.bind(SocketAddress),ServerSocketChannel,This channel
"java.nio.channels.ServerSocketChannel.bind(SocketAddress,int)",abstractServerSocketChannel,This channel
"java.nio.channels.ServerSocketChannel.setOption(SocketOption&lt;T&gt;,T)",abstract&lt;T&gt;ServerSocketChannel,This channel
java.nio.channels.ServerSocketChannel.socket(),abstractServerSocket,A server socket associated with this channel
java.nio.channels.ServerSocketChannel.accept(),abstractSocketChannel,"The socket channel for the new connection, or null if this channel is in non-blocking mode and no connection is available to be accepted"
java.nio.channels.ServerSocketChannel.getLocalAddress(),abstractSocketAddress,"The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"
java.nio.channels.SocketChannel.open(),SocketChannel,A new socket channel
java.nio.channels.SocketChannel.open(SocketAddress),SocketChannel,"A new, and connected, socket channel"
java.nio.channels.SocketChannel.validOps(),int,The valid-operation set
java.nio.channels.SocketChannel.bind(SocketAddress),abstractSocketChannel,This channel
"java.nio.channels.SocketChannel.setOption(SocketOption&lt;T&gt;,T)",abstract&lt;T&gt;SocketChannel,This channel
java.nio.channels.SocketChannel.shutdownInput(),abstractSocketChannel,The channel
java.nio.channels.SocketChannel.shutdownOutput(),abstractSocketChannel,The channel
java.nio.channels.SocketChannel.socket(),abstractSocket,A socket associated with this channel
java.nio.channels.SocketChannel.isConnected(),abstractboolean,"true if, and only if, this channel's network socket is open and connected"
java.nio.channels.SocketChannel.isConnectionPending(),abstractboolean,"true if, and only if, a connection operation has been initiated on this channel but not yet completed by invoking the finishConnect method"
java.nio.channels.SocketChannel.connect(SocketAddress),abstractboolean,"true if a connection was established, false if this channel is in non-blocking mode and the connection operation is in progress"
java.nio.channels.SocketChannel.finishConnect(),abstractboolean,"true if, and only if, this channel's socket is now connected"
java.nio.channels.SocketChannel.getRemoteAddress(),abstractSocketAddress,The remote address; null if the channel's socket is not connected
java.nio.channels.SocketChannel.read(ByteBuffer),abstractint,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
"java.nio.channels.SocketChannel.read(ByteBuffer[],int,int)",abstractlong,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
java.nio.channels.SocketChannel.read(ByteBuffer[]),long,"The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"
java.nio.channels.SocketChannel.write(ByteBuffer),abstractint,"The number of bytes written, possibly zero"
"java.nio.channels.SocketChannel.write(ByteBuffer[],int,int)",abstractlong,"The number of bytes written, possibly zero"
java.nio.channels.SocketChannel.write(ByteBuffer[]),long,"The number of bytes written, possibly zero"
java.nio.channels.SocketChannel.getLocalAddress(),abstractSocketAddress,"The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"
java.nio.channels.spi.AbstractInterruptibleChannel.close(),void,
java.nio.channels.spi.AbstractInterruptibleChannel.implCloseChannel(),abstractvoid,
java.nio.channels.spi.AbstractInterruptibleChannel.isOpen(),boolean,"true if, and only if, this channel is open"
java.nio.channels.spi.AbstractInterruptibleChannel.begin(),void,
java.nio.channels.spi.AbstractInterruptibleChannel.end(boolean),void,
java.nio.channels.spi.AbstractSelectableChannel.provider(),SelectorProvider,The provider that created this channel
java.nio.channels.spi.AbstractSelectableChannel.isRegistered(),boolean,"true if, and only if, this channel is registered"
java.nio.channels.spi.AbstractSelectableChannel.keyFor(Selector),SelectionKey,"The key returned when this channel was last registered with the given selector, or null if this channel is not currently registered with that selector"
"java.nio.channels.spi.AbstractSelectableChannel.register(Selector,int,Object)",SelectionKey,A key representing the registration of this channel with the given selector
java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(),void,
java.nio.channels.spi.AbstractSelectableChannel.implCloseSelectableChannel(),abstractvoid,
java.nio.channels.spi.AbstractSelectableChannel.isBlocking(),boolean,"true if, and only if, this channel is in blocking mode"
java.nio.channels.spi.AbstractSelectableChannel.blockingLock(),Object,The blocking-mode lock object
java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(boolean),SelectableChannel,This selectable channel
java.nio.channels.spi.AbstractSelectableChannel.implConfigureBlocking(boolean),abstractvoid,
java.nio.channels.spi.AbstractSelectionKey.isValid(),boolean,"true if, and only if, this key is valid"
java.nio.channels.spi.AbstractSelectionKey.cancel(),void,
java.nio.channels.spi.AbstractSelector.close(),void,
java.nio.channels.spi.AbstractSelector.implCloseSelector(),abstractvoid,
java.nio.channels.spi.AbstractSelector.isOpen(),boolean,"true if, and only if, this selector is open"
java.nio.channels.spi.AbstractSelector.provider(),SelectorProvider,The provider that created this channel
java.nio.channels.spi.AbstractSelector.cancelledKeys(),Set&lt;SelectionKey&gt;,The cancelled-key set
"java.nio.channels.spi.AbstractSelector.register(AbstractSelectableChannel,int,Object)",abstractSelectionKey,A new key representing the registration of the given channel with this selector
java.nio.channels.spi.AbstractSelector.deregister(AbstractSelectionKey),void,
java.nio.channels.spi.AbstractSelector.begin(),void,
java.nio.channels.spi.AbstractSelector.end(),void,
java.nio.channels.spi.AsynchronousChannelProvider.provider(),AsynchronousChannelProvider,
"java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(int,ThreadFactory)",abstractAsynchronousChannelGroup,A new asynchronous channel group
"java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(ExecutorService,int)",abstractAsynchronousChannelGroup,A new asynchronous channel group
java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousServerSocketChannel(AsynchronousChannelGroup),abstractAsynchronousServerSocketChannel,The new channel
java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousSocketChannel(AsynchronousChannelGroup),abstractAsynchronousSocketChannel,The new channel
java.nio.channels.spi.SelectorProvider.provider(),SelectorProvider,
java.nio.channels.spi.SelectorProvider.openDatagramChannel(),abstractDatagramChannel,The new channel
java.nio.channels.spi.SelectorProvider.openDatagramChannel(ProtocolFamily),abstractDatagramChannel,A new datagram channel
java.nio.channels.spi.SelectorProvider.openPipe(),abstractPipe,The new pipe
java.nio.channels.spi.SelectorProvider.openSelector(),abstractAbstractSelector,The new selector
java.nio.channels.spi.SelectorProvider.openServerSocketChannel(),abstractServerSocketChannel,The new channel
java.nio.channels.spi.SelectorProvider.openSocketChannel(),abstractSocketChannel,The new channel
java.nio.channels.spi.SelectorProvider.inheritedChannel(),Channel,
java.nio.charset.Charset.isSupported(String),boolean,"true if, and only if, support for the named charset is available in the current Java virtual machine"
java.nio.charset.Charset.forName(String),Charset,A charset object for the named charset
java.nio.charset.Charset.availableCharsets(),"SortedMap&lt;String,Charset&gt;","An immutable, case-insensitive map from canonical charset names to charset objects"
java.nio.charset.Charset.defaultCharset(),Charset,A charset object for the default charset
java.nio.charset.Charset.name(),String,The canonical name of this charset
java.nio.charset.Charset.aliases(),Set&lt;String&gt;,An immutable set of this charset's aliases
java.nio.charset.Charset.displayName(),String,The display name of this charset in the default locale
java.nio.charset.Charset.isRegistered(),boolean,"true if, and only if, this charset is known by its implementor to be registered with the IANA"
java.nio.charset.Charset.displayName(Locale),String,The display name of this charset in the given locale
java.nio.charset.Charset.contains(Charset),abstractboolean,true if the given charset is contained in this charset
java.nio.charset.Charset.newDecoder(),abstractCharsetDecoder,A new decoder for this charset
java.nio.charset.Charset.newEncoder(),abstractCharsetEncoder,A new encoder for this charset
java.nio.charset.Charset.canEncode(),boolean,"true if, and only if, this charset supports encoding"
java.nio.charset.Charset.decode(ByteBuffer),CharBuffer,A char buffer containing the decoded characters
java.nio.charset.Charset.encode(CharBuffer),ByteBuffer,A byte buffer containing the encoded characters
java.nio.charset.Charset.encode(String),ByteBuffer,A byte buffer containing the encoded characters
java.nio.charset.Charset.compareTo(Charset),int,"A negative integer, zero, or a positive integer as this charset is less than, equal to, or greater than the specified charset"
java.nio.charset.Charset.hashCode(),int,An integer hashcode
java.nio.charset.Charset.equals(Object),boolean,"true if, and only if, this charset is equal to the given object"
java.nio.charset.Charset.toString(),String,A string describing this charset
java.nio.charset.CharsetDecoder.charset(),Charset,This decoder's charset
java.nio.charset.CharsetDecoder.replacement(),String,"This decoder's current replacement, which is never null and is never empty"
java.nio.charset.CharsetDecoder.replaceWith(String),CharsetDecoder,This decoder
java.nio.charset.CharsetDecoder.implReplaceWith(String),void,
java.nio.charset.CharsetDecoder.malformedInputAction(),CodingErrorAction,"The current malformed-input action, which is never null"
java.nio.charset.CharsetDecoder.onMalformedInput(CodingErrorAction),CharsetDecoder,This decoder
java.nio.charset.CharsetDecoder.implOnMalformedInput(CodingErrorAction),void,
java.nio.charset.CharsetDecoder.unmappableCharacterAction(),CodingErrorAction,"The current unmappable-character action, which is never null"
java.nio.charset.CharsetDecoder.onUnmappableCharacter(CodingErrorAction),CharsetDecoder,This decoder
java.nio.charset.CharsetDecoder.implOnUnmappableCharacter(CodingErrorAction),void,
java.nio.charset.CharsetDecoder.averageCharsPerByte(),float,The average number of characters produced per byte of input
java.nio.charset.CharsetDecoder.maxCharsPerByte(),float,The maximum number of characters that will be produced per byte of input
"java.nio.charset.CharsetDecoder.decode(ByteBuffer,CharBuffer,boolean)",CoderResult,
java.nio.charset.CharsetDecoder.flush(CharBuffer),CoderResult,"A coder-result object, either CoderResult.UNDERFLOW or CoderResult.OVERFLOW"
java.nio.charset.CharsetDecoder.implFlush(CharBuffer),CoderResult,"A coder-result object, either CoderResult.UNDERFLOW or CoderResult.OVERFLOW"
java.nio.charset.CharsetDecoder.reset(),CharsetDecoder,This decoder
java.nio.charset.CharsetDecoder.implReset(),void,
"java.nio.charset.CharsetDecoder.decodeLoop(ByteBuffer,CharBuffer)",abstractCoderResult,A coder-result object describing the reason for termination
java.nio.charset.CharsetDecoder.decode(ByteBuffer),CharBuffer,A newly-allocated character buffer containing the result of the decoding operation. The buffer's position will be zero and its limit will follow the last character written.
java.nio.charset.CharsetDecoder.isAutoDetecting(),boolean,"true if, and only if, this decoder implements an auto-detecting charset"
java.nio.charset.CharsetDecoder.isCharsetDetected(),boolean,"true if, and only if, this decoder has detected a specific charset"
java.nio.charset.CharsetDecoder.detectedCharset(),Charset,"The charset detected by this auto-detecting decoder, or null if the charset has not yet been determined"
java.nio.charset.CharsetEncoder.charset(),Charset,This encoder's charset
java.nio.charset.CharsetEncoder.replacement(),byte[],"This encoder's current replacement, which is never null and is never empty"
java.nio.charset.CharsetEncoder.replaceWith(byte[]),CharsetEncoder,This encoder
java.nio.charset.CharsetEncoder.implReplaceWith(byte[]),void,
java.nio.charset.CharsetEncoder.isLegalReplacement(byte[]),boolean,"true if, and only if, the given byte array is a legal replacement value for this encoder"
java.nio.charset.CharsetEncoder.malformedInputAction(),CodingErrorAction,"The current malformed-input action, which is never null"
java.nio.charset.CharsetEncoder.onMalformedInput(CodingErrorAction),CharsetEncoder,This encoder
java.nio.charset.CharsetEncoder.implOnMalformedInput(CodingErrorAction),void,
java.nio.charset.CharsetEncoder.unmappableCharacterAction(),CodingErrorAction,"The current unmappable-character action, which is never null"
java.nio.charset.CharsetEncoder.onUnmappableCharacter(CodingErrorAction),CharsetEncoder,This encoder
java.nio.charset.CharsetEncoder.implOnUnmappableCharacter(CodingErrorAction),void,
java.nio.charset.CharsetEncoder.averageBytesPerChar(),float,The average number of bytes produced per character of input
java.nio.charset.CharsetEncoder.maxBytesPerChar(),float,The maximum number of bytes that will be produced per character of input
"java.nio.charset.CharsetEncoder.encode(CharBuffer,ByteBuffer,boolean)",CoderResult,
java.nio.charset.CharsetEncoder.flush(ByteBuffer),CoderResult,"A coder-result object, either CoderResult.UNDERFLOW or CoderResult.OVERFLOW"
java.nio.charset.CharsetEncoder.implFlush(ByteBuffer),CoderResult,"A coder-result object, either CoderResult.UNDERFLOW or CoderResult.OVERFLOW"
java.nio.charset.CharsetEncoder.reset(),CharsetEncoder,This encoder
java.nio.charset.CharsetEncoder.implReset(),void,
"java.nio.charset.CharsetEncoder.encodeLoop(CharBuffer,ByteBuffer)",abstractCoderResult,A coder-result object describing the reason for termination
java.nio.charset.CharsetEncoder.encode(CharBuffer),ByteBuffer,A newly-allocated byte buffer containing the result of the encoding operation. The buffer's position will be zero and its limit will follow the last byte written.
java.nio.charset.CharsetEncoder.canEncode(char),boolean,"true if, and only if, this encoder can encode the given character"
java.nio.charset.CharsetEncoder.canEncode(CharSequence),boolean,"true if, and only if, this encoder can encode the given character without throwing any exceptions and without performing any replacements"
java.nio.charset.CoderResult.toString(),String,A descriptive string
java.nio.charset.CoderResult.isUnderflow(),boolean,"true if, and only if, this object denotes underflow"
java.nio.charset.CoderResult.isOverflow(),boolean,"true if, and only if, this object denotes overflow"
java.nio.charset.CoderResult.isError(),boolean,"true if, and only if, this object denotes either a malformed-input error or an unmappable-character error"
java.nio.charset.CoderResult.isMalformed(),boolean,"true if, and only if, this object denotes a malformed-input error"
java.nio.charset.CoderResult.isUnmappable(),boolean,"true if, and only if, this object denotes an unmappable-character error"
java.nio.charset.CoderResult.length(),int,"The length of the erroneous input, a positive integer"
java.nio.charset.CoderResult.malformedForLength(int),CoderResult,The requested coder-result object
java.nio.charset.CoderResult.unmappableForLength(int),CoderResult,The requested coder-result object
java.nio.charset.CoderResult.throwException(),void,
java.nio.charset.CodingErrorAction.toString(),String,A descriptive string
java.nio.charset.spi.CharsetProvider.charsets(),abstractIterator&lt;Charset&gt;,The new iterator
java.nio.charset.spi.CharsetProvider.charsetForName(String),abstractCharset,"A charset object for the named charset, or null if the named charset is not supported by this provider"
"java.nio.file.Files.newInputStream(Path,OpenOption...)",InputStream,a new input stream
"java.nio.file.Files.newOutputStream(Path,OpenOption...)",OutputStream,a new output stream
"java.nio.file.Files.newByteChannel(Path,Set&lt;?,FileAttribute&lt;?&gt;...)",SeekableByteChannel,a new seekable byte channel
"java.nio.file.Files.newByteChannel(Path,OpenOption...)",SeekableByteChannel,a new seekable byte channel
java.nio.file.Files.newDirectoryStream(Path),DirectoryStream&lt;Path&gt;,a new and open DirectoryStream object
"java.nio.file.Files.newDirectoryStream(Path,String)",DirectoryStream&lt;Path&gt;,a new and open DirectoryStream object
"java.nio.file.Files.newDirectoryStream(Path,DirectoryStream.Filter&lt;?)",DirectoryStream&lt;Path&gt;,a new and open DirectoryStream object
"java.nio.file.Files.createFile(Path,FileAttribute&lt;?&gt;...)",Path,the file
"java.nio.file.Files.createDirectory(Path,FileAttribute&lt;?&gt;...)",Path,the directory
"java.nio.file.Files.createDirectories(Path,FileAttribute&lt;?&gt;...)",Path,the directory
"java.nio.file.Files.createTempFile(Path,String,String,FileAttribute&lt;?&gt;...)",Path,the path to the newly created file that did not exist before this method was invoked
"java.nio.file.Files.createTempFile(String,String,FileAttribute&lt;?&gt;...)",Path,the path to the newly created file that did not exist before this method was invoked
"java.nio.file.Files.createTempDirectory(Path,String,FileAttribute&lt;?&gt;...)",Path,the path to the newly created directory that did not exist before this method was invoked
"java.nio.file.Files.createTempDirectory(String,FileAttribute&lt;?&gt;...)",Path,the path to the newly created directory that did not exist before this method was invoked
"java.nio.file.Files.createSymbolicLink(Path,Path,FileAttribute&lt;?&gt;...)",Path,the path to the symbolic link
"java.nio.file.Files.createLink(Path,Path)",Path,the path to the link (directory entry)
java.nio.file.Files.delete(Path),void,
java.nio.file.Files.deleteIfExists(Path),boolean,true if the file was deleted by this method; false if the file could not be deleted because it did not exist
"java.nio.file.Files.copy(Path,Path,CopyOption...)",Path,the path to the target file
"java.nio.file.Files.move(Path,Path,CopyOption...)",Path,the path to the target file
java.nio.file.Files.readSymbolicLink(Path),Path,a Path object representing the target of the link
java.nio.file.Files.getFileStore(Path),FileStore,the file store where the file is stored
"java.nio.file.Files.isSameFile(Path,Path)",boolean,
java.nio.file.Files.isHidden(Path),boolean,true if the file is considered hidden
java.nio.file.Files.probeContentType(Path),String,"The content type of the file, or null if the content type cannot be determined"
"java.nio.file.Files.getFileAttributeView(Path,Class&lt;V&gt;,LinkOption...)",&lt;V extends FileAttributeView&gt;V,"a file attribute view of the specified type, or null if the attribute view type is not available"
"java.nio.file.Files.readAttributes(Path,Class&lt;A&gt;,LinkOption...)",&lt;A extends BasicFileAttributes&gt;A,the file attributes
"java.nio.file.Files.setAttribute(Path,String,Object,LinkOption...)",Path,the path parameter
"java.nio.file.Files.getAttribute(Path,String,LinkOption...)",Object,the attribute value
"java.nio.file.Files.readAttributes(Path,String,LinkOption...)","Map&lt;String,Object&gt;","a map of the attributes returned; The map's keys are the attribute names, its values are the attribute values"
"java.nio.file.Files.getPosixFilePermissions(Path,LinkOption...)",Set&lt;PosixFilePermission&gt;,the file permissions
"java.nio.file.Files.setPosixFilePermissions(Path,Set&lt;PosixFilePermission&gt;)",Path,The path
"java.nio.file.Files.getOwner(Path,LinkOption...)",UserPrincipal,A user principal representing the owner of the file
"java.nio.file.Files.setOwner(Path,UserPrincipal)",Path,The path
java.nio.file.Files.isSymbolicLink(Path),boolean,"true if the file is a symbolic link; false if the file does not exist, is not a symbolic link, or it cannot be determined if the file is a symbolic link or not."
"java.nio.file.Files.isDirectory(Path,LinkOption...)",boolean,"true if the file is a directory; false if the file does not exist, is not a directory, or it cannot be determined if the file is a directory or not."
"java.nio.file.Files.isRegularFile(Path,LinkOption...)",boolean,"true if the file is a regular file; false if the file does not exist, is not a regular file, or it cannot be determined if the file is a regular file or not."
"java.nio.file.Files.getLastModifiedTime(Path,LinkOption...)",FileTime,"a FileTime representing the time the file was last modified, or an implementation specific default when a time stamp to indicate the time of last modification is not supported by the file system"
"java.nio.file.Files.setLastModifiedTime(Path,FileTime)",Path,the path
java.nio.file.Files.size(Path),long,"the file size, in bytes"
"java.nio.file.Files.exists(Path,LinkOption...)",boolean,true if the file exists; false if the file does not exist or its existence cannot be determined.
"java.nio.file.Files.notExists(Path,LinkOption...)",boolean,true if the file does not exist; false if the file exists or its existence cannot be determined
java.nio.file.Files.isReadable(Path),boolean,"true if the file exists and is readable; false if the file does not exist, read access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"
java.nio.file.Files.isWritable(Path),boolean,"true if the file exists and is writable; false if the file does not exist, write access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"
java.nio.file.Files.isExecutable(Path),boolean,"true if the file exists and is executable; false if the file does not exist, execute access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"
"java.nio.file.Files.walkFileTree(Path,Set&lt;FileVisitOption&gt;,int,FileVisitor&lt;?)",Path,the starting file
"java.nio.file.Files.walkFileTree(Path,FileVisitor&lt;?)",Path,the starting file
"java.nio.file.Files.newBufferedReader(Path,Charset)",BufferedReader,"a new buffered reader, with default buffer size, to read text from the file"
java.nio.file.Files.newBufferedReader(Path),BufferedReader,"a new buffered reader, with default buffer size, to read text from the file"
"java.nio.file.Files.newBufferedWriter(Path,Charset,OpenOption...)",BufferedWriter,"a new buffered writer, with default buffer size, to write text to the file"
"java.nio.file.Files.newBufferedWriter(Path,OpenOption...)",BufferedWriter,"a new buffered writer, with default buffer size, to write text to the file"
"java.nio.file.Files.copy(InputStream,Path,CopyOption...)",long,the number of bytes read or written
"java.nio.file.Files.copy(Path,OutputStream)",long,the number of bytes read or written
java.nio.file.Files.readAllBytes(Path),byte[],a byte array containing the bytes read from the file
"java.nio.file.Files.readAllLines(Path,Charset)",List&lt;String&gt;,
java.nio.file.Files.readAllLines(Path),List&lt;String&gt;,the lines from the file as a List; whether the List is modifiable or not is implementation dependent and therefore not specified
"java.nio.file.Files.write(Path,byte[],OpenOption...)",Path,the path
"java.nio.file.Files.write(Path,Iterable&lt;?,Charset,OpenOption...)",Path,the path
"java.nio.file.Files.write(Path,Iterable&lt;?,OpenOption...)",Path,the path
java.nio.file.Files.list(Path),Stream&lt;Path&gt;,The Stream describing the content of the directory
"java.nio.file.Files.walk(Path,int,FileVisitOption...)",Stream&lt;Path&gt;,the Stream of Path
"java.nio.file.Files.walk(Path,FileVisitOption...)",Stream&lt;Path&gt;,the Stream of Path
"java.nio.file.Files.find(Path,int,BiPredicate&lt;Path,BasicFileAttributes&gt;,FileVisitOption...)",Stream&lt;Path&gt;,the Stream of Path
"java.nio.file.Files.lines(Path,Charset)",Stream&lt;String&gt;,the lines from the file as a Stream
java.nio.file.Files.lines(Path),Stream&lt;String&gt;,the lines from the file as a Stream
java.nio.file.FileStore.name(),abstractString,the name of this file store
java.nio.file.FileStore.type(),abstractString,a string representing the type of this file store
java.nio.file.FileStore.isReadOnly(),abstractboolean,"true if, and only if, this file store is read-only"
java.nio.file.FileStore.getTotalSpace(),abstractlong,"the size of the file store, in bytes"
java.nio.file.FileStore.getUsableSpace(),abstractlong,the number of bytes available
java.nio.file.FileStore.getUnallocatedSpace(),abstractlong,the number of unallocated bytes
java.nio.file.FileStore.supportsFileAttributeView(Class&lt;?),abstractboolean,"true if, and only if, the file attribute view is supported"
java.nio.file.FileStore.supportsFileAttributeView(String),abstractboolean,"true if, and only if, the file attribute view is supported"
java.nio.file.FileStore.getFileStoreAttributeView(Class&lt;V&gt;),abstract&lt;V extends FileStoreAttributeView&gt;V,a file store attribute view of the specified type or null if the attribute view is not available
java.nio.file.FileStore.getAttribute(String),abstractObject,the attribute value; null may be a valid valid for some attributes
java.nio.file.FileSystem.provider(),abstractFileSystemProvider,The provider that created this file system.
java.nio.file.FileSystem.close(),abstractvoid,
java.nio.file.FileSystem.isOpen(),abstractboolean,"true if, and only if, this file system is open"
java.nio.file.FileSystem.isReadOnly(),abstractboolean,"true if, and only if, this file system provides read-only access"
java.nio.file.FileSystem.getSeparator(),abstractString,The name separator
java.nio.file.FileSystem.getRootDirectories(),abstractIterable&lt;Path&gt;,An object to iterate over the root directories
java.nio.file.FileSystem.getFileStores(),abstractIterable&lt;FileStore&gt;,An object to iterate over the backing file stores
java.nio.file.FileSystem.supportedFileAttributeViews(),abstractSet&lt;String&gt;,An unmodifiable set of the names of the supported file attribute views
"java.nio.file.FileSystem.getPath(String,String...)",abstractPath,the resulting Path
java.nio.file.FileSystem.getPathMatcher(String),abstractPathMatcher,
java.nio.file.FileSystem.getUserPrincipalLookupService(),abstractUserPrincipalLookupService,The UserPrincipalLookupService for this file system
java.nio.file.FileSystem.newWatchService(),abstractWatchService,a new watch service
java.nio.file.FileSystems.getDefault(),FileSystem,the default file system
java.nio.file.FileSystems.getFileSystem(URI),FileSystem,the reference to the file system
"java.nio.file.FileSystems.newFileSystem(URI,Map&lt;String,?&gt;)",FileSystem,a new file system
"java.nio.file.FileSystems.newFileSystem(URI,Map&lt;String,?&gt;,ClassLoader)",FileSystem,a new file system
"java.nio.file.FileSystems.newFileSystem(Path,ClassLoader)",FileSystem,a new file system
"java.nio.file.Paths.get(String,String...)",Path,the resulting Path
java.nio.file.Paths.get(URI),Path,the resulting Path
"java.nio.file.SimpleFileVisitor.preVisitDirectory(T,BasicFileAttributes)",FileVisitResult,the visit result
"java.nio.file.SimpleFileVisitor.visitFile(T,BasicFileAttributes)",FileVisitResult,the visit result
"java.nio.file.SimpleFileVisitor.visitFileFailed(T,IOException)",FileVisitResult,the visit result
"java.nio.file.SimpleFileVisitor.postVisitDirectory(T,IOException)",FileVisitResult,the visit result
java.nio.file.attribute.AclEntry.newBuilder(),AclEntry.Builder,a new builder
java.nio.file.attribute.AclEntry.newBuilder(AclEntry),AclEntry.Builder,a new builder
java.nio.file.attribute.AclEntry.type(),AclEntryType,the ACL entry type
java.nio.file.attribute.AclEntry.principal(),UserPrincipal,the principal component
java.nio.file.attribute.AclEntry.permissions(),Set&lt;AclEntryPermission&gt;,the permissions component
java.nio.file.attribute.AclEntry.flags(),Set&lt;AclEntryFlag&gt;,the flags component
java.nio.file.attribute.AclEntry.equals(Object),boolean,"true if, and only if, the given object is an AclEntry that is identical to this AclEntry"
java.nio.file.attribute.AclEntry.hashCode(),int,a hash code value for this object.
java.nio.file.attribute.AclEntry.toString(),String,the string representation of this entry
java.nio.file.attribute.AclEntry.Builder.build(),AclEntry,a new ACL entry
java.nio.file.attribute.AclEntry.Builder.setType(AclEntryType),AclEntry.Builder,this builder
java.nio.file.attribute.AclEntry.Builder.setPrincipal(UserPrincipal),AclEntry.Builder,this builder
java.nio.file.attribute.AclEntry.Builder.setPermissions(Set&lt;AclEntryPermission&gt;),AclEntry.Builder,this builder
java.nio.file.attribute.AclEntry.Builder.setPermissions(AclEntryPermission...),AclEntry.Builder,this builder
java.nio.file.attribute.AclEntry.Builder.setFlags(Set&lt;AclEntryFlag&gt;),AclEntry.Builder,this builder
java.nio.file.attribute.AclEntry.Builder.setFlags(AclEntryFlag...),AclEntry.Builder,this builder
"java.nio.file.attribute.FileTime.from(long,TimeUnit)",FileTime,a FileTime representing the given value
java.nio.file.attribute.FileTime.fromMillis(long),FileTime,a FileTime representing the given value
java.nio.file.attribute.FileTime.from(Instant),FileTime,a FileTime representing the same point on the time-line as the provided instant
java.nio.file.attribute.FileTime.to(TimeUnit),long,"value in the given unit of granularity, since the epoch since the epoch (1970-01-01T00:00:00Z); can be negative"
java.nio.file.attribute.FileTime.toMillis(),long,"the value in milliseconds, since the epoch (1970-01-01T00:00:00Z)"
java.nio.file.attribute.FileTime.toInstant(),Instant,an instant representing the same point on the time-line as this FileTime object
java.nio.file.attribute.FileTime.equals(Object),boolean,"true if, and only if, the given object is a FileTime that represents the same time"
java.nio.file.attribute.FileTime.hashCode(),int,the hash-code value
java.nio.file.attribute.FileTime.compareTo(FileTime),int,"0 if this FileTime is equal to other, a value less than 0 if this FileTime represents a time that is before other, and a value greater than 0 if this FileTime represents a time that is after other"
java.nio.file.attribute.FileTime.toString(),String,the string representation of this file time
java.nio.file.attribute.PosixFilePermissions.toString(Set&lt;PosixFilePermission&gt;),String,the string representation of the permission set
java.nio.file.attribute.PosixFilePermissions.fromString(String),Set&lt;PosixFilePermission&gt;,the resulting set of permissions
java.nio.file.attribute.PosixFilePermissions.asFileAttribute(Set&lt;PosixFilePermission&gt;),FileAttribute&lt;Set&lt;PosixFilePermission&gt;&gt;,"an attribute encapsulating the given file permissions with name ""posix:permissions"""
java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByName(String),abstractUserPrincipal,a user principal
java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByGroupName(String),abstractGroupPrincipal,a group principal
java.nio.file.spi.FileSystemProvider.installedProviders(),List&lt;FileSystemProvider&gt;,"An unmodifiable list of the installed file system providers. The list contains at least one element, that is the default file system provider"
java.nio.file.spi.FileSystemProvider.getScheme(),abstractString,The URI scheme
"java.nio.file.spi.FileSystemProvider.newFileSystem(URI,Map&lt;String,?&gt;)",abstractFileSystem,A new file system
java.nio.file.spi.FileSystemProvider.getFileSystem(URI),abstractFileSystem,The file system
java.nio.file.spi.FileSystemProvider.getPath(URI),abstractPath,The resulting Path
"java.nio.file.spi.FileSystemProvider.newFileSystem(Path,Map&lt;String,?&gt;)",FileSystem,A new file system
"java.nio.file.spi.FileSystemProvider.newInputStream(Path,OpenOption...)",InputStream,a new input stream
"java.nio.file.spi.FileSystemProvider.newOutputStream(Path,OpenOption...)",OutputStream,a new output stream
"java.nio.file.spi.FileSystemProvider.newFileChannel(Path,Set&lt;?,FileAttribute&lt;?&gt;...)",FileChannel,a new file channel
"java.nio.file.spi.FileSystemProvider.newAsynchronousFileChannel(Path,Set&lt;?,ExecutorService,FileAttribute&lt;?&gt;...)",AsynchronousFileChannel,a new asynchronous file channel
"java.nio.file.spi.FileSystemProvider.newByteChannel(Path,Set&lt;?,FileAttribute&lt;?&gt;...)",abstractSeekableByteChannel,a new seekable byte channel
"java.nio.file.spi.FileSystemProvider.newDirectoryStream(Path,DirectoryStream.Filter&lt;?)",abstractDirectoryStream&lt;Path&gt;,a new and open DirectoryStream object
"java.nio.file.spi.FileSystemProvider.createDirectory(Path,FileAttribute&lt;?&gt;...)",abstractvoid,
"java.nio.file.spi.FileSystemProvider.createSymbolicLink(Path,Path,FileAttribute&lt;?&gt;...)",void,
"java.nio.file.spi.FileSystemProvider.createLink(Path,Path)",void,
java.nio.file.spi.FileSystemProvider.delete(Path),abstractvoid,
java.nio.file.spi.FileSystemProvider.deleteIfExists(Path),boolean,true if the file was deleted by this method; false if the file could not be deleted because it did not exist
java.nio.file.spi.FileSystemProvider.readSymbolicLink(Path),Path,The target of the symbolic link
"java.nio.file.spi.FileSystemProvider.copy(Path,Path,CopyOption...)",abstractvoid,
"java.nio.file.spi.FileSystemProvider.move(Path,Path,CopyOption...)",abstractvoid,
"java.nio.file.spi.FileSystemProvider.isSameFile(Path,Path)",abstractboolean,"true if, and only if, the two paths locate the same file"
java.nio.file.spi.FileSystemProvider.isHidden(Path),abstractboolean,true if the file is considered hidden
java.nio.file.spi.FileSystemProvider.getFileStore(Path),abstractFileStore,the file store where the file is stored
"java.nio.file.spi.FileSystemProvider.checkAccess(Path,AccessMode...)",abstractvoid,
"java.nio.file.spi.FileSystemProvider.getFileAttributeView(Path,Class&lt;V&gt;,LinkOption...)",abstract&lt;V extends FileAttributeView&gt;V,"a file attribute view of the specified type, or null if the attribute view type is not available"
"java.nio.file.spi.FileSystemProvider.readAttributes(Path,Class&lt;A&gt;,LinkOption...)",abstract&lt;A extends BasicFileAttributes&gt;A,the file attributes
"java.nio.file.spi.FileSystemProvider.readAttributes(Path,String,LinkOption...)","abstractMap&lt;String,Object&gt;","a map of the attributes returned; may be empty. The map's keys are the attribute names, its values are the attribute values"
"java.nio.file.spi.FileSystemProvider.setAttribute(Path,String,Object,LinkOption...)",abstractvoid,
java.nio.file.spi.FileTypeDetector.probeContentType(Path),abstractString,The content type or null if the file type is not recognized
java.rmi.MarshalledObject.get(),T,a copy of the contained object
java.rmi.MarshalledObject.hashCode(),int,a hash code
java.rmi.MarshalledObject.equals(Object),boolean,true if the argument contains an equivalent serialized object; false otherwise
java.rmi.Naming.lookup(String),Remote,a reference for a remote object
"java.rmi.Naming.bind(String,Remote)",void,
java.rmi.Naming.unbind(String),void,
"java.rmi.Naming.rebind(String,Remote)",void,
java.rmi.Naming.list(String),String[],an array of names (in the appropriate format) bound in the registry
java.rmi.activation.Activatable.getID(),ActivationID,the object's activation identifier
java.rmi.activation.Activatable.register(ActivationDesc),Remote,the stub for the activatable remote object
java.rmi.activation.Activatable.inactive(ActivationID),boolean,true if the operation succeeds (the operation will succeed if the object in currently known to be active and is either already unexported or is currently exported and has no pending/executing calls); false is returned if the object has pending/executing calls in which case it cannot be deactivated
java.rmi.activation.Activatable.unregister(ActivationID),void,
"java.rmi.activation.Activatable.exportObject(Remote,String,MarshalledObject&lt;?&gt;,boolean,int)",ActivationID,"the activation identifier obtained from registering the descriptor, desc, with the activation system the wrong group"
"java.rmi.activation.Activatable.exportObject(Remote,String,MarshalledObject&lt;?&gt;,boolean,int,RMIClientSocketFactory,RMIServerSocketFactory)",ActivationID,the activation identifier obtained from registering the descriptor with the activation system
"java.rmi.activation.Activatable.exportObject(Remote,ActivationID,int)",Remote,the stub for the activatable remote object
"java.rmi.activation.Activatable.exportObject(Remote,ActivationID,int,RMIClientSocketFactory,RMIServerSocketFactory)",Remote,the stub for the activatable remote object
"java.rmi.activation.Activatable.unexportObject(Remote,boolean)",boolean,"true if operation is successful, false otherwise"
java.rmi.activation.ActivationDesc.getGroupID(),ActivationGroupID,the group identifier
java.rmi.activation.ActivationDesc.getClassName(),String,the class name
java.rmi.activation.ActivationDesc.getLocation(),String,the code location
java.rmi.activation.ActivationDesc.getData(),MarshalledObject&lt;?&gt;,"the object specific ""initialization"" data"
java.rmi.activation.ActivationDesc.getRestartMode(),boolean,"true if the activatable object associated with this activation descriptor is restarted via the activation daemon when either the daemon comes up or the object's group is restarted after an unexpected crash; otherwise it returns false, meaning that the object is only activated on demand via a method call. Note that if the restart mode is true, the activator does not force an initial immediate activation of a newly registered object; initial activation is lazy."
java.rmi.activation.ActivationDesc.equals(Object),boolean,true if these Objects are equal; false otherwise.
java.rmi.activation.ActivationDesc.hashCode(),int,an integer
java.rmi.activation.ActivationGroup.inactiveObject(ActivationID),boolean,true if the object was successfully deactivated; otherwise returns false.
"java.rmi.activation.ActivationGroup.activeObject(ActivationID,Remote)",abstractvoid,
"java.rmi.activation.ActivationGroup.createGroup(ActivationGroupID,ActivationGroupDesc,long)",ActivationGroup,the activation group for the VM
java.rmi.activation.ActivationGroup.currentGroupID(),ActivationGroupID,the activation group's identifier
java.rmi.activation.ActivationGroup.setSystem(ActivationSystem),void,
java.rmi.activation.ActivationGroup.getSystem(),ActivationSystem,the activation system for the VM/group
"java.rmi.activation.ActivationGroup.activeObject(ActivationID,MarshalledObject&lt;?)",void,
java.rmi.activation.ActivationGroup.inactiveGroup(),void,
"java.rmi.activation.ActivationGroup_Stub.newInstance(ActivationID,ActivationDesc)",MarshalledObject,the result of the invocation
java.rmi.activation.ActivationGroupDesc.getClassName(),String,the group's class name
java.rmi.activation.ActivationGroupDesc.getLocation(),String,the group's code location
java.rmi.activation.ActivationGroupDesc.getData(),MarshalledObject&lt;?&gt;,the group's initialization data
java.rmi.activation.ActivationGroupDesc.getPropertyOverrides(),Properties,"the property-override list, or null"
java.rmi.activation.ActivationGroupDesc.getCommandEnvironment(),ActivationGroupDesc.CommandEnvironment,"the command-environment object, or null"
java.rmi.activation.ActivationGroupDesc.equals(Object),boolean,true if these Objects are equal; false otherwise.
java.rmi.activation.ActivationGroupDesc.hashCode(),int,an integer
java.rmi.activation.ActivationGroupDesc.CommandEnvironment.getCommandPath(),String,"the configured name, or null if configured to accept the default"
java.rmi.activation.ActivationGroupDesc.CommandEnvironment.getCommandOptions(),String[],"An array of the command options which will be passed to the new child command by rmid. Note that rmid may add other options before or after these options, or both. Never returns null."
java.rmi.activation.ActivationGroupDesc.CommandEnvironment.equals(Object),boolean,true if these Objects are equal; false otherwise.
java.rmi.activation.ActivationGroupDesc.CommandEnvironment.hashCode(),int,an integer
java.rmi.activation.ActivationGroupID.getSystem(),ActivationSystem,the group's activation system
java.rmi.activation.ActivationGroupID.hashCode(),int,a hash code value for this object.
java.rmi.activation.ActivationGroupID.equals(Object),boolean,true if these Objects are equal; false otherwise.
java.rmi.activation.ActivationID.activate(boolean),Remote,the reference to the active remote object
java.rmi.activation.ActivationID.hashCode(),int,a hash code value for this object.
java.rmi.activation.ActivationID.equals(Object),boolean,true if these Objects are equal; false otherwise.
java.rmi.dgc.Lease.getVMID(),VMID,client VMID
java.rmi.dgc.Lease.getValue(),long,lease duration
java.rmi.dgc.VMID.isUnique(),boolean,"true if host address can be determined, false otherwise"
java.rmi.dgc.VMID.hashCode(),int,a hash code value for this object.
java.rmi.dgc.VMID.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.rmi.dgc.VMID.toString(),String,a string representation of the object.
java.rmi.registry.LocateRegistry.getRegistry(),Registry,reference (a stub) to the remote object registry
java.rmi.registry.LocateRegistry.getRegistry(int),Registry,reference (a stub) to the remote object registry
java.rmi.registry.LocateRegistry.getRegistry(String),Registry,reference (a stub) to the remote object registry
"java.rmi.registry.LocateRegistry.getRegistry(String,int)",Registry,reference (a stub) to the remote object registry
"java.rmi.registry.LocateRegistry.getRegistry(String,int,RMIClientSocketFactory)",Registry,reference (a stub) to the remote registry
java.rmi.registry.LocateRegistry.createRegistry(int),Registry,the registry
"java.rmi.registry.LocateRegistry.createRegistry(int,RMIClientSocketFactory,RMIServerSocketFactory)",Registry,the registry
java.rmi.server.LogStream.log(String),LogStream,log associated with given name
java.rmi.server.LogStream.getDefaultStream(),PrintStream,default log stream
java.rmi.server.LogStream.setDefaultStream(PrintStream),void,
java.rmi.server.LogStream.getOutputStream(),OutputStream,output stream for this log
java.rmi.server.LogStream.setOutputStream(OutputStream),void,
java.rmi.server.LogStream.write(int),void,
"java.rmi.server.LogStream.write(byte[],int,int)",void,
java.rmi.server.LogStream.toString(),String,log name
java.rmi.server.LogStream.parseLevel(String),int,corresponding integer log level
java.rmi.server.ObjID.write(ObjectOutput),void,
java.rmi.server.ObjID.read(ObjectInput),ObjID,unmarshalled ObjID instance
java.rmi.server.ObjID.hashCode(),int,the hash code value for this object identifier
java.rmi.server.ObjID.equals(Object),boolean,"true if the given object is equivalent to this one, and false otherwise"
java.rmi.server.ObjID.toString(),String,a string representation of this object identifier
java.rmi.server.Operation.getOperation(),String,method name
java.rmi.server.Operation.toString(),String,a string representation of the object.
java.rmi.server.RemoteObject.getRef(),RemoteRef,remote reference for the remote object
java.rmi.server.RemoteObject.toStub(Remote),Remote,"the stub for the remote object, obj."
java.rmi.server.RemoteObject.hashCode(),int,a hash code value for this object.
java.rmi.server.RemoteObject.equals(Object),boolean,true if these Objects are equal; false otherwise.
java.rmi.server.RemoteObject.toString(),String,a string representation of the object.
"java.rmi.server.RemoteObjectInvocationHandler.invoke(Object,Method,Object[])",Object,
java.rmi.server.RemoteServer.getClientHost(),String,a string representation of the client host
java.rmi.server.RemoteServer.setLog(OutputStream),void,
java.rmi.server.RemoteServer.getLog(),PrintStream,the call log
"java.rmi.server.RemoteStub.setRef(RemoteStub,RemoteRef)",void,
java.rmi.server.RMIClassLoader.loadClass(String),Class&lt;?&gt;,the Class object representing the loaded class
"java.rmi.server.RMIClassLoader.loadClass(URL,String)",Class&lt;?&gt;,the Class object representing the loaded class
"java.rmi.server.RMIClassLoader.loadClass(String,String)",Class&lt;?&gt;,the Class object representing the loaded class
"java.rmi.server.RMIClassLoader.loadClass(String,String,ClassLoader)",Class&lt;?&gt;,the Class object representing the loaded class
"java.rmi.server.RMIClassLoader.loadProxyClass(String,String[],ClassLoader)",Class&lt;?&gt;,a dynamic proxy class that implements the named interfaces
java.rmi.server.RMIClassLoader.getClassLoader(String),ClassLoader,a class loader that loads classes from the given codebase URL path
java.rmi.server.RMIClassLoader.getClassAnnotation(Class&lt;?&gt;),String,"a string to be used to annotate the given class when it gets marshalled, or null"
java.rmi.server.RMIClassLoader.getDefaultProviderInstance(),RMIClassLoaderSpi,
java.rmi.server.RMIClassLoader.getSecurityContext(ClassLoader),Object,the security context
"java.rmi.server.RMIClassLoaderSpi.loadClass(String,String,ClassLoader)",abstractClass&lt;?&gt;,the Class object representing the loaded class
"java.rmi.server.RMIClassLoaderSpi.loadProxyClass(String,String[],ClassLoader)",abstractClass&lt;?&gt;,a dynamic proxy class that implements the named interfaces
java.rmi.server.RMIClassLoaderSpi.getClassLoader(String),abstractClassLoader,a class loader that loads classes from the given codebase URL path
java.rmi.server.RMIClassLoaderSpi.getClassAnnotation(Class&lt;?&gt;),abstractString,"a string to be used to annotate the given class when it gets marshalled, or null"
"java.rmi.server.RMISocketFactory.createSocket(String,int)",abstractSocket,a socket connected to the specified host and port.
java.rmi.server.RMISocketFactory.createServerSocket(int),abstractServerSocket,the server socket on the specified port
java.rmi.server.RMISocketFactory.setSocketFactory(RMISocketFactory),void,
java.rmi.server.RMISocketFactory.getSocketFactory(),RMISocketFactory,the socket factory
java.rmi.server.RMISocketFactory.getDefaultSocketFactory(),RMISocketFactory,the default RMI socket factory
java.rmi.server.RMISocketFactory.setFailureHandler(RMIFailureHandler),void,
java.rmi.server.RMISocketFactory.getFailureHandler(),RMIFailureHandler,the failure handler
java.rmi.server.UID.hashCode(),int,the hash code value for this UID
java.rmi.server.UID.equals(Object),boolean,"true if the given object is equivalent to this one, and false otherwise"
java.rmi.server.UID.toString(),String,a string representation of this UID
java.rmi.server.UID.write(DataOutput),void,
java.rmi.server.UID.read(DataInput),UID,unmarshalled UID instance
java.rmi.server.UnicastRemoteObject.clone(),Object,the new remote object
java.rmi.server.UnicastRemoteObject.exportObject(Remote),RemoteStub,remote object stub
"java.rmi.server.UnicastRemoteObject.exportObject(Remote,int)",Remote,remote object stub
"java.rmi.server.UnicastRemoteObject.exportObject(Remote,int,RMIClientSocketFactory,RMIServerSocketFactory)",Remote,remote object stub
"java.rmi.server.UnicastRemoteObject.unexportObject(Remote,boolean)",boolean,"true if operation is successful, false otherwise"
java.security.AccessControlContext.getDomainCombiner(),DomainCombiner,"the DomainCombiner associated with this AccessControlContext, or null if there is none."
java.security.AccessControlContext.checkPermission(Permission),void,
java.security.AccessControlContext.equals(Object),boolean,"true if obj is an AccessControlContext, and has the same set of ProtectionDomains as this context, false otherwise."
java.security.AccessControlContext.hashCode(),int,a hash code value for this context.
java.security.AccessController.doPrivileged(PrivilegedAction&lt;T&gt;),&lt;T&gt;T,the value returned by the action's run method.
java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction&lt;T&gt;),&lt;T&gt;T,the value returned by the action's run method.
"java.security.AccessController.doPrivileged(PrivilegedAction&lt;T&gt;,AccessControlContext)",&lt;T&gt;T,the value returned by the action's run method.
"java.security.AccessController.doPrivileged(PrivilegedAction&lt;T&gt;,AccessControlContext,Permission...)",&lt;T&gt;T,the value returned by the action's run method.
"java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction&lt;T&gt;,AccessControlContext,Permission...)",&lt;T&gt;T,the value returned by the action's run method.
java.security.AccessController.doPrivileged(PrivilegedExceptionAction&lt;T&gt;),&lt;T&gt;T,the value returned by the action's run method
java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction&lt;T&gt;),&lt;T&gt;T,the value returned by the action's run method
"java.security.AccessController.doPrivileged(PrivilegedExceptionAction&lt;T&gt;,AccessControlContext)",&lt;T&gt;T,the value returned by the action's run method
"java.security.AccessController.doPrivileged(PrivilegedExceptionAction&lt;T&gt;,AccessControlContext,Permission...)",&lt;T&gt;T,the value returned by the action's run method.
"java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction&lt;T&gt;,AccessControlContext,Permission...)",&lt;T&gt;T,the value returned by the action's run method.
java.security.AccessController.getContext(),AccessControlContext,the AccessControlContext based on the current context.
java.security.AccessController.checkPermission(Permission),void,
java.security.AlgorithmParameterGenerator.getAlgorithm(),String,the string name of the algorithm.
java.security.AlgorithmParameterGenerator.getInstance(String),AlgorithmParameterGenerator,the new AlgorithmParameterGenerator object.
"java.security.AlgorithmParameterGenerator.getInstance(String,String)",AlgorithmParameterGenerator,the new AlgorithmParameterGenerator object.
"java.security.AlgorithmParameterGenerator.getInstance(String,Provider)",AlgorithmParameterGenerator,the new AlgorithmParameterGenerator object.
java.security.AlgorithmParameterGenerator.getProvider(),Provider,the provider of this algorithm parameter generator object
java.security.AlgorithmParameterGenerator.init(int),void,
"java.security.AlgorithmParameterGenerator.init(int,SecureRandom)",void,
java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec),void,
"java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec,SecureRandom)",void,
java.security.AlgorithmParameterGenerator.generateParameters(),AlgorithmParameters,the new AlgorithmParameters object.
"java.security.AlgorithmParameterGeneratorSpi.engineInit(int,SecureRandom)",abstractvoid,
"java.security.AlgorithmParameterGeneratorSpi.engineInit(AlgorithmParameterSpec,SecureRandom)",abstractvoid,
java.security.AlgorithmParameterGeneratorSpi.engineGenerateParameters(),abstractAlgorithmParameters,the new AlgorithmParameters object.
java.security.AlgorithmParameters.getAlgorithm(),String,the algorithm name.
java.security.AlgorithmParameters.getInstance(String),AlgorithmParameters,the new parameter object.
"java.security.AlgorithmParameters.getInstance(String,String)",AlgorithmParameters,the new parameter object.
"java.security.AlgorithmParameters.getInstance(String,Provider)",AlgorithmParameters,the new parameter object.
java.security.AlgorithmParameters.getProvider(),Provider,the provider of this parameter object
java.security.AlgorithmParameters.init(AlgorithmParameterSpec),void,
java.security.AlgorithmParameters.init(byte[]),void,
"java.security.AlgorithmParameters.init(byte[],String)",void,
java.security.AlgorithmParameters.getParameterSpec(Class&lt;T&gt;),&lt;T extends AlgorithmParameterSpec&gt;T,the parameter specification.
java.security.AlgorithmParameters.getEncoded(),byte[],the parameters encoded using their primary encoding format.
java.security.AlgorithmParameters.getEncoded(String),byte[],the parameters encoded using the specified encoding scheme.
java.security.AlgorithmParameters.toString(),String,"a formatted string describing the parameters, or null if this parameter object has not been initialized."
java.security.AlgorithmParametersSpi.engineInit(AlgorithmParameterSpec),abstractvoid,
java.security.AlgorithmParametersSpi.engineInit(byte[]),abstractvoid,
"java.security.AlgorithmParametersSpi.engineInit(byte[],String)",abstractvoid,
java.security.AlgorithmParametersSpi.engineGetParameterSpec(Class&lt;T&gt;),abstract&lt;T extends AlgorithmParameterSpec&gt;T,the parameter specification.
java.security.AlgorithmParametersSpi.engineGetEncoded(),abstractbyte[],the parameters encoded using their primary encoding format.
java.security.AlgorithmParametersSpi.engineGetEncoded(String),abstractbyte[],the parameters encoded using the specified encoding scheme.
java.security.AlgorithmParametersSpi.engineToString(),abstractString,a formatted string describing the parameters.
java.security.AllPermission.implies(Permission),boolean,return
java.security.AllPermission.equals(Object),boolean,"true if obj is an AllPermission, false otherwise."
java.security.AllPermission.hashCode(),int,a hash code value for this object.
java.security.AllPermission.getActions(),String,the actions.
java.security.AllPermission.newPermissionCollection(),PermissionCollection,a new PermissionCollection object suitable for storing AllPermissions.
"java.security.AuthProvider.login(Subject,CallbackHandler)",abstractvoid,
java.security.AuthProvider.logout(),abstractvoid,
java.security.AuthProvider.setCallbackHandler(CallbackHandler),abstractvoid,
java.security.BasicPermission.implies(Permission),boolean,
java.security.BasicPermission.equals(Object),boolean,"true if obj's class is the same as this object's class and has the same name as this BasicPermission object, false otherwise."
java.security.BasicPermission.hashCode(),int,a hash code value for this object.
java.security.BasicPermission.getActions(),String,"the empty string """"."
java.security.BasicPermission.newPermissionCollection(),PermissionCollection,a new PermissionCollection object suitable for storing BasicPermissions.
java.security.CodeSigner.getSignerCertPath(),CertPath,A certificate path.
java.security.CodeSigner.getTimestamp(),Timestamp,The timestamp or null if none is present.
java.security.CodeSigner.hashCode(),int,a hash code value for this code signer.
java.security.CodeSigner.equals(Object),boolean,"true if the objects are considered equal, false otherwise."
java.security.CodeSigner.toString(),String,"A string comprising the signer's certificate and a timestamp, if present."
java.security.CodeSource.hashCode(),int,a hash code value for this object.
java.security.CodeSource.equals(Object),boolean,"true if the objects are considered equal, false otherwise."
java.security.CodeSource.getLocation(),URL,the location (URL).
java.security.CodeSource.getCertificates(),Certificate[],"A copy of the certificates array, or null if there is none."
java.security.CodeSource.getCodeSigners(),CodeSigner[],"A copy of the code signer array, or null if there is none."
java.security.CodeSource.implies(CodeSource),boolean,
java.security.CodeSource.toString(),String,information about this CodeSource.
java.security.DigestInputStream.getMessageDigest(),MessageDigest,the message digest associated with this stream.
java.security.DigestInputStream.setMessageDigest(MessageDigest),void,
java.security.DigestInputStream.read(),int,the byte read.
"java.security.DigestInputStream.read(byte[],int,int)",int,the actual number of bytes read. This is less than len if the end of the stream is reached prior to reading len bytes. -1 is returned if no bytes were read because the end of the stream had already been reached when the call was made.
java.security.DigestInputStream.on(boolean),void,
java.security.DigestInputStream.toString(),String,a string representation of the object.
java.security.DigestOutputStream.getMessageDigest(),MessageDigest,the message digest associated with this stream.
java.security.DigestOutputStream.setMessageDigest(MessageDigest),void,
java.security.DigestOutputStream.write(int),void,
"java.security.DigestOutputStream.write(byte[],int,int)",void,
java.security.DigestOutputStream.on(boolean),void,
java.security.DigestOutputStream.toString(),String,a string representation of the object.
java.security.DomainLoadStoreParameter.getConfiguration(),URI,the identifier for the configuration data
java.security.DomainLoadStoreParameter.getProtectionParams(),"Map&lt;String,KeyStore.ProtectionParameter&gt;",an unmodifiable map of keystore names to protection parameters
java.security.DomainLoadStoreParameter.getProtectionParameter(),KeyStore.ProtectionParameter,always returns null
java.security.GuardedObject.getObject(),Object,the guarded object.
java.security.Identity.getName(),String,the name of this identity.
java.security.Identity.getScope(),IdentityScope,the scope of this identity.
java.security.Identity.getPublicKey(),PublicKey,the public key for this identity.
java.security.Identity.setPublicKey(PublicKey),void,
java.security.Identity.setInfo(String),void,
java.security.Identity.getInfo(),String,general information about this identity.
java.security.Identity.addCertificate(Certificate),void,
java.security.Identity.removeCertificate(Certificate),void,
java.security.Identity.certificates(),Certificate[],a copy of all the certificates for this identity.
java.security.Identity.equals(Object),boolean,"true if the objects are considered equal, false otherwise."
java.security.Identity.identityEquals(Identity),boolean,"true if the identities are considered equal, false otherwise."
java.security.Identity.toString(),String,"information about this identity, such as its name and the name of its scope (if any)."
java.security.Identity.toString(boolean),String,"information about this identity. If detailed is true, then this method returns more information than that provided by the toString method without any arguments."
java.security.Identity.hashCode(),int,a hashcode for this identity.
java.security.IdentityScope.getSystemScope(),IdentityScope,"the system's identity scope, or null if none has been set."
java.security.IdentityScope.setSystemScope(IdentityScope),void,
java.security.IdentityScope.size(),abstractint,the number of identities within this identity scope.
java.security.IdentityScope.getIdentity(String),abstractIdentity,"the identity named name, or null if there are no identities named name in this scope."
java.security.IdentityScope.getIdentity(Principal),Identity,"the identity whose name is the same as that of the principal, or null if there are no identities of the same name in this scope."
java.security.IdentityScope.getIdentity(PublicKey),abstractIdentity,"the identity with the given key, or null if there are no identities in this scope with that key."
java.security.IdentityScope.addIdentity(Identity),abstractvoid,
java.security.IdentityScope.removeIdentity(Identity),abstractvoid,
java.security.IdentityScope.identities(),abstractEnumeration&lt;Identity&gt;,an enumeration of all identities in this identity scope.
java.security.IdentityScope.toString(),String,a string representation of this identity scope.
java.security.KeyFactory.getInstance(String),KeyFactory,the new KeyFactory object.
"java.security.KeyFactory.getInstance(String,String)",KeyFactory,the new KeyFactory object.
"java.security.KeyFactory.getInstance(String,Provider)",KeyFactory,the new KeyFactory object.
java.security.KeyFactory.getProvider(),Provider,the provider of this key factory object
java.security.KeyFactory.getAlgorithm(),String,the name of the algorithm associated with this KeyFactory
java.security.KeyFactory.generatePublic(KeySpec),PublicKey,the public key.
java.security.KeyFactory.generatePrivate(KeySpec),PrivateKey,the private key.
"java.security.KeyFactory.getKeySpec(Key,Class&lt;T&gt;)",&lt;T extends KeySpec&gt;T,the underlying key specification (key material) in an instance of the requested specification class.
java.security.KeyFactory.translateKey(Key),Key,the translated key.
java.security.KeyFactorySpi.engineGeneratePublic(KeySpec),abstractPublicKey,the public key.
java.security.KeyFactorySpi.engineGeneratePrivate(KeySpec),abstractPrivateKey,the private key.
"java.security.KeyFactorySpi.engineGetKeySpec(Key,Class&lt;T&gt;)",abstract&lt;T extends KeySpec&gt;T,the underlying key specification (key material) in an instance of the requested specification class.
java.security.KeyFactorySpi.engineTranslateKey(Key),abstractKey,the translated key.
java.security.KeyPair.getPublic(),PublicKey,a reference to the public key.
java.security.KeyPair.getPrivate(),PrivateKey,a reference to the private key.
java.security.KeyPairGenerator.getAlgorithm(),String,the standard string name of the algorithm.
java.security.KeyPairGenerator.getInstance(String),KeyPairGenerator,the new KeyPairGenerator object.
"java.security.KeyPairGenerator.getInstance(String,String)",KeyPairGenerator,the new KeyPairGenerator object.
"java.security.KeyPairGenerator.getInstance(String,Provider)",KeyPairGenerator,the new KeyPairGenerator object.
java.security.KeyPairGenerator.getProvider(),Provider,the provider of this key pair generator object
java.security.KeyPairGenerator.initialize(int),void,
"java.security.KeyPairGenerator.initialize(int,SecureRandom)",void,
java.security.KeyPairGenerator.initialize(AlgorithmParameterSpec),void,
"java.security.KeyPairGenerator.initialize(AlgorithmParameterSpec,SecureRandom)",void,
java.security.KeyPairGenerator.genKeyPair(),KeyPair,the generated key pair
java.security.KeyPairGenerator.generateKeyPair(),KeyPair,the generated key pair
"java.security.KeyPairGeneratorSpi.initialize(int,SecureRandom)",abstractvoid,
"java.security.KeyPairGeneratorSpi.initialize(AlgorithmParameterSpec,SecureRandom)",void,
java.security.KeyPairGeneratorSpi.generateKeyPair(),abstractKeyPair,the newly generated KeyPair
java.security.KeyRep.readResolve(),Object,
java.security.KeyStore.getInstance(String),KeyStore,a keystore object of the specified type.
"java.security.KeyStore.getInstance(String,String)",KeyStore,a keystore object of the specified type.
"java.security.KeyStore.getInstance(String,Provider)",KeyStore,a keystore object of the specified type.
java.security.KeyStore.getDefaultType(),String,"the default keystore type as specified by the keystore.type security property, or the string ""jks"" if no such property exists."
java.security.KeyStore.getProvider(),Provider,the provider of this keystore.
java.security.KeyStore.getType(),String,the type of this keystore.
"java.security.KeyStore.getKey(String,char[])",Key,"the requested key, or null if the given alias does not exist or does not identify a key-related entry."
java.security.KeyStore.getCertificateChain(String),Certificate[],"the certificate chain (ordered with the user's certificate first followed by zero or more certificate authorities), or null if the given alias does not exist or does not contain a certificate chain"
java.security.KeyStore.getCertificate(String),Certificate,"the certificate, or null if the given alias does not exist or does not contain a certificate."
java.security.KeyStore.getCreationDate(String),Date,"the creation date of this entry, or null if the given alias does not exist"
"java.security.KeyStore.setKeyEntry(String,Key,char[],Certificate[])",void,
"java.security.KeyStore.setKeyEntry(String,byte[],Certificate[])",void,
"java.security.KeyStore.setCertificateEntry(String,Certificate)",void,
java.security.KeyStore.deleteEntry(String),void,
java.security.KeyStore.aliases(),Enumeration&lt;String&gt;,enumeration of the alias names
java.security.KeyStore.containsAlias(String),boolean,"true if the alias exists, false otherwise"
java.security.KeyStore.size(),int,the number of entries in this keystore
java.security.KeyStore.isKeyEntry(String),boolean,"true if the entry identified by the given alias is a key-related entry, false otherwise."
java.security.KeyStore.isCertificateEntry(String),boolean,"true if the entry identified by the given alias contains a trusted certificate, false otherwise."
java.security.KeyStore.getCertificateAlias(Certificate),String,"the alias name of the first entry with a matching certificate, or null if no such entry exists in this keystore."
"java.security.KeyStore.store(OutputStream,char[])",void,
java.security.KeyStore.store(KeyStore.LoadStoreParameter),void,
"java.security.KeyStore.load(InputStream,char[])",void,
java.security.KeyStore.load(KeyStore.LoadStoreParameter),void,
"java.security.KeyStore.getEntry(String,KeyStore.ProtectionParameter)",KeyStore.Entry,"the keystore Entry for the specified alias, or null if there is no such entry"
"java.security.KeyStore.setEntry(String,KeyStore.Entry,KeyStore.ProtectionParameter)",void,
"java.security.KeyStore.entryInstanceOf(String,Class&lt;?)",boolean,"true if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass, false otherwise"
java.security.KeyStore.Builder.getKeyStore(),abstractKeyStore,the KeyStore described by this object
java.security.KeyStore.Builder.getProtectionParameter(String),abstractKeyStore.ProtectionParameter,the ProtectionParameters that should be used to obtain the Entry with the given alias.
"java.security.KeyStore.Builder.newInstance(KeyStore,KeyStore.ProtectionParameter)",KeyStore.Builder,a new Builder object
"java.security.KeyStore.Builder.newInstance(String,Provider,File,KeyStore.ProtectionParameter)",KeyStore.Builder,a new Builder object
"java.security.KeyStore.Builder.newInstance(String,Provider,KeyStore.ProtectionParameter)",KeyStore.Builder,a new Builder object
java.security.KeyStore.CallbackHandlerProtection.getCallbackHandler(),CallbackHandler,the CallbackHandler.
java.security.KeyStore.PasswordProtection.getProtectionAlgorithm(),String,"the algorithm name, or null if none was set"
java.security.KeyStore.PasswordProtection.getProtectionParameters(),AlgorithmParameterSpec,"the algorithm parameter specification, or null, if none was set"
java.security.KeyStore.PasswordProtection.getPassword(),char[],"the password, which may be null"
java.security.KeyStore.PasswordProtection.destroy(),void,
java.security.KeyStore.PasswordProtection.isDestroyed(),boolean,"true if the password has been cleared, false otherwise"
java.security.KeyStore.PrivateKeyEntry.getPrivateKey(),PrivateKey,the PrivateKey from this entry
java.security.KeyStore.PrivateKeyEntry.getCertificateChain(),Certificate[],"an array of Certificates corresponding to the certificate chain for the public key. If the certificates are of type X.509, the runtime type of the returned array is X509Certificate[]."
java.security.KeyStore.PrivateKeyEntry.getCertificate(),Certificate,"the end entity Certificate (at index 0) from the certificate chain in this entry. If the certificate is of type X.509, the runtime type of the returned certificate is X509Certificate."
java.security.KeyStore.PrivateKeyEntry.getAttributes(),Set&lt;KeyStore.Entry.Attribute&gt;,"an unmodifiable Set of attributes, possibly empty"
java.security.KeyStore.PrivateKeyEntry.toString(),String,a string representation of this PrivateKeyEntry.
java.security.KeyStore.SecretKeyEntry.getSecretKey(),SecretKey,the SecretKey from this entry
java.security.KeyStore.SecretKeyEntry.getAttributes(),Set&lt;KeyStore.Entry.Attribute&gt;,"an unmodifiable Set of attributes, possibly empty"
java.security.KeyStore.SecretKeyEntry.toString(),String,a string representation of this SecretKeyEntry.
java.security.KeyStore.TrustedCertificateEntry.getTrustedCertificate(),Certificate,the trusted Certificate from this entry
java.security.KeyStore.TrustedCertificateEntry.getAttributes(),Set&lt;KeyStore.Entry.Attribute&gt;,"an unmodifiable Set of attributes, possibly empty"
java.security.KeyStore.TrustedCertificateEntry.toString(),String,a string representation of this TrustedCertificateEntry.
"java.security.KeyStoreSpi.engineGetKey(String,char[])",abstractKey,"the requested key, or null if the given alias does not exist or does not identify a key-related entry."
java.security.KeyStoreSpi.engineGetCertificateChain(String),abstractCertificate[],"the certificate chain (ordered with the user's certificate first and the root certificate authority last), or null if the given alias does not exist or does not contain a certificate chain"
java.security.KeyStoreSpi.engineGetCertificate(String),abstractCertificate,"the certificate, or null if the given alias does not exist or does not contain a certificate."
java.security.KeyStoreSpi.engineGetCreationDate(String),abstractDate,"the creation date of this entry, or null if the given alias does not exist"
"java.security.KeyStoreSpi.engineSetKeyEntry(String,Key,char[],Certificate[])",abstractvoid,
"java.security.KeyStoreSpi.engineSetKeyEntry(String,byte[],Certificate[])",abstractvoid,
"java.security.KeyStoreSpi.engineSetCertificateEntry(String,Certificate)",abstractvoid,
java.security.KeyStoreSpi.engineDeleteEntry(String),abstractvoid,
java.security.KeyStoreSpi.engineAliases(),abstractEnumeration&lt;String&gt;,enumeration of the alias names
java.security.KeyStoreSpi.engineContainsAlias(String),abstractboolean,"true if the alias exists, false otherwise"
java.security.KeyStoreSpi.engineSize(),abstractint,the number of entries in this keystore
java.security.KeyStoreSpi.engineIsKeyEntry(String),abstractboolean,"true if the entry identified by the given alias is a key-related, false otherwise."
java.security.KeyStoreSpi.engineIsCertificateEntry(String),abstractboolean,"true if the entry identified by the given alias contains a trusted certificate, false otherwise."
java.security.KeyStoreSpi.engineGetCertificateAlias(Certificate),abstractString,"the alias name of the first entry with matching certificate, or null if no such entry exists in this keystore."
"java.security.KeyStoreSpi.engineStore(OutputStream,char[])",abstractvoid,
java.security.KeyStoreSpi.engineStore(KeyStore.LoadStoreParameter),void,
"java.security.KeyStoreSpi.engineLoad(InputStream,char[])",abstractvoid,
java.security.KeyStoreSpi.engineLoad(KeyStore.LoadStoreParameter),void,
"java.security.KeyStoreSpi.engineGetEntry(String,KeyStore.ProtectionParameter)",KeyStore.Entry,"the KeyStore.Entry for the specified alias, or null if there is no such entry"
"java.security.KeyStoreSpi.engineSetEntry(String,KeyStore.Entry,KeyStore.ProtectionParameter)",void,
"java.security.KeyStoreSpi.engineEntryInstanceOf(String,Class&lt;?)",boolean,"true if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass, false otherwise"
java.security.MessageDigest.getInstance(String),MessageDigest,a Message Digest object that implements the specified algorithm.
"java.security.MessageDigest.getInstance(String,String)",MessageDigest,a MessageDigest object that implements the specified algorithm.
"java.security.MessageDigest.getInstance(String,Provider)",MessageDigest,a MessageDigest object that implements the specified algorithm.
java.security.MessageDigest.getProvider(),Provider,the provider of this message digest object
java.security.MessageDigest.update(byte),void,
"java.security.MessageDigest.update(byte[],int,int)",void,
java.security.MessageDigest.update(byte[]),void,
java.security.MessageDigest.update(ByteBuffer),void,
java.security.MessageDigest.digest(),byte[],the array of bytes for the resulting hash value.
"java.security.MessageDigest.digest(byte[],int,int)",int,the number of bytes placed into buf
java.security.MessageDigest.digest(byte[]),byte[],the array of bytes for the resulting hash value.
java.security.MessageDigest.toString(),String,a string representation of the object.
"java.security.MessageDigest.isEqual(byte[],byte[])",boolean,"true if the digests are equal, false otherwise."
java.security.MessageDigest.reset(),void,
java.security.MessageDigest.getAlgorithm(),String,the name of the algorithm
java.security.MessageDigest.getDigestLength(),int,"the digest length in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable."
java.security.MessageDigest.clone(),Object,a clone if the implementation is cloneable.
java.security.MessageDigestSpi.engineGetDigestLength(),int,the digest length in bytes.
java.security.MessageDigestSpi.engineUpdate(byte),abstractvoid,
"java.security.MessageDigestSpi.engineUpdate(byte[],int,int)",abstractvoid,
java.security.MessageDigestSpi.engineUpdate(ByteBuffer),void,
java.security.MessageDigestSpi.engineDigest(),abstractbyte[],the array of bytes for the resulting hash value.
"java.security.MessageDigestSpi.engineDigest(byte[],int,int)",int,the length of the digest stored in the output buffer.
java.security.MessageDigestSpi.engineReset(),abstractvoid,
java.security.MessageDigestSpi.clone(),Object,a clone if the implementation is cloneable.
java.security.Permission.checkGuard(Object),void,
java.security.Permission.implies(Permission),abstractboolean,"true if the specified permission is implied by this object, false if not."
java.security.Permission.equals(Object),abstractboolean,true if both Permission objects are equivalent.
java.security.Permission.hashCode(),abstractint,
java.security.Permission.getName(),String,the name of this Permission.
java.security.Permission.getActions(),abstractString,the actions of this Permission.
java.security.Permission.newPermissionCollection(),PermissionCollection,"a new PermissionCollection object for this type of Permission, or null if one is not defined."
java.security.Permission.toString(),String,information about this Permission.
java.security.PermissionCollection.add(Permission),abstractvoid,
java.security.PermissionCollection.implies(Permission),abstractboolean,"true if ""permission"" is implied by the permissions in the collection, false if not."
java.security.PermissionCollection.elements(),abstractEnumeration&lt;Permission&gt;,an enumeration of all the Permissions.
java.security.PermissionCollection.setReadOnly(),void,
java.security.PermissionCollection.isReadOnly(),boolean,"true if this PermissionCollection object is marked as readonly, false otherwise."
java.security.PermissionCollection.toString(),String,"information about this PermissionCollection object, as described above."
java.security.Permissions.add(Permission),void,
java.security.Permissions.implies(Permission),boolean,"true if ""permission"" is implied by the permissions in the PermissionCollection it belongs to, false if not."
java.security.Permissions.elements(),Enumeration&lt;Permission&gt;,an enumeration of all the Permissions.
java.security.PKCS12Attribute.getName(),String,the attribute's identifier
java.security.PKCS12Attribute.getValue(),String,
java.security.PKCS12Attribute.getEncoded(),byte[],a clone of the attribute's DER encoding
java.security.PKCS12Attribute.equals(Object),boolean,true if obj is a PKCS12Attribute and their DER encodings are equal.
java.security.PKCS12Attribute.hashCode(),int,the hash code
java.security.PKCS12Attribute.toString(),String,a name/value pair separated by an 'equals' symbol
java.security.Policy.getPolicy(),Policy,the installed Policy.
java.security.Policy.setPolicy(Policy),void,
"java.security.Policy.getInstance(String,Policy.Parameters)",Policy,the new Policy object.
"java.security.Policy.getInstance(String,Policy.Parameters,String)",Policy,the new Policy object.
"java.security.Policy.getInstance(String,Policy.Parameters,Provider)",Policy,the new Policy object.
java.security.Policy.getProvider(),Provider,"the Provider of this Policy, or null."
java.security.Policy.getType(),String,"the type of this Policy, or null."
java.security.Policy.getParameters(),Policy.Parameters,"Policy parameters, or null."
java.security.Policy.getPermissions(CodeSource),PermissionCollection,"a set of permissions granted to the specified CodeSource. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."
java.security.Policy.getPermissions(ProtectionDomain),PermissionCollection,"a set of permissions granted to the specified ProtectionDomain. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."
"java.security.Policy.implies(ProtectionDomain,Permission)",boolean,"true if ""permission"" is a proper subset of a permission granted to this ProtectionDomain."
java.security.Policy.refresh(),void,
"java.security.PolicySpi.engineImplies(ProtectionDomain,Permission)",abstractboolean,boolean true if the permission is granted to the domain.
java.security.PolicySpi.engineRefresh(),void,
java.security.PolicySpi.engineGetPermissions(CodeSource),PermissionCollection,"a set of permissions granted to the specified CodeSource. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."
java.security.PolicySpi.engineGetPermissions(ProtectionDomain),PermissionCollection,"a set of permissions granted to the specified ProtectionDomain. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."
java.security.ProtectionDomain.getCodeSource(),CodeSource,the CodeSource of this domain which may be null.
java.security.ProtectionDomain.getClassLoader(),ClassLoader,the ClassLoader of this domain which may be null.
java.security.ProtectionDomain.getPrincipals(),Principal[],a non-null array of principals for this domain. Returns a new array each time this method is called.
java.security.ProtectionDomain.getPermissions(),PermissionCollection,the static set of permissions for this domain which may be null.
java.security.ProtectionDomain.implies(Permission),boolean,"true if ""permission"" is implicit to this ProtectionDomain."
java.security.ProtectionDomain.toString(),String,a string representation of the object.
java.security.Provider.getName(),String,the name of this provider.
java.security.Provider.getVersion(),double,the version number for this provider.
java.security.Provider.getInfo(),String,a description of the provider and its services.
java.security.Provider.toString(),String,the string with the name and the version number for this provider.
java.security.Provider.clear(),void,
java.security.Provider.load(InputStream),void,
"java.security.Provider.putAll(Map&lt;?,?&gt;)",void,
java.security.Provider.entrySet(),"Set&lt;Map.Entry&lt;Object,Object&gt;&gt;",a set view of the mappings contained in this map
java.security.Provider.keySet(),Set&lt;Object&gt;,a set view of the keys contained in this map
java.security.Provider.values(),Collection&lt;Object&gt;,a collection view of the values contained in this map
"java.security.Provider.put(Object,Object)",Object,"the previous value of the specified key in this hashtable, or null if it did not have one"
"java.security.Provider.putIfAbsent(Object,Object)",Object,"the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"
java.security.Provider.remove(Object),Object,"the value to which the key had been mapped in this hashtable, or null if the key did not have a mapping"
"java.security.Provider.remove(Object,Object)",boolean,true if the value was removed
"java.security.Provider.replace(Object,Object,Object)",boolean,true if the value was replaced
"java.security.Provider.replace(Object,Object)",Object,"the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"
"java.security.Provider.replaceAll(BiFunction&lt;?,?,?)",void,
"java.security.Provider.compute(Object,BiFunction&lt;?,?,?)",Object,"the new value associated with the specified key, or null if none"
"java.security.Provider.computeIfAbsent(Object,Function&lt;?,?)",Object,"the current (existing or computed) value associated with the specified key, or null if the computed value is null"
"java.security.Provider.computeIfPresent(Object,BiFunction&lt;?,?,?)",Object,"the new value associated with the specified key, or null if none"
"java.security.Provider.merge(Object,Object,BiFunction&lt;?,?,?)",Object,"the new value associated with the specified key, or null if no value is associated with the key"
java.security.Provider.get(Object),Object,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
"java.security.Provider.getOrDefault(Object,Object)",Object,"the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"
"java.security.Provider.forEach(BiConsumer&lt;?,?)",void,
java.security.Provider.keys(),Enumeration&lt;Object&gt;,an enumeration of the keys in this hashtable.
java.security.Provider.elements(),Enumeration&lt;Object&gt;,an enumeration of the values in this hashtable.
java.security.Provider.getProperty(String),String,the value in this property list with the specified key value.
"java.security.Provider.getService(String,String)",Provider.Service,the service describing this Provider's matching service or null if no such service exists
java.security.Provider.getServices(),Set&lt;Provider.Service&gt;,an unmodifiable Set of all services supported by this Provider
java.security.Provider.putService(Provider.Service),void,
java.security.Provider.removeService(Provider.Service),void,
java.security.Provider.Service.getType(),String,the type of this service
java.security.Provider.Service.getAlgorithm(),String,the algorithm of this service
java.security.Provider.Service.getProvider(),Provider,the Provider of this service
java.security.Provider.Service.getClassName(),String,the name of the class implementing this service
java.security.Provider.Service.getAttribute(String),String,the value of the specified attribute or null if the attribute is not present
java.security.Provider.Service.newInstance(Object),Object,a new implementation of this service
java.security.Provider.Service.supportsParameter(Object),boolean,false if this this service cannot use the specified parameter; true if it can possibly use the parameter
java.security.Provider.Service.toString(),String,a String representation of this service.
"java.security.SecureClassLoader.defineClass(String,byte[],int,int,CodeSource)",Class&lt;?&gt;,"the Class object created from the data, and optional CodeSource."
"java.security.SecureClassLoader.defineClass(String,ByteBuffer,CodeSource)",Class&lt;?&gt;,"the Class object created from the data, and optional CodeSource."
java.security.SecureClassLoader.getPermissions(CodeSource),PermissionCollection,the permissions granted to the codesource.
java.security.SecureRandom.getInstance(String),SecureRandom,the new SecureRandom object.
"java.security.SecureRandom.getInstance(String,String)",SecureRandom,the new SecureRandom object.
"java.security.SecureRandom.getInstance(String,Provider)",SecureRandom,the new SecureRandom object.
java.security.SecureRandom.getProvider(),Provider,the provider of this SecureRandom object.
java.security.SecureRandom.getAlgorithm(),String,the name of the algorithm or unknown if the algorithm name cannot be determined.
java.security.SecureRandom.setSeed(byte[]),void,
java.security.SecureRandom.setSeed(long),void,
java.security.SecureRandom.nextBytes(byte[]),void,
java.security.SecureRandom.next(int),int,"an int containing the user-specified number of pseudo-random bits (right justified, with leading zeros)."
java.security.SecureRandom.getSeed(int),byte[],the seed bytes.
java.security.SecureRandom.generateSeed(int),byte[],the seed bytes.
java.security.SecureRandom.getInstanceStrong(),SecureRandom,a strong SecureRandom implementation as indicated by the securerandom.strongAlgorithms Security property
java.security.SecureRandomSpi.engineSetSeed(byte[]),abstractvoid,
java.security.SecureRandomSpi.engineNextBytes(byte[]),abstractvoid,
java.security.SecureRandomSpi.engineGenerateSeed(int),abstractbyte[],the seed bytes.
"java.security.Security.getAlgorithmProperty(String,String)",String,the value of the specified property.
"java.security.Security.insertProviderAt(Provider,int)",int,"the actual preference position in which the provider was added, or -1 if the provider was not added because it is already installed."
java.security.Security.addProvider(Provider),int,"the preference position in which the provider was added, or -1 if the provider was not added because it is already installed."
java.security.Security.removeProvider(String),void,
java.security.Security.getProviders(),Provider[],an array of all the installed providers.
java.security.Security.getProvider(String),Provider,the provider of the specified name.
java.security.Security.getProviders(String),Provider[],
"java.security.Security.getProviders(Map&lt;String,String&gt;)",Provider[],
java.security.Security.getProperty(String),String,the value of the security property corresponding to key.
"java.security.Security.setProperty(String,String)",void,
java.security.Security.getAlgorithms(String),Set&lt;String&gt;,a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service or an empty set if no provider supports the specified service.
java.security.Signature.getInstance(String),Signature,the new Signature object.
"java.security.Signature.getInstance(String,String)",Signature,the new Signature object.
"java.security.Signature.getInstance(String,Provider)",Signature,the new Signature object.
java.security.Signature.getProvider(),Provider,the provider of this signature object
java.security.Signature.initVerify(PublicKey),void,
java.security.Signature.initVerify(Certificate),void,
java.security.Signature.initSign(PrivateKey),void,
"java.security.Signature.initSign(PrivateKey,SecureRandom)",void,
java.security.Signature.sign(),byte[],the signature bytes of the signing operation's result.
"java.security.Signature.sign(byte[],int,int)",int,the number of bytes placed into outbuf.
java.security.Signature.verify(byte[]),boolean,"true if the signature was verified, false if not."
"java.security.Signature.verify(byte[],int,int)",boolean,"true if the signature was verified, false if not."
java.security.Signature.update(byte),void,
java.security.Signature.update(byte[]),void,
"java.security.Signature.update(byte[],int,int)",void,
java.security.Signature.update(ByteBuffer),void,
java.security.Signature.getAlgorithm(),String,the name of the algorithm for this signature object.
java.security.Signature.toString(),String,a string representation of this signature object.
"java.security.Signature.setParameter(String,Object)",void,
java.security.Signature.setParameter(AlgorithmParameterSpec),void,
java.security.Signature.getParameters(),AlgorithmParameters,"the parameters used with this signature, or null"
java.security.Signature.getParameter(String),Object,"the object that represents the parameter value, or null if there is none."
java.security.Signature.clone(),Object,a clone if the implementation is cloneable.
java.security.SignatureSpi.engineInitVerify(PublicKey),abstractvoid,
java.security.SignatureSpi.engineInitSign(PrivateKey),abstractvoid,
"java.security.SignatureSpi.engineInitSign(PrivateKey,SecureRandom)",void,
java.security.SignatureSpi.engineUpdate(byte),abstractvoid,
"java.security.SignatureSpi.engineUpdate(byte[],int,int)",abstractvoid,
java.security.SignatureSpi.engineUpdate(ByteBuffer),void,
java.security.SignatureSpi.engineSign(),abstractbyte[],the signature bytes of the signing operation's result.
"java.security.SignatureSpi.engineSign(byte[],int,int)",int,the number of bytes placed into outbuf
java.security.SignatureSpi.engineVerify(byte[]),abstractboolean,"true if the signature was verified, false if not."
"java.security.SignatureSpi.engineVerify(byte[],int,int)",boolean,"true if the signature was verified, false if not."
"java.security.SignatureSpi.engineSetParameter(String,Object)",abstractvoid,
java.security.SignatureSpi.engineSetParameter(AlgorithmParameterSpec),void,
java.security.SignatureSpi.engineGetParameters(),AlgorithmParameters,"the parameters used with this signature engine, or null"
java.security.SignatureSpi.engineGetParameter(String),abstractObject,"the object that represents the parameter value, or null if there is none."
java.security.SignatureSpi.clone(),Object,a clone if the implementation is cloneable.
java.security.SignedObject.getObject(),Object,the encapsulated object.
java.security.SignedObject.getSignature(),byte[],the signature. Returns a new array each time this method is called.
java.security.SignedObject.getAlgorithm(),String,the signature algorithm name.
"java.security.SignedObject.verify(PublicKey,Signature)",boolean,"true if the signature is valid, false otherwise"
java.security.Signer.getPrivateKey(),PrivateKey,"this signer's private key, or null if the private key has not yet been set."
java.security.Signer.setKeyPair(KeyPair),void,
java.security.Signer.toString(),String,a string of information about the signer.
java.security.Timestamp.getTimestamp(),Date,The timestamp's date and time.
java.security.Timestamp.getSignerCertPath(),CertPath,The TSA's certificate path.
java.security.Timestamp.hashCode(),int,a hash code value for this timestamp.
java.security.Timestamp.equals(Object),boolean,"true if the timestamp are considered equal, false otherwise."
java.security.Timestamp.toString(),String,A string comprising the date and time of the timestamp and its signer's certificate.
java.security.UnresolvedPermission.implies(Permission),boolean,false.
java.security.UnresolvedPermission.equals(Object),boolean,"true if obj is an UnresolvedPermission, and has the same type (class) name, permission name, actions, and certificates as this object."
java.security.UnresolvedPermission.hashCode(),int,a hash code value for this object.
java.security.UnresolvedPermission.getActions(),String,"the empty string """"."
java.security.UnresolvedPermission.getUnresolvedType(),String,the type (class name) of the underlying permission that has not been resolved
java.security.UnresolvedPermission.getUnresolvedName(),String,"the target name of the underlying permission that has not been resolved, or null, if there is no target name"
java.security.UnresolvedPermission.getUnresolvedActions(),String,"the actions for the underlying permission that has not been resolved, or null if there are no actions"
java.security.UnresolvedPermission.getUnresolvedCerts(),Certificate[],"the signer certificates for the underlying permission that has not been resolved, or null, if there are no signer certificates. Returns a new array each time this method is called."
java.security.UnresolvedPermission.toString(),String,information about this UnresolvedPermission.
java.security.UnresolvedPermission.newPermissionCollection(),PermissionCollection,a new PermissionCollection object suitable for storing UnresolvedPermissions.
java.security.URIParameter.getURI(),URI,uri the URI.
java.security.cert.Certificate.getType(),String,the type of this certificate.
java.security.cert.Certificate.equals(Object),boolean,"true iff the encoded forms of the two certificates match, false otherwise."
java.security.cert.Certificate.hashCode(),int,the hashcode value.
java.security.cert.Certificate.getEncoded(),abstractbyte[],the encoded form of this certificate
java.security.cert.Certificate.verify(PublicKey),abstractvoid,
"java.security.cert.Certificate.verify(PublicKey,String)",abstractvoid,
"java.security.cert.Certificate.verify(PublicKey,Provider)",void,
java.security.cert.Certificate.toString(),abstractString,a string representation of this certificate.
java.security.cert.Certificate.getPublicKey(),abstractPublicKey,the public key.
java.security.cert.Certificate.writeReplace(),Object,the alternate Certificate object to be serialized
java.security.cert.Certificate.CertificateRep.readResolve(),Object,the resolved Certificate Object
java.security.cert.CertificateFactory.getInstance(String),CertificateFactory,a certificate factory object for the specified type.
"java.security.cert.CertificateFactory.getInstance(String,String)",CertificateFactory,a certificate factory object for the specified type.
"java.security.cert.CertificateFactory.getInstance(String,Provider)",CertificateFactory,a certificate factory object for the specified type.
java.security.cert.CertificateFactory.getProvider(),Provider,the provider of this certificate factory.
java.security.cert.CertificateFactory.getType(),String,the name of the certificate type associated with this certificate factory.
java.security.cert.CertificateFactory.generateCertificate(InputStream),Certificate,a certificate object initialized with the data from the input stream.
java.security.cert.CertificateFactory.getCertPathEncodings(),Iterator&lt;String&gt;,an Iterator over the names of the supported CertPath encodings (as Strings)
java.security.cert.CertificateFactory.generateCertPath(InputStream),CertPath,a CertPath initialized with the data from the InputStream
"java.security.cert.CertificateFactory.generateCertPath(InputStream,String)",CertPath,a CertPath initialized with the data from the InputStream
java.security.cert.CertificateFactory.generateCertPath(List&lt;?),CertPath,a CertPath initialized with the supplied list of certificates
java.security.cert.CertificateFactory.generateCertificates(InputStream),Collection&lt;? extends Certificate&gt;,a (possibly empty) collection view of java.security.cert.Certificate objects initialized with the data from the input stream.
java.security.cert.CertificateFactory.generateCRL(InputStream),CRL,a CRL object initialized with the data from the input stream.
java.security.cert.CertificateFactory.generateCRLs(InputStream),Collection&lt;? extends CRL&gt;,a (possibly empty) collection view of java.security.cert.CRL objects initialized with the data from the input stream.
java.security.cert.CertificateFactorySpi.engineGenerateCertificate(InputStream),abstractCertificate,a certificate object initialized with the data from the input stream.
java.security.cert.CertificateFactorySpi.engineGenerateCertPath(InputStream),CertPath,a CertPath initialized with the data from the InputStream
"java.security.cert.CertificateFactorySpi.engineGenerateCertPath(InputStream,String)",CertPath,a CertPath initialized with the data from the InputStream
java.security.cert.CertificateFactorySpi.engineGenerateCertPath(List&lt;?),CertPath,a CertPath initialized with the supplied list of certificates
java.security.cert.CertificateFactorySpi.engineGetCertPathEncodings(),Iterator&lt;String&gt;,an Iterator over the names of the supported CertPath encodings (as Strings)
java.security.cert.CertificateFactorySpi.engineGenerateCertificates(InputStream),abstractCollection&lt;? extends Certificate&gt;,a (possibly empty) collection view of java.security.cert.Certificate objects initialized with the data from the input stream.
java.security.cert.CertificateFactorySpi.engineGenerateCRL(InputStream),abstractCRL,a CRL object initialized with the data from the input stream.
java.security.cert.CertificateFactorySpi.engineGenerateCRLs(InputStream),abstractCollection&lt;? extends CRL&gt;,a (possibly empty) collection view of java.security.cert.CRL objects initialized with the data from the input stream.
java.security.cert.CertPath.getType(),String,the type of Certificates in this certification path (never null)
java.security.cert.CertPath.getEncodings(),abstractIterator&lt;String&gt;,an Iterator over the names of the supported encodings (as Strings)
java.security.cert.CertPath.equals(Object),boolean,"true if the specified object is equal to this certification path, false otherwise"
java.security.cert.CertPath.hashCode(),int,the hashcode value for this certification path
java.security.cert.CertPath.toString(),String,a string representation of this certification path
java.security.cert.CertPath.getEncoded(),abstractbyte[],the encoded bytes
java.security.cert.CertPath.getEncoded(String),abstractbyte[],the encoded bytes
java.security.cert.CertPath.getCertificates(),abstractList&lt;? extends Certificate&gt;,"an immutable List of Certificates (may be empty, but not null)"
java.security.cert.CertPath.writeReplace(),Object,the CertPathRep to be serialized
java.security.cert.CertPath.CertPathRep.readResolve(),Object,the resolved CertPath object
java.security.cert.CertPathBuilder.getInstance(String),CertPathBuilder,a CertPathBuilder object that implements the specified algorithm.
"java.security.cert.CertPathBuilder.getInstance(String,String)",CertPathBuilder,a CertPathBuilder object that implements the specified algorithm.
"java.security.cert.CertPathBuilder.getInstance(String,Provider)",CertPathBuilder,a CertPathBuilder object that implements the specified algorithm.
java.security.cert.CertPathBuilder.getProvider(),Provider,the provider of this CertPathBuilder
java.security.cert.CertPathBuilder.getAlgorithm(),String,the name of the algorithm of this CertPathBuilder
java.security.cert.CertPathBuilder.build(CertPathParameters),CertPathBuilderResult,the result of the build algorithm
java.security.cert.CertPathBuilder.getDefaultType(),String,"the default CertPathBuilder type as specified by the certpathbuilder.type security property, or the string ""PKIX"" if no such property exists."
java.security.cert.CertPathBuilder.getRevocationChecker(),CertPathChecker,a CertPathChecker
java.security.cert.CertPathBuilderSpi.engineBuild(CertPathParameters),abstractCertPathBuilderResult,the result of the build algorithm
java.security.cert.CertPathBuilderSpi.engineGetRevocationChecker(),CertPathChecker,a CertPathChecker that this implementation uses to check the revocation status of certificates
java.security.cert.CertPathValidator.getInstance(String),CertPathValidator,a CertPathValidator object that implements the specified algorithm.
"java.security.cert.CertPathValidator.getInstance(String,String)",CertPathValidator,a CertPathValidator object that implements the specified algorithm.
"java.security.cert.CertPathValidator.getInstance(String,Provider)",CertPathValidator,a CertPathValidator object that implements the specified algorithm.
java.security.cert.CertPathValidator.getProvider(),Provider,the Provider of this CertPathValidator
java.security.cert.CertPathValidator.getAlgorithm(),String,the algorithm name of this CertPathValidator
"java.security.cert.CertPathValidator.validate(CertPath,CertPathParameters)",CertPathValidatorResult,the result of the validation algorithm
java.security.cert.CertPathValidator.getDefaultType(),String,"the default CertPathValidator type as specified by the certpathvalidator.type security property, or the string ""PKIX"" if no such property exists."
java.security.cert.CertPathValidator.getRevocationChecker(),CertPathChecker,a CertPathChecker
"java.security.cert.CertPathValidatorSpi.engineValidate(CertPath,CertPathParameters)",abstractCertPathValidatorResult,the result of the validation algorithm
java.security.cert.CertPathValidatorSpi.engineGetRevocationChecker(),CertPathChecker,a CertPathChecker that this implementation uses to check the revocation status of certificates
java.security.cert.CertStore.getCertificates(CertSelector),Collection&lt;? extends Certificate&gt;,A Collection of Certificates that match the specified selector (never null)
java.security.cert.CertStore.getCRLs(CRLSelector),Collection&lt;? extends CRL&gt;,A Collection of CRLs that match the specified selector (never null)
"java.security.cert.CertStore.getInstance(String,CertStoreParameters)",CertStore,a CertStore object that implements the specified CertStore type.
"java.security.cert.CertStore.getInstance(String,CertStoreParameters,String)",CertStore,a CertStore object that implements the specified type.
"java.security.cert.CertStore.getInstance(String,CertStoreParameters,Provider)",CertStore,a CertStore object that implements the specified type.
java.security.cert.CertStore.getCertStoreParameters(),CertStoreParameters,the parameters used to initialize this CertStore (may be null)
java.security.cert.CertStore.getType(),String,the type of this CertStore
java.security.cert.CertStore.getProvider(),Provider,the provider of this CertStore
java.security.cert.CertStore.getDefaultType(),String,"the default CertStore type as specified by the certstore.type security property, or the string ""LDAP"" if no such property exists."
java.security.cert.CertStoreSpi.engineGetCertificates(CertSelector),abstractCollection&lt;? extends Certificate&gt;,A Collection of Certificates that match the specified selector (never null)
java.security.cert.CertStoreSpi.engineGetCRLs(CRLSelector),abstractCollection&lt;? extends CRL&gt;,A Collection of CRLs that match the specified selector (never null)
java.security.cert.CollectionCertStoreParameters.getCollection(),Collection&lt;?&gt;,the Collection (never null)
java.security.cert.CollectionCertStoreParameters.clone(),Object,the copy
java.security.cert.CollectionCertStoreParameters.toString(),String,a formatted string describing the parameters
java.security.cert.CRL.getType(),String,the type of this CRL.
java.security.cert.CRL.toString(),abstractString,a string representation of this CRL.
java.security.cert.CRL.isRevoked(Certificate),abstractboolean,"true if the given certificate is on this CRL, false otherwise."
java.security.cert.LDAPCertStoreParameters.getServerName(),String,the name (not null)
java.security.cert.LDAPCertStoreParameters.getPort(),int,the port number
java.security.cert.LDAPCertStoreParameters.clone(),Object,the copy
java.security.cert.LDAPCertStoreParameters.toString(),String,a formatted string describing the parameters
java.security.cert.PKIXBuilderParameters.setMaxPathLength(int),void,
java.security.cert.PKIXBuilderParameters.getMaxPathLength(),int,"the maximum number of non-self-issued intermediate certificates that may exist in a certification path, or -1 if there is no limit"
java.security.cert.PKIXBuilderParameters.toString(),String,a formatted string describing the parameters
java.security.cert.PKIXCertPathBuilderResult.getCertPath(),CertPath,the built and validated CertPath (never null)
java.security.cert.PKIXCertPathBuilderResult.toString(),String,a String describing the contents of this PKIXCertPathBuilderResult
java.security.cert.PKIXCertPathChecker.init(boolean),abstractvoid,
java.security.cert.PKIXCertPathChecker.isForwardCheckingSupported(),abstractboolean,"true if forward checking is supported, false otherwise"
java.security.cert.PKIXCertPathChecker.getSupportedExtensions(),abstractSet&lt;String&gt;,"an immutable Set of X.509 extension OIDs (in String format) supported by this PKIXCertPathChecker, or null if no extensions are supported"
"java.security.cert.PKIXCertPathChecker.check(Certificate,Collection&lt;String&gt;)",abstractvoid,
java.security.cert.PKIXCertPathChecker.check(Certificate),void,
java.security.cert.PKIXCertPathChecker.clone(),Object,a copy of this PKIXCertPathChecker
java.security.cert.PKIXCertPathValidatorResult.getTrustAnchor(),TrustAnchor,the TrustAnchor (never null)
java.security.cert.PKIXCertPathValidatorResult.getPolicyTree(),PolicyNode,"the root node of the valid policy tree, or null if there are no valid policies"
java.security.cert.PKIXCertPathValidatorResult.getPublicKey(),PublicKey,the public key of the subject (never null)
java.security.cert.PKIXCertPathValidatorResult.clone(),Object,the copy
java.security.cert.PKIXCertPathValidatorResult.toString(),String,a String describing the contents of this PKIXCertPathValidatorResult
java.security.cert.PKIXParameters.getTrustAnchors(),Set&lt;TrustAnchor&gt;,an immutable Set of TrustAnchors (never null)
java.security.cert.PKIXParameters.setTrustAnchors(Set&lt;TrustAnchor&gt;),void,
java.security.cert.PKIXParameters.getInitialPolicies(),Set&lt;String&gt;,"an immutable Set of initial policy OIDs in String format, or an empty Set (implying any policy is acceptable). Never returns null."
java.security.cert.PKIXParameters.setInitialPolicies(Set&lt;String&gt;),void,
java.security.cert.PKIXParameters.setCertStores(List&lt;CertStore&gt;),void,
java.security.cert.PKIXParameters.addCertStore(CertStore),void,
java.security.cert.PKIXParameters.getCertStores(),List&lt;CertStore&gt;,"an immutable List of CertStores (may be empty, but never null)"
java.security.cert.PKIXParameters.setRevocationEnabled(boolean),void,
java.security.cert.PKIXParameters.isRevocationEnabled(),boolean,the current value of the RevocationEnabled flag
java.security.cert.PKIXParameters.setExplicitPolicyRequired(boolean),void,
java.security.cert.PKIXParameters.isExplicitPolicyRequired(),boolean,"true if explicit policy is required, false otherwise"
java.security.cert.PKIXParameters.setPolicyMappingInhibited(boolean),void,
java.security.cert.PKIXParameters.isPolicyMappingInhibited(),boolean,"true if policy mapping is inhibited, false otherwise"
java.security.cert.PKIXParameters.setAnyPolicyInhibited(boolean),void,
java.security.cert.PKIXParameters.isAnyPolicyInhibited(),boolean,"true if the any policy OID is inhibited, false otherwise"
java.security.cert.PKIXParameters.setPolicyQualifiersRejected(boolean),void,
java.security.cert.PKIXParameters.getPolicyQualifiersRejected(),boolean,the current value of the PolicyQualifiersRejected flag
java.security.cert.PKIXParameters.getDate(),Date,"the Date, or null if not set"
java.security.cert.PKIXParameters.setDate(Date),void,
java.security.cert.PKIXParameters.setCertPathCheckers(List&lt;PKIXCertPathChecker&gt;),void,
java.security.cert.PKIXParameters.getCertPathCheckers(),List&lt;PKIXCertPathChecker&gt;,"an immutable List of PKIXCertPathCheckers (may be empty, but not null)"
java.security.cert.PKIXParameters.addCertPathChecker(PKIXCertPathChecker),void,
java.security.cert.PKIXParameters.getSigProvider(),String,the signature provider's name (or null)
java.security.cert.PKIXParameters.setSigProvider(String),void,
java.security.cert.PKIXParameters.getTargetCertConstraints(),CertSelector,a CertSelector specifying the constraints on the target certificate (or null)
java.security.cert.PKIXParameters.setTargetCertConstraints(CertSelector),void,
java.security.cert.PKIXParameters.clone(),Object,a copy of this PKIXParameters object
java.security.cert.PKIXParameters.toString(),String,a formatted string describing the parameters.
java.security.cert.PKIXRevocationChecker.setOcspResponder(URI),void,
java.security.cert.PKIXRevocationChecker.getOcspResponder(),URI,"the responder URI, or null if not set"
java.security.cert.PKIXRevocationChecker.setOcspResponderCert(X509Certificate),void,
java.security.cert.PKIXRevocationChecker.getOcspResponderCert(),X509Certificate,"the responder's certificate, or null if not set"
java.security.cert.PKIXRevocationChecker.setOcspExtensions(List&lt;Extension&gt;),void,
java.security.cert.PKIXRevocationChecker.getOcspExtensions(),List&lt;Extension&gt;,an unmodifiable list of extensions. The list is empty if no extensions have been specified.
"java.security.cert.PKIXRevocationChecker.setOcspResponses(Map&lt;X509Certificate,byte[]&gt;)",void,
java.security.cert.PKIXRevocationChecker.getOcspResponses(),"Map&lt;X509Certificate,byte[]&gt;",a map of OCSP responses. Each key is an X509Certificate that maps to the corresponding DER-encoded OCSP response for that certificate. A deep copy of the map is returned to protect against subsequent modification. Returns an empty map if no responses have been specified.
java.security.cert.PKIXRevocationChecker.setOptions(Set&lt;PKIXRevocationChecker.Option&gt;),void,
java.security.cert.PKIXRevocationChecker.getOptions(),Set&lt;PKIXRevocationChecker.Option&gt;,an unmodifiable set of revocation options. The set is empty if no options have been specified.
java.security.cert.PKIXRevocationChecker.getSoftFailExceptions(),abstractList&lt;CertPathValidatorException&gt;,an unmodifiable list containing the ignored exceptions. The list is empty if no exceptions have been ignored.
java.security.cert.PKIXRevocationChecker.clone(),PKIXRevocationChecker,a copy of this PKIXCertPathChecker
java.security.cert.PolicyQualifierInfo.getPolicyQualifierId(),String,the OID (never null)
java.security.cert.PolicyQualifierInfo.getEncoded(),byte[],"the ASN.1 DER encoded bytes (never null). Note that a copy is returned, so the data is cloned each time this method is called."
java.security.cert.PolicyQualifierInfo.getPolicyQualifier(),byte[],"the ASN.1 DER encoded bytes of the qualifier field. Note that a copy is returned, so the data is cloned each time this method is called."
java.security.cert.PolicyQualifierInfo.toString(),String,a String describing the contents of this PolicyQualifierInfo
java.security.cert.TrustAnchor.getTrustedCert(),X509Certificate,a trusted X509Certificate or null if the trust anchor was not specified as a trusted certificate
java.security.cert.TrustAnchor.getCA(),X500Principal,"the X.500 distinguished name of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair"
java.security.cert.TrustAnchor.getCAName(),String,"the X.500 distinguished name of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair"
java.security.cert.TrustAnchor.getCAPublicKey(),PublicKey,"the public key of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair"
java.security.cert.TrustAnchor.getNameConstraints(),byte[],"a byte array containing the ASN.1 DER encoding of a NameConstraints extension used for checking name constraints, or null if not set."
java.security.cert.TrustAnchor.toString(),String,a formatted string describing the TrustAnchor
java.security.cert.X509Certificate.checkValidity(),abstractvoid,
java.security.cert.X509Certificate.checkValidity(Date),abstractvoid,
java.security.cert.X509Certificate.getVersion(),abstractint,"the version number, i.e. 1, 2 or 3."
java.security.cert.X509Certificate.getSerialNumber(),abstractBigInteger,the serial number.
java.security.cert.X509Certificate.getIssuerDN(),abstractPrincipal,a Principal whose name is the issuer distinguished name.
java.security.cert.X509Certificate.getIssuerX500Principal(),X500Principal,an X500Principal representing the issuer distinguished name
java.security.cert.X509Certificate.getSubjectDN(),abstractPrincipal,a Principal whose name is the subject name.
java.security.cert.X509Certificate.getSubjectX500Principal(),X500Principal,an X500Principal representing the subject distinguished name
java.security.cert.X509Certificate.getNotBefore(),abstractDate,the start date of the validity period.
java.security.cert.X509Certificate.getNotAfter(),abstractDate,the end date of the validity period.
java.security.cert.X509Certificate.getTBSCertificate(),abstractbyte[],the DER-encoded certificate information.
java.security.cert.X509Certificate.getSignature(),abstractbyte[],the signature.
java.security.cert.X509Certificate.getSigAlgName(),abstractString,the signature algorithm name.
java.security.cert.X509Certificate.getSigAlgOID(),abstractString,the signature algorithm OID string.
java.security.cert.X509Certificate.getSigAlgParams(),abstractbyte[],"the DER-encoded signature algorithm parameters, or null if no parameters are present."
java.security.cert.X509Certificate.getIssuerUniqueID(),abstractboolean[],the issuer unique identifier or null if it is not present in the certificate.
java.security.cert.X509Certificate.getSubjectUniqueID(),abstractboolean[],the subject unique identifier or null if it is not present in the certificate.
java.security.cert.X509Certificate.getKeyUsage(),abstractboolean[],"the KeyUsage extension of this certificate, represented as an array of booleans. The order of KeyUsage values in the array is the same as in the above ASN.1 definition. The array will contain a value for each KeyUsage defined above. If the KeyUsage list encoded in the certificate is longer than the above list, it will not be truncated. Returns null if this certificate does not contain a KeyUsage extension."
java.security.cert.X509Certificate.getExtendedKeyUsage(),List&lt;String&gt;,"the ExtendedKeyUsage extension of this certificate, as an unmodifiable list of object identifiers represented as Strings. Returns null if this certificate does not contain an ExtendedKeyUsage extension."
java.security.cert.X509Certificate.getBasicConstraints(),abstractint,"the value of pathLenConstraint if the BasicConstraints extension is present in the certificate and the subject of the certificate is a CA, otherwise -1. If the subject of the certificate is a CA and pathLenConstraint does not appear, Integer.MAX_VALUE is returned to indicate that there is no limit to the allowed length of the certification path."
java.security.cert.X509Certificate.getSubjectAlternativeNames(),Collection&lt;List&lt;?&gt;&gt;,an immutable Collection of subject alternative names (or null)
java.security.cert.X509Certificate.getIssuerAlternativeNames(),Collection&lt;List&lt;?&gt;&gt;,an immutable Collection of issuer alternative names (or null)
"java.security.cert.X509Certificate.verify(PublicKey,Provider)",void,
java.security.cert.X509CertSelector.setCertificate(X509Certificate),void,
java.security.cert.X509CertSelector.setSerialNumber(BigInteger),void,
java.security.cert.X509CertSelector.setIssuer(X500Principal),void,
java.security.cert.X509CertSelector.setIssuer(String),void,
java.security.cert.X509CertSelector.setIssuer(byte[]),void,
java.security.cert.X509CertSelector.setSubject(X500Principal),void,
java.security.cert.X509CertSelector.setSubject(String),void,
java.security.cert.X509CertSelector.setSubject(byte[]),void,
java.security.cert.X509CertSelector.setSubjectKeyIdentifier(byte[]),void,
java.security.cert.X509CertSelector.setAuthorityKeyIdentifier(byte[]),void,
java.security.cert.X509CertSelector.setCertificateValid(Date),void,
java.security.cert.X509CertSelector.setPrivateKeyValid(Date),void,
java.security.cert.X509CertSelector.setSubjectPublicKeyAlgID(String),void,
java.security.cert.X509CertSelector.setSubjectPublicKey(PublicKey),void,
java.security.cert.X509CertSelector.setSubjectPublicKey(byte[]),void,
java.security.cert.X509CertSelector.setKeyUsage(boolean[]),void,
java.security.cert.X509CertSelector.setExtendedKeyUsage(Set&lt;String&gt;),void,
java.security.cert.X509CertSelector.setMatchAllSubjectAltNames(boolean),void,
java.security.cert.X509CertSelector.setSubjectAlternativeNames(Collection&lt;List&lt;?&gt;&gt;),void,
"java.security.cert.X509CertSelector.addSubjectAlternativeName(int,String)",void,
"java.security.cert.X509CertSelector.addSubjectAlternativeName(int,byte[])",void,
java.security.cert.X509CertSelector.setNameConstraints(byte[]),void,
java.security.cert.X509CertSelector.setBasicConstraints(int),void,
java.security.cert.X509CertSelector.setPolicy(Set&lt;String&gt;),void,
java.security.cert.X509CertSelector.setPathToNames(Collection&lt;List&lt;?&gt;&gt;),void,
"java.security.cert.X509CertSelector.addPathToName(int,String)",void,
"java.security.cert.X509CertSelector.addPathToName(int,byte[])",void,
java.security.cert.X509CertSelector.getCertificate(),X509Certificate,the X509Certificate to match (or null)
java.security.cert.X509CertSelector.getSerialNumber(),BigInteger,the certificate serial number to match (or null)
java.security.cert.X509CertSelector.getIssuer(),X500Principal,the required issuer distinguished name as X500Principal (or null)
java.security.cert.X509CertSelector.getIssuerAsString(),String,the required issuer distinguished name in RFC 2253 format (or null)
java.security.cert.X509CertSelector.getIssuerAsBytes(),byte[],a byte array containing the required issuer distinguished name in ASN.1 DER format (or null)
java.security.cert.X509CertSelector.getSubject(),X500Principal,the required subject distinguished name as X500Principal (or null)
java.security.cert.X509CertSelector.getSubjectAsString(),String,the required subject distinguished name in RFC 2253 format (or null)
java.security.cert.X509CertSelector.getSubjectAsBytes(),byte[],a byte array containing the required subject distinguished name in ASN.1 DER format (or null)
java.security.cert.X509CertSelector.getSubjectKeyIdentifier(),byte[],the key identifier (or null)
java.security.cert.X509CertSelector.getAuthorityKeyIdentifier(),byte[],the key identifier (or null)
java.security.cert.X509CertSelector.getCertificateValid(),Date,the Date to check (or null)
java.security.cert.X509CertSelector.getPrivateKeyValid(),Date,the Date to check (or null)
java.security.cert.X509CertSelector.getSubjectPublicKeyAlgID(),String,the object identifier (OID) of the signature algorithm to check for (or null). An OID is represented by a set of nonnegative integers separated by periods.
java.security.cert.X509CertSelector.getSubjectPublicKey(),PublicKey,the subject public key to check for (or null)
java.security.cert.X509CertSelector.getKeyUsage(),boolean[],a boolean array in the same format as the boolean array returned by X509Certificate.getKeyUsage(). Or null.
java.security.cert.X509CertSelector.getExtendedKeyUsage(),Set&lt;String&gt;,an immutable Set of key purpose OIDs in string format (or null)
java.security.cert.X509CertSelector.getMatchAllSubjectAltNames(),boolean,true if the flag is enabled; false if the flag is disabled. The flag is true by default.
java.security.cert.X509CertSelector.getSubjectAlternativeNames(),Collection&lt;List&lt;?&gt;&gt;,a Collection of names (or null)
java.security.cert.X509CertSelector.getNameConstraints(),byte[],a byte array containing the ASN.1 DER encoding of a NameConstraints extension used for checking name constraints. null if no name constraints check will be performed.
java.security.cert.X509CertSelector.getBasicConstraints(),int,the value for the basic constraints constraint
java.security.cert.X509CertSelector.getPolicy(),Set&lt;String&gt;,an immutable Set of certificate policy OIDs in string format (or null)
java.security.cert.X509CertSelector.getPathToNames(),Collection&lt;List&lt;?&gt;&gt;,a Collection of names (or null)
java.security.cert.X509CertSelector.toString(),String,a String describing the contents of the CertSelector
java.security.cert.X509CertSelector.match(Certificate),boolean,"true if the Certificate should be selected, false otherwise"
java.security.cert.X509CertSelector.clone(),Object,the copy
java.security.cert.X509CRL.equals(Object),boolean,"true iff the encoded forms of the two CRLs match, false otherwise."
java.security.cert.X509CRL.hashCode(),int,the hashcode value.
java.security.cert.X509CRL.getEncoded(),abstractbyte[],the encoded form of this certificate
java.security.cert.X509CRL.verify(PublicKey),abstractvoid,
"java.security.cert.X509CRL.verify(PublicKey,String)",abstractvoid,
"java.security.cert.X509CRL.verify(PublicKey,Provider)",void,
java.security.cert.X509CRL.getVersion(),abstractint,"the version number, i.e. 1 or 2."
java.security.cert.X509CRL.getIssuerDN(),abstractPrincipal,a Principal whose name is the issuer distinguished name.
java.security.cert.X509CRL.getIssuerX500Principal(),X500Principal,an X500Principal representing the issuer distinguished name
java.security.cert.X509CRL.getThisUpdate(),abstractDate,the thisUpdate date from the CRL.
java.security.cert.X509CRL.getNextUpdate(),abstractDate,"the nextUpdate date from the CRL, or null if not present."
java.security.cert.X509CRL.getRevokedCertificate(BigInteger),abstractX509CRLEntry,"the entry with the given serial number, or null if no such entry exists in this CRL."
java.security.cert.X509CRL.getRevokedCertificate(X509Certificate),X509CRLEntry,"the entry for the given certificate, or null if no such entry exists in this CRL."
java.security.cert.X509CRL.getRevokedCertificates(),abstractSet&lt;? extends X509CRLEntry&gt;,all the entries or null if there are none present.
java.security.cert.X509CRL.getTBSCertList(),abstractbyte[],the DER-encoded CRL information.
java.security.cert.X509CRL.getSignature(),abstractbyte[],the signature.
java.security.cert.X509CRL.getSigAlgName(),abstractString,the signature algorithm name.
java.security.cert.X509CRL.getSigAlgOID(),abstractString,the signature algorithm OID string.
java.security.cert.X509CRL.getSigAlgParams(),abstractbyte[],"the DER-encoded signature algorithm parameters, or null if no parameters are present."
java.security.cert.X509CRLEntry.equals(Object),boolean,"true iff the encoded forms of the two CRL entries match, false otherwise."
java.security.cert.X509CRLEntry.hashCode(),int,the hashcode value.
java.security.cert.X509CRLEntry.getEncoded(),abstractbyte[],the encoded form of this certificate
java.security.cert.X509CRLEntry.getSerialNumber(),abstractBigInteger,the serial number.
java.security.cert.X509CRLEntry.getCertificateIssuer(),X500Principal,the issuer of the X509Certificate described by this entry or null if it is issued by the CRL issuer.
java.security.cert.X509CRLEntry.getRevocationDate(),abstractDate,the revocation date.
java.security.cert.X509CRLEntry.hasExtensions(),abstractboolean,"true if this entry has extensions, false otherwise."
java.security.cert.X509CRLEntry.toString(),abstractString,a string representation of this CRL entry.
java.security.cert.X509CRLEntry.getRevocationReason(),CRLReason,"the reason the certificate has been revoked, or null if this CRL entry does not have a Reason Code extension"
java.security.cert.X509CRLSelector.setIssuers(Collection&lt;X500Principal&gt;),void,
java.security.cert.X509CRLSelector.setIssuerNames(Collection&lt;?&gt;),void,
java.security.cert.X509CRLSelector.addIssuer(X500Principal),void,
java.security.cert.X509CRLSelector.addIssuerName(String),void,
java.security.cert.X509CRLSelector.addIssuerName(byte[]),void,
java.security.cert.X509CRLSelector.setMinCRLNumber(BigInteger),void,
java.security.cert.X509CRLSelector.setMaxCRLNumber(BigInteger),void,
java.security.cert.X509CRLSelector.setDateAndTime(Date),void,
java.security.cert.X509CRLSelector.setCertificateChecking(X509Certificate),void,
java.security.cert.X509CRLSelector.getIssuers(),Collection&lt;X500Principal&gt;,an unmodifiable Collection of names (or null)
java.security.cert.X509CRLSelector.getIssuerNames(),Collection&lt;Object&gt;,a Collection of names (or null)
java.security.cert.X509CRLSelector.getMinCRL(),BigInteger,the minimum CRL number accepted (or null)
java.security.cert.X509CRLSelector.getMaxCRL(),BigInteger,the maximum CRL number accepted (or null)
java.security.cert.X509CRLSelector.getDateAndTime(),Date,the Date to match against (or null)
java.security.cert.X509CRLSelector.getCertificateChecking(),X509Certificate,the certificate being checked (or null)
java.security.cert.X509CRLSelector.toString(),String,a String describing the contents of the X509CRLSelector.
java.security.cert.X509CRLSelector.match(CRL),boolean,"true if the CRL should be selected, false otherwise"
java.security.cert.X509CRLSelector.clone(),Object,the copy
java.security.spec.DSAGenParameterSpec.getPrimePLength(),int,the length of the prime P.
java.security.spec.DSAGenParameterSpec.getSubprimeQLength(),int,the length of the sub-prime Q.
java.security.spec.DSAGenParameterSpec.getSeedLength(),int,the length of the domain parameter seed.
java.security.spec.DSAParameterSpec.getP(),BigInteger,the prime p.
java.security.spec.DSAParameterSpec.getQ(),BigInteger,the sub-prime q.
java.security.spec.DSAParameterSpec.getG(),BigInteger,the base g.
java.security.spec.DSAPrivateKeySpec.getX(),BigInteger,the private key x.
java.security.spec.DSAPrivateKeySpec.getP(),BigInteger,the prime p.
java.security.spec.DSAPrivateKeySpec.getQ(),BigInteger,the sub-prime q.
java.security.spec.DSAPrivateKeySpec.getG(),BigInteger,the base g.
java.security.spec.DSAPublicKeySpec.getY(),BigInteger,the public key y.
java.security.spec.DSAPublicKeySpec.getP(),BigInteger,the prime p.
java.security.spec.DSAPublicKeySpec.getQ(),BigInteger,the sub-prime q.
java.security.spec.DSAPublicKeySpec.getG(),BigInteger,the base g.
java.security.spec.ECFieldF2m.getFieldSize(),int,the field size in bits.
java.security.spec.ECFieldF2m.getM(),int,m with 2^m being the number of elements.
java.security.spec.ECFieldF2m.getReductionPolynomial(),BigInteger,a BigInteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial for polynomial basis or null for normal basis.
java.security.spec.ECFieldF2m.getMidTermsOfReductionPolynomial(),int[],an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis. A new array is returned each time this method is called.
java.security.spec.ECFieldF2m.equals(Object),boolean,"true if obj is an instance of ECFieldF2m and both m and the reduction polynomial match, false otherwise."
java.security.spec.ECFieldF2m.hashCode(),int,a hash code value.
java.security.spec.ECFieldFp.getFieldSize(),int,the field size in bits.
java.security.spec.ECFieldFp.getP(),BigInteger,the prime.
java.security.spec.ECFieldFp.equals(Object),boolean,"true if obj is an instance of ECFieldFp and the prime value match, false otherwise."
java.security.spec.ECFieldFp.hashCode(),int,a hash code value.
java.security.spec.ECGenParameterSpec.getName(),String,the standard or predefined name.
java.security.spec.ECParameterSpec.getCurve(),EllipticCurve,the elliptic curve that this parameter defines.
java.security.spec.ECParameterSpec.getGenerator(),ECPoint,the generator which is also known as the base point.
java.security.spec.ECParameterSpec.getOrder(),BigInteger,the order of the generator.
java.security.spec.ECParameterSpec.getCofactor(),int,the cofactor.
java.security.spec.ECPoint.getAffineX(),BigInteger,the affine x-coordinate.
java.security.spec.ECPoint.getAffineY(),BigInteger,the affine y-coordinate.
java.security.spec.ECPoint.equals(Object),boolean,"true if obj is an instance of ECPoint and the affine coordinates match, false otherwise."
java.security.spec.ECPoint.hashCode(),int,a hash code value.
java.security.spec.ECPrivateKeySpec.getS(),BigInteger,the private value S.
java.security.spec.ECPrivateKeySpec.getParams(),ECParameterSpec,the EC domain parameters.
java.security.spec.ECPublicKeySpec.getW(),ECPoint,the public point W.
java.security.spec.ECPublicKeySpec.getParams(),ECParameterSpec,the EC domain parameters.
java.security.spec.EllipticCurve.getField(),ECField,the field field that this curve is over.
java.security.spec.EllipticCurve.getA(),BigInteger,the first coefficient a.
java.security.spec.EllipticCurve.getB(),BigInteger,the second coefficient b.
java.security.spec.EllipticCurve.getSeed(),byte[],the seeding bytes seed. A new array is returned each time this method is called.
java.security.spec.EllipticCurve.equals(Object),boolean,"true if obj is an instance of EllipticCurve and the field, A, and B match, false otherwise."
java.security.spec.EllipticCurve.hashCode(),int,"a hash code value computed from the hash codes of the field, A, and B, as follows: (field.hashCode() &lt;&lt; 6) + (a.hashCode() &lt;&lt; 4) + (b.hashCode() &lt;&lt; 2)"
java.security.spec.EncodedKeySpec.getEncoded(),byte[],the encoded key. Returns a new array each time this method is called.
java.security.spec.EncodedKeySpec.getFormat(),abstractString,a string representation of the encoding format.
java.security.spec.MGF1ParameterSpec.getDigestAlgorithm(),String,the algorithm name of the message digest.
java.security.spec.PKCS8EncodedKeySpec.getEncoded(),byte[],the PKCS #8 encoding of the key. Returns a new array each time this method is called.
java.security.spec.PKCS8EncodedKeySpec.getFormat(),String,"the string ""PKCS#8""."
java.security.spec.PSSParameterSpec.getDigestAlgorithm(),String,the message digest algorithm name
java.security.spec.PSSParameterSpec.getMGFAlgorithm(),String,the mask generation function algorithm name
java.security.spec.PSSParameterSpec.getMGFParameters(),AlgorithmParameterSpec,the parameters for the mask generation function
java.security.spec.PSSParameterSpec.getSaltLength(),int,the salt length
java.security.spec.PSSParameterSpec.getTrailerField(),int,the value for the trailer field
java.security.spec.PSSParameterSpec.toString(),String,a string representation of the object.
java.security.spec.RSAKeyGenParameterSpec.getKeysize(),int,the keysize.
java.security.spec.RSAKeyGenParameterSpec.getPublicExponent(),BigInteger,the public-exponent value.
java.security.spec.RSAKeyGenParameterSpec.getKeyParams(),AlgorithmParameterSpec,"the associated parameters, may be null if not present"
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPublicExponent(),BigInteger,the public exponent.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeP(),BigInteger,the primeP.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeQ(),BigInteger,the primeQ.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentP(),BigInteger,the primeExponentP.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentQ(),BigInteger,the primeExponentQ.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getCrtCoefficient(),BigInteger,the crtCoefficient.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getOtherPrimeInfo(),RSAOtherPrimeInfo[],the otherPrimeInfo. Returns a new array each time this method is called.
java.security.spec.RSAOtherPrimeInfo.getPrime(),BigInteger,the prime.
java.security.spec.RSAOtherPrimeInfo.getExponent(),BigInteger,the primeExponent.
java.security.spec.RSAOtherPrimeInfo.getCrtCoefficient(),BigInteger,the crtCoefficient.
java.security.spec.RSAPrivateCrtKeySpec.getPublicExponent(),BigInteger,the public exponent
java.security.spec.RSAPrivateCrtKeySpec.getPrimeP(),BigInteger,the primeP
java.security.spec.RSAPrivateCrtKeySpec.getPrimeQ(),BigInteger,the primeQ
java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentP(),BigInteger,the primeExponentP
java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentQ(),BigInteger,the primeExponentQ
java.security.spec.RSAPrivateCrtKeySpec.getCrtCoefficient(),BigInteger,the crtCoefficient
java.security.spec.RSAPrivateKeySpec.getModulus(),BigInteger,the modulus
java.security.spec.RSAPrivateKeySpec.getPrivateExponent(),BigInteger,the private exponent
java.security.spec.RSAPrivateKeySpec.getParams(),AlgorithmParameterSpec,the parameters associated with this key
java.security.spec.RSAPublicKeySpec.getModulus(),BigInteger,the modulus
java.security.spec.RSAPublicKeySpec.getPublicExponent(),BigInteger,the public exponent
java.security.spec.RSAPublicKeySpec.getParams(),AlgorithmParameterSpec,the parameters associated with this key
java.security.spec.X509EncodedKeySpec.getEncoded(),byte[],the X.509 encoding of the key. Returns a new array each time this method is called.
java.security.spec.X509EncodedKeySpec.getFormat(),String,"the string ""X.509""."
java.sql.Date.setTime(long),void,
java.sql.Date.valueOf(String),Date,a java.sql.Date object representing the given date
java.sql.Date.toString(),String,a String in yyyy-mm-dd format
java.sql.Date.getHours(),int,the hour represented by this date.
java.sql.Date.getMinutes(),int,the number of minutes past the hour represented by this date.
java.sql.Date.getSeconds(),int,the number of seconds past the minute represented by this date.
java.sql.Date.setHours(int),void,
java.sql.Date.setMinutes(int),void,
java.sql.Date.setSeconds(int),void,
java.sql.Date.valueOf(LocalDate),Date,a Date object
java.sql.Date.toLocalDate(),LocalDate,a LocalDate object representing the same date value
java.sql.Date.toInstant(),Instant,an instant representing the same point on the time-line as this Date object
java.sql.DriverManager.getLogWriter(),PrintWriter,a java.io.PrintWriter object
java.sql.DriverManager.setLogWriter(PrintWriter),void,
"java.sql.DriverManager.getConnection(String,Properties)",Connection,a Connection to the URL
"java.sql.DriverManager.getConnection(String,String,String)",Connection,a connection to the URL
java.sql.DriverManager.getConnection(String),Connection,a connection to the URL
java.sql.DriverManager.getDriver(String),Driver,a Driver object representing a driver that can connect to the given URL
java.sql.DriverManager.registerDriver(Driver),void,
"java.sql.DriverManager.registerDriver(Driver,DriverAction)",void,
java.sql.DriverManager.deregisterDriver(Driver),void,
java.sql.DriverManager.getDrivers(),Enumeration&lt;Driver&gt;,the list of JDBC Drivers loaded by the caller's class loader
java.sql.DriverManager.setLoginTimeout(int),void,
java.sql.DriverManager.getLoginTimeout(),int,the driver login time limit in seconds
java.sql.DriverManager.setLogStream(PrintStream),void,
java.sql.DriverManager.getLogStream(),PrintStream,"the logging/tracing PrintStream; if disabled, is null"
java.sql.DriverManager.println(String),void,
java.sql.Time.setTime(long),void,
java.sql.Time.valueOf(String),Time,a corresponding Time object
java.sql.Time.toString(),String,a String in hh:mm:ss format
java.sql.Time.getYear(),int,"the year represented by this date, minus 1900."
java.sql.Time.getMonth(),int,the month represented by this date.
java.sql.Time.getDay(),int,the day of the week represented by this date.
java.sql.Time.getDate(),int,the day of the month represented by this date.
java.sql.Time.setYear(int),void,
java.sql.Time.setMonth(int),void,
java.sql.Time.setDate(int),void,
java.sql.Time.valueOf(LocalTime),Time,a Time object
java.sql.Time.toLocalTime(),LocalTime,a LocalTime object representing the same time value
java.sql.Time.toInstant(),Instant,an instant representing the same point on the time-line as this Date object
java.sql.Timestamp.setTime(long),void,
java.sql.Timestamp.getTime(),long,"the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this date."
java.sql.Timestamp.valueOf(String),Timestamp,corresponding Timestamp value
java.sql.Timestamp.toString(),String,a String object in yyyy-mm-dd hh:mm:ss.fffffffff format
java.sql.Timestamp.getNanos(),int,this Timestamp object's fractional seconds component
java.sql.Timestamp.setNanos(int),void,
java.sql.Timestamp.equals(Timestamp),boolean,true if the given Timestamp object is equal to this Timestamp object; false otherwise
java.sql.Timestamp.equals(Object),boolean,true if the given Object is an instance of a Timestamp that is equal to this Timestamp object; false otherwise
java.sql.Timestamp.before(Timestamp),boolean,true if this Timestamp object is earlier; false otherwise
java.sql.Timestamp.after(Timestamp),boolean,true if this Timestamp object is later; false otherwise
java.sql.Timestamp.compareTo(Timestamp),int,the value 0 if the two Timestamp objects are equal; a value less than 0 if this Timestamp object is before the given argument; and a value greater than 0 if this Timestamp object is after the given argument.
java.sql.Timestamp.compareTo(Date),int,the value 0 if this Timestamp object and the given object are equal; a value less than 0 if this Timestamp object is before the given argument; and a value greater than 0 if this Timestamp object is after the given argument.
java.sql.Timestamp.hashCode(),int,a hash code value for this object.
java.sql.Timestamp.valueOf(LocalDateTime),Timestamp,a Timestamp object
java.sql.Timestamp.toLocalDateTime(),LocalDateTime,a LocalDateTime object representing the same date-time value
java.sql.Timestamp.from(Instant),Timestamp,an Timestamp representing the same point on the time-line as the provided instant
java.sql.Timestamp.toInstant(),Instant,an instant representing the same point on the time-line
java.text.Annotation.getValue(),Object,the value of the attribute
java.text.Annotation.toString(),String,the String representation of this Annotation
java.text.AttributedCharacterIterator.Attribute.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.text.AttributedCharacterIterator.Attribute.hashCode(),int,a hash code value for this object.
java.text.AttributedCharacterIterator.Attribute.toString(),String,a string representation of the object.
java.text.AttributedCharacterIterator.Attribute.getName(),String,the name of Attribute
java.text.AttributedCharacterIterator.Attribute.readResolve(),Object,the resolved Attribute object
"java.text.AttributedString.addAttribute(AttributedCharacterIterator.Attribute,Object)",void,
"java.text.AttributedString.addAttribute(AttributedCharacterIterator.Attribute,Object,int,int)",void,
"java.text.AttributedString.addAttributes(Map&lt;?,?&gt;,int,int)",void,
java.text.AttributedString.getIterator(),AttributedCharacterIterator,An iterator providing access to the text and its attributes.
java.text.AttributedString.getIterator(AttributedCharacterIterator.Attribute[]),AttributedCharacterIterator,an iterator providing access to the entire text and its selected attributes
"java.text.AttributedString.getIterator(AttributedCharacterIterator.Attribute[],int,int)",AttributedCharacterIterator,an iterator providing access to the text and its attributes
"java.text.Bidi.createLineBidi(int,int)",Bidi,a Bidi object
java.text.Bidi.isMixed(),boolean,true if the line is not left-to-right or right-to-left.
java.text.Bidi.isLeftToRight(),boolean,true if the line is all left-to-right text and the base direction is left-to-right
java.text.Bidi.isRightToLeft(),boolean,"true if the line is all right-to-left text, and the base direction is right-to-left"
java.text.Bidi.getLength(),int,the length of text in the line
java.text.Bidi.baseIsLeftToRight(),boolean,true if the base direction is left-to-right
java.text.Bidi.getBaseLevel(),int,the base level
java.text.Bidi.getLevelAt(int),int,the resolved level of the character at offset
java.text.Bidi.getRunCount(),int,the number of level runs
java.text.Bidi.getRunLevel(int),int,the level of the run
java.text.Bidi.getRunStart(int),int,the start of the run
java.text.Bidi.getRunLimit(int),int,limit the limit of the run
"java.text.Bidi.requiresBidi(char[],int,int)",boolean,true if the range of characters requires bidi analysis
"java.text.Bidi.reorderVisually(byte[],int,Object[],int,int)",void,
java.text.Bidi.toString(),String,a string representation of the object.
java.text.BreakIterator.clone(),Object,A copy of this
java.text.BreakIterator.first(),abstractint,The character index of the first text boundary.
java.text.BreakIterator.last(),abstractint,The character index of the last text boundary.
java.text.BreakIterator.next(int),abstractint,The character index of the nth boundary from the current position or BreakIterator.DONE if either first or last text boundary has been reached.
java.text.BreakIterator.next(),abstractint,The character index of the next text boundary or BreakIterator.DONE if the current boundary is the last text boundary. Equivalent to next(1).
java.text.BreakIterator.previous(),abstractint,The character index of the previous text boundary or BreakIterator.DONE if the current boundary is the first text boundary.
java.text.BreakIterator.following(int),abstractint,The first boundary after the specified offset or BreakIterator.DONE if the last text boundary is passed in as the offset.
java.text.BreakIterator.preceding(int),int,The last boundary before the specified offset or BreakIterator.DONE if the first text boundary is passed in as the offset.
java.text.BreakIterator.isBoundary(int),boolean,"true if ""offset"" is a boundary position, false otherwise."
java.text.BreakIterator.current(),abstractint,"The text boundary returned from the above methods, first or last text boundary."
java.text.BreakIterator.getText(),abstractCharacterIterator,the text being scanned
java.text.BreakIterator.setText(String),void,
java.text.BreakIterator.setText(CharacterIterator),abstractvoid,
java.text.BreakIterator.getWordInstance(),BreakIterator,A break iterator for word breaks
java.text.BreakIterator.getWordInstance(Locale),BreakIterator,A break iterator for word breaks
java.text.BreakIterator.getLineInstance(),BreakIterator,A break iterator for line breaks
java.text.BreakIterator.getLineInstance(Locale),BreakIterator,A break iterator for line breaks
java.text.BreakIterator.getCharacterInstance(),BreakIterator,A break iterator for character breaks
java.text.BreakIterator.getCharacterInstance(Locale),BreakIterator,A break iterator for character breaks
java.text.BreakIterator.getSentenceInstance(),BreakIterator,A break iterator for sentence breaks
java.text.BreakIterator.getSentenceInstance(Locale),BreakIterator,A break iterator for sentence breaks
java.text.BreakIterator.getAvailableLocales(),Locale[],An array of locales for which localized BreakIterator instances are available.
java.text.ChoiceFormat.applyPattern(String),void,
java.text.ChoiceFormat.toPattern(),String,the pattern string
"java.text.ChoiceFormat.setChoices(double[],String[])",void,
java.text.ChoiceFormat.getLimits(),double[],the limits.
java.text.ChoiceFormat.getFormats(),Object[],the formats.
"java.text.ChoiceFormat.format(long,StringBuffer,FieldPosition)",StringBuffer,the formatted StringBuffer
"java.text.ChoiceFormat.format(double,StringBuffer,FieldPosition)",StringBuffer,the formatted StringBuffer
"java.text.ChoiceFormat.parse(String,ParsePosition)",Number,A Number representing the value of the number parsed.
java.text.ChoiceFormat.nextDouble(double),double,the least double value greather than d
java.text.ChoiceFormat.previousDouble(double),double,the greatest double value less than d
java.text.ChoiceFormat.clone(),Object,a clone of this instance.
java.text.ChoiceFormat.hashCode(),int,a hash code value for this object.
java.text.ChoiceFormat.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
"java.text.ChoiceFormat.nextDouble(double,boolean)",double,the least or greater double value
java.text.CollationElementIterator.reset(),void,
java.text.CollationElementIterator.next(),int,the next collation element
java.text.CollationElementIterator.previous(),int,the previous collation element
java.text.CollationElementIterator.primaryOrder(int),int,the element's primary component
java.text.CollationElementIterator.secondaryOrder(int),short,the element's secondary component
java.text.CollationElementIterator.tertiaryOrder(int),short,the element's tertiary component
java.text.CollationElementIterator.setOffset(int),void,
java.text.CollationElementIterator.getOffset(),int,The character offset in the original text corresponding to the collation element that will be returned by the next call to next().
java.text.CollationElementIterator.getMaxExpansion(int),int,the maximum length of any expansion sequences ending with the specified order.
java.text.CollationElementIterator.setText(String),void,
java.text.CollationElementIterator.setText(CharacterIterator),void,
java.text.CollationKey.compareTo(CollationKey),abstractint,"Returns an integer value. Value is less than zero if this is less than target, value is zero if this and target are equal and value is greater than zero if this is greater than target."
java.text.CollationKey.getSourceString(),String,the source string of this CollationKey
java.text.CollationKey.toByteArray(),abstractbyte[],a byte array representation of the CollationKey
java.text.Collator.getInstance(),Collator,"the Collator for the default locale.(for example, en_US)"
java.text.Collator.getInstance(Locale),Collator,the Collator for the desired locale.
"java.text.Collator.compare(String,String)",abstractint,"Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."
"java.text.Collator.compare(Object,Object)",int,"a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second."
java.text.Collator.getCollationKey(String),abstractCollationKey,"the CollationKey for the given String based on this Collator's collation rules. If the source String is null, a null CollationKey is returned."
"java.text.Collator.equals(String,String)",boolean,"true if the strings are equal according to the collation rules. false, otherwise."
java.text.Collator.getStrength(),int,this Collator's current strength property.
java.text.Collator.setStrength(int),void,
java.text.Collator.getDecomposition(),int,
java.text.Collator.setDecomposition(int),void,
java.text.Collator.getAvailableLocales(),Locale[],An array of locales for which localized Collator instances are available.
java.text.Collator.clone(),Object,a clone of this instance.
java.text.Collator.equals(Object),boolean,true if this Collator is the same as that Collator; false otherwise.
java.text.Collator.hashCode(),abstractint,a hash code value for this object.
"java.text.DateFormat.format(Object,StringBuffer,FieldPosition)",StringBuffer,"the string buffer passed in as toAppendTo, with formatted text appended."
"java.text.DateFormat.format(Date,StringBuffer,FieldPosition)",abstractStringBuffer,"the string buffer passed in as toAppendTo, with formatted text appended."
java.text.DateFormat.format(Date),String,the formatted time string.
java.text.DateFormat.parse(String),Date,A Date parsed from the string.
"java.text.DateFormat.parse(String,ParsePosition)",abstractDate,"A Date, or null if the input could not be parsed"
"java.text.DateFormat.parseObject(String,ParsePosition)",Object,"A Date parsed from the string. In case of error, returns null."
java.text.DateFormat.getTimeInstance(),DateFormat,a time formatter.
java.text.DateFormat.getTimeInstance(int),DateFormat,a time formatter.
"java.text.DateFormat.getTimeInstance(int,Locale)",DateFormat,a time formatter.
java.text.DateFormat.getDateInstance(),DateFormat,a date formatter.
java.text.DateFormat.getDateInstance(int),DateFormat,a date formatter.
"java.text.DateFormat.getDateInstance(int,Locale)",DateFormat,a date formatter.
java.text.DateFormat.getDateTimeInstance(),DateFormat,a date/time formatter.
"java.text.DateFormat.getDateTimeInstance(int,int)",DateFormat,a date/time formatter.
"java.text.DateFormat.getDateTimeInstance(int,int,Locale)",DateFormat,a date/time formatter.
java.text.DateFormat.getInstance(),DateFormat,a date/time formatter
java.text.DateFormat.getAvailableLocales(),Locale[],An array of locales for which localized DateFormat instances are available.
java.text.DateFormat.setCalendar(Calendar),void,
java.text.DateFormat.getCalendar(),Calendar,the calendar associated with this date/time formatter.
java.text.DateFormat.setNumberFormat(NumberFormat),void,
java.text.DateFormat.getNumberFormat(),NumberFormat,the number formatter which this date/time formatter uses.
java.text.DateFormat.setTimeZone(TimeZone),void,
java.text.DateFormat.getTimeZone(),TimeZone,the time zone associated with the calendar of DateFormat.
java.text.DateFormat.setLenient(boolean),void,
java.text.DateFormat.isLenient(),boolean,true if the calendar is lenient; false otherwise.
java.text.DateFormat.hashCode(),int,a hash code value for this object.
java.text.DateFormat.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.text.DateFormat.clone(),Object,a clone of this instance.
java.text.DateFormat.Field.ofCalendarField(int),DateFormat.Field,Field instance representing calendarField.
java.text.DateFormat.Field.getCalendarField(),int,Calendar constant for this field
java.text.DateFormat.Field.readResolve(),Object,resolved DateFormat.Field constant
java.text.DateFormatSymbols.getAvailableLocales(),Locale[],An array of locales for which localized DateFormatSymbols instances are available.
java.text.DateFormatSymbols.getInstance(),DateFormatSymbols,a DateFormatSymbols instance.
java.text.DateFormatSymbols.getInstance(Locale),DateFormatSymbols,a DateFormatSymbols instance.
java.text.DateFormatSymbols.getEras(),String[],the era strings.
java.text.DateFormatSymbols.setEras(String[]),void,
java.text.DateFormatSymbols.getMonths(),String[],the month strings.
java.text.DateFormatSymbols.setMonths(String[]),void,
java.text.DateFormatSymbols.getShortMonths(),String[],the short month strings.
java.text.DateFormatSymbols.setShortMonths(String[]),void,
java.text.DateFormatSymbols.getWeekdays(),String[],"the weekday strings. Use Calendar.SUNDAY, Calendar.MONDAY, etc. to index the result array."
java.text.DateFormatSymbols.setWeekdays(String[]),void,
java.text.DateFormatSymbols.getShortWeekdays(),String[],"the short weekday strings. Use Calendar.SUNDAY, Calendar.MONDAY, etc. to index the result array."
java.text.DateFormatSymbols.setShortWeekdays(String[]),void,
java.text.DateFormatSymbols.getAmPmStrings(),String[],the ampm strings.
java.text.DateFormatSymbols.setAmPmStrings(String[]),void,
java.text.DateFormatSymbols.getZoneStrings(),String[][],
java.text.DateFormatSymbols.setZoneStrings(String[][]),void,
java.text.DateFormatSymbols.getLocalPatternChars(),String,the localized date-time pattern characters.
java.text.DateFormatSymbols.setLocalPatternChars(String),void,
java.text.DateFormatSymbols.clone(),Object,a clone of this instance.
java.text.DateFormatSymbols.hashCode(),int,a hash code value for this object.
java.text.DateFormatSymbols.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
"java.text.DecimalFormat.format(Object,StringBuffer,FieldPosition)",StringBuffer,the value passed in as toAppendTo
"java.text.DecimalFormat.format(double,StringBuffer,FieldPosition)",StringBuffer,The formatted number string
"java.text.DecimalFormat.format(long,StringBuffer,FieldPosition)",StringBuffer,The formatted number string
java.text.DecimalFormat.formatToCharacterIterator(Object),AttributedCharacterIterator,AttributedCharacterIterator describing the formatted value.
"java.text.DecimalFormat.parse(String,ParsePosition)",Number,
java.text.DecimalFormat.getDecimalFormatSymbols(),DecimalFormatSymbols,a copy of the desired DecimalFormatSymbols
java.text.DecimalFormat.setDecimalFormatSymbols(DecimalFormatSymbols),void,
java.text.DecimalFormat.getPositivePrefix(),String,the positive prefix
java.text.DecimalFormat.setPositivePrefix(String),void,
java.text.DecimalFormat.getNegativePrefix(),String,the negative prefix
java.text.DecimalFormat.setNegativePrefix(String),void,
java.text.DecimalFormat.getPositiveSuffix(),String,the positive suffix
java.text.DecimalFormat.setPositiveSuffix(String),void,
java.text.DecimalFormat.getNegativeSuffix(),String,the negative suffix
java.text.DecimalFormat.setNegativeSuffix(String),void,
java.text.DecimalFormat.getMultiplier(),int,the multiplier
java.text.DecimalFormat.setMultiplier(int),void,
java.text.DecimalFormat.setGroupingUsed(boolean),void,
java.text.DecimalFormat.getGroupingSize(),int,the grouping size
java.text.DecimalFormat.setGroupingSize(int),void,
java.text.DecimalFormat.isDecimalSeparatorAlwaysShown(),boolean,true if the decimal separator is always shown; false otherwise
java.text.DecimalFormat.setDecimalSeparatorAlwaysShown(boolean),void,
java.text.DecimalFormat.isParseBigDecimal(),boolean,true if the parse method returns BigDecimal; false otherwise
java.text.DecimalFormat.setParseBigDecimal(boolean),void,
java.text.DecimalFormat.clone(),Object,a clone of this instance.
java.text.DecimalFormat.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.text.DecimalFormat.hashCode(),int,a hash code value for this object.
java.text.DecimalFormat.toPattern(),String,a pattern string
java.text.DecimalFormat.toLocalizedPattern(),String,a localized pattern string
java.text.DecimalFormat.applyPattern(String),void,
java.text.DecimalFormat.applyLocalizedPattern(String),void,
java.text.DecimalFormat.setMaximumIntegerDigits(int),void,
java.text.DecimalFormat.setMinimumIntegerDigits(int),void,
java.text.DecimalFormat.setMaximumFractionDigits(int),void,
java.text.DecimalFormat.setMinimumFractionDigits(int),void,
java.text.DecimalFormat.getMaximumIntegerDigits(),int,the maximum number of digits
java.text.DecimalFormat.getMinimumIntegerDigits(),int,the minimum number of digits
java.text.DecimalFormat.getMaximumFractionDigits(),int,the maximum number of digits.
java.text.DecimalFormat.getMinimumFractionDigits(),int,the minimum number of digits
java.text.DecimalFormat.getCurrency(),Currency,"the currency used by this decimal format, or null"
java.text.DecimalFormat.setCurrency(Currency),void,
java.text.DecimalFormat.getRoundingMode(),RoundingMode,The RoundingMode used for this DecimalFormat.
java.text.DecimalFormat.setRoundingMode(RoundingMode),void,
java.text.DecimalFormatSymbols.getAvailableLocales(),Locale[],an array of locales for which localized DecimalFormatSymbols instances are available.
java.text.DecimalFormatSymbols.getInstance(),DecimalFormatSymbols,a DecimalFormatSymbols instance.
java.text.DecimalFormatSymbols.getInstance(Locale),DecimalFormatSymbols,a DecimalFormatSymbols instance.
java.text.DecimalFormatSymbols.getZeroDigit(),char,the character used for zero
java.text.DecimalFormatSymbols.setZeroDigit(char),void,
java.text.DecimalFormatSymbols.getGroupingSeparator(),char,the grouping separator
java.text.DecimalFormatSymbols.setGroupingSeparator(char),void,
java.text.DecimalFormatSymbols.getDecimalSeparator(),char,the character used for decimal sign
java.text.DecimalFormatSymbols.setDecimalSeparator(char),void,
java.text.DecimalFormatSymbols.getPerMill(),char,the character used for per mille sign
java.text.DecimalFormatSymbols.setPerMill(char),void,
java.text.DecimalFormatSymbols.getPercent(),char,the character used for percent sign
java.text.DecimalFormatSymbols.setPercent(char),void,
java.text.DecimalFormatSymbols.getDigit(),char,the character used for a digit in a pattern
java.text.DecimalFormatSymbols.setDigit(char),void,
java.text.DecimalFormatSymbols.getPatternSeparator(),char,the pattern separator
java.text.DecimalFormatSymbols.setPatternSeparator(char),void,
java.text.DecimalFormatSymbols.getInfinity(),String,the string representing infinity
java.text.DecimalFormatSymbols.setInfinity(String),void,
java.text.DecimalFormatSymbols.getNaN(),String,"the string representing ""not a number"""
java.text.DecimalFormatSymbols.setNaN(String),void,
java.text.DecimalFormatSymbols.getMinusSign(),char,the character representing minus sign
java.text.DecimalFormatSymbols.setMinusSign(char),void,
java.text.DecimalFormatSymbols.getCurrencySymbol(),String,the currency symbol
java.text.DecimalFormatSymbols.setCurrencySymbol(String),void,
java.text.DecimalFormatSymbols.getInternationalCurrencySymbol(),String,the currency code
java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(String),void,
java.text.DecimalFormatSymbols.getCurrency(),Currency,"the currency used, or null"
java.text.DecimalFormatSymbols.setCurrency(Currency),void,
java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator(),char,the monetary decimal separator
java.text.DecimalFormatSymbols.setMonetaryDecimalSeparator(char),void,
java.text.DecimalFormatSymbols.getExponentSeparator(),String,the exponent separator string
java.text.DecimalFormatSymbols.setExponentSeparator(String),void,
java.text.DecimalFormatSymbols.clone(),Object,a clone of this instance.
java.text.DecimalFormatSymbols.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.text.DecimalFormatSymbols.hashCode(),int,a hash code value for this object.
java.text.FieldPosition.getFieldAttribute(),Format.Field,Identifier for the field
java.text.FieldPosition.getField(),int,the field identifier
java.text.FieldPosition.getBeginIndex(),int,the begin index
java.text.FieldPosition.getEndIndex(),int,the end index
java.text.FieldPosition.setBeginIndex(int),void,
java.text.FieldPosition.setEndIndex(int),void,
java.text.FieldPosition.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.text.FieldPosition.hashCode(),int,a hash code value for this object
java.text.FieldPosition.toString(),String,a string representation of this object
java.text.Format.format(Object),String,Formatted string.
"java.text.Format.format(Object,StringBuffer,FieldPosition)",abstractStringBuffer,"the string buffer passed in as toAppendTo, with formatted text appended"
java.text.Format.formatToCharacterIterator(Object),AttributedCharacterIterator,AttributedCharacterIterator describing the formatted value.
"java.text.Format.parseObject(String,ParsePosition)",abstractObject,"An Object parsed from the string. In case of error, returns null."
java.text.Format.parseObject(String),Object,An Object parsed from the string.
java.text.Format.clone(),Object,a clone of this instance.
java.text.MessageFormat.setLocale(Locale),void,
java.text.MessageFormat.getLocale(),Locale,the locale used when creating or comparing subformats
java.text.MessageFormat.applyPattern(String),void,
java.text.MessageFormat.toPattern(),String,a pattern representing the current state of the message format
java.text.MessageFormat.setFormatsByArgumentIndex(Format[]),void,
java.text.MessageFormat.setFormats(Format[]),void,
"java.text.MessageFormat.setFormatByArgumentIndex(int,Format)",void,
"java.text.MessageFormat.setFormat(int,Format)",void,
java.text.MessageFormat.getFormatsByArgumentIndex(),Format[],the formats used for the arguments within the pattern
java.text.MessageFormat.getFormats(),Format[],the formats used for the format elements in the pattern
"java.text.MessageFormat.format(Object[],StringBuffer,FieldPosition)",StringBuffer,"the string buffer passed in as result, with formatted text appended"
"java.text.MessageFormat.format(String,Object...)",String,the formatted string
"java.text.MessageFormat.format(Object,StringBuffer,FieldPosition)",StringBuffer,"the string buffer passed in as toAppendTo, with formatted text appended"
java.text.MessageFormat.formatToCharacterIterator(Object),AttributedCharacterIterator,AttributedCharacterIterator describing the formatted value.
"java.text.MessageFormat.parse(String,ParsePosition)",Object[],
java.text.MessageFormat.parse(String),Object[],An Object array parsed from the string.
"java.text.MessageFormat.parseObject(String,ParsePosition)",Object,"An Object array parsed from the string. In case of error, returns null."
java.text.MessageFormat.clone(),Object,a clone of this instance.
java.text.MessageFormat.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.text.MessageFormat.hashCode(),int,a hash code value for this object.
java.text.MessageFormat.Field.readResolve(),Object,resolved MessageFormat.Field constant
"java.text.Normalizer.normalize(CharSequence,Normalizer.Form)",String,The normalized String
"java.text.Normalizer.isNormalized(CharSequence,Normalizer.Form)",boolean,true if the sequence of char values is normalized; false otherwise.
"java.text.NumberFormat.format(Object,StringBuffer,FieldPosition)",StringBuffer,the value passed in as toAppendTo
"java.text.NumberFormat.parseObject(String,ParsePosition)",Object,"A Number parsed from the string. In case of error, returns null."
java.text.NumberFormat.format(double),String,the formatted String
java.text.NumberFormat.format(long),String,the formatted String
"java.text.NumberFormat.format(double,StringBuffer,FieldPosition)",abstractStringBuffer,the formatted StringBuffer
"java.text.NumberFormat.format(long,StringBuffer,FieldPosition)",abstractStringBuffer,the formatted StringBuffer
"java.text.NumberFormat.parse(String,ParsePosition)",abstractNumber,the parsed value
java.text.NumberFormat.parse(String),Number,A Number parsed from the string.
java.text.NumberFormat.isParseIntegerOnly(),boolean,true if numbers should be parsed as integers only; false otherwise
java.text.NumberFormat.setParseIntegerOnly(boolean),void,
java.text.NumberFormat.getInstance(),NumberFormat,the NumberFormat instance for general-purpose number formatting
java.text.NumberFormat.getInstance(Locale),NumberFormat,the NumberFormat instance for general-purpose number formatting
java.text.NumberFormat.getNumberInstance(),NumberFormat,the NumberFormat instance for general-purpose number formatting
java.text.NumberFormat.getNumberInstance(Locale),NumberFormat,the NumberFormat instance for general-purpose number formatting
java.text.NumberFormat.getIntegerInstance(),NumberFormat,a number format for integer values
java.text.NumberFormat.getIntegerInstance(Locale),NumberFormat,a number format for integer values
java.text.NumberFormat.getCurrencyInstance(),NumberFormat,the NumberFormat instance for currency formatting
java.text.NumberFormat.getCurrencyInstance(Locale),NumberFormat,the NumberFormat instance for currency formatting
java.text.NumberFormat.getPercentInstance(),NumberFormat,the NumberFormat instance for percentage formatting
java.text.NumberFormat.getPercentInstance(Locale),NumberFormat,the NumberFormat instance for percentage formatting
java.text.NumberFormat.getAvailableLocales(),Locale[],An array of locales for which localized NumberFormat instances are available.
java.text.NumberFormat.hashCode(),int,a hash code value for this object.
java.text.NumberFormat.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.text.NumberFormat.clone(),Object,a clone of this instance.
java.text.NumberFormat.isGroupingUsed(),boolean,true if grouping is used; false otherwise
java.text.NumberFormat.setGroupingUsed(boolean),void,
java.text.NumberFormat.getMaximumIntegerDigits(),int,the maximum number of digits
java.text.NumberFormat.setMaximumIntegerDigits(int),void,
java.text.NumberFormat.getMinimumIntegerDigits(),int,the minimum number of digits
java.text.NumberFormat.setMinimumIntegerDigits(int),void,
java.text.NumberFormat.getMaximumFractionDigits(),int,the maximum number of digits.
java.text.NumberFormat.setMaximumFractionDigits(int),void,
java.text.NumberFormat.getMinimumFractionDigits(),int,the minimum number of digits
java.text.NumberFormat.setMinimumFractionDigits(int),void,
java.text.NumberFormat.getCurrency(),Currency,"the currency used by this number format, or null"
java.text.NumberFormat.setCurrency(Currency),void,
java.text.NumberFormat.getRoundingMode(),RoundingMode,The RoundingMode used for this NumberFormat.
java.text.NumberFormat.setRoundingMode(RoundingMode),void,
java.text.NumberFormat.Field.readResolve(),Object,resolved NumberFormat.Field constant
java.text.ParsePosition.getIndex(),int,the current parse position
java.text.ParsePosition.setIndex(int),void,
java.text.ParsePosition.setErrorIndex(int),void,
java.text.ParsePosition.getErrorIndex(),int,the index at which an error occurred
java.text.ParsePosition.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
java.text.ParsePosition.hashCode(),int,a hash code value for this object
java.text.ParsePosition.toString(),String,a string representation of this object
java.text.RuleBasedCollator.getRules(),String,returns the collation rules that the table collation object was created from.
java.text.RuleBasedCollator.getCollationElementIterator(String),CollationElementIterator,a CollationElementIterator object
java.text.RuleBasedCollator.getCollationElementIterator(CharacterIterator),CollationElementIterator,a CollationElementIterator object
"java.text.RuleBasedCollator.compare(String,String)",int,"Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."
java.text.RuleBasedCollator.getCollationKey(String),CollationKey,"the CollationKey for the given String based on this Collator's collation rules. If the source String is null, a null CollationKey is returned."
java.text.RuleBasedCollator.clone(),Object,a clone of this instance.
java.text.RuleBasedCollator.equals(Object),boolean,true if the current table-based collation object is the same as the table-based collation object obj; false otherwise.
java.text.RuleBasedCollator.hashCode(),int,a hash code value for this object.
java.text.SimpleDateFormat.set2DigitYearStart(Date),void,
java.text.SimpleDateFormat.get2DigitYearStart(),Date,the start of the 100-year period into which two digit years are parsed
"java.text.SimpleDateFormat.format(Date,StringBuffer,FieldPosition)",StringBuffer,the formatted date-time string.
java.text.SimpleDateFormat.formatToCharacterIterator(Object),AttributedCharacterIterator,AttributedCharacterIterator describing the formatted value.
"java.text.SimpleDateFormat.parse(String,ParsePosition)",Date,"A Date parsed from the string. In case of error, returns null."
java.text.SimpleDateFormat.toPattern(),String,a pattern string describing this date format.
java.text.SimpleDateFormat.toLocalizedPattern(),String,a localized pattern string describing this date format.
java.text.SimpleDateFormat.applyPattern(String),void,
java.text.SimpleDateFormat.applyLocalizedPattern(String),void,
java.text.SimpleDateFormat.getDateFormatSymbols(),DateFormatSymbols,the date and time format symbols of this date format
java.text.SimpleDateFormat.setDateFormatSymbols(DateFormatSymbols),void,
java.text.SimpleDateFormat.clone(),Object,a clone of this SimpleDateFormat
java.text.SimpleDateFormat.hashCode(),int,the hash code value for this SimpleDateFormat object.
java.text.SimpleDateFormat.equals(Object),boolean,true if the given object is equal to this SimpleDateFormat
java.text.StringCharacterIterator.setText(String),void,
java.text.StringCharacterIterator.first(),char,"the first character in the text, or DONE if the text is empty"
java.text.StringCharacterIterator.last(),char,"the last character in the text, or DONE if the text is empty"
java.text.StringCharacterIterator.setIndex(int),char,the character at the specified position or DONE if the specified position is equal to getEndIndex()
java.text.StringCharacterIterator.current(),char,the character at the current position or DONE if the current position is off the end of the text.
java.text.StringCharacterIterator.next(),char,the character at the new position or DONE if the new position is off the end of the text range.
java.text.StringCharacterIterator.previous(),char,the character at the new position or DONE if the current position is equal to getBeginIndex().
java.text.StringCharacterIterator.getBeginIndex(),int,the index at which the text begins.
java.text.StringCharacterIterator.getEndIndex(),int,the index after the last character in the text
java.text.StringCharacterIterator.getIndex(),int,the current index.
java.text.StringCharacterIterator.equals(Object),boolean,true if the given obj is the same as this StringCharacterIterator object; false otherwise.
java.text.StringCharacterIterator.hashCode(),int,A hash code
java.text.StringCharacterIterator.clone(),Object,A copy of this
java.text.spi.BreakIteratorProvider.getWordInstance(Locale),abstractBreakIterator,A break iterator for word breaks
java.text.spi.BreakIteratorProvider.getLineInstance(Locale),abstractBreakIterator,A break iterator for line breaks
java.text.spi.BreakIteratorProvider.getCharacterInstance(Locale),abstractBreakIterator,A break iterator for character breaks
java.text.spi.BreakIteratorProvider.getSentenceInstance(Locale),abstractBreakIterator,A break iterator for sentence breaks
java.text.spi.CollatorProvider.getInstance(Locale),abstractCollator,the Collator for the desired locale.
"java.text.spi.DateFormatProvider.getTimeInstance(int,Locale)",abstractDateFormat,a time formatter.
"java.text.spi.DateFormatProvider.getDateInstance(int,Locale)",abstractDateFormat,a date formatter.
"java.text.spi.DateFormatProvider.getDateTimeInstance(int,int,Locale)",abstractDateFormat,a date/time formatter.
java.text.spi.DateFormatSymbolsProvider.getInstance(Locale),abstractDateFormatSymbols,a DateFormatSymbols instance.
java.text.spi.DecimalFormatSymbolsProvider.getInstance(Locale),abstractDecimalFormatSymbols,a DecimalFormatSymbols instance.
java.text.spi.NumberFormatProvider.getCurrencyInstance(Locale),abstractNumberFormat,a currency formatter
java.text.spi.NumberFormatProvider.getIntegerInstance(Locale),abstractNumberFormat,a number format for integer values
java.text.spi.NumberFormatProvider.getNumberInstance(Locale),abstractNumberFormat,a general-purpose number formatter
java.text.spi.NumberFormatProvider.getPercentInstance(Locale),abstractNumberFormat,a percent formatter
java.time.Clock.systemUTC(),Clock,"a clock that uses the best available system clock in the UTC zone, not null"
java.time.Clock.systemDefaultZone(),Clock,"a clock that uses the best available system clock in the default zone, not null"
java.time.Clock.system(ZoneId),Clock,"a clock that uses the best available system clock in the specified zone, not null"
java.time.Clock.tickSeconds(ZoneId),Clock,"a clock that ticks in whole seconds using the specified zone, not null"
java.time.Clock.tickMinutes(ZoneId),Clock,"a clock that ticks in whole minutes using the specified zone, not null"
"java.time.Clock.tick(Clock,Duration)",Clock,"a clock that ticks in whole units of the duration, not null"
"java.time.Clock.fixed(Instant,ZoneId)",Clock,"a clock that always returns the same instant, not null"
"java.time.Clock.offset(Clock,Duration)",Clock,"a clock based on the base clock with the duration added, not null"
java.time.Clock.getZone(),abstractZoneId,"the time-zone being used to interpret instants, not null"
java.time.Clock.withZone(ZoneId),abstractClock,"a clock based on this clock with the specified time-zone, not null"
java.time.Clock.millis(),long,"the current millisecond instant from this clock, measured from the Java epoch of 1970-01-01T00:00Z (UTC), not null"
java.time.Clock.instant(),abstractInstant,"the current instant from this clock, not null"
java.time.Clock.equals(Object),boolean,true if this is equal to the other clock
java.time.Clock.hashCode(),int,a suitable hash code
java.time.Duration.ofDays(long),Duration,"a Duration, not null"
java.time.Duration.ofHours(long),Duration,"a Duration, not null"
java.time.Duration.ofMinutes(long),Duration,"a Duration, not null"
java.time.Duration.ofSeconds(long),Duration,"a Duration, not null"
"java.time.Duration.ofSeconds(long,long)",Duration,"a Duration, not null"
java.time.Duration.ofMillis(long),Duration,"a Duration, not null"
java.time.Duration.ofNanos(long),Duration,"a Duration, not null"
"java.time.Duration.of(long,TemporalUnit)",Duration,"a Duration, not null"
java.time.Duration.from(TemporalAmount),Duration,"the equivalent duration, not null"
java.time.Duration.parse(CharSequence),Duration,"the parsed duration, not null"
"java.time.Duration.between(Temporal,Temporal)",Duration,"a Duration, not null"
java.time.Duration.get(TemporalUnit),long,the long value of the unit
java.time.Duration.getUnits(),List&lt;TemporalUnit&gt;,"a list containing the seconds and nanos units, not null"
java.time.Duration.isZero(),boolean,true if this duration has a total length equal to zero
java.time.Duration.isNegative(),boolean,true if this duration has a total length less than zero
java.time.Duration.getSeconds(),long,"the whole seconds part of the length of the duration, positive or negative"
java.time.Duration.getNano(),int,"the nanoseconds within the second part of the length of the duration, from 0 to 999,999,999"
java.time.Duration.withSeconds(long),Duration,"a Duration based on this period with the requested seconds, not null"
java.time.Duration.withNanos(int),Duration,"a Duration based on this period with the requested nano-of-second, not null"
java.time.Duration.plus(Duration),Duration,"a Duration based on this duration with the specified duration added, not null"
"java.time.Duration.plus(long,TemporalUnit)",Duration,"a Duration based on this duration with the specified duration added, not null"
java.time.Duration.plusDays(long),Duration,"a Duration based on this duration with the specified days added, not null"
java.time.Duration.plusHours(long),Duration,"a Duration based on this duration with the specified hours added, not null"
java.time.Duration.plusMinutes(long),Duration,"a Duration based on this duration with the specified minutes added, not null"
java.time.Duration.plusSeconds(long),Duration,"a Duration based on this duration with the specified seconds added, not null"
java.time.Duration.plusMillis(long),Duration,"a Duration based on this duration with the specified milliseconds added, not null"
java.time.Duration.plusNanos(long),Duration,"a Duration based on this duration with the specified nanoseconds added, not null"
java.time.Duration.minus(Duration),Duration,"a Duration based on this duration with the specified duration subtracted, not null"
"java.time.Duration.minus(long,TemporalUnit)",Duration,"a Duration based on this duration with the specified duration subtracted, not null"
java.time.Duration.minusDays(long),Duration,"a Duration based on this duration with the specified days subtracted, not null"
java.time.Duration.minusHours(long),Duration,"a Duration based on this duration with the specified hours subtracted, not null"
java.time.Duration.minusMinutes(long),Duration,"a Duration based on this duration with the specified minutes subtracted, not null"
java.time.Duration.minusSeconds(long),Duration,"a Duration based on this duration with the specified seconds subtracted, not null"
java.time.Duration.minusMillis(long),Duration,"a Duration based on this duration with the specified milliseconds subtracted, not null"
java.time.Duration.minusNanos(long),Duration,"a Duration based on this duration with the specified nanoseconds subtracted, not null"
java.time.Duration.multipliedBy(long),Duration,"a Duration based on this duration multiplied by the specified scalar, not null"
java.time.Duration.dividedBy(long),Duration,"a Duration based on this duration divided by the specified divisor, not null"
java.time.Duration.negated(),Duration,"a Duration based on this duration with the amount negated, not null"
java.time.Duration.abs(),Duration,"a Duration based on this duration with an absolute length, not null"
java.time.Duration.addTo(Temporal),Temporal,"an object of the same type with the adjustment made, not null"
java.time.Duration.subtractFrom(Temporal),Temporal,"an object of the same type with the adjustment made, not null"
java.time.Duration.toDays(),long,"the number of days in the duration, may be negative"
java.time.Duration.toHours(),long,"the number of hours in the duration, may be negative"
java.time.Duration.toMinutes(),long,"the number of minutes in the duration, may be negative"
java.time.Duration.toMillis(),long,the total length of the duration in milliseconds
java.time.Duration.toNanos(),long,the total length of the duration in nanoseconds
java.time.Duration.compareTo(Duration),int,"the comparator value, negative if less, positive if greater"
java.time.Duration.equals(Object),boolean,true if the other duration is equal to this one
java.time.Duration.hashCode(),int,a suitable hash code
java.time.Duration.toString(),String,"an ISO-8601 representation of this duration, not null"
java.time.Instant.now(),Instant,"the current instant using the system clock, not null"
java.time.Instant.now(Clock),Instant,"the current instant, not null"
java.time.Instant.ofEpochSecond(long),Instant,"an instant, not null"
"java.time.Instant.ofEpochSecond(long,long)",Instant,"an instant, not null"
java.time.Instant.ofEpochMilli(long),Instant,"an instant, not null"
java.time.Instant.from(TemporalAccessor),Instant,"the instant, not null"
java.time.Instant.parse(CharSequence),Instant,"the parsed instant, not null"
java.time.Instant.isSupported(TemporalField),boolean,
java.time.Instant.isSupported(TemporalUnit),boolean,
java.time.Instant.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.Instant.get(TemporalField),int,the value for the field
java.time.Instant.getLong(TemporalField),long,the value for the field
java.time.Instant.getEpochSecond(),long,the seconds from the epoch of 1970-01-01T00:00:00Z
java.time.Instant.getNano(),int,"the nanoseconds within the second, always positive, never exceeds 999,999,999"
java.time.Instant.with(TemporalAdjuster),Instant,"an Instant based on this with the adjustment made, not null"
"java.time.Instant.with(TemporalField,long)",Instant,
java.time.Instant.truncatedTo(TemporalUnit),Instant,"an Instant based on this instant with the time truncated, not null"
java.time.Instant.plus(TemporalAmount),Instant,"an Instant based on this instant with the addition made, not null"
"java.time.Instant.plus(long,TemporalUnit)",Instant,
java.time.Instant.plusSeconds(long),Instant,"an Instant based on this instant with the specified seconds added, not null"
java.time.Instant.plusMillis(long),Instant,"an Instant based on this instant with the specified milliseconds added, not null"
java.time.Instant.plusNanos(long),Instant,"an Instant based on this instant with the specified nanoseconds added, not null"
java.time.Instant.minus(TemporalAmount),Instant,"an Instant based on this instant with the subtraction made, not null"
"java.time.Instant.minus(long,TemporalUnit)",Instant,"an Instant based on this instant with the specified amount subtracted, not null"
java.time.Instant.minusSeconds(long),Instant,"an Instant based on this instant with the specified seconds subtracted, not null"
java.time.Instant.minusMillis(long),Instant,"an Instant based on this instant with the specified milliseconds subtracted, not null"
java.time.Instant.minusNanos(long),Instant,"an Instant based on this instant with the specified nanoseconds subtracted, not null"
java.time.Instant.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.Instant.adjustInto(Temporal),Temporal,"the adjusted object, not null"
"java.time.Instant.until(Temporal,TemporalUnit)",long,the amount of time between this instant and the end instant
java.time.Instant.atOffset(ZoneOffset),OffsetDateTime,"the offset date-time formed from this instant and the specified offset, not null"
java.time.Instant.atZone(ZoneId),ZonedDateTime,"the zoned date-time formed from this instant and the specified zone, not null"
java.time.Instant.toEpochMilli(),long,the number of milliseconds since the epoch of 1970-01-01T00:00:00Z
java.time.Instant.compareTo(Instant),int,"the comparator value, negative if less, positive if greater"
java.time.Instant.isAfter(Instant),boolean,true if this instant is after the specified instant
java.time.Instant.isBefore(Instant),boolean,true if this instant is before the specified instant
java.time.Instant.equals(Object),boolean,true if the other instant is equal to this one
java.time.Instant.hashCode(),int,a suitable hash code
java.time.Instant.toString(),String,"an ISO-8601 representation of this instant, not null"
java.time.LocalDate.now(),LocalDate,"the current date using the system clock and default time-zone, not null"
java.time.LocalDate.now(ZoneId),LocalDate,"the current date using the system clock, not null"
java.time.LocalDate.now(Clock),LocalDate,"the current date, not null"
"java.time.LocalDate.of(int,Month,int)",LocalDate,"the local date, not null"
"java.time.LocalDate.of(int,int,int)",LocalDate,"the local date, not null"
"java.time.LocalDate.ofYearDay(int,int)",LocalDate,"the local date, not null"
java.time.LocalDate.ofEpochDay(long),LocalDate,"the local date, not null"
java.time.LocalDate.from(TemporalAccessor),LocalDate,"the local date, not null"
java.time.LocalDate.parse(CharSequence),LocalDate,"the parsed local date, not null"
"java.time.LocalDate.parse(CharSequence,DateTimeFormatter)",LocalDate,"the parsed local date, not null"
java.time.LocalDate.isSupported(TemporalField),boolean,
java.time.LocalDate.isSupported(TemporalUnit),boolean,
java.time.LocalDate.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.LocalDate.get(TemporalField),int,the value for the field
java.time.LocalDate.getLong(TemporalField),long,the value for the field
java.time.LocalDate.getChronology(),IsoChronology,"the ISO chronology, not null"
java.time.LocalDate.getEra(),Era,"the IsoChronology era constant applicable at this date, not null"
java.time.LocalDate.getYear(),int,"the year, from MIN_YEAR to MAX_YEAR"
java.time.LocalDate.getMonthValue(),int,"the month-of-year, from 1 to 12"
java.time.LocalDate.getMonth(),Month,"the month-of-year, not null"
java.time.LocalDate.getDayOfMonth(),int,"the day-of-month, from 1 to 31"
java.time.LocalDate.getDayOfYear(),int,"the day-of-year, from 1 to 365, or 366 in a leap year"
java.time.LocalDate.getDayOfWeek(),DayOfWeek,"the day-of-week, not null"
java.time.LocalDate.isLeapYear(),boolean,"true if the year is leap, false otherwise"
java.time.LocalDate.lengthOfMonth(),int,the length of the month in days
java.time.LocalDate.lengthOfYear(),int,"366 if the year is leap, 365 otherwise"
java.time.LocalDate.with(TemporalAdjuster),LocalDate,"a LocalDate based on this with the adjustment made, not null"
"java.time.LocalDate.with(TemporalField,long)",LocalDate,
java.time.LocalDate.withYear(int),LocalDate,"a LocalDate based on this date with the requested year, not null"
java.time.LocalDate.withMonth(int),LocalDate,"a LocalDate based on this date with the requested month, not null"
java.time.LocalDate.withDayOfMonth(int),LocalDate,"a LocalDate based on this date with the requested day, not null"
java.time.LocalDate.withDayOfYear(int),LocalDate,"a LocalDate based on this date with the requested day, not null"
java.time.LocalDate.plus(TemporalAmount),LocalDate,"a LocalDate based on this date with the addition made, not null"
"java.time.LocalDate.plus(long,TemporalUnit)",LocalDate,
java.time.LocalDate.plusYears(long),LocalDate,
java.time.LocalDate.plusMonths(long),LocalDate,
java.time.LocalDate.plusWeeks(long),LocalDate,"a LocalDate based on this date with the weeks added, not null"
java.time.LocalDate.plusDays(long),LocalDate,"a LocalDate based on this date with the days added, not null"
java.time.LocalDate.minus(TemporalAmount),LocalDate,"a LocalDate based on this date with the subtraction made, not null"
"java.time.LocalDate.minus(long,TemporalUnit)",LocalDate,"a LocalDate based on this date with the specified amount subtracted, not null"
java.time.LocalDate.minusYears(long),LocalDate,
java.time.LocalDate.minusMonths(long),LocalDate,
java.time.LocalDate.minusWeeks(long),LocalDate,"a LocalDate based on this date with the weeks subtracted, not null"
java.time.LocalDate.minusDays(long),LocalDate,"a LocalDate based on this date with the days subtracted, not null"
java.time.LocalDate.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.LocalDate.adjustInto(Temporal),Temporal,"the adjusted object, not null"
"java.time.LocalDate.until(Temporal,TemporalUnit)",long,the amount of time between this date and the end date
java.time.LocalDate.until(ChronoLocalDate),Period,"the period between this date and the end date, not null"
java.time.LocalDate.format(DateTimeFormatter),String,"the formatted date string, not null"
java.time.LocalDate.atTime(LocalTime),LocalDateTime,"the local date-time formed from this date and the specified time, not null"
"java.time.LocalDate.atTime(int,int)",LocalDateTime,"the local date-time formed from this date and the specified time, not null"
"java.time.LocalDate.atTime(int,int,int)",LocalDateTime,"the local date-time formed from this date and the specified time, not null"
"java.time.LocalDate.atTime(int,int,int,int)",LocalDateTime,"the local date-time formed from this date and the specified time, not null"
java.time.LocalDate.atTime(OffsetTime),OffsetDateTime,"the offset date-time formed from this date and the specified time, not null"
java.time.LocalDate.atStartOfDay(),LocalDateTime,"the local date-time of midnight at the start of this date, not null"
java.time.LocalDate.atStartOfDay(ZoneId),ZonedDateTime,"the zoned date-time formed from this date and the earliest valid time for the zone, not null"
java.time.LocalDate.toEpochDay(),long,the Epoch Day equivalent to this date
java.time.LocalDate.compareTo(ChronoLocalDate),int,"the comparator value, negative if less, positive if greater"
java.time.LocalDate.isAfter(ChronoLocalDate),boolean,true if this date is after the specified date
java.time.LocalDate.isBefore(ChronoLocalDate),boolean,true if this date is before the specified date
java.time.LocalDate.isEqual(ChronoLocalDate),boolean,true if this date is equal to the specified date
java.time.LocalDate.equals(Object),boolean,true if this is equal to the other date
java.time.LocalDate.hashCode(),int,a suitable hash code
java.time.LocalDate.toString(),String,"a string representation of this date, not null"
java.time.LocalDateTime.now(),LocalDateTime,"the current date-time using the system clock and default time-zone, not null"
java.time.LocalDateTime.now(ZoneId),LocalDateTime,"the current date-time using the system clock, not null"
java.time.LocalDateTime.now(Clock),LocalDateTime,"the current date-time, not null"
"java.time.LocalDateTime.of(int,Month,int,int,int)",LocalDateTime,"the local date-time, not null"
"java.time.LocalDateTime.of(int,Month,int,int,int,int)",LocalDateTime,"the local date-time, not null"
"java.time.LocalDateTime.of(int,Month,int,int,int,int,int)",LocalDateTime,"the local date-time, not null"
"java.time.LocalDateTime.of(int,int,int,int,int)",LocalDateTime,"the local date-time, not null"
"java.time.LocalDateTime.of(int,int,int,int,int,int)",LocalDateTime,"the local date-time, not null"
"java.time.LocalDateTime.of(int,int,int,int,int,int,int)",LocalDateTime,"the local date-time, not null"
"java.time.LocalDateTime.of(LocalDate,LocalTime)",LocalDateTime,"the local date-time, not null"
"java.time.LocalDateTime.ofInstant(Instant,ZoneId)",LocalDateTime,"the local date-time, not null"
"java.time.LocalDateTime.ofEpochSecond(long,int,ZoneOffset)",LocalDateTime,"the local date-time, not null"
java.time.LocalDateTime.from(TemporalAccessor),LocalDateTime,"the local date-time, not null"
java.time.LocalDateTime.parse(CharSequence),LocalDateTime,"the parsed local date-time, not null"
"java.time.LocalDateTime.parse(CharSequence,DateTimeFormatter)",LocalDateTime,"the parsed local date-time, not null"
java.time.LocalDateTime.isSupported(TemporalField),boolean,
java.time.LocalDateTime.isSupported(TemporalUnit),boolean,
java.time.LocalDateTime.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.LocalDateTime.get(TemporalField),int,the value for the field
java.time.LocalDateTime.getLong(TemporalField),long,the value for the field
java.time.LocalDateTime.toLocalDate(),LocalDate,"the date part of this date-time, not null"
java.time.LocalDateTime.getYear(),int,"the year, from MIN_YEAR to MAX_YEAR"
java.time.LocalDateTime.getMonthValue(),int,"the month-of-year, from 1 to 12"
java.time.LocalDateTime.getMonth(),Month,"the month-of-year, not null"
java.time.LocalDateTime.getDayOfMonth(),int,"the day-of-month, from 1 to 31"
java.time.LocalDateTime.getDayOfYear(),int,"the day-of-year, from 1 to 365, or 366 in a leap year"
java.time.LocalDateTime.getDayOfWeek(),DayOfWeek,"the day-of-week, not null"
java.time.LocalDateTime.toLocalTime(),LocalTime,"the time part of this date-time, not null"
java.time.LocalDateTime.getHour(),int,"the hour-of-day, from 0 to 23"
java.time.LocalDateTime.getMinute(),int,"the minute-of-hour, from 0 to 59"
java.time.LocalDateTime.getSecond(),int,"the second-of-minute, from 0 to 59"
java.time.LocalDateTime.getNano(),int,"the nano-of-second, from 0 to 999,999,999"
java.time.LocalDateTime.with(TemporalAdjuster),LocalDateTime,"a LocalDateTime based on this with the adjustment made, not null"
"java.time.LocalDateTime.with(TemporalField,long)",LocalDateTime,"a LocalDateTime based on this with the specified field set, not null"
java.time.LocalDateTime.withYear(int),LocalDateTime,"a LocalDateTime based on this date-time with the requested year, not null"
java.time.LocalDateTime.withMonth(int),LocalDateTime,"a LocalDateTime based on this date-time with the requested month, not null"
java.time.LocalDateTime.withDayOfMonth(int),LocalDateTime,"a LocalDateTime based on this date-time with the requested day, not null"
java.time.LocalDateTime.withDayOfYear(int),LocalDateTime,"a LocalDateTime based on this date with the requested day, not null"
java.time.LocalDateTime.withHour(int),LocalDateTime,"a LocalDateTime based on this date-time with the requested hour, not null"
java.time.LocalDateTime.withMinute(int),LocalDateTime,"a LocalDateTime based on this date-time with the requested minute, not null"
java.time.LocalDateTime.withSecond(int),LocalDateTime,"a LocalDateTime based on this date-time with the requested second, not null"
java.time.LocalDateTime.withNano(int),LocalDateTime,"a LocalDateTime based on this date-time with the requested nanosecond, not null"
java.time.LocalDateTime.truncatedTo(TemporalUnit),LocalDateTime,"a LocalDateTime based on this date-time with the time truncated, not null"
java.time.LocalDateTime.plus(TemporalAmount),LocalDateTime,"a LocalDateTime based on this date-time with the addition made, not null"
"java.time.LocalDateTime.plus(long,TemporalUnit)",LocalDateTime,"a LocalDateTime based on this date-time with the specified amount added, not null"
java.time.LocalDateTime.plusYears(long),LocalDateTime,
java.time.LocalDateTime.plusMonths(long),LocalDateTime,
java.time.LocalDateTime.plusWeeks(long),LocalDateTime,"a LocalDateTime based on this date-time with the weeks added, not null"
java.time.LocalDateTime.plusDays(long),LocalDateTime,"a LocalDateTime based on this date-time with the days added, not null"
java.time.LocalDateTime.plusHours(long),LocalDateTime,"a LocalDateTime based on this date-time with the hours added, not null"
java.time.LocalDateTime.plusMinutes(long),LocalDateTime,"a LocalDateTime based on this date-time with the minutes added, not null"
java.time.LocalDateTime.plusSeconds(long),LocalDateTime,"a LocalDateTime based on this date-time with the seconds added, not null"
java.time.LocalDateTime.plusNanos(long),LocalDateTime,"a LocalDateTime based on this date-time with the nanoseconds added, not null"
java.time.LocalDateTime.minus(TemporalAmount),LocalDateTime,"a LocalDateTime based on this date-time with the subtraction made, not null"
"java.time.LocalDateTime.minus(long,TemporalUnit)",LocalDateTime,"a LocalDateTime based on this date-time with the specified amount subtracted, not null"
java.time.LocalDateTime.minusYears(long),LocalDateTime,
java.time.LocalDateTime.minusMonths(long),LocalDateTime,
java.time.LocalDateTime.minusWeeks(long),LocalDateTime,"a LocalDateTime based on this date-time with the weeks subtracted, not null"
java.time.LocalDateTime.minusDays(long),LocalDateTime,"a LocalDateTime based on this date-time with the days subtracted, not null"
java.time.LocalDateTime.minusHours(long),LocalDateTime,"a LocalDateTime based on this date-time with the hours subtracted, not null"
java.time.LocalDateTime.minusMinutes(long),LocalDateTime,"a LocalDateTime based on this date-time with the minutes subtracted, not null"
java.time.LocalDateTime.minusSeconds(long),LocalDateTime,"a LocalDateTime based on this date-time with the seconds subtracted, not null"
java.time.LocalDateTime.minusNanos(long),LocalDateTime,"a LocalDateTime based on this date-time with the nanoseconds subtracted, not null"
java.time.LocalDateTime.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.LocalDateTime.adjustInto(Temporal),Temporal,"the adjusted object, not null"
"java.time.LocalDateTime.until(Temporal,TemporalUnit)",long,the amount of time between this date-time and the end date-time
java.time.LocalDateTime.format(DateTimeFormatter),String,"the formatted date-time string, not null"
java.time.LocalDateTime.atOffset(ZoneOffset),OffsetDateTime,"the offset date-time formed from this date-time and the specified offset, not null"
java.time.LocalDateTime.atZone(ZoneId),ZonedDateTime,"the zoned date-time formed from this date-time, not null"
java.time.LocalDateTime.compareTo(ChronoLocalDateTime&lt;?&gt;),int,"the comparator value, negative if less, positive if greater"
java.time.LocalDateTime.isAfter(ChronoLocalDateTime&lt;?&gt;),boolean,true if this date-time is after the specified date-time
java.time.LocalDateTime.isBefore(ChronoLocalDateTime&lt;?&gt;),boolean,true if this date-time is before the specified date-time
java.time.LocalDateTime.isEqual(ChronoLocalDateTime&lt;?&gt;),boolean,true if this date-time is equal to the specified date-time
java.time.LocalDateTime.equals(Object),boolean,true if this is equal to the other date-time
java.time.LocalDateTime.hashCode(),int,a suitable hash code
java.time.LocalDateTime.toString(),String,
java.time.LocalTime.now(),LocalTime,"the current time using the system clock and default time-zone, not null"
java.time.LocalTime.now(ZoneId),LocalTime,"the current time using the system clock, not null"
java.time.LocalTime.now(Clock),LocalTime,"the current time, not null"
"java.time.LocalTime.of(int,int)",LocalTime,"the local time, not null"
"java.time.LocalTime.of(int,int,int)",LocalTime,"the local time, not null"
"java.time.LocalTime.of(int,int,int,int)",LocalTime,"the local time, not null"
java.time.LocalTime.ofSecondOfDay(long),LocalTime,"the local time, not null"
java.time.LocalTime.ofNanoOfDay(long),LocalTime,"the local time, not null"
java.time.LocalTime.from(TemporalAccessor),LocalTime,"the local time, not null"
java.time.LocalTime.parse(CharSequence),LocalTime,"the parsed local time, not null"
"java.time.LocalTime.parse(CharSequence,DateTimeFormatter)",LocalTime,"the parsed local time, not null"
java.time.LocalTime.isSupported(TemporalField),boolean,
java.time.LocalTime.isSupported(TemporalUnit),boolean,
java.time.LocalTime.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.LocalTime.get(TemporalField),int,the value for the field
java.time.LocalTime.getLong(TemporalField),long,the value for the field
java.time.LocalTime.getHour(),int,"the hour-of-day, from 0 to 23"
java.time.LocalTime.getMinute(),int,"the minute-of-hour, from 0 to 59"
java.time.LocalTime.getSecond(),int,"the second-of-minute, from 0 to 59"
java.time.LocalTime.getNano(),int,"the nano-of-second, from 0 to 999,999,999"
java.time.LocalTime.with(TemporalAdjuster),LocalTime,"a LocalTime based on this with the adjustment made, not null"
"java.time.LocalTime.with(TemporalField,long)",LocalTime,
java.time.LocalTime.withHour(int),LocalTime,"a LocalTime based on this time with the requested hour, not null"
java.time.LocalTime.withMinute(int),LocalTime,"a LocalTime based on this time with the requested minute, not null"
java.time.LocalTime.withSecond(int),LocalTime,"a LocalTime based on this time with the requested second, not null"
java.time.LocalTime.withNano(int),LocalTime,"a LocalTime based on this time with the requested nanosecond, not null"
java.time.LocalTime.truncatedTo(TemporalUnit),LocalTime,"a LocalTime based on this time with the time truncated, not null"
java.time.LocalTime.plus(TemporalAmount),LocalTime,"a LocalTime based on this time with the addition made, not null"
"java.time.LocalTime.plus(long,TemporalUnit)",LocalTime,
java.time.LocalTime.plusHours(long),LocalTime,"a LocalTime based on this time with the hours added, not null"
java.time.LocalTime.plusMinutes(long),LocalTime,"a LocalTime based on this time with the minutes added, not null"
java.time.LocalTime.plusSeconds(long),LocalTime,"a LocalTime based on this time with the seconds added, not null"
java.time.LocalTime.plusNanos(long),LocalTime,"a LocalTime based on this time with the nanoseconds added, not null"
java.time.LocalTime.minus(TemporalAmount),LocalTime,"a LocalTime based on this time with the subtraction made, not null"
"java.time.LocalTime.minus(long,TemporalUnit)",LocalTime,"a LocalTime based on this time with the specified amount subtracted, not null"
java.time.LocalTime.minusHours(long),LocalTime,"a LocalTime based on this time with the hours subtracted, not null"
java.time.LocalTime.minusMinutes(long),LocalTime,"a LocalTime based on this time with the minutes subtracted, not null"
java.time.LocalTime.minusSeconds(long),LocalTime,"a LocalTime based on this time with the seconds subtracted, not null"
java.time.LocalTime.minusNanos(long),LocalTime,"a LocalTime based on this time with the nanoseconds subtracted, not null"
java.time.LocalTime.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.LocalTime.adjustInto(Temporal),Temporal,"the adjusted object, not null"
"java.time.LocalTime.until(Temporal,TemporalUnit)",long,the amount of time between this time and the end time
java.time.LocalTime.format(DateTimeFormatter),String,"the formatted time string, not null"
java.time.LocalTime.atDate(LocalDate),LocalDateTime,"the local date-time formed from this time and the specified date, not null"
java.time.LocalTime.atOffset(ZoneOffset),OffsetTime,"the offset time formed from this time and the specified offset, not null"
java.time.LocalTime.toSecondOfDay(),int,the second-of-day equivalent to this time
java.time.LocalTime.toNanoOfDay(),long,the nano of day equivalent to this time
java.time.LocalTime.compareTo(LocalTime),int,"the comparator value, negative if less, positive if greater"
java.time.LocalTime.isAfter(LocalTime),boolean,true if this is after the specified time
java.time.LocalTime.isBefore(LocalTime),boolean,true if this point is before the specified time
java.time.LocalTime.equals(Object),boolean,true if this is equal to the other time
java.time.LocalTime.hashCode(),int,a suitable hash code
java.time.LocalTime.toString(),String,
java.time.MonthDay.now(),MonthDay,"the current month-day using the system clock and default time-zone, not null"
java.time.MonthDay.now(ZoneId),MonthDay,"the current month-day using the system clock, not null"
java.time.MonthDay.now(Clock),MonthDay,"the current month-day, not null"
"java.time.MonthDay.of(Month,int)",MonthDay,"the month-day, not null"
"java.time.MonthDay.of(int,int)",MonthDay,"the month-day, not null"
java.time.MonthDay.from(TemporalAccessor),MonthDay,"the month-day, not null"
java.time.MonthDay.parse(CharSequence),MonthDay,"the parsed month-day, not null"
"java.time.MonthDay.parse(CharSequence,DateTimeFormatter)",MonthDay,"the parsed month-day, not null"
java.time.MonthDay.isSupported(TemporalField),boolean,
java.time.MonthDay.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.MonthDay.get(TemporalField),int,the value for the field
java.time.MonthDay.getLong(TemporalField),long,the value for the field
java.time.MonthDay.getMonthValue(),int,"the month-of-year, from 1 to 12"
java.time.MonthDay.getMonth(),Month,"the month-of-year, not null"
java.time.MonthDay.getDayOfMonth(),int,"the day-of-month, from 1 to 31"
java.time.MonthDay.isValidYear(int),boolean,true if the year is valid for this month-day
java.time.MonthDay.withMonth(int),MonthDay,"a MonthDay based on this month-day with the requested month, not null"
java.time.MonthDay.with(Month),MonthDay,"a MonthDay based on this month-day with the requested month, not null"
java.time.MonthDay.withDayOfMonth(int),MonthDay,"a MonthDay based on this month-day with the requested day, not null"
java.time.MonthDay.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.MonthDay.adjustInto(Temporal),Temporal,"the adjusted object, not null"
java.time.MonthDay.format(DateTimeFormatter),String,"the formatted month-day string, not null"
java.time.MonthDay.atYear(int),LocalDate,"the local date formed from this month-day and the specified year, not null"
java.time.MonthDay.compareTo(MonthDay),int,"the comparator value, negative if less, positive if greater"
java.time.MonthDay.isAfter(MonthDay),boolean,true if this is after the specified month-day
java.time.MonthDay.isBefore(MonthDay),boolean,true if this point is before the specified month-day
java.time.MonthDay.equals(Object),boolean,true if this is equal to the other month-day
java.time.MonthDay.hashCode(),int,a suitable hash code
java.time.MonthDay.toString(),String,"a string representation of this month-day, not null"
java.time.OffsetDateTime.timeLineOrder(),Comparator&lt;OffsetDateTime&gt;,a comparator that compares in time-line order
java.time.OffsetDateTime.now(),OffsetDateTime,"the current date-time using the system clock, not null"
java.time.OffsetDateTime.now(ZoneId),OffsetDateTime,"the current date-time using the system clock, not null"
java.time.OffsetDateTime.now(Clock),OffsetDateTime,"the current date-time, not null"
"java.time.OffsetDateTime.of(LocalDate,LocalTime,ZoneOffset)",OffsetDateTime,"the offset date-time, not null"
"java.time.OffsetDateTime.of(LocalDateTime,ZoneOffset)",OffsetDateTime,"the offset date-time, not null"
"java.time.OffsetDateTime.of(int,int,int,int,int,int,int,ZoneOffset)",OffsetDateTime,"the offset date-time, not null"
"java.time.OffsetDateTime.ofInstant(Instant,ZoneId)",OffsetDateTime,"the offset date-time, not null"
java.time.OffsetDateTime.from(TemporalAccessor),OffsetDateTime,"the offset date-time, not null"
java.time.OffsetDateTime.parse(CharSequence),OffsetDateTime,"the parsed offset date-time, not null"
"java.time.OffsetDateTime.parse(CharSequence,DateTimeFormatter)",OffsetDateTime,"the parsed offset date-time, not null"
java.time.OffsetDateTime.isSupported(TemporalField),boolean,
java.time.OffsetDateTime.isSupported(TemporalUnit),boolean,
java.time.OffsetDateTime.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.OffsetDateTime.get(TemporalField),int,the value for the field
java.time.OffsetDateTime.getLong(TemporalField),long,the value for the field
java.time.OffsetDateTime.getOffset(),ZoneOffset,"the zone offset, not null"
java.time.OffsetDateTime.withOffsetSameLocal(ZoneOffset),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested offset, not null"
java.time.OffsetDateTime.withOffsetSameInstant(ZoneOffset),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested offset, not null"
java.time.OffsetDateTime.toLocalDateTime(),LocalDateTime,"the local date-time part of this date-time, not null"
java.time.OffsetDateTime.toLocalDate(),LocalDate,"the date part of this date-time, not null"
java.time.OffsetDateTime.getYear(),int,"the year, from MIN_YEAR to MAX_YEAR"
java.time.OffsetDateTime.getMonthValue(),int,"the month-of-year, from 1 to 12"
java.time.OffsetDateTime.getMonth(),Month,"the month-of-year, not null"
java.time.OffsetDateTime.getDayOfMonth(),int,"the day-of-month, from 1 to 31"
java.time.OffsetDateTime.getDayOfYear(),int,"the day-of-year, from 1 to 365, or 366 in a leap year"
java.time.OffsetDateTime.getDayOfWeek(),DayOfWeek,"the day-of-week, not null"
java.time.OffsetDateTime.toLocalTime(),LocalTime,"the time part of this date-time, not null"
java.time.OffsetDateTime.getHour(),int,"the hour-of-day, from 0 to 23"
java.time.OffsetDateTime.getMinute(),int,"the minute-of-hour, from 0 to 59"
java.time.OffsetDateTime.getSecond(),int,"the second-of-minute, from 0 to 59"
java.time.OffsetDateTime.getNano(),int,"the nano-of-second, from 0 to 999,999,999"
java.time.OffsetDateTime.with(TemporalAdjuster),OffsetDateTime,"an OffsetDateTime based on this with the adjustment made, not null"
"java.time.OffsetDateTime.with(TemporalField,long)",OffsetDateTime,"an OffsetDateTime based on this with the specified field set, not null"
java.time.OffsetDateTime.withYear(int),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested year, not null"
java.time.OffsetDateTime.withMonth(int),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested month, not null"
java.time.OffsetDateTime.withDayOfMonth(int),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested day, not null"
java.time.OffsetDateTime.withDayOfYear(int),OffsetDateTime,"an OffsetDateTime based on this date with the requested day, not null"
java.time.OffsetDateTime.withHour(int),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested hour, not null"
java.time.OffsetDateTime.withMinute(int),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested minute, not null"
java.time.OffsetDateTime.withSecond(int),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested second, not null"
java.time.OffsetDateTime.withNano(int),OffsetDateTime,"an OffsetDateTime based on this date-time with the requested nanosecond, not null"
java.time.OffsetDateTime.truncatedTo(TemporalUnit),OffsetDateTime,"an OffsetDateTime based on this date-time with the time truncated, not null"
java.time.OffsetDateTime.plus(TemporalAmount),OffsetDateTime,"an OffsetDateTime based on this date-time with the addition made, not null"
"java.time.OffsetDateTime.plus(long,TemporalUnit)",OffsetDateTime,"an OffsetDateTime based on this date-time with the specified amount added, not null"
java.time.OffsetDateTime.plusYears(long),OffsetDateTime,
java.time.OffsetDateTime.plusMonths(long),OffsetDateTime,
java.time.OffsetDateTime.plusWeeks(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the weeks added, not null"
java.time.OffsetDateTime.plusDays(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the days added, not null"
java.time.OffsetDateTime.plusHours(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the hours added, not null"
java.time.OffsetDateTime.plusMinutes(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the minutes added, not null"
java.time.OffsetDateTime.plusSeconds(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the seconds added, not null"
java.time.OffsetDateTime.plusNanos(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the nanoseconds added, not null"
java.time.OffsetDateTime.minus(TemporalAmount),OffsetDateTime,"an OffsetDateTime based on this date-time with the subtraction made, not null"
"java.time.OffsetDateTime.minus(long,TemporalUnit)",OffsetDateTime,"an OffsetDateTime based on this date-time with the specified amount subtracted, not null"
java.time.OffsetDateTime.minusYears(long),OffsetDateTime,
java.time.OffsetDateTime.minusMonths(long),OffsetDateTime,
java.time.OffsetDateTime.minusWeeks(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the weeks subtracted, not null"
java.time.OffsetDateTime.minusDays(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the days subtracted, not null"
java.time.OffsetDateTime.minusHours(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the hours subtracted, not null"
java.time.OffsetDateTime.minusMinutes(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the minutes subtracted, not null"
java.time.OffsetDateTime.minusSeconds(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the seconds subtracted, not null"
java.time.OffsetDateTime.minusNanos(long),OffsetDateTime,"an OffsetDateTime based on this date-time with the nanoseconds subtracted, not null"
java.time.OffsetDateTime.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.OffsetDateTime.adjustInto(Temporal),Temporal,"the adjusted object, not null"
"java.time.OffsetDateTime.until(Temporal,TemporalUnit)",long,the amount of time between this date-time and the end date-time
java.time.OffsetDateTime.format(DateTimeFormatter),String,"the formatted date-time string, not null"
java.time.OffsetDateTime.atZoneSameInstant(ZoneId),ZonedDateTime,"the zoned date-time formed from this date-time, not null"
java.time.OffsetDateTime.atZoneSimilarLocal(ZoneId),ZonedDateTime,"the zoned date-time formed from this date and the earliest valid time for the zone, not null"
java.time.OffsetDateTime.toOffsetTime(),OffsetTime,"an OffsetTime representing the time and offset, not null"
java.time.OffsetDateTime.toZonedDateTime(),ZonedDateTime,"a zoned date-time representing the same local date-time and offset, not null"
java.time.OffsetDateTime.toInstant(),Instant,"an Instant representing the same instant, not null"
java.time.OffsetDateTime.toEpochSecond(),long,the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.OffsetDateTime.compareTo(OffsetDateTime),int,
java.time.OffsetDateTime.isAfter(OffsetDateTime),boolean,true if this is after the instant of the specified date-time
java.time.OffsetDateTime.isBefore(OffsetDateTime),boolean,true if this is before the instant of the specified date-time
java.time.OffsetDateTime.isEqual(OffsetDateTime),boolean,true if the instant equals the instant of the specified date-time
java.time.OffsetDateTime.equals(Object),boolean,true if this is equal to the other date-time
java.time.OffsetDateTime.hashCode(),int,a suitable hash code
java.time.OffsetDateTime.toString(),String,
java.time.OffsetTime.now(),OffsetTime,"the current time using the system clock and default time-zone, not null"
java.time.OffsetTime.now(ZoneId),OffsetTime,"the current time using the system clock, not null"
java.time.OffsetTime.now(Clock),OffsetTime,"the current time, not null"
"java.time.OffsetTime.of(LocalTime,ZoneOffset)",OffsetTime,"the offset time, not null"
"java.time.OffsetTime.of(int,int,int,int,ZoneOffset)",OffsetTime,"the offset time, not null"
"java.time.OffsetTime.ofInstant(Instant,ZoneId)",OffsetTime,"the offset time, not null"
java.time.OffsetTime.from(TemporalAccessor),OffsetTime,"the offset time, not null"
java.time.OffsetTime.parse(CharSequence),OffsetTime,"the parsed local time, not null"
"java.time.OffsetTime.parse(CharSequence,DateTimeFormatter)",OffsetTime,"the parsed offset time, not null"
java.time.OffsetTime.isSupported(TemporalField),boolean,
java.time.OffsetTime.isSupported(TemporalUnit),boolean,
java.time.OffsetTime.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.OffsetTime.get(TemporalField),int,the value for the field
java.time.OffsetTime.getLong(TemporalField),long,the value for the field
java.time.OffsetTime.getOffset(),ZoneOffset,"the zone offset, not null"
java.time.OffsetTime.withOffsetSameLocal(ZoneOffset),OffsetTime,"an OffsetTime based on this time with the requested offset, not null"
java.time.OffsetTime.withOffsetSameInstant(ZoneOffset),OffsetTime,"an OffsetTime based on this time with the requested offset, not null"
java.time.OffsetTime.toLocalTime(),LocalTime,"the time part of this date-time, not null"
java.time.OffsetTime.getHour(),int,"the hour-of-day, from 0 to 23"
java.time.OffsetTime.getMinute(),int,"the minute-of-hour, from 0 to 59"
java.time.OffsetTime.getSecond(),int,"the second-of-minute, from 0 to 59"
java.time.OffsetTime.getNano(),int,"the nano-of-second, from 0 to 999,999,999"
java.time.OffsetTime.with(TemporalAdjuster),OffsetTime,"an OffsetTime based on this with the adjustment made, not null"
"java.time.OffsetTime.with(TemporalField,long)",OffsetTime,"an OffsetTime based on this with the specified field set, not null"
java.time.OffsetTime.withHour(int),OffsetTime,"an OffsetTime based on this time with the requested hour, not null"
java.time.OffsetTime.withMinute(int),OffsetTime,"an OffsetTime based on this time with the requested minute, not null"
java.time.OffsetTime.withSecond(int),OffsetTime,"an OffsetTime based on this time with the requested second, not null"
java.time.OffsetTime.withNano(int),OffsetTime,"an OffsetTime based on this time with the requested nanosecond, not null"
java.time.OffsetTime.truncatedTo(TemporalUnit),OffsetTime,"an OffsetTime based on this time with the time truncated, not null"
java.time.OffsetTime.plus(TemporalAmount),OffsetTime,"an OffsetTime based on this time with the addition made, not null"
"java.time.OffsetTime.plus(long,TemporalUnit)",OffsetTime,"an OffsetTime based on this time with the specified amount added, not null"
java.time.OffsetTime.plusHours(long),OffsetTime,"an OffsetTime based on this time with the hours added, not null"
java.time.OffsetTime.plusMinutes(long),OffsetTime,"an OffsetTime based on this time with the minutes added, not null"
java.time.OffsetTime.plusSeconds(long),OffsetTime,"an OffsetTime based on this time with the seconds added, not null"
java.time.OffsetTime.plusNanos(long),OffsetTime,"an OffsetTime based on this time with the nanoseconds added, not null"
java.time.OffsetTime.minus(TemporalAmount),OffsetTime,"an OffsetTime based on this time with the subtraction made, not null"
"java.time.OffsetTime.minus(long,TemporalUnit)",OffsetTime,"an OffsetTime based on this time with the specified amount subtracted, not null"
java.time.OffsetTime.minusHours(long),OffsetTime,"an OffsetTime based on this time with the hours subtracted, not null"
java.time.OffsetTime.minusMinutes(long),OffsetTime,"an OffsetTime based on this time with the minutes subtracted, not null"
java.time.OffsetTime.minusSeconds(long),OffsetTime,"an OffsetTime based on this time with the seconds subtracted, not null"
java.time.OffsetTime.minusNanos(long),OffsetTime,"an OffsetTime based on this time with the nanoseconds subtracted, not null"
java.time.OffsetTime.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.OffsetTime.adjustInto(Temporal),Temporal,"the adjusted object, not null"
"java.time.OffsetTime.until(Temporal,TemporalUnit)",long,the amount of time between this time and the end time
java.time.OffsetTime.format(DateTimeFormatter),String,"the formatted time string, not null"
java.time.OffsetTime.atDate(LocalDate),OffsetDateTime,"the offset date-time formed from this time and the specified date, not null"
java.time.OffsetTime.compareTo(OffsetTime),int,
java.time.OffsetTime.isAfter(OffsetTime),boolean,true if this is after the instant of the specified time
java.time.OffsetTime.isBefore(OffsetTime),boolean,true if this is before the instant of the specified time
java.time.OffsetTime.isEqual(OffsetTime),boolean,true if this is equal to the instant of the specified time
java.time.OffsetTime.equals(Object),boolean,true if this is equal to the other time
java.time.OffsetTime.hashCode(),int,a suitable hash code
java.time.OffsetTime.toString(),String,
java.time.Period.ofYears(int),Period,"the period of years, not null"
java.time.Period.ofMonths(int),Period,"the period of months, not null"
java.time.Period.ofWeeks(int),Period,"the period, with the input weeks converted to days, not null"
java.time.Period.ofDays(int),Period,"the period of days, not null"
"java.time.Period.of(int,int,int)",Period,"the period of years, months and days, not null"
java.time.Period.from(TemporalAmount),Period,"the equivalent period, not null"
java.time.Period.parse(CharSequence),Period,"the parsed period, not null"
"java.time.Period.between(LocalDate,LocalDate)",Period,"the period between this date and the end date, not null"
java.time.Period.get(TemporalUnit),long,the long value of the unit
java.time.Period.getUnits(),List&lt;TemporalUnit&gt;,"a list containing the years, months and days units, not null"
java.time.Period.getChronology(),IsoChronology,"the ISO chronology, not null"
java.time.Period.isZero(),boolean,true if this period is zero-length
java.time.Period.isNegative(),boolean,true if any unit of this period is negative
java.time.Period.getYears(),int,"the amount of years of this period, may be negative"
java.time.Period.getMonths(),int,"the amount of months of this period, may be negative"
java.time.Period.getDays(),int,"the amount of days of this period, may be negative"
java.time.Period.withYears(int),Period,"a Period based on this period with the requested years, not null"
java.time.Period.withMonths(int),Period,"a Period based on this period with the requested months, not null"
java.time.Period.withDays(int),Period,"a Period based on this period with the requested days, not null"
java.time.Period.plus(TemporalAmount),Period,"a Period based on this period with the requested period added, not null"
java.time.Period.plusYears(long),Period,"a Period based on this period with the specified years added, not null"
java.time.Period.plusMonths(long),Period,"a Period based on this period with the specified months added, not null"
java.time.Period.plusDays(long),Period,"a Period based on this period with the specified days added, not null"
java.time.Period.minus(TemporalAmount),Period,"a Period based on this period with the requested period subtracted, not null"
java.time.Period.minusYears(long),Period,"a Period based on this period with the specified years subtracted, not null"
java.time.Period.minusMonths(long),Period,"a Period based on this period with the specified months subtracted, not null"
java.time.Period.minusDays(long),Period,"a Period based on this period with the specified days subtracted, not null"
java.time.Period.multipliedBy(int),Period,"a Period based on this period with the amounts multiplied by the scalar, not null"
java.time.Period.negated(),Period,"a Period based on this period with the amounts negated, not null"
java.time.Period.normalized(),Period,"a Period based on this period with excess months normalized to years, not null"
java.time.Period.toTotalMonths(),long,"the total number of months in the period, may be negative"
java.time.Period.addTo(Temporal),Temporal,"an object of the same type with the adjustment made, not null"
java.time.Period.subtractFrom(Temporal),Temporal,"an object of the same type with the adjustment made, not null"
java.time.Period.equals(Object),boolean,true if this is equal to the other period
java.time.Period.hashCode(),int,a suitable hash code
java.time.Period.toString(),String,"a string representation of this period, not null"
java.time.Year.now(),Year,"the current year using the system clock and default time-zone, not null"
java.time.Year.now(ZoneId),Year,"the current year using the system clock, not null"
java.time.Year.now(Clock),Year,"the current year, not null"
java.time.Year.of(int),Year,"the year, not null"
java.time.Year.from(TemporalAccessor),Year,"the year, not null"
java.time.Year.parse(CharSequence),Year,"the parsed year, not null"
"java.time.Year.parse(CharSequence,DateTimeFormatter)",Year,"the parsed year, not null"
java.time.Year.isLeap(long),boolean,"true if the year is leap, false otherwise"
java.time.Year.getValue(),int,"the year, MIN_VALUE to MAX_VALUE"
java.time.Year.isSupported(TemporalField),boolean,
java.time.Year.isSupported(TemporalUnit),boolean,
java.time.Year.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.Year.get(TemporalField),int,the value for the field
java.time.Year.getLong(TemporalField),long,the value for the field
java.time.Year.isLeap(),boolean,"true if the year is leap, false otherwise"
java.time.Year.isValidMonthDay(MonthDay),boolean,true if the month and day are valid for this year
java.time.Year.length(),int,"the length of this year in days, 365 or 366"
java.time.Year.with(TemporalAdjuster),Year,"a Year based on this with the adjustment made, not null"
"java.time.Year.with(TemporalField,long)",Year,
java.time.Year.plus(TemporalAmount),Year,"a Year based on this year with the addition made, not null"
"java.time.Year.plus(long,TemporalUnit)",Year,
java.time.Year.plusYears(long),Year,"a Year based on this year with the years added, not null"
java.time.Year.minus(TemporalAmount),Year,"a Year based on this year with the subtraction made, not null"
"java.time.Year.minus(long,TemporalUnit)",Year,"a Year based on this year with the specified amount subtracted, not null"
java.time.Year.minusYears(long),Year,"a Year based on this year with the year subtracted, not null"
java.time.Year.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.Year.adjustInto(Temporal),Temporal,"the adjusted object, not null"
"java.time.Year.until(Temporal,TemporalUnit)",long,the amount of time between this year and the end year
java.time.Year.format(DateTimeFormatter),String,"the formatted year string, not null"
java.time.Year.atDay(int),LocalDate,"the local date formed from this year and the specified date of year, not null"
java.time.Year.atMonth(Month),YearMonth,"the year-month formed from this year and the specified month, not null"
java.time.Year.atMonth(int),YearMonth,"the year-month formed from this year and the specified month, not null"
java.time.Year.atMonthDay(MonthDay),LocalDate,"the local date formed from this year and the specified month-day, not null"
java.time.Year.compareTo(Year),int,"the comparator value, negative if less, positive if greater"
java.time.Year.isAfter(Year),boolean,true if this is after the specified year
java.time.Year.isBefore(Year),boolean,true if this point is before the specified year
java.time.Year.equals(Object),boolean,true if this is equal to the other year
java.time.Year.hashCode(),int,a suitable hash code
java.time.Year.toString(),String,"a string representation of this year, not null"
java.time.YearMonth.now(),YearMonth,"the current year-month using the system clock and default time-zone, not null"
java.time.YearMonth.now(ZoneId),YearMonth,"the current year-month using the system clock, not null"
java.time.YearMonth.now(Clock),YearMonth,"the current year-month, not null"
"java.time.YearMonth.of(int,Month)",YearMonth,"the year-month, not null"
"java.time.YearMonth.of(int,int)",YearMonth,"the year-month, not null"
java.time.YearMonth.from(TemporalAccessor),YearMonth,"the year-month, not null"
java.time.YearMonth.parse(CharSequence),YearMonth,"the parsed year-month, not null"
"java.time.YearMonth.parse(CharSequence,DateTimeFormatter)",YearMonth,"the parsed year-month, not null"
java.time.YearMonth.isSupported(TemporalField),boolean,
java.time.YearMonth.isSupported(TemporalUnit),boolean,
java.time.YearMonth.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.YearMonth.get(TemporalField),int,the value for the field
java.time.YearMonth.getLong(TemporalField),long,the value for the field
java.time.YearMonth.getYear(),int,"the year, from MIN_YEAR to MAX_YEAR"
java.time.YearMonth.getMonthValue(),int,"the month-of-year, from 1 to 12"
java.time.YearMonth.getMonth(),Month,"the month-of-year, not null"
java.time.YearMonth.isLeapYear(),boolean,"true if the year is leap, false otherwise"
java.time.YearMonth.isValidDay(int),boolean,true if the day is valid for this year-month
java.time.YearMonth.lengthOfMonth(),int,"the length of the month in days, from 28 to 31"
java.time.YearMonth.lengthOfYear(),int,"366 if the year is leap, 365 otherwise"
java.time.YearMonth.with(TemporalAdjuster),YearMonth,"a YearMonth based on this with the adjustment made, not null"
"java.time.YearMonth.with(TemporalField,long)",YearMonth,
java.time.YearMonth.withYear(int),YearMonth,"a YearMonth based on this year-month with the requested year, not null"
java.time.YearMonth.withMonth(int),YearMonth,"a YearMonth based on this year-month with the requested month, not null"
java.time.YearMonth.plus(TemporalAmount),YearMonth,"a YearMonth based on this year-month with the addition made, not null"
"java.time.YearMonth.plus(long,TemporalUnit)",YearMonth,
java.time.YearMonth.plusYears(long),YearMonth,"a YearMonth based on this year-month with the years added, not null"
java.time.YearMonth.plusMonths(long),YearMonth,"a YearMonth based on this year-month with the months added, not null"
java.time.YearMonth.minus(TemporalAmount),YearMonth,"a YearMonth based on this year-month with the subtraction made, not null"
"java.time.YearMonth.minus(long,TemporalUnit)",YearMonth,"a YearMonth based on this year-month with the specified amount subtracted, not null"
java.time.YearMonth.minusYears(long),YearMonth,"a YearMonth based on this year-month with the years subtracted, not null"
java.time.YearMonth.minusMonths(long),YearMonth,"a YearMonth based on this year-month with the months subtracted, not null"
java.time.YearMonth.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.YearMonth.adjustInto(Temporal),Temporal,"the adjusted object, not null"
"java.time.YearMonth.until(Temporal,TemporalUnit)",long,the amount of time between this year-month and the end year-month
java.time.YearMonth.format(DateTimeFormatter),String,"the formatted year-month string, not null"
java.time.YearMonth.atDay(int),LocalDate,"the date formed from this year-month and the specified day, not null"
java.time.YearMonth.atEndOfMonth(),LocalDate,"the last valid date of this year-month, not null"
java.time.YearMonth.compareTo(YearMonth),int,"the comparator value, negative if less, positive if greater"
java.time.YearMonth.isAfter(YearMonth),boolean,true if this is after the specified year-month
java.time.YearMonth.isBefore(YearMonth),boolean,true if this point is before the specified year-month
java.time.YearMonth.equals(Object),boolean,true if this is equal to the other year-month
java.time.YearMonth.hashCode(),int,a suitable hash code
java.time.YearMonth.toString(),String,"a string representation of this year-month, not null"
java.time.ZonedDateTime.now(),ZonedDateTime,"the current date-time using the system clock, not null"
java.time.ZonedDateTime.now(ZoneId),ZonedDateTime,"the current date-time using the system clock, not null"
java.time.ZonedDateTime.now(Clock),ZonedDateTime,"the current date-time, not null"
"java.time.ZonedDateTime.of(LocalDate,LocalTime,ZoneId)",ZonedDateTime,"the offset date-time, not null"
"java.time.ZonedDateTime.of(LocalDateTime,ZoneId)",ZonedDateTime,"the zoned date-time, not null"
"java.time.ZonedDateTime.of(int,int,int,int,int,int,int,ZoneId)",ZonedDateTime,"the offset date-time, not null"
"java.time.ZonedDateTime.ofLocal(LocalDateTime,ZoneId,ZoneOffset)",ZonedDateTime,"the zoned date-time, not null"
"java.time.ZonedDateTime.ofInstant(Instant,ZoneId)",ZonedDateTime,"the zoned date-time, not null"
"java.time.ZonedDateTime.ofInstant(LocalDateTime,ZoneOffset,ZoneId)",ZonedDateTime,"the zoned date-time, not null"
"java.time.ZonedDateTime.ofStrict(LocalDateTime,ZoneOffset,ZoneId)",ZonedDateTime,"the zoned date-time, not null"
java.time.ZonedDateTime.from(TemporalAccessor),ZonedDateTime,"the zoned date-time, not null"
java.time.ZonedDateTime.parse(CharSequence),ZonedDateTime,"the parsed zoned date-time, not null"
"java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)",ZonedDateTime,"the parsed zoned date-time, not null"
java.time.ZonedDateTime.isSupported(TemporalField),boolean,
java.time.ZonedDateTime.isSupported(TemporalUnit),boolean,
java.time.ZonedDateTime.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.ZonedDateTime.get(TemporalField),int,the value for the field
java.time.ZonedDateTime.getLong(TemporalField),long,the value for the field
java.time.ZonedDateTime.getOffset(),ZoneOffset,"the zone offset, not null"
java.time.ZonedDateTime.withEarlierOffsetAtOverlap(),ZonedDateTime,"a ZonedDateTime based on this date-time with the earlier offset, not null"
java.time.ZonedDateTime.withLaterOffsetAtOverlap(),ZonedDateTime,"a ZonedDateTime based on this date-time with the later offset, not null"
java.time.ZonedDateTime.getZone(),ZoneId,"the time-zone, not null"
java.time.ZonedDateTime.withZoneSameLocal(ZoneId),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested zone, not null"
java.time.ZonedDateTime.withZoneSameInstant(ZoneId),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested zone, not null"
java.time.ZonedDateTime.withFixedOffsetZone(),ZonedDateTime,"a ZonedDateTime with the zone ID set to the offset, not null"
java.time.ZonedDateTime.toLocalDateTime(),LocalDateTime,"the local date-time part of this date-time, not null"
java.time.ZonedDateTime.toLocalDate(),LocalDate,"the date part of this date-time, not null"
java.time.ZonedDateTime.getYear(),int,"the year, from MIN_YEAR to MAX_YEAR"
java.time.ZonedDateTime.getMonthValue(),int,"the month-of-year, from 1 to 12"
java.time.ZonedDateTime.getMonth(),Month,"the month-of-year, not null"
java.time.ZonedDateTime.getDayOfMonth(),int,"the day-of-month, from 1 to 31"
java.time.ZonedDateTime.getDayOfYear(),int,"the day-of-year, from 1 to 365, or 366 in a leap year"
java.time.ZonedDateTime.getDayOfWeek(),DayOfWeek,"the day-of-week, not null"
java.time.ZonedDateTime.toLocalTime(),LocalTime,"the time part of this date-time, not null"
java.time.ZonedDateTime.getHour(),int,"the hour-of-day, from 0 to 23"
java.time.ZonedDateTime.getMinute(),int,"the minute-of-hour, from 0 to 59"
java.time.ZonedDateTime.getSecond(),int,"the second-of-minute, from 0 to 59"
java.time.ZonedDateTime.getNano(),int,"the nano-of-second, from 0 to 999,999,999"
java.time.ZonedDateTime.with(TemporalAdjuster),ZonedDateTime,"a ZonedDateTime based on this with the adjustment made, not null"
"java.time.ZonedDateTime.with(TemporalField,long)",ZonedDateTime,"a ZonedDateTime based on this with the specified field set, not null"
java.time.ZonedDateTime.withYear(int),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested year, not null"
java.time.ZonedDateTime.withMonth(int),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested month, not null"
java.time.ZonedDateTime.withDayOfMonth(int),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested day, not null"
java.time.ZonedDateTime.withDayOfYear(int),ZonedDateTime,"a ZonedDateTime based on this date with the requested day, not null"
java.time.ZonedDateTime.withHour(int),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested hour, not null"
java.time.ZonedDateTime.withMinute(int),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested minute, not null"
java.time.ZonedDateTime.withSecond(int),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested second, not null"
java.time.ZonedDateTime.withNano(int),ZonedDateTime,"a ZonedDateTime based on this date-time with the requested nanosecond, not null"
java.time.ZonedDateTime.truncatedTo(TemporalUnit),ZonedDateTime,"a ZonedDateTime based on this date-time with the time truncated, not null"
java.time.ZonedDateTime.plus(TemporalAmount),ZonedDateTime,"a ZonedDateTime based on this date-time with the addition made, not null"
"java.time.ZonedDateTime.plus(long,TemporalUnit)",ZonedDateTime,"a ZonedDateTime based on this date-time with the specified amount added, not null"
java.time.ZonedDateTime.plusYears(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the years added, not null"
java.time.ZonedDateTime.plusMonths(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the months added, not null"
java.time.ZonedDateTime.plusWeeks(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the weeks added, not null"
java.time.ZonedDateTime.plusDays(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the days added, not null"
java.time.ZonedDateTime.plusHours(long),ZonedDateTime,
java.time.ZonedDateTime.plusMinutes(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the minutes added, not null"
java.time.ZonedDateTime.plusSeconds(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the seconds added, not null"
java.time.ZonedDateTime.plusNanos(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the nanoseconds added, not null"
java.time.ZonedDateTime.minus(TemporalAmount),ZonedDateTime,"a ZonedDateTime based on this date-time with the subtraction made, not null"
"java.time.ZonedDateTime.minus(long,TemporalUnit)",ZonedDateTime,"a ZonedDateTime based on this date-time with the specified amount subtracted, not null"
java.time.ZonedDateTime.minusYears(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the years subtracted, not null"
java.time.ZonedDateTime.minusMonths(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the months subtracted, not null"
java.time.ZonedDateTime.minusWeeks(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the weeks subtracted, not null"
java.time.ZonedDateTime.minusDays(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the days subtracted, not null"
java.time.ZonedDateTime.minusHours(long),ZonedDateTime,
java.time.ZonedDateTime.minusMinutes(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the minutes subtracted, not null"
java.time.ZonedDateTime.minusSeconds(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the seconds subtracted, not null"
java.time.ZonedDateTime.minusNanos(long),ZonedDateTime,"a ZonedDateTime based on this date-time with the nanoseconds subtracted, not null"
java.time.ZonedDateTime.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
"java.time.ZonedDateTime.until(Temporal,TemporalUnit)",long,the amount of time between this date-time and the end date-time
java.time.ZonedDateTime.format(DateTimeFormatter),String,"the formatted date-time string, not null"
java.time.ZonedDateTime.toOffsetDateTime(),OffsetDateTime,"an offset date-time representing the same local date-time and offset, not null"
java.time.ZonedDateTime.equals(Object),boolean,true if this is equal to the other date-time
java.time.ZonedDateTime.hashCode(),int,a suitable hash code
java.time.ZonedDateTime.toString(),String,"a string representation of this date-time, not null"
java.time.ZoneId.systemDefault(),ZoneId,"the zone ID, not null"
java.time.ZoneId.getAvailableZoneIds(),Set&lt;String&gt;,"a modifiable copy of the set of zone IDs, not null"
"java.time.ZoneId.of(String,Map&lt;String,String&gt;)",ZoneId,"the zone ID, not null"
java.time.ZoneId.of(String),ZoneId,
"java.time.ZoneId.ofOffset(String,ZoneOffset)",ZoneId,"the zone ID, not null"
java.time.ZoneId.from(TemporalAccessor),ZoneId,"the zone ID, not null"
java.time.ZoneId.getId(),abstractString,"the time-zone unique ID, not null"
"java.time.ZoneId.getDisplayName(TextStyle,Locale)",String,"the text value of the zone, not null"
java.time.ZoneId.getRules(),abstractZoneRules,"the rules, not null"
java.time.ZoneId.normalized(),ZoneId,"the time-zone unique ID, not null"
java.time.ZoneId.equals(Object),boolean,true if this is equal to the other time-zone ID
java.time.ZoneId.hashCode(),int,a suitable hash code
java.time.ZoneId.toString(),String,"a string representation of this time-zone ID, not null"
java.time.ZoneOffset.of(String),ZoneOffset,
java.time.ZoneOffset.ofHours(int),ZoneOffset,"the zone-offset, not null"
"java.time.ZoneOffset.ofHoursMinutes(int,int)",ZoneOffset,"the zone-offset, not null"
"java.time.ZoneOffset.ofHoursMinutesSeconds(int,int,int)",ZoneOffset,"the zone-offset, not null"
java.time.ZoneOffset.from(TemporalAccessor),ZoneOffset,"the zone-offset, not null"
java.time.ZoneOffset.ofTotalSeconds(int),ZoneOffset,"the ZoneOffset, not null"
java.time.ZoneOffset.getTotalSeconds(),int,the total zone offset amount in seconds
java.time.ZoneOffset.getId(),String,
java.time.ZoneOffset.getRules(),ZoneRules,"the rules, not null"
java.time.ZoneOffset.isSupported(TemporalField),boolean,"true if the field is supported on this offset, false if not"
java.time.ZoneOffset.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.ZoneOffset.get(TemporalField),int,the value for the field
java.time.ZoneOffset.getLong(TemporalField),long,the value for the field
java.time.ZoneOffset.query(TemporalQuery&lt;R&gt;),&lt;R&gt;R,"the query result, null may be returned (defined by the query)"
java.time.ZoneOffset.adjustInto(Temporal),Temporal,"the adjusted object, not null"
java.time.ZoneOffset.compareTo(ZoneOffset),int,"the comparator value, negative if less, positive if greater"
java.time.ZoneOffset.equals(Object),boolean,true if this is equal to the other offset
java.time.ZoneOffset.hashCode(),int,a suitable hash code
java.time.ZoneOffset.toString(),String,"a string representation of this offset, not null"
"java.time.chrono.AbstractChronology.resolveDate(Map&lt;TemporalField,Long&gt;,ResolverStyle)",ChronoLocalDate,
java.time.chrono.AbstractChronology.compareTo(Chronology),int,"the comparator value, negative if less, positive if greater"
java.time.chrono.AbstractChronology.equals(Object),boolean,true if this is equal to the other chronology
java.time.chrono.AbstractChronology.hashCode(),int,a suitable hash code
java.time.chrono.AbstractChronology.toString(),String,"a string representation of this chronology, not null"
java.time.chrono.HijrahChronology.getId(),String,"the chronology ID, non-null"
java.time.chrono.HijrahChronology.getCalendarType(),String,"the calendar system type; non-null if the calendar has a standard type, otherwise null"
"java.time.chrono.HijrahChronology.date(Era,int,int,int)",HijrahDate,"the Hijrah local date, not null"
"java.time.chrono.HijrahChronology.date(int,int,int)",HijrahDate,"the Hijrah local date, not null"
"java.time.chrono.HijrahChronology.dateYearDay(Era,int,int)",HijrahDate,"the Hijrah local date, not null"
"java.time.chrono.HijrahChronology.dateYearDay(int,int)",HijrahDate,"the Hijrah local date, not null"
java.time.chrono.HijrahChronology.dateEpochDay(long),HijrahDate,"the Hijrah local date, not null"
java.time.chrono.HijrahChronology.dateNow(),HijrahDate,"the current local date using the system clock and default time-zone, not null"
java.time.chrono.HijrahChronology.dateNow(ZoneId),HijrahDate,"the current local date using the system clock, not null"
java.time.chrono.HijrahChronology.dateNow(Clock),HijrahDate,"the current local date, not null"
java.time.chrono.HijrahChronology.date(TemporalAccessor),HijrahDate,"the local date in this chronology, not null"
java.time.chrono.HijrahChronology.localDateTime(TemporalAccessor),ChronoLocalDateTime&lt;HijrahDate&gt;,"the local date-time in this chronology, not null"
java.time.chrono.HijrahChronology.zonedDateTime(TemporalAccessor),ChronoZonedDateTime&lt;HijrahDate&gt;,"the zoned date-time in this chronology, not null"
"java.time.chrono.HijrahChronology.zonedDateTime(Instant,ZoneId)",ChronoZonedDateTime&lt;HijrahDate&gt;,"the zoned date-time, not null"
java.time.chrono.HijrahChronology.isLeapYear(long),boolean,
"java.time.chrono.HijrahChronology.prolepticYear(Era,int)",int,the proleptic-year
java.time.chrono.HijrahChronology.eraOf(int),HijrahEra,"the calendar system era, not null"
java.time.chrono.HijrahChronology.eras(),List&lt;Era&gt;,"the list of eras for the chronology, may be immutable, not null"
java.time.chrono.HijrahChronology.range(ChronoField),ValueRange,"the range of valid values for the field, not null"
"java.time.chrono.HijrahChronology.resolveDate(Map&lt;TemporalField,Long&gt;,ResolverStyle)",HijrahDate,
java.time.chrono.HijrahDate.now(),HijrahDate,"the current date using the system clock and default time-zone, not null"
java.time.chrono.HijrahDate.now(ZoneId),HijrahDate,"the current date using the system clock, not null"
java.time.chrono.HijrahDate.now(Clock),HijrahDate,"the current date, not null"
"java.time.chrono.HijrahDate.of(int,int,int)",HijrahDate,"the date in Hijrah calendar system, not null"
java.time.chrono.HijrahDate.from(TemporalAccessor),HijrahDate,"the date in Hijrah calendar system, not null"
java.time.chrono.HijrahDate.getChronology(),HijrahChronology,"the Hijrah chronology, not null"
java.time.chrono.HijrahDate.getEra(),HijrahEra,"the era applicable at this date, not null"
java.time.chrono.HijrahDate.lengthOfMonth(),int,the length of the month in days
java.time.chrono.HijrahDate.lengthOfYear(),int,the length of the year in days
java.time.chrono.HijrahDate.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.chrono.HijrahDate.getLong(TemporalField),long,the value for the field
"java.time.chrono.HijrahDate.with(TemporalField,long)",HijrahDate,"an object of the same type with the specified field set, not null"
java.time.chrono.HijrahDate.with(TemporalAdjuster),HijrahDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.HijrahDate.withVariant(HijrahChronology),HijrahDate,"a HijrahDate with the requested HijrahChronology, non-null"
java.time.chrono.HijrahDate.plus(TemporalAmount),HijrahDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.HijrahDate.minus(TemporalAmount),HijrahDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.HijrahDate.toEpochDay(),long,the Epoch Day equivalent to this date
java.time.chrono.HijrahDate.isLeapYear(),boolean,true if this date is in a leap year
"java.time.chrono.HijrahDate.plus(long,TemporalUnit)",HijrahDate,"an object of the same type with the specified period added, not null"
"java.time.chrono.HijrahDate.minus(long,TemporalUnit)",HijrahDate,"an object of the same type with the specified period subtracted, not null"
java.time.chrono.HijrahDate.atTime(LocalTime),ChronoLocalDateTime&lt;HijrahDate&gt;,"the local date-time formed from this date and the specified time, not null"
java.time.chrono.HijrahDate.until(ChronoLocalDate),ChronoPeriod,"the period between this date and the end date, not null"
java.time.chrono.HijrahDate.equals(Object),boolean,true if this is equal to the other date and the Chronologies are equal
java.time.chrono.HijrahDate.hashCode(),int,a suitable hash code based only on the Chronology and the date
"java.time.chrono.HijrahDate.until(Temporal,TemporalUnit)",long,the amount of time between this date and the end date
java.time.chrono.HijrahDate.toString(),String,a string representation of the object.
java.time.chrono.IsoChronology.getId(),String,the chronology ID - 'ISO'
java.time.chrono.IsoChronology.getCalendarType(),String,the calendar system type - 'iso8601'
"java.time.chrono.IsoChronology.date(Era,int,int,int)",LocalDate,"the ISO local date, not null"
"java.time.chrono.IsoChronology.date(int,int,int)",LocalDate,"the ISO local date, not null"
"java.time.chrono.IsoChronology.dateYearDay(Era,int,int)",LocalDate,"the ISO local date, not null"
"java.time.chrono.IsoChronology.dateYearDay(int,int)",LocalDate,"the ISO local date, not null"
java.time.chrono.IsoChronology.dateEpochDay(long),LocalDate,"the ISO local date, not null"
java.time.chrono.IsoChronology.date(TemporalAccessor),LocalDate,"the ISO local date, not null"
java.time.chrono.IsoChronology.localDateTime(TemporalAccessor),LocalDateTime,"the ISO local date-time, not null"
java.time.chrono.IsoChronology.zonedDateTime(TemporalAccessor),ZonedDateTime,"the ISO zoned date-time, not null"
"java.time.chrono.IsoChronology.zonedDateTime(Instant,ZoneId)",ZonedDateTime,"the zoned date-time, not null"
java.time.chrono.IsoChronology.dateNow(),LocalDate,"the current ISO local date using the system clock and default time-zone, not null"
java.time.chrono.IsoChronology.dateNow(ZoneId),LocalDate,"the current ISO local date using the system clock, not null"
java.time.chrono.IsoChronology.dateNow(Clock),LocalDate,"the current ISO local date, not null"
java.time.chrono.IsoChronology.isLeapYear(long),boolean,"true if the year is leap, false otherwise"
"java.time.chrono.IsoChronology.prolepticYear(Era,int)",int,the proleptic-year
java.time.chrono.IsoChronology.eraOf(int),IsoEra,"the calendar system era, not null"
java.time.chrono.IsoChronology.eras(),List&lt;Era&gt;,"the list of eras for the chronology, may be immutable, not null"
"java.time.chrono.IsoChronology.resolveDate(Map&lt;TemporalField,Long&gt;,ResolverStyle)",LocalDate,
java.time.chrono.IsoChronology.range(ChronoField),ValueRange,"the range of valid values for the field, not null"
"java.time.chrono.IsoChronology.period(int,int,int)",Period,"the period in terms of this chronology, not null"
java.time.chrono.JapaneseChronology.getId(),String,the chronology ID - 'Japanese'
java.time.chrono.JapaneseChronology.getCalendarType(),String,the calendar system type - 'japanese'
"java.time.chrono.JapaneseChronology.date(Era,int,int,int)",JapaneseDate,"the Japanese local date, not null"
"java.time.chrono.JapaneseChronology.date(int,int,int)",JapaneseDate,"the Japanese local date, not null"
"java.time.chrono.JapaneseChronology.dateYearDay(Era,int,int)",JapaneseDate,"the Japanese local date, not null"
"java.time.chrono.JapaneseChronology.dateYearDay(int,int)",JapaneseDate,"the Japanese local date, not null"
java.time.chrono.JapaneseChronology.dateEpochDay(long),JapaneseDate,"the Japanese local date, not null"
java.time.chrono.JapaneseChronology.dateNow(),JapaneseDate,"the current local date using the system clock and default time-zone, not null"
java.time.chrono.JapaneseChronology.dateNow(ZoneId),JapaneseDate,"the current local date using the system clock, not null"
java.time.chrono.JapaneseChronology.dateNow(Clock),JapaneseDate,"the current local date, not null"
java.time.chrono.JapaneseChronology.date(TemporalAccessor),JapaneseDate,"the local date in this chronology, not null"
java.time.chrono.JapaneseChronology.localDateTime(TemporalAccessor),ChronoLocalDateTime&lt;JapaneseDate&gt;,"the local date-time in this chronology, not null"
java.time.chrono.JapaneseChronology.zonedDateTime(TemporalAccessor),ChronoZonedDateTime&lt;JapaneseDate&gt;,"the zoned date-time in this chronology, not null"
"java.time.chrono.JapaneseChronology.zonedDateTime(Instant,ZoneId)",ChronoZonedDateTime&lt;JapaneseDate&gt;,"the zoned date-time, not null"
java.time.chrono.JapaneseChronology.isLeapYear(long),boolean,true if the year is a leap year
"java.time.chrono.JapaneseChronology.prolepticYear(Era,int)",int,the proleptic-year
java.time.chrono.JapaneseChronology.eraOf(int),JapaneseEra,the Japanese Era for the given numeric era value
java.time.chrono.JapaneseChronology.eras(),List&lt;Era&gt;,"the list of eras for the chronology, may be immutable, not null"
java.time.chrono.JapaneseChronology.range(ChronoField),ValueRange,"the range of valid values for the field, not null"
"java.time.chrono.JapaneseChronology.resolveDate(Map&lt;TemporalField,Long&gt;,ResolverStyle)",JapaneseDate,
java.time.chrono.JapaneseDate.now(),JapaneseDate,"the current date using the system clock and default time-zone, not null"
java.time.chrono.JapaneseDate.now(ZoneId),JapaneseDate,"the current date using the system clock, not null"
java.time.chrono.JapaneseDate.now(Clock),JapaneseDate,"the current date, not null"
"java.time.chrono.JapaneseDate.of(JapaneseEra,int,int,int)",JapaneseDate,"the date in Japanese calendar system, not null"
"java.time.chrono.JapaneseDate.of(int,int,int)",JapaneseDate,"the date in Japanese calendar system, not null"
java.time.chrono.JapaneseDate.from(TemporalAccessor),JapaneseDate,"the date in Japanese calendar system, not null"
java.time.chrono.JapaneseDate.getChronology(),JapaneseChronology,"the Japanese chronology, not null"
java.time.chrono.JapaneseDate.getEra(),JapaneseEra,"the era applicable at this date, not null"
java.time.chrono.JapaneseDate.lengthOfMonth(),int,the length of the month in days
java.time.chrono.JapaneseDate.lengthOfYear(),int,the length of the year in days
java.time.chrono.JapaneseDate.isSupported(TemporalField),boolean,
java.time.chrono.JapaneseDate.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.chrono.JapaneseDate.getLong(TemporalField),long,the value for the field
"java.time.chrono.JapaneseDate.with(TemporalField,long)",JapaneseDate,"an object of the same type with the specified field set, not null"
java.time.chrono.JapaneseDate.with(TemporalAdjuster),JapaneseDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.JapaneseDate.plus(TemporalAmount),JapaneseDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.JapaneseDate.minus(TemporalAmount),JapaneseDate,"an object of the same type with the specified adjustment made, not null"
"java.time.chrono.JapaneseDate.plus(long,TemporalUnit)",JapaneseDate,"an object of the same type with the specified period added, not null"
"java.time.chrono.JapaneseDate.minus(long,TemporalUnit)",JapaneseDate,"an object of the same type with the specified period subtracted, not null"
java.time.chrono.JapaneseDate.atTime(LocalTime),ChronoLocalDateTime&lt;JapaneseDate&gt;,"the local date-time formed from this date and the specified time, not null"
java.time.chrono.JapaneseDate.until(ChronoLocalDate),ChronoPeriod,"the period between this date and the end date, not null"
java.time.chrono.JapaneseDate.toEpochDay(),long,the Epoch Day equivalent to this date
java.time.chrono.JapaneseDate.equals(Object),boolean,true if this is equal to the other date
java.time.chrono.JapaneseDate.hashCode(),int,a suitable hash code based only on the Chronology and the date
"java.time.chrono.JapaneseDate.until(Temporal,TemporalUnit)",long,the amount of time between this date and the end date
java.time.chrono.JapaneseDate.toString(),String,a string representation of the object.
java.time.chrono.JapaneseEra.of(int),JapaneseEra,
java.time.chrono.JapaneseEra.valueOf(String),JapaneseEra,"the JapaneseEra singleton, never null"
java.time.chrono.JapaneseEra.values(),JapaneseEra[],an array of JapaneseEras
"java.time.chrono.JapaneseEra.getDisplayName(TextStyle,Locale)",String,"the text value of the era, not null"
java.time.chrono.JapaneseEra.getValue(),int,the era value
java.time.chrono.JapaneseEra.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.chrono.JapaneseEra.toString(),String,a string representation of the object.
java.time.chrono.MinguoChronology.getId(),String,the chronology ID - 'Minguo'
java.time.chrono.MinguoChronology.getCalendarType(),String,the calendar system type - 'roc'
"java.time.chrono.MinguoChronology.date(Era,int,int,int)",MinguoDate,"the Minguo local date, not null"
"java.time.chrono.MinguoChronology.date(int,int,int)",MinguoDate,"the Minguo local date, not null"
"java.time.chrono.MinguoChronology.dateYearDay(Era,int,int)",MinguoDate,"the Minguo local date, not null"
"java.time.chrono.MinguoChronology.dateYearDay(int,int)",MinguoDate,"the Minguo local date, not null"
java.time.chrono.MinguoChronology.dateEpochDay(long),MinguoDate,"the Minguo local date, not null"
java.time.chrono.MinguoChronology.dateNow(),MinguoDate,"the current local date using the system clock and default time-zone, not null"
java.time.chrono.MinguoChronology.dateNow(ZoneId),MinguoDate,"the current local date using the system clock, not null"
java.time.chrono.MinguoChronology.dateNow(Clock),MinguoDate,"the current local date, not null"
java.time.chrono.MinguoChronology.date(TemporalAccessor),MinguoDate,"the local date in this chronology, not null"
java.time.chrono.MinguoChronology.localDateTime(TemporalAccessor),ChronoLocalDateTime&lt;MinguoDate&gt;,"the local date-time in this chronology, not null"
java.time.chrono.MinguoChronology.zonedDateTime(TemporalAccessor),ChronoZonedDateTime&lt;MinguoDate&gt;,"the zoned date-time in this chronology, not null"
"java.time.chrono.MinguoChronology.zonedDateTime(Instant,ZoneId)",ChronoZonedDateTime&lt;MinguoDate&gt;,"the zoned date-time, not null"
java.time.chrono.MinguoChronology.isLeapYear(long),boolean,true if the year is a leap year
"java.time.chrono.MinguoChronology.prolepticYear(Era,int)",int,the proleptic-year
java.time.chrono.MinguoChronology.eraOf(int),MinguoEra,"the calendar system era, not null"
java.time.chrono.MinguoChronology.eras(),List&lt;Era&gt;,"the list of eras for the chronology, may be immutable, not null"
java.time.chrono.MinguoChronology.range(ChronoField),ValueRange,"the range of valid values for the field, not null"
"java.time.chrono.MinguoChronology.resolveDate(Map&lt;TemporalField,Long&gt;,ResolverStyle)",MinguoDate,
java.time.chrono.MinguoDate.now(),MinguoDate,"the current date using the system clock and default time-zone, not null"
java.time.chrono.MinguoDate.now(ZoneId),MinguoDate,"the current date using the system clock, not null"
java.time.chrono.MinguoDate.now(Clock),MinguoDate,"the current date, not null"
"java.time.chrono.MinguoDate.of(int,int,int)",MinguoDate,"the date in Minguo calendar system, not null"
java.time.chrono.MinguoDate.from(TemporalAccessor),MinguoDate,"the date in Minguo calendar system, not null"
java.time.chrono.MinguoDate.getChronology(),MinguoChronology,"the Minguo chronology, not null"
java.time.chrono.MinguoDate.getEra(),MinguoEra,"the era applicable at this date, not null"
java.time.chrono.MinguoDate.lengthOfMonth(),int,the length of the month in days
java.time.chrono.MinguoDate.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.chrono.MinguoDate.getLong(TemporalField),long,the value for the field
"java.time.chrono.MinguoDate.with(TemporalField,long)",MinguoDate,"an object of the same type with the specified field set, not null"
java.time.chrono.MinguoDate.with(TemporalAdjuster),MinguoDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.MinguoDate.plus(TemporalAmount),MinguoDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.MinguoDate.minus(TemporalAmount),MinguoDate,"an object of the same type with the specified adjustment made, not null"
"java.time.chrono.MinguoDate.plus(long,TemporalUnit)",MinguoDate,"an object of the same type with the specified period added, not null"
"java.time.chrono.MinguoDate.minus(long,TemporalUnit)",MinguoDate,"an object of the same type with the specified period subtracted, not null"
java.time.chrono.MinguoDate.atTime(LocalTime),ChronoLocalDateTime&lt;MinguoDate&gt;,"the local date-time formed from this date and the specified time, not null"
java.time.chrono.MinguoDate.until(ChronoLocalDate),ChronoPeriod,"the period between this date and the end date, not null"
java.time.chrono.MinguoDate.toEpochDay(),long,the Epoch Day equivalent to this date
java.time.chrono.MinguoDate.equals(Object),boolean,true if this is equal to the other date
java.time.chrono.MinguoDate.hashCode(),int,a suitable hash code based only on the Chronology and the date
"java.time.chrono.MinguoDate.until(Temporal,TemporalUnit)",long,the amount of time between this date and the end date
java.time.chrono.MinguoDate.toString(),String,a string representation of the object.
java.time.chrono.ThaiBuddhistChronology.getId(),String,the chronology ID - 'ThaiBuddhist'
java.time.chrono.ThaiBuddhistChronology.getCalendarType(),String,the calendar system type - 'buddhist'
"java.time.chrono.ThaiBuddhistChronology.date(Era,int,int,int)",ThaiBuddhistDate,"the Thai Buddhist local date, not null"
"java.time.chrono.ThaiBuddhistChronology.date(int,int,int)",ThaiBuddhistDate,"the Thai Buddhist local date, not null"
"java.time.chrono.ThaiBuddhistChronology.dateYearDay(Era,int,int)",ThaiBuddhistDate,"the Thai Buddhist local date, not null"
"java.time.chrono.ThaiBuddhistChronology.dateYearDay(int,int)",ThaiBuddhistDate,"the Thai Buddhist local date, not null"
java.time.chrono.ThaiBuddhistChronology.dateEpochDay(long),ThaiBuddhistDate,"the Thai Buddhist local date, not null"
java.time.chrono.ThaiBuddhistChronology.dateNow(),ThaiBuddhistDate,"the current local date using the system clock and default time-zone, not null"
java.time.chrono.ThaiBuddhistChronology.dateNow(ZoneId),ThaiBuddhistDate,"the current local date using the system clock, not null"
java.time.chrono.ThaiBuddhistChronology.dateNow(Clock),ThaiBuddhistDate,"the current local date, not null"
java.time.chrono.ThaiBuddhistChronology.date(TemporalAccessor),ThaiBuddhistDate,"the local date in this chronology, not null"
java.time.chrono.ThaiBuddhistChronology.localDateTime(TemporalAccessor),ChronoLocalDateTime&lt;ThaiBuddhistDate&gt;,"the local date-time in this chronology, not null"
java.time.chrono.ThaiBuddhistChronology.zonedDateTime(TemporalAccessor),ChronoZonedDateTime&lt;ThaiBuddhistDate&gt;,"the zoned date-time in this chronology, not null"
"java.time.chrono.ThaiBuddhistChronology.zonedDateTime(Instant,ZoneId)",ChronoZonedDateTime&lt;ThaiBuddhistDate&gt;,"the zoned date-time, not null"
java.time.chrono.ThaiBuddhistChronology.isLeapYear(long),boolean,true if the year is a leap year
"java.time.chrono.ThaiBuddhistChronology.prolepticYear(Era,int)",int,the proleptic-year
java.time.chrono.ThaiBuddhistChronology.eraOf(int),ThaiBuddhistEra,"the calendar system era, not null"
java.time.chrono.ThaiBuddhistChronology.eras(),List&lt;Era&gt;,"the list of eras for the chronology, may be immutable, not null"
java.time.chrono.ThaiBuddhistChronology.range(ChronoField),ValueRange,"the range of valid values for the field, not null"
"java.time.chrono.ThaiBuddhistChronology.resolveDate(Map&lt;TemporalField,Long&gt;,ResolverStyle)",ThaiBuddhistDate,
java.time.chrono.ThaiBuddhistDate.now(),ThaiBuddhistDate,"the current date using the system clock and default time-zone, not null"
java.time.chrono.ThaiBuddhistDate.now(ZoneId),ThaiBuddhistDate,"the current date using the system clock, not null"
java.time.chrono.ThaiBuddhistDate.now(Clock),ThaiBuddhistDate,"the current date, not null"
"java.time.chrono.ThaiBuddhistDate.of(int,int,int)",ThaiBuddhistDate,"the date in Thai Buddhist calendar system, not null"
java.time.chrono.ThaiBuddhistDate.from(TemporalAccessor),ThaiBuddhistDate,"the date in Thai Buddhist calendar system, not null"
java.time.chrono.ThaiBuddhistDate.getChronology(),ThaiBuddhistChronology,"the Thai Buddhist chronology, not null"
java.time.chrono.ThaiBuddhistDate.getEra(),ThaiBuddhistEra,"the era applicable at this date, not null"
java.time.chrono.ThaiBuddhistDate.lengthOfMonth(),int,the length of the month in days
java.time.chrono.ThaiBuddhistDate.range(TemporalField),ValueRange,"the range of valid values for the field, not null"
java.time.chrono.ThaiBuddhistDate.getLong(TemporalField),long,the value for the field
"java.time.chrono.ThaiBuddhistDate.with(TemporalField,long)",ThaiBuddhistDate,"an object of the same type with the specified field set, not null"
java.time.chrono.ThaiBuddhistDate.with(TemporalAdjuster),ThaiBuddhistDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.ThaiBuddhistDate.plus(TemporalAmount),ThaiBuddhistDate,"an object of the same type with the specified adjustment made, not null"
java.time.chrono.ThaiBuddhistDate.minus(TemporalAmount),ThaiBuddhistDate,"an object of the same type with the specified adjustment made, not null"
"java.time.chrono.ThaiBuddhistDate.plus(long,TemporalUnit)",ThaiBuddhistDate,"an object of the same type with the specified period added, not null"
"java.time.chrono.ThaiBuddhistDate.minus(long,TemporalUnit)",ThaiBuddhistDate,"an object of the same type with the specified period subtracted, not null"
java.time.chrono.ThaiBuddhistDate.atTime(LocalTime),ChronoLocalDateTime&lt;ThaiBuddhistDate&gt;,"the local date-time formed from this date and the specified time, not null"
java.time.chrono.ThaiBuddhistDate.until(ChronoLocalDate),ChronoPeriod,"the period between this date and the end date, not null"
java.time.chrono.ThaiBuddhistDate.toEpochDay(),long,the Epoch Day equivalent to this date
java.time.chrono.ThaiBuddhistDate.equals(Object),boolean,true if this is equal to the other date
java.time.chrono.ThaiBuddhistDate.hashCode(),int,a suitable hash code based only on the Chronology and the date
"java.time.chrono.ThaiBuddhistDate.until(Temporal,TemporalUnit)",long,the amount of time between this date and the end date
java.time.chrono.ThaiBuddhistDate.toString(),String,a string representation of the object.
java.time.format.DateTimeFormatter.ofPattern(String),DateTimeFormatter,"the formatter based on the pattern, not null"
"java.time.format.DateTimeFormatter.ofPattern(String,Locale)",DateTimeFormatter,"the formatter based on the pattern, not null"
java.time.format.DateTimeFormatter.ofLocalizedDate(FormatStyle),DateTimeFormatter,"the date formatter, not null"
java.time.format.DateTimeFormatter.ofLocalizedTime(FormatStyle),DateTimeFormatter,"the time formatter, not null"
java.time.format.DateTimeFormatter.ofLocalizedDateTime(FormatStyle),DateTimeFormatter,"the date-time formatter, not null"
"java.time.format.DateTimeFormatter.ofLocalizedDateTime(FormatStyle,FormatStyle)",DateTimeFormatter,"the date, time or date-time formatter, not null"
java.time.format.DateTimeFormatter.parsedExcessDays(),TemporalQuery&lt;Period&gt;,
java.time.format.DateTimeFormatter.parsedLeapSecond(),TemporalQuery&lt;Boolean&gt;,a query that provides access to whether a leap-second was parsed
java.time.format.DateTimeFormatter.getLocale(),Locale,"the locale of this formatter, not null"
java.time.format.DateTimeFormatter.withLocale(Locale),DateTimeFormatter,"a formatter based on this formatter with the requested locale, not null"
java.time.format.DateTimeFormatter.getDecimalStyle(),DecimalStyle,"the locale of this formatter, not null"
java.time.format.DateTimeFormatter.withDecimalStyle(DecimalStyle),DateTimeFormatter,"a formatter based on this formatter with the requested DecimalStyle, not null"
java.time.format.DateTimeFormatter.getChronology(),Chronology,"the override chronology of this formatter, null if no override"
java.time.format.DateTimeFormatter.withChronology(Chronology),DateTimeFormatter,"a formatter based on this formatter with the requested override chronology, not null"
java.time.format.DateTimeFormatter.getZone(),ZoneId,"the override zone of this formatter, null if no override"
java.time.format.DateTimeFormatter.withZone(ZoneId),DateTimeFormatter,"a formatter based on this formatter with the requested override zone, not null"
java.time.format.DateTimeFormatter.getResolverStyle(),ResolverStyle,"the resolver style of this formatter, not null"
java.time.format.DateTimeFormatter.withResolverStyle(ResolverStyle),DateTimeFormatter,"a formatter based on this formatter with the requested resolver style, not null"
java.time.format.DateTimeFormatter.getResolverFields(),Set&lt;TemporalField&gt;,"the immutable set of resolver fields of this formatter, null if no fields"
java.time.format.DateTimeFormatter.withResolverFields(TemporalField...),DateTimeFormatter,"a formatter based on this formatter with the requested resolver style, not null"
java.time.format.DateTimeFormatter.withResolverFields(Set&lt;TemporalField&gt;),DateTimeFormatter,"a formatter based on this formatter with the requested resolver style, not null"
java.time.format.DateTimeFormatter.format(TemporalAccessor),String,"the formatted string, not null"
"java.time.format.DateTimeFormatter.formatTo(TemporalAccessor,Appendable)",void,
java.time.format.DateTimeFormatter.parse(CharSequence),TemporalAccessor,"the parsed temporal object, not null"
"java.time.format.DateTimeFormatter.parse(CharSequence,ParsePosition)",TemporalAccessor,"the parsed temporal object, not null"
"java.time.format.DateTimeFormatter.parse(CharSequence,TemporalQuery&lt;T&gt;)",&lt;T&gt;T,"the parsed date-time, not null"
"java.time.format.DateTimeFormatter.parseBest(CharSequence,TemporalQuery&lt;?&gt;...)",TemporalAccessor,"the parsed date-time, not null"
"java.time.format.DateTimeFormatter.parseUnresolved(CharSequence,ParsePosition)",TemporalAccessor,"the parsed text, null if the parse results in an error"
java.time.format.DateTimeFormatter.toFormat(),Format,"this formatter as a classic format instance, not null"
java.time.format.DateTimeFormatter.toFormat(TemporalQuery&lt;?&gt;),Format,"this formatter as a classic format instance, not null"
java.time.format.DateTimeFormatter.toString(),String,"a description of this formatter, not null"
"java.time.format.DateTimeFormatterBuilder.getLocalizedDateTimePattern(FormatStyle,FormatStyle,Chronology,Locale)",String,the locale and Chronology specific formatting pattern
java.time.format.DateTimeFormatterBuilder.parseCaseSensitive(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.parseCaseInsensitive(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.parseStrict(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.parseLenient(),DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.parseDefaulting(TemporalField,long)",DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendValue(TemporalField),DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendValue(TemporalField,int)",DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendValue(TemporalField,int,int,SignStyle)",DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendValueReduced(TemporalField,int,int,int)",DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendValueReduced(TemporalField,int,int,ChronoLocalDate)",DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendFraction(TemporalField,int,int,boolean)",DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendText(TemporalField),DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendText(TemporalField,TextStyle)",DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendText(TemporalField,Map&lt;Long,String&gt;)",DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendInstant(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendInstant(int),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendOffsetId(),DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendOffset(String,String)",DateTimeFormatterBuilder,
java.time.format.DateTimeFormatterBuilder.appendLocalizedOffset(TextStyle),DateTimeFormatterBuilder,
java.time.format.DateTimeFormatterBuilder.appendZoneId(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendZoneRegionId(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendZoneOrOffsetId(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendZoneText(TextStyle),DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendZoneText(TextStyle,Set&lt;ZoneId&gt;)",DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendChronologyId(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendChronologyText(TextStyle),DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.appendLocalized(FormatStyle,FormatStyle)",DateTimeFormatterBuilder,
java.time.format.DateTimeFormatterBuilder.appendLiteral(char),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendLiteral(String),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.append(DateTimeFormatter),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendOptional(DateTimeFormatter),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.appendPattern(String),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.padNext(int),DateTimeFormatterBuilder,"this, for chaining, not null"
"java.time.format.DateTimeFormatterBuilder.padNext(int,char)",DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.optionalStart(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.optionalEnd(),DateTimeFormatterBuilder,"this, for chaining, not null"
java.time.format.DateTimeFormatterBuilder.toFormatter(),DateTimeFormatter,"the created formatter, not null"
java.time.format.DateTimeFormatterBuilder.toFormatter(Locale),DateTimeFormatter,"the created formatter, not null"
java.time.format.DecimalStyle.getAvailableLocales(),Set&lt;Locale&gt;,a Set of Locales for which localization is supported
java.time.format.DecimalStyle.ofDefaultLocale(),DecimalStyle,"the decimal style, not null"
java.time.format.DecimalStyle.of(Locale),DecimalStyle,"the decimal style, not null"
java.time.format.DecimalStyle.getZeroDigit(),char,the character for zero
java.time.format.DecimalStyle.withZeroDigit(char),DecimalStyle,"a copy with a new character that represents zero, not null"
java.time.format.DecimalStyle.getPositiveSign(),char,the character for the positive sign
java.time.format.DecimalStyle.withPositiveSign(char),DecimalStyle,"a copy with a new character that represents the positive sign, not null"
java.time.format.DecimalStyle.getNegativeSign(),char,the character for the negative sign
java.time.format.DecimalStyle.withNegativeSign(char),DecimalStyle,"a copy with a new character that represents the negative sign, not null"
java.time.format.DecimalStyle.getDecimalSeparator(),char,the character for the decimal point
java.time.format.DecimalStyle.withDecimalSeparator(char),DecimalStyle,"a copy with a new character that represents the decimal point, not null"
java.time.format.DecimalStyle.equals(Object),boolean,true if this is equal to the other date
java.time.format.DecimalStyle.hashCode(),int,a suitable hash code
java.time.format.DecimalStyle.toString(),String,"a string description, not null"
java.time.temporal.TemporalAdjusters.ofDateAdjuster(UnaryOperator&lt;LocalDate&gt;),TemporalAdjuster,"the temporal adjuster wrapping on the date adjuster, not null"
java.time.temporal.TemporalAdjusters.firstDayOfMonth(),TemporalAdjuster,"the first day-of-month adjuster, not null"
java.time.temporal.TemporalAdjusters.lastDayOfMonth(),TemporalAdjuster,"the last day-of-month adjuster, not null"
java.time.temporal.TemporalAdjusters.firstDayOfNextMonth(),TemporalAdjuster,"the first day of next month adjuster, not null"
java.time.temporal.TemporalAdjusters.firstDayOfYear(),TemporalAdjuster,"the first day-of-year adjuster, not null"
java.time.temporal.TemporalAdjusters.lastDayOfYear(),TemporalAdjuster,"the last day-of-year adjuster, not null"
java.time.temporal.TemporalAdjusters.firstDayOfNextYear(),TemporalAdjuster,"the first day of next month adjuster, not null"
java.time.temporal.TemporalAdjusters.firstInMonth(DayOfWeek),TemporalAdjuster,"the first in month adjuster, not null"
java.time.temporal.TemporalAdjusters.lastInMonth(DayOfWeek),TemporalAdjuster,"the first in month adjuster, not null"
"java.time.temporal.TemporalAdjusters.dayOfWeekInMonth(int,DayOfWeek)",TemporalAdjuster,"the day-of-week in month adjuster, not null"
java.time.temporal.TemporalAdjusters.next(DayOfWeek),TemporalAdjuster,"the next day-of-week adjuster, not null"
java.time.temporal.TemporalAdjusters.nextOrSame(DayOfWeek),TemporalAdjuster,"the next-or-same day-of-week adjuster, not null"
java.time.temporal.TemporalAdjusters.previous(DayOfWeek),TemporalAdjuster,"the previous day-of-week adjuster, not null"
java.time.temporal.TemporalAdjusters.previousOrSame(DayOfWeek),TemporalAdjuster,"the previous-or-same day-of-week adjuster, not null"
java.time.temporal.TemporalQueries.zoneId(),TemporalQuery&lt;ZoneId&gt;,"a query that can obtain the zone ID of a temporal, not null"
java.time.temporal.TemporalQueries.chronology(),TemporalQuery&lt;Chronology&gt;,"a query that can obtain the chronology of a temporal, not null"
java.time.temporal.TemporalQueries.precision(),TemporalQuery&lt;TemporalUnit&gt;,"a query that can obtain the precision of a temporal, not null"
java.time.temporal.TemporalQueries.zone(),TemporalQuery&lt;ZoneId&gt;,"a query that can obtain the zone ID or offset of a temporal, not null"
java.time.temporal.TemporalQueries.offset(),TemporalQuery&lt;ZoneOffset&gt;,"a query that can obtain the offset of a temporal, not null"
java.time.temporal.TemporalQueries.localDate(),TemporalQuery&lt;LocalDate&gt;,"a query that can obtain the date of a temporal, not null"
java.time.temporal.TemporalQueries.localTime(),TemporalQuery&lt;LocalTime&gt;,"a query that can obtain the time of a temporal, not null"
"java.time.temporal.ValueRange.of(long,long)",ValueRange,"the ValueRange for min, max, not null"
"java.time.temporal.ValueRange.of(long,long,long)",ValueRange,"the ValueRange for min, smallest max, largest max, not null"
"java.time.temporal.ValueRange.of(long,long,long,long)",ValueRange,"the ValueRange for smallest min, largest min, smallest max, largest max, not null"
java.time.temporal.ValueRange.isFixed(),boolean,true if the set of values is fixed
java.time.temporal.ValueRange.getMinimum(),long,the minimum value for this field
java.time.temporal.ValueRange.getLargestMinimum(),long,the largest possible minimum value for this field
java.time.temporal.ValueRange.getSmallestMaximum(),long,the smallest possible maximum value for this field
java.time.temporal.ValueRange.getMaximum(),long,the maximum value for this field
java.time.temporal.ValueRange.isIntValue(),boolean,true if a valid value always fits in an int
java.time.temporal.ValueRange.isValidValue(long),boolean,true if the value is valid
java.time.temporal.ValueRange.isValidIntValue(long),boolean,true if the value is valid and fits in an int
"java.time.temporal.ValueRange.checkValidValue(long,TemporalField)",long,the value that was passed in
"java.time.temporal.ValueRange.checkValidIntValue(long,TemporalField)",int,the value that was passed in
java.time.temporal.ValueRange.equals(Object),boolean,true if this is equal to the other range
java.time.temporal.ValueRange.hashCode(),int,a suitable hash code
java.time.temporal.ValueRange.toString(),String,"a string representation of this range, not null"
java.time.temporal.WeekFields.of(Locale),WeekFields,"the week-definition, not null"
"java.time.temporal.WeekFields.of(DayOfWeek,int)",WeekFields,"the week-definition, not null"
java.time.temporal.WeekFields.getFirstDayOfWeek(),DayOfWeek,"the first day-of-week, not null"
java.time.temporal.WeekFields.getMinimalDaysInFirstWeek(),int,"the minimal number of days in the first week of a month or year, from 1 to 7"
java.time.temporal.WeekFields.dayOfWeek(),TemporalField,"a field providing access to the day-of-week with localized numbering, not null"
java.time.temporal.WeekFields.weekOfMonth(),TemporalField,"a field providing access to the week-of-month, not null"
java.time.temporal.WeekFields.weekOfYear(),TemporalField,"a field providing access to the week-of-year, not null"
java.time.temporal.WeekFields.weekOfWeekBasedYear(),TemporalField,"a field providing access to the week-of-week-based-year, not null"
java.time.temporal.WeekFields.weekBasedYear(),TemporalField,"a field providing access to the week-based-year, not null"
java.time.temporal.WeekFields.equals(Object),boolean,true if this is equal to the specified rules
java.time.temporal.WeekFields.hashCode(),int,a suitable hash code
java.time.temporal.WeekFields.toString(),String,"the string representation, not null"
"java.time.zone.ZoneOffsetTransition.of(LocalDateTime,ZoneOffset,ZoneOffset)",ZoneOffsetTransition,"the transition, not null"
java.time.zone.ZoneOffsetTransition.getInstant(),Instant,"the transition instant, not null"
java.time.zone.ZoneOffsetTransition.toEpochSecond(),long,the transition epoch second
java.time.zone.ZoneOffsetTransition.getDateTimeBefore(),LocalDateTime,"the transition date-time expressed with the before offset, not null"
java.time.zone.ZoneOffsetTransition.getDateTimeAfter(),LocalDateTime,"the transition date-time expressed with the after offset, not null"
java.time.zone.ZoneOffsetTransition.getOffsetBefore(),ZoneOffset,"the offset before the transition, not null"
java.time.zone.ZoneOffsetTransition.getOffsetAfter(),ZoneOffset,"the offset after the transition, not null"
java.time.zone.ZoneOffsetTransition.getDuration(),Duration,"the duration of the transition, positive for gaps, negative for overlaps"
java.time.zone.ZoneOffsetTransition.isGap(),boolean,"true if this transition is a gap, false if it is an overlap"
java.time.zone.ZoneOffsetTransition.isOverlap(),boolean,"true if this transition is an overlap, false if it is a gap"
java.time.zone.ZoneOffsetTransition.isValidOffset(ZoneOffset),boolean,true if the offset is valid during the transition
java.time.zone.ZoneOffsetTransition.compareTo(ZoneOffsetTransition),int,"the comparator value, negative if less, positive if greater"
java.time.zone.ZoneOffsetTransition.equals(Object),boolean,true if equal
java.time.zone.ZoneOffsetTransition.hashCode(),int,the hash code
java.time.zone.ZoneOffsetTransition.toString(),String,"a string for debugging, not null"
"java.time.zone.ZoneOffsetTransitionRule.of(Month,int,DayOfWeek,LocalTime,boolean,ZoneOffsetTransitionRule.TimeDefinition,ZoneOffset,ZoneOffset,ZoneOffset)",ZoneOffsetTransitionRule,"the rule, not null"
java.time.zone.ZoneOffsetTransitionRule.getMonth(),Month,"the month of the transition, not null"
java.time.zone.ZoneOffsetTransitionRule.getDayOfMonthIndicator(),int,"the day-of-month indicator, from -28 to 31 excluding 0"
java.time.zone.ZoneOffsetTransitionRule.getDayOfWeek(),DayOfWeek,"the day-of-week that the transition occurs, null if the rule defines an exact date"
java.time.zone.ZoneOffsetTransitionRule.getLocalTime(),LocalTime,"the local time of day of the transition, not null"
java.time.zone.ZoneOffsetTransitionRule.isMidnightEndOfDay(),boolean,whether a local time of midnight is at the start or end of the day
java.time.zone.ZoneOffsetTransitionRule.getTimeDefinition(),ZoneOffsetTransitionRule.TimeDefinition,"the time definition, not null"
java.time.zone.ZoneOffsetTransitionRule.getStandardOffset(),ZoneOffset,"the standard offset, not null"
java.time.zone.ZoneOffsetTransitionRule.getOffsetBefore(),ZoneOffset,"the offset before, not null"
java.time.zone.ZoneOffsetTransitionRule.getOffsetAfter(),ZoneOffset,"the offset after, not null"
java.time.zone.ZoneOffsetTransitionRule.createTransition(int),ZoneOffsetTransition,"the transition instance, not null"
java.time.zone.ZoneOffsetTransitionRule.equals(Object),boolean,true if equal
java.time.zone.ZoneOffsetTransitionRule.hashCode(),int,the hash code
java.time.zone.ZoneOffsetTransitionRule.toString(),String,"a string for debugging, not null"
"java.time.zone.ZoneRules.of(ZoneOffset,ZoneOffset,List&lt;ZoneOffsetTransition&gt;,List&lt;ZoneOffsetTransition&gt;,List&lt;ZoneOffsetTransitionRule&gt;)",ZoneRules,"the zone rules, not null"
java.time.zone.ZoneRules.of(ZoneOffset),ZoneRules,"the zone rules, not null"
java.time.zone.ZoneRules.isFixedOffset(),boolean,true if the time-zone is fixed and the offset never changes
java.time.zone.ZoneRules.getOffset(Instant),ZoneOffset,"the offset, not null"
java.time.zone.ZoneRules.getOffset(LocalDateTime),ZoneOffset,
java.time.zone.ZoneRules.getValidOffsets(LocalDateTime),List&lt;ZoneOffset&gt;,
java.time.zone.ZoneRules.getTransition(LocalDateTime),ZoneOffsetTransition,
java.time.zone.ZoneRules.getStandardOffset(Instant),ZoneOffset,"the standard offset, not null"
java.time.zone.ZoneRules.getDaylightSavings(Instant),Duration,"the difference between the standard and actual offset, not null"
java.time.zone.ZoneRules.isDaylightSavings(Instant),boolean,"the standard offset, not null"
"java.time.zone.ZoneRules.isValidOffset(LocalDateTime,ZoneOffset)",boolean,true if the offset date-time is valid for these rules
java.time.zone.ZoneRules.nextTransition(Instant),ZoneOffsetTransition,"the next transition after the specified instant, null if this is after the last transition"
java.time.zone.ZoneRules.previousTransition(Instant),ZoneOffsetTransition,"the previous transition after the specified instant, null if this is before the first transition"
java.time.zone.ZoneRules.getTransitions(),List&lt;ZoneOffsetTransition&gt;,"an immutable list of fully defined transitions, not null"
java.time.zone.ZoneRules.getTransitionRules(),List&lt;ZoneOffsetTransitionRule&gt;,"an immutable list of transition rules, not null"
java.time.zone.ZoneRules.equals(Object),boolean,true if this rules is the same as that specified
java.time.zone.ZoneRules.hashCode(),int,the hash code
java.time.zone.ZoneRules.toString(),String,"a string for debugging, not null"
java.time.zone.ZoneRulesProvider.getAvailableZoneIds(),Set&lt;String&gt;,"a modifiable copy of the set of zone IDs, not null"
"java.time.zone.ZoneRulesProvider.getRules(String,boolean)",ZoneRules,"the rules, null if forCaching is true and this is a dynamic provider that wants to prevent caching in ZoneId, otherwise not null"
java.time.zone.ZoneRulesProvider.getVersions(String),"NavigableMap&lt;String,ZoneRules&gt;","a modifiable copy of the history of the rules for the ID, sorted from oldest to newest, not null"
java.time.zone.ZoneRulesProvider.registerProvider(ZoneRulesProvider),void,
java.time.zone.ZoneRulesProvider.refresh(),boolean,true if the rules were updated
java.time.zone.ZoneRulesProvider.provideZoneIds(),abstractSet&lt;String&gt;,"the set of zone IDs being provided, not null"
"java.time.zone.ZoneRulesProvider.provideRules(String,boolean)",abstractZoneRules,"the rules, null if forCaching is true and this is a dynamic provider that wants to prevent caching in ZoneId, otherwise not null"
java.time.zone.ZoneRulesProvider.provideVersions(String),"abstractNavigableMap&lt;String,ZoneRules&gt;","a modifiable copy of the history of the rules for the ID, sorted from oldest to newest, not null"
java.time.zone.ZoneRulesProvider.provideRefresh(),boolean,true if the rules were updated
java.util.AbstractCollection.iterator(),abstractIterator&lt;E&gt;,an iterator over the elements contained in this collection
java.util.AbstractCollection.size(),abstractint,the number of elements in this collection
java.util.AbstractCollection.isEmpty(),boolean,true if this collection contains no elements
java.util.AbstractCollection.contains(Object),boolean,true if this collection contains the specified element
java.util.AbstractCollection.toArray(),Object[],an array containing all of the elements in this collection
java.util.AbstractCollection.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this collection
java.util.AbstractCollection.add(E),boolean,true if this collection changed as a result of the call
java.util.AbstractCollection.remove(Object),boolean,true if an element was removed as a result of this call
java.util.AbstractCollection.containsAll(Collection&lt;?&gt;),boolean,true if this collection contains all of the elements in the specified collection
java.util.AbstractCollection.addAll(Collection&lt;?),boolean,true if this collection changed as a result of the call
java.util.AbstractCollection.removeAll(Collection&lt;?&gt;),boolean,true if this collection changed as a result of the call
java.util.AbstractCollection.retainAll(Collection&lt;?&gt;),boolean,true if this collection changed as a result of the call
java.util.AbstractCollection.clear(),void,
java.util.AbstractCollection.toString(),String,a string representation of this collection
java.util.AbstractList.add(E),boolean,true (as specified by Collection.add(E))
java.util.AbstractList.get(int),abstractE,the element at the specified position in this list
"java.util.AbstractList.set(int,E)",E,the element previously at the specified position
"java.util.AbstractList.add(int,E)",void,
java.util.AbstractList.remove(int),E,the element previously at the specified position
java.util.AbstractList.indexOf(Object),int,"the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
java.util.AbstractList.lastIndexOf(Object),int,"the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
java.util.AbstractList.clear(),void,
"java.util.AbstractList.addAll(int,Collection&lt;?)",boolean,true if this list changed as a result of the call
java.util.AbstractList.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this list in proper sequence
java.util.AbstractList.listIterator(),ListIterator&lt;E&gt;,a list iterator over the elements in this list (in proper sequence)
java.util.AbstractList.listIterator(int),ListIterator&lt;E&gt;,"a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"
"java.util.AbstractList.subList(int,int)",List&lt;E&gt;,a view of the specified range within this list
java.util.AbstractList.equals(Object),boolean,true if the specified object is equal to this list
java.util.AbstractList.hashCode(),int,the hash code value for this list
"java.util.AbstractList.removeRange(int,int)",void,
java.util.AbstractMap.size(),int,the number of key-value mappings in this map
java.util.AbstractMap.isEmpty(),boolean,true if this map contains no key-value mappings
java.util.AbstractMap.containsValue(Object),boolean,true if this map maps one or more keys to the specified value
java.util.AbstractMap.containsKey(Object),boolean,true if this map contains a mapping for the specified key
java.util.AbstractMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
"java.util.AbstractMap.put(K,V)",V,"the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key, if the implementation supports null values.)"
java.util.AbstractMap.remove(Object),V,"the previous value associated with key, or null if there was no mapping for key."
"java.util.AbstractMap.putAll(Map&lt;?,?)",void,
java.util.AbstractMap.clear(),void,
java.util.AbstractMap.keySet(),Set&lt;K&gt;,a set view of the keys contained in this map
java.util.AbstractMap.values(),Collection&lt;V&gt;,a collection view of the values contained in this map
java.util.AbstractMap.entrySet(),"abstractSet&lt;Map.Entry&lt;K,V&gt;&gt;",a set view of the mappings contained in this map
java.util.AbstractMap.equals(Object),boolean,true if the specified object is equal to this map
java.util.AbstractMap.hashCode(),int,the hash code value for this map
java.util.AbstractMap.toString(),String,a string representation of this map
java.util.AbstractMap.clone(),Object,a shallow copy of this map
java.util.AbstractMap.SimpleEntry.getKey(),K,the key corresponding to this entry
java.util.AbstractMap.SimpleEntry.getValue(),V,the value corresponding to this entry
java.util.AbstractMap.SimpleEntry.setValue(V),V,the old value corresponding to the entry
java.util.AbstractMap.SimpleEntry.equals(Object),boolean,true if the specified object is equal to this map entry
java.util.AbstractMap.SimpleEntry.hashCode(),int,the hash code value for this map entry
java.util.AbstractMap.SimpleEntry.toString(),String,a String representation of this map entry
java.util.AbstractMap.SimpleImmutableEntry.getKey(),K,the key corresponding to this entry
java.util.AbstractMap.SimpleImmutableEntry.getValue(),V,the value corresponding to this entry
java.util.AbstractMap.SimpleImmutableEntry.setValue(V),V,(Does not return)
java.util.AbstractMap.SimpleImmutableEntry.equals(Object),boolean,true if the specified object is equal to this map entry
java.util.AbstractMap.SimpleImmutableEntry.hashCode(),int,the hash code value for this map entry
java.util.AbstractMap.SimpleImmutableEntry.toString(),String,a String representation of this map entry
java.util.AbstractQueue.add(E),boolean,true (as specified by Collection.add(E))
java.util.AbstractQueue.remove(),E,the head of this queue
java.util.AbstractQueue.element(),E,the head of this queue
java.util.AbstractQueue.clear(),void,
java.util.AbstractQueue.addAll(Collection&lt;?),boolean,true if this queue changed as a result of the call
java.util.AbstractSequentialList.get(int),E,the element at the specified position in this list
"java.util.AbstractSequentialList.set(int,E)",E,the element previously at the specified position
"java.util.AbstractSequentialList.add(int,E)",void,
java.util.AbstractSequentialList.remove(int),E,the element previously at the specified position
"java.util.AbstractSequentialList.addAll(int,Collection&lt;?)",boolean,true if this list changed as a result of the call
java.util.AbstractSequentialList.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this list (in proper sequence)
java.util.AbstractSequentialList.listIterator(int),abstractListIterator&lt;E&gt;,a list iterator over the elements in this list (in proper sequence)
java.util.AbstractSet.equals(Object),boolean,true if the specified object is equal to this set
java.util.AbstractSet.hashCode(),int,the hash code value for this set
java.util.AbstractSet.removeAll(Collection&lt;?&gt;),boolean,true if this set changed as a result of the call
java.util.ArrayDeque.addFirst(E),void,
java.util.ArrayDeque.addLast(E),void,
java.util.ArrayDeque.offerFirst(E),boolean,true (as specified by Deque.offerFirst(E))
java.util.ArrayDeque.offerLast(E),boolean,true (as specified by Deque.offerLast(E))
java.util.ArrayDeque.removeFirst(),E,the head of this deque
java.util.ArrayDeque.removeLast(),E,the tail of this deque
java.util.ArrayDeque.pollFirst(),E,"the head of this deque, or null if this deque is empty"
java.util.ArrayDeque.pollLast(),E,"the tail of this deque, or null if this deque is empty"
java.util.ArrayDeque.getFirst(),E,the head of this deque
java.util.ArrayDeque.getLast(),E,the tail of this deque
java.util.ArrayDeque.peekFirst(),E,"the head of this deque, or null if this deque is empty"
java.util.ArrayDeque.peekLast(),E,"the tail of this deque, or null if this deque is empty"
java.util.ArrayDeque.removeFirstOccurrence(Object),boolean,true if the deque contained the specified element
java.util.ArrayDeque.removeLastOccurrence(Object),boolean,true if the deque contained the specified element
java.util.ArrayDeque.add(E),boolean,true (as specified by Collection.add(E))
java.util.ArrayDeque.offer(E),boolean,true (as specified by Queue.offer(E))
java.util.ArrayDeque.remove(),E,the head of the queue represented by this deque
java.util.ArrayDeque.poll(),E,"the head of the queue represented by this deque, or null if this deque is empty"
java.util.ArrayDeque.element(),E,the head of the queue represented by this deque
java.util.ArrayDeque.peek(),E,"the head of the queue represented by this deque, or null if this deque is empty"
java.util.ArrayDeque.push(E),void,
java.util.ArrayDeque.pop(),E,the element at the front of this deque (which is the top of the stack represented by this deque)
java.util.ArrayDeque.size(),int,the number of elements in this deque
java.util.ArrayDeque.isEmpty(),boolean,true if this deque contains no elements
java.util.ArrayDeque.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this deque
java.util.ArrayDeque.descendingIterator(),Iterator&lt;E&gt;,an iterator over the elements in this deque in reverse sequence
java.util.ArrayDeque.contains(Object),boolean,true if this deque contains the specified element
java.util.ArrayDeque.remove(Object),boolean,true if this deque contained the specified element
java.util.ArrayDeque.clear(),void,
java.util.ArrayDeque.toArray(),Object[],an array containing all of the elements in this deque
java.util.ArrayDeque.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this deque
java.util.ArrayDeque.clone(),ArrayDeque&lt;E&gt;,a copy of this deque
java.util.ArrayDeque.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this deque
java.util.ArrayList.trimToSize(),void,
java.util.ArrayList.ensureCapacity(int),void,
java.util.ArrayList.size(),int,the number of elements in this list
java.util.ArrayList.isEmpty(),boolean,true if this list contains no elements
java.util.ArrayList.contains(Object),boolean,true if this list contains the specified element
java.util.ArrayList.indexOf(Object),int,"the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
java.util.ArrayList.lastIndexOf(Object),int,"the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
java.util.ArrayList.clone(),Object,a clone of this ArrayList instance
java.util.ArrayList.toArray(),Object[],an array containing all of the elements in this list in proper sequence
java.util.ArrayList.toArray(T[]),&lt;T&gt;T[],an array containing the elements of the list
java.util.ArrayList.get(int),E,the element at the specified position in this list
"java.util.ArrayList.set(int,E)",E,the element previously at the specified position
java.util.ArrayList.add(E),boolean,true (as specified by Collection.add(E))
"java.util.ArrayList.add(int,E)",void,
java.util.ArrayList.remove(int),E,the element that was removed from the list
java.util.ArrayList.remove(Object),boolean,true if this list contained the specified element
java.util.ArrayList.clear(),void,
java.util.ArrayList.addAll(Collection&lt;?),boolean,true if this list changed as a result of the call
"java.util.ArrayList.addAll(int,Collection&lt;?)",boolean,true if this list changed as a result of the call
"java.util.ArrayList.removeRange(int,int)",void,
java.util.ArrayList.removeAll(Collection&lt;?&gt;),boolean,true if this list changed as a result of the call
java.util.ArrayList.retainAll(Collection&lt;?&gt;),boolean,true if this list changed as a result of the call
java.util.ArrayList.listIterator(int),ListIterator&lt;E&gt;,"a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"
java.util.ArrayList.listIterator(),ListIterator&lt;E&gt;,a list iterator over the elements in this list (in proper sequence)
java.util.ArrayList.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this list in proper sequence
"java.util.ArrayList.subList(int,int)",List&lt;E&gt;,a view of the specified range within this list
java.util.ArrayList.forEach(Consumer&lt;?),void,
java.util.ArrayList.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this list
java.util.ArrayList.removeIf(Predicate&lt;?),boolean,true if any elements were removed
java.util.ArrayList.replaceAll(UnaryOperator&lt;E&gt;),void,
java.util.ArrayList.sort(Comparator&lt;?),void,
java.util.Arrays.sort(int[]),void,
"java.util.Arrays.sort(int[],int,int)",void,
java.util.Arrays.sort(long[]),void,
"java.util.Arrays.sort(long[],int,int)",void,
java.util.Arrays.sort(short[]),void,
"java.util.Arrays.sort(short[],int,int)",void,
java.util.Arrays.sort(char[]),void,
"java.util.Arrays.sort(char[],int,int)",void,
java.util.Arrays.sort(byte[]),void,
"java.util.Arrays.sort(byte[],int,int)",void,
java.util.Arrays.sort(float[]),void,
"java.util.Arrays.sort(float[],int,int)",void,
java.util.Arrays.sort(double[]),void,
"java.util.Arrays.sort(double[],int,int)",void,
java.util.Arrays.parallelSort(byte[]),void,
"java.util.Arrays.parallelSort(byte[],int,int)",void,
java.util.Arrays.parallelSort(char[]),void,
"java.util.Arrays.parallelSort(char[],int,int)",void,
java.util.Arrays.parallelSort(short[]),void,
"java.util.Arrays.parallelSort(short[],int,int)",void,
java.util.Arrays.parallelSort(int[]),void,
"java.util.Arrays.parallelSort(int[],int,int)",void,
java.util.Arrays.parallelSort(long[]),void,
"java.util.Arrays.parallelSort(long[],int,int)",void,
java.util.Arrays.parallelSort(float[]),void,
"java.util.Arrays.parallelSort(float[],int,int)",void,
java.util.Arrays.parallelSort(double[]),void,
"java.util.Arrays.parallelSort(double[],int,int)",void,
java.util.Arrays.parallelSort(T[]),&lt;T extends Comparable&lt;? super T&gt;&gt;void,
"java.util.Arrays.parallelSort(T[],int,int)",&lt;T extends Comparable&lt;? super T&gt;&gt;void,
"java.util.Arrays.parallelSort(T[],Comparator&lt;?)",&lt;T&gt;void,
"java.util.Arrays.parallelSort(T[],int,int,Comparator&lt;?)",&lt;T&gt;void,
java.util.Arrays.sort(Object[]),void,
"java.util.Arrays.sort(Object[],int,int)",void,
"java.util.Arrays.sort(T[],Comparator&lt;?)",&lt;T&gt;void,
"java.util.Arrays.sort(T[],int,int,Comparator&lt;?)",&lt;T&gt;void,
"java.util.Arrays.parallelPrefix(T[],BinaryOperator&lt;T&gt;)",&lt;T&gt;void,
"java.util.Arrays.parallelPrefix(T[],int,int,BinaryOperator&lt;T&gt;)",&lt;T&gt;void,
"java.util.Arrays.parallelPrefix(long[],LongBinaryOperator)",void,
"java.util.Arrays.parallelPrefix(long[],int,int,LongBinaryOperator)",void,
"java.util.Arrays.parallelPrefix(double[],DoubleBinaryOperator)",void,
"java.util.Arrays.parallelPrefix(double[],int,int,DoubleBinaryOperator)",void,
"java.util.Arrays.parallelPrefix(int[],IntBinaryOperator)",void,
"java.util.Arrays.parallelPrefix(int[],int,int,IntBinaryOperator)",void,
"java.util.Arrays.binarySearch(long[],long)",int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(long[],int,int,long)",int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(int[],int)",int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(int[],int,int,int)",int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(short[],short)",int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(short[],int,int,short)",int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(char[],char)",int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(char[],int,int,char)",int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(byte[],byte)",int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(byte[],int,int,byte)",int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(double[],double)",int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(double[],int,int,double)",int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(float[],float)",int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(float[],int,int,float)",int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(Object[],Object)",int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(Object[],int,int,Object)",int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(T[],T,Comparator&lt;?)",&lt;T&gt;int,"index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.binarySearch(T[],int,int,T,Comparator&lt;?)",&lt;T&gt;int,"index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Arrays.equals(long[],long[])",boolean,true if the two arrays are equal
"java.util.Arrays.equals(int[],int[])",boolean,true if the two arrays are equal
"java.util.Arrays.equals(short[],short[])",boolean,true if the two arrays are equal
"java.util.Arrays.equals(char[],char[])",boolean,true if the two arrays are equal
"java.util.Arrays.equals(byte[],byte[])",boolean,true if the two arrays are equal
"java.util.Arrays.equals(boolean[],boolean[])",boolean,true if the two arrays are equal
"java.util.Arrays.equals(double[],double[])",boolean,true if the two arrays are equal
"java.util.Arrays.equals(float[],float[])",boolean,true if the two arrays are equal
"java.util.Arrays.equals(Object[],Object[])",boolean,true if the two arrays are equal
"java.util.Arrays.fill(long[],long)",void,
"java.util.Arrays.fill(long[],int,int,long)",void,
"java.util.Arrays.fill(int[],int)",void,
"java.util.Arrays.fill(int[],int,int,int)",void,
"java.util.Arrays.fill(short[],short)",void,
"java.util.Arrays.fill(short[],int,int,short)",void,
"java.util.Arrays.fill(char[],char)",void,
"java.util.Arrays.fill(char[],int,int,char)",void,
"java.util.Arrays.fill(byte[],byte)",void,
"java.util.Arrays.fill(byte[],int,int,byte)",void,
"java.util.Arrays.fill(boolean[],boolean)",void,
"java.util.Arrays.fill(boolean[],int,int,boolean)",void,
"java.util.Arrays.fill(double[],double)",void,
"java.util.Arrays.fill(double[],int,int,double)",void,
"java.util.Arrays.fill(float[],float)",void,
"java.util.Arrays.fill(float[],int,int,float)",void,
"java.util.Arrays.fill(Object[],Object)",void,
"java.util.Arrays.fill(Object[],int,int,Object)",void,
"java.util.Arrays.copyOf(T[],int)",&lt;T&gt;T[],"a copy of the original array, truncated or padded with nulls to obtain the specified length"
"java.util.Arrays.copyOf(U[],int,Class&lt;?)","&lt;T,U&gt;T[]","a copy of the original array, truncated or padded with nulls to obtain the specified length"
"java.util.Arrays.copyOf(byte[],int)",byte[],"a copy of the original array, truncated or padded with zeros to obtain the specified length"
"java.util.Arrays.copyOf(short[],int)",short[],"a copy of the original array, truncated or padded with zeros to obtain the specified length"
"java.util.Arrays.copyOf(int[],int)",int[],"a copy of the original array, truncated or padded with zeros to obtain the specified length"
"java.util.Arrays.copyOf(long[],int)",long[],"a copy of the original array, truncated or padded with zeros to obtain the specified length"
"java.util.Arrays.copyOf(char[],int)",char[],"a copy of the original array, truncated or padded with null characters to obtain the specified length"
"java.util.Arrays.copyOf(float[],int)",float[],"a copy of the original array, truncated or padded with zeros to obtain the specified length"
"java.util.Arrays.copyOf(double[],int)",double[],"a copy of the original array, truncated or padded with zeros to obtain the specified length"
"java.util.Arrays.copyOf(boolean[],int)",boolean[],"a copy of the original array, truncated or padded with false elements to obtain the specified length"
"java.util.Arrays.copyOfRange(T[],int,int)",&lt;T&gt;T[],"a new array containing the specified range from the original array, truncated or padded with nulls to obtain the required length"
"java.util.Arrays.copyOfRange(U[],int,int,Class&lt;?)","&lt;T,U&gt;T[]","a new array containing the specified range from the original array, truncated or padded with nulls to obtain the required length"
"java.util.Arrays.copyOfRange(byte[],int,int)",byte[],"a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"
"java.util.Arrays.copyOfRange(short[],int,int)",short[],"a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"
"java.util.Arrays.copyOfRange(int[],int,int)",int[],"a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"
"java.util.Arrays.copyOfRange(long[],int,int)",long[],"a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"
"java.util.Arrays.copyOfRange(char[],int,int)",char[],"a new array containing the specified range from the original array, truncated or padded with null characters to obtain the required length"
"java.util.Arrays.copyOfRange(float[],int,int)",float[],"a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"
"java.util.Arrays.copyOfRange(double[],int,int)",double[],"a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"
"java.util.Arrays.copyOfRange(boolean[],int,int)",boolean[],"a new array containing the specified range from the original array, truncated or padded with false elements to obtain the required length"
java.util.Arrays.asList(T...),&lt;T&gt;List&lt;T&gt;,a list view of the specified array
java.util.Arrays.hashCode(long[]),int,a content-based hash code for a
java.util.Arrays.hashCode(int[]),int,a content-based hash code for a
java.util.Arrays.hashCode(short[]),int,a content-based hash code for a
java.util.Arrays.hashCode(char[]),int,a content-based hash code for a
java.util.Arrays.hashCode(byte[]),int,a content-based hash code for a
java.util.Arrays.hashCode(boolean[]),int,a content-based hash code for a
java.util.Arrays.hashCode(float[]),int,a content-based hash code for a
java.util.Arrays.hashCode(double[]),int,a content-based hash code for a
java.util.Arrays.hashCode(Object[]),int,a content-based hash code for a
java.util.Arrays.deepHashCode(Object[]),int,a deep-content-based hash code for a
"java.util.Arrays.deepEquals(Object[],Object[])",boolean,
java.util.Arrays.toString(long[]),String,a string representation of a
java.util.Arrays.toString(int[]),String,a string representation of a
java.util.Arrays.toString(short[]),String,a string representation of a
java.util.Arrays.toString(char[]),String,a string representation of a
java.util.Arrays.toString(byte[]),String,a string representation of a
java.util.Arrays.toString(boolean[]),String,a string representation of a
java.util.Arrays.toString(float[]),String,a string representation of a
java.util.Arrays.toString(double[]),String,a string representation of a
java.util.Arrays.toString(Object[]),String,a string representation of a
java.util.Arrays.deepToString(Object[]),String,a string representation of a
"java.util.Arrays.setAll(T[],IntFunction&lt;?)",&lt;T&gt;void,
"java.util.Arrays.parallelSetAll(T[],IntFunction&lt;?)",&lt;T&gt;void,
"java.util.Arrays.setAll(int[],IntUnaryOperator)",void,
"java.util.Arrays.parallelSetAll(int[],IntUnaryOperator)",void,
"java.util.Arrays.setAll(long[],IntToLongFunction)",void,
"java.util.Arrays.parallelSetAll(long[],IntToLongFunction)",void,
"java.util.Arrays.setAll(double[],IntToDoubleFunction)",void,
"java.util.Arrays.parallelSetAll(double[],IntToDoubleFunction)",void,
java.util.Arrays.spliterator(T[]),&lt;T&gt;Spliterator&lt;T&gt;,a spliterator for the array elements
"java.util.Arrays.spliterator(T[],int,int)",&lt;T&gt;Spliterator&lt;T&gt;,a spliterator for the array elements
java.util.Arrays.spliterator(int[]),Spliterator.OfInt,a spliterator for the array elements
"java.util.Arrays.spliterator(int[],int,int)",Spliterator.OfInt,a spliterator for the array elements
java.util.Arrays.spliterator(long[]),Spliterator.OfLong,the spliterator for the array elements
"java.util.Arrays.spliterator(long[],int,int)",Spliterator.OfLong,a spliterator for the array elements
java.util.Arrays.spliterator(double[]),Spliterator.OfDouble,a spliterator for the array elements
"java.util.Arrays.spliterator(double[],int,int)",Spliterator.OfDouble,a spliterator for the array elements
java.util.Arrays.stream(T[]),&lt;T&gt;Stream&lt;T&gt;,a Stream for the array
"java.util.Arrays.stream(T[],int,int)",&lt;T&gt;Stream&lt;T&gt;,a Stream for the array range
java.util.Arrays.stream(int[]),IntStream,an IntStream for the array
"java.util.Arrays.stream(int[],int,int)",IntStream,an IntStream for the array range
java.util.Arrays.stream(long[]),LongStream,a LongStream for the array
"java.util.Arrays.stream(long[],int,int)",LongStream,a LongStream for the array range
java.util.Arrays.stream(double[]),DoubleStream,a DoubleStream for the array
"java.util.Arrays.stream(double[],int,int)",DoubleStream,a DoubleStream for the array range
java.util.Base64.getEncoder(),Base64.Encoder,A Base64 encoder.
java.util.Base64.getUrlEncoder(),Base64.Encoder,A Base64 encoder.
java.util.Base64.getMimeEncoder(),Base64.Encoder,A Base64 encoder.
"java.util.Base64.getMimeEncoder(int,byte[])",Base64.Encoder,A Base64 encoder.
java.util.Base64.getDecoder(),Base64.Decoder,A Base64 decoder.
java.util.Base64.getUrlDecoder(),Base64.Decoder,A Base64 decoder.
java.util.Base64.getMimeDecoder(),Base64.Decoder,A Base64 decoder.
java.util.Base64.Decoder.decode(byte[]),byte[],A newly-allocated byte array containing the decoded bytes.
java.util.Base64.Decoder.decode(String),byte[],A newly-allocated byte array containing the decoded bytes.
"java.util.Base64.Decoder.decode(byte[],byte[])",int,The number of bytes written to the output byte array
java.util.Base64.Decoder.decode(ByteBuffer),ByteBuffer,A newly-allocated byte buffer containing the decoded bytes
java.util.Base64.Decoder.wrap(InputStream),InputStream,the input stream for decoding the specified Base64 encoded byte stream
java.util.Base64.Encoder.encode(byte[]),byte[],A newly-allocated byte array containing the resulting encoded bytes.
"java.util.Base64.Encoder.encode(byte[],byte[])",int,The number of bytes written to the output byte array
java.util.Base64.Encoder.encodeToString(byte[]),String,A String containing the resulting Base64 encoded characters
java.util.Base64.Encoder.encode(ByteBuffer),ByteBuffer,A newly-allocated byte buffer containing the encoded bytes.
java.util.Base64.Encoder.wrap(OutputStream),OutputStream,the output stream for encoding the byte data into the specified Base64 encoded format
java.util.Base64.Encoder.withoutPadding(),Base64.Encoder,an equivalent encoder that encodes without adding any padding character at the end
java.util.BitSet.valueOf(long[]),BitSet,a BitSet containing all the bits in the long array
java.util.BitSet.valueOf(LongBuffer),BitSet,a BitSet containing all the bits in the buffer in the specified range
java.util.BitSet.valueOf(byte[]),BitSet,a BitSet containing all the bits in the byte array
java.util.BitSet.valueOf(ByteBuffer),BitSet,a BitSet containing all the bits in the buffer in the specified range
java.util.BitSet.toByteArray(),byte[],a byte array containing a little-endian representation of all the bits in this bit set
java.util.BitSet.toLongArray(),long[],a long array containing a little-endian representation of all the bits in this bit set
java.util.BitSet.flip(int),void,
"java.util.BitSet.flip(int,int)",void,
java.util.BitSet.set(int),void,
"java.util.BitSet.set(int,boolean)",void,
"java.util.BitSet.set(int,int)",void,
"java.util.BitSet.set(int,int,boolean)",void,
java.util.BitSet.clear(int),void,
"java.util.BitSet.clear(int,int)",void,
java.util.BitSet.clear(),void,
java.util.BitSet.get(int),boolean,the value of the bit with the specified index
"java.util.BitSet.get(int,int)",BitSet,a new BitSet from a range of this BitSet
java.util.BitSet.nextSetBit(int),int,"the index of the next set bit, or -1 if there is no such bit"
java.util.BitSet.nextClearBit(int),int,the index of the next clear bit
java.util.BitSet.previousSetBit(int),int,"the index of the previous set bit, or -1 if there is no such bit"
java.util.BitSet.previousClearBit(int),int,"the index of the previous clear bit, or -1 if there is no such bit"
java.util.BitSet.length(),int,the logical size of this BitSet
java.util.BitSet.isEmpty(),boolean,boolean indicating whether this BitSet is empty
java.util.BitSet.intersects(BitSet),boolean,boolean indicating whether this BitSet intersects the specified BitSet
java.util.BitSet.cardinality(),int,the number of bits set to true in this BitSet
java.util.BitSet.and(BitSet),void,
java.util.BitSet.or(BitSet),void,
java.util.BitSet.xor(BitSet),void,
java.util.BitSet.andNot(BitSet),void,
java.util.BitSet.hashCode(),int,the hash code value for this bit set
java.util.BitSet.size(),int,the number of bits currently in this bit set
java.util.BitSet.equals(Object),boolean,true if the objects are the same; false otherwise
java.util.BitSet.clone(),Object,a clone of this bit set
java.util.BitSet.toString(),String,a string representation of this bit set
java.util.BitSet.stream(),IntStream,a stream of integers representing set indices
java.util.Calendar.getInstance(),Calendar,a Calendar.
java.util.Calendar.getInstance(TimeZone),Calendar,a Calendar.
java.util.Calendar.getInstance(Locale),Calendar,a Calendar.
"java.util.Calendar.getInstance(TimeZone,Locale)",Calendar,a Calendar.
java.util.Calendar.getAvailableLocales(),Locale[],An array of locales for which localized Calendar instances are available.
java.util.Calendar.computeTime(),abstractvoid,
java.util.Calendar.computeFields(),abstractvoid,
java.util.Calendar.getTime(),Date,a Date representing the time value.
java.util.Calendar.setTime(Date),void,
java.util.Calendar.getTimeInMillis(),long,the current time as UTC milliseconds from the epoch.
java.util.Calendar.setTimeInMillis(long),void,
java.util.Calendar.get(int),int,the value for the given calendar field.
java.util.Calendar.internalGet(int),int,the value for the given calendar field.
"java.util.Calendar.set(int,int)",void,
"java.util.Calendar.set(int,int,int)",void,
"java.util.Calendar.set(int,int,int,int,int)",void,
"java.util.Calendar.set(int,int,int,int,int,int)",void,
java.util.Calendar.clear(),void,
java.util.Calendar.clear(int),void,
java.util.Calendar.isSet(int),boolean,true if the given calendar field has a value set; false otherwise.
"java.util.Calendar.getDisplayName(int,int,Locale)",String,"the string representation of the given field in the given style, or null if no string representation is applicable."
"java.util.Calendar.getDisplayNames(int,int,Locale)","Map&lt;String,Integer&gt;","a Map containing all display names in style and locale and their field values, or null if no display names are defined for field"
java.util.Calendar.complete(),void,
java.util.Calendar.getAvailableCalendarTypes(),Set&lt;String&gt;,an unmodifiable Set containing all available calendar types
java.util.Calendar.getCalendarType(),String,the LDML-defined calendar type or the class name of this Calendar instance
java.util.Calendar.equals(Object),boolean,true if this object is equal to obj; false otherwise.
java.util.Calendar.hashCode(),int,a hash code value for this object.
java.util.Calendar.before(Object),boolean,true if the time of this Calendar is before the time represented by when; false otherwise.
java.util.Calendar.after(Object),boolean,true if the time of this Calendar is after the time represented by when; false otherwise.
java.util.Calendar.compareTo(Calendar),int,the value 0 if the time represented by the argument is equal to the time represented by this Calendar; a value less than 0 if the time of this Calendar is before the time represented by the argument; and a value greater than 0 if the time of this Calendar is after the time represented by the argument.
"java.util.Calendar.add(int,int)",abstractvoid,
"java.util.Calendar.roll(int,boolean)",abstractvoid,
"java.util.Calendar.roll(int,int)",void,
java.util.Calendar.setTimeZone(TimeZone),void,
java.util.Calendar.getTimeZone(),TimeZone,the time zone object associated with this calendar.
java.util.Calendar.setLenient(boolean),void,
java.util.Calendar.isLenient(),boolean,true if the interpretation mode of this calendar is lenient; false otherwise.
java.util.Calendar.setFirstDayOfWeek(int),void,
java.util.Calendar.getFirstDayOfWeek(),int,the first day of the week.
java.util.Calendar.setMinimalDaysInFirstWeek(int),void,
java.util.Calendar.getMinimalDaysInFirstWeek(),int,the minimal days required in the first week of the year.
java.util.Calendar.isWeekDateSupported(),boolean,true if this Calendar supports week dates; false otherwise.
java.util.Calendar.getWeekYear(),int,the week year of this Calendar
"java.util.Calendar.setWeekDate(int,int,int)",void,
java.util.Calendar.getWeeksInWeekYear(),int,the number of weeks in the week year.
java.util.Calendar.getMinimum(int),abstractint,the minimum value for the given calendar field.
java.util.Calendar.getMaximum(int),abstractint,the maximum value for the given calendar field.
java.util.Calendar.getGreatestMinimum(int),abstractint,the highest minimum value for the given calendar field.
java.util.Calendar.getLeastMaximum(int),abstractint,the lowest maximum value for the given calendar field.
java.util.Calendar.getActualMinimum(int),int,the minimum of the given calendar field for the time value of this Calendar
java.util.Calendar.getActualMaximum(int),int,the maximum of the given calendar field for the time value of this Calendar
java.util.Calendar.clone(),Object,a copy of this object.
java.util.Calendar.toString(),String,a string representation of this calendar.
java.util.Calendar.toInstant(),Instant,the instant representing the same point on the time-line
java.util.Calendar.Builder.setInstant(long),Calendar.Builder,this Calendar.Builder
java.util.Calendar.Builder.setInstant(Date),Calendar.Builder,this Calendar.Builder
"java.util.Calendar.Builder.set(int,int)",Calendar.Builder,this Calendar.Builder
java.util.Calendar.Builder.setFields(int...),Calendar.Builder,this Calendar.Builder
"java.util.Calendar.Builder.setDate(int,int,int)",Calendar.Builder,this Calendar.Builder
"java.util.Calendar.Builder.setTimeOfDay(int,int,int)",Calendar.Builder,this Calendar.Builder
"java.util.Calendar.Builder.setTimeOfDay(int,int,int,int)",Calendar.Builder,this Calendar.Builder
"java.util.Calendar.Builder.setWeekDate(int,int,int)",Calendar.Builder,this Calendar.Builder
java.util.Calendar.Builder.setTimeZone(TimeZone),Calendar.Builder,this Calendar.Builder
java.util.Calendar.Builder.setLenient(boolean),Calendar.Builder,this Calendar.Builder
java.util.Calendar.Builder.setCalendarType(String),Calendar.Builder,this Calendar.Builder
java.util.Calendar.Builder.setLocale(Locale),Calendar.Builder,this Calendar.Builder
"java.util.Calendar.Builder.setWeekDefinition(int,int)",Calendar.Builder,this Calendar.Builder
java.util.Calendar.Builder.build(),Calendar,a Calendar built with parameters of this Calendar.Builder
java.util.Collections.sort(List&lt;T&gt;),&lt;T extends Comparable&lt;? super T&gt;&gt;void,
"java.util.Collections.sort(List&lt;T&gt;,Comparator&lt;?)",&lt;T&gt;void,
"java.util.Collections.binarySearch(List&lt;?,T)",&lt;T&gt;int,"the index of the search key, if it is contained in the list; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or list.size() if all elements in the list are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
"java.util.Collections.binarySearch(List&lt;?,T,Comparator&lt;?)",&lt;T&gt;int,"the index of the search key, if it is contained in the list; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or list.size() if all elements in the list are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found."
java.util.Collections.reverse(List&lt;?&gt;),void,
java.util.Collections.shuffle(List&lt;?&gt;),void,
"java.util.Collections.shuffle(List&lt;?&gt;,Random)",void,
"java.util.Collections.swap(List&lt;?&gt;,int,int)",void,
"java.util.Collections.fill(List&lt;?,T)",&lt;T&gt;void,
"java.util.Collections.copy(List&lt;?,List&lt;?)",&lt;T&gt;void,
java.util.Collections.min(Collection&lt;?),&lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt;T,"the minimum element of the given collection, according to the natural ordering of its elements."
"java.util.Collections.min(Collection&lt;?,Comparator&lt;?)",&lt;T&gt;T,"the minimum element of the given collection, according to the specified comparator."
java.util.Collections.max(Collection&lt;?),&lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt;T,"the maximum element of the given collection, according to the natural ordering of its elements."
"java.util.Collections.max(Collection&lt;?,Comparator&lt;?)",&lt;T&gt;T,"the maximum element of the given collection, according to the specified comparator."
"java.util.Collections.rotate(List&lt;?&gt;,int)",void,
"java.util.Collections.replaceAll(List&lt;T&gt;,T,T)",&lt;T&gt;boolean,true if list contained one or more elements e such that (oldVal==null ? e==null : oldVal.equals(e)).
"java.util.Collections.indexOfSubList(List&lt;?&gt;,List&lt;?&gt;)",int,"the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
"java.util.Collections.lastIndexOfSubList(List&lt;?&gt;,List&lt;?&gt;)",int,"the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
java.util.Collections.unmodifiableCollection(Collection&lt;?),&lt;T&gt;Collection&lt;T&gt;,an unmodifiable view of the specified collection.
java.util.Collections.unmodifiableSet(Set&lt;?),&lt;T&gt;Set&lt;T&gt;,an unmodifiable view of the specified set.
java.util.Collections.unmodifiableSortedSet(SortedSet&lt;T&gt;),&lt;T&gt;SortedSet&lt;T&gt;,an unmodifiable view of the specified sorted set.
java.util.Collections.unmodifiableNavigableSet(NavigableSet&lt;T&gt;),&lt;T&gt;NavigableSet&lt;T&gt;,an unmodifiable view of the specified navigable set
java.util.Collections.unmodifiableList(List&lt;?),&lt;T&gt;List&lt;T&gt;,an unmodifiable view of the specified list.
"java.util.Collections.unmodifiableMap(Map&lt;?,?)","&lt;K,V&gt;Map&lt;K,V&gt;",an unmodifiable view of the specified map.
"java.util.Collections.unmodifiableSortedMap(SortedMap&lt;K,?)","&lt;K,V&gt;SortedMap&lt;K,V&gt;",an unmodifiable view of the specified sorted map.
"java.util.Collections.unmodifiableNavigableMap(NavigableMap&lt;K,?)","&lt;K,V&gt;NavigableMap&lt;K,V&gt;",an unmodifiable view of the specified navigable map
java.util.Collections.synchronizedCollection(Collection&lt;T&gt;),&lt;T&gt;Collection&lt;T&gt;,a synchronized view of the specified collection.
java.util.Collections.synchronizedSet(Set&lt;T&gt;),&lt;T&gt;Set&lt;T&gt;,a synchronized view of the specified set.
java.util.Collections.synchronizedSortedSet(SortedSet&lt;T&gt;),&lt;T&gt;SortedSet&lt;T&gt;,a synchronized view of the specified sorted set.
java.util.Collections.synchronizedNavigableSet(NavigableSet&lt;T&gt;),&lt;T&gt;NavigableSet&lt;T&gt;,a synchronized view of the specified navigable set
java.util.Collections.synchronizedList(List&lt;T&gt;),&lt;T&gt;List&lt;T&gt;,a synchronized view of the specified list.
"java.util.Collections.synchronizedMap(Map&lt;K,V&gt;)","&lt;K,V&gt;Map&lt;K,V&gt;",a synchronized view of the specified map.
"java.util.Collections.synchronizedSortedMap(SortedMap&lt;K,V&gt;)","&lt;K,V&gt;SortedMap&lt;K,V&gt;",a synchronized view of the specified sorted map.
"java.util.Collections.synchronizedNavigableMap(NavigableMap&lt;K,V&gt;)","&lt;K,V&gt;NavigableMap&lt;K,V&gt;",a synchronized view of the specified navigable map.
"java.util.Collections.checkedCollection(Collection&lt;E&gt;,Class&lt;E&gt;)",&lt;E&gt;Collection&lt;E&gt;,a dynamically typesafe view of the specified collection
"java.util.Collections.checkedQueue(Queue&lt;E&gt;,Class&lt;E&gt;)",&lt;E&gt;Queue&lt;E&gt;,a dynamically typesafe view of the specified queue
"java.util.Collections.checkedSet(Set&lt;E&gt;,Class&lt;E&gt;)",&lt;E&gt;Set&lt;E&gt;,a dynamically typesafe view of the specified set
"java.util.Collections.checkedSortedSet(SortedSet&lt;E&gt;,Class&lt;E&gt;)",&lt;E&gt;SortedSet&lt;E&gt;,a dynamically typesafe view of the specified sorted set
"java.util.Collections.checkedNavigableSet(NavigableSet&lt;E&gt;,Class&lt;E&gt;)",&lt;E&gt;NavigableSet&lt;E&gt;,a dynamically typesafe view of the specified navigable set
"java.util.Collections.checkedList(List&lt;E&gt;,Class&lt;E&gt;)",&lt;E&gt;List&lt;E&gt;,a dynamically typesafe view of the specified list
"java.util.Collections.checkedMap(Map&lt;K,V&gt;,Class&lt;K&gt;,Class&lt;V&gt;)","&lt;K,V&gt;Map&lt;K,V&gt;",a dynamically typesafe view of the specified map
"java.util.Collections.checkedSortedMap(SortedMap&lt;K,V&gt;,Class&lt;K&gt;,Class&lt;V&gt;)","&lt;K,V&gt;SortedMap&lt;K,V&gt;",a dynamically typesafe view of the specified map
"java.util.Collections.checkedNavigableMap(NavigableMap&lt;K,V&gt;,Class&lt;K&gt;,Class&lt;V&gt;)","&lt;K,V&gt;NavigableMap&lt;K,V&gt;",a dynamically typesafe view of the specified map
java.util.Collections.emptyIterator(),&lt;T&gt;Iterator&lt;T&gt;,
java.util.Collections.emptyListIterator(),&lt;T&gt;ListIterator&lt;T&gt;,
java.util.Collections.emptyEnumeration(),&lt;T&gt;Enumeration&lt;T&gt;,
java.util.Collections.emptySet(),&lt;T&gt;Set&lt;T&gt;,the empty set
java.util.Collections.emptySortedSet(),&lt;E&gt;SortedSet&lt;E&gt;,the empty sorted set
java.util.Collections.emptyNavigableSet(),&lt;E&gt;NavigableSet&lt;E&gt;,the empty navigable set
java.util.Collections.emptyList(),&lt;T&gt;List&lt;T&gt;,an empty immutable list
java.util.Collections.emptyMap(),"&lt;K,V&gt;Map&lt;K,V&gt;",an empty map
java.util.Collections.emptySortedMap(),"&lt;K,V&gt;SortedMap&lt;K,V&gt;",an empty sorted map
java.util.Collections.emptyNavigableMap(),"&lt;K,V&gt;NavigableMap&lt;K,V&gt;",an empty navigable map
java.util.Collections.singleton(T),&lt;T&gt;Set&lt;T&gt;,an immutable set containing only the specified object.
java.util.Collections.singletonList(T),&lt;T&gt;List&lt;T&gt;,an immutable list containing only the specified object.
"java.util.Collections.singletonMap(K,V)","&lt;K,V&gt;Map&lt;K,V&gt;",an immutable map containing only the specified key-value mapping.
"java.util.Collections.nCopies(int,T)",&lt;T&gt;List&lt;T&gt;,an immutable list consisting of n copies of the specified object.
java.util.Collections.reverseOrder(),&lt;T&gt;Comparator&lt;T&gt;,A comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface.
java.util.Collections.reverseOrder(Comparator&lt;T&gt;),&lt;T&gt;Comparator&lt;T&gt;,A comparator that imposes the reverse ordering of the specified comparator.
java.util.Collections.enumeration(Collection&lt;T&gt;),&lt;T&gt;Enumeration&lt;T&gt;,an enumeration over the specified collection.
java.util.Collections.list(Enumeration&lt;T&gt;),&lt;T&gt;ArrayList&lt;T&gt;,an array list containing the elements returned by the specified enumeration.
"java.util.Collections.frequency(Collection&lt;?&gt;,Object)",int,the number of elements in c equal to o
"java.util.Collections.disjoint(Collection&lt;?&gt;,Collection&lt;?&gt;)",boolean,true if the two specified collections have no elements in common.
"java.util.Collections.addAll(Collection&lt;?,T...)",&lt;T&gt;boolean,true if the collection changed as a result of the call
"java.util.Collections.newSetFromMap(Map&lt;E,Boolean&gt;)",&lt;E&gt;Set&lt;E&gt;,the set backed by the map
java.util.Collections.asLifoQueue(Deque&lt;T&gt;),&lt;T&gt;Queue&lt;T&gt;,the queue
java.util.Currency.getInstance(String),Currency,the Currency instance for the given currency code
java.util.Currency.getInstance(Locale),Currency,"the Currency instance for the country of the given locale, or null"
java.util.Currency.getAvailableCurrencies(),Set&lt;Currency&gt;,"the set of available currencies. If there is no currency available in the runtime, the returned set is empty."
java.util.Currency.getCurrencyCode(),String,the ISO 4217 currency code of this currency.
java.util.Currency.getSymbol(),String,the symbol of this currency for the default DISPLAY locale
java.util.Currency.getSymbol(Locale),String,the symbol of this currency for the specified locale
java.util.Currency.getDefaultFractionDigits(),int,the default number of fraction digits used with this currency
java.util.Currency.getNumericCode(),int,the ISO 4217 numeric code of this currency
java.util.Currency.getDisplayName(),String,the display name of this currency for the default DISPLAY locale
java.util.Currency.getDisplayName(Locale),String,the display name of this currency for the specified locale
java.util.Currency.toString(),String,the ISO 4217 currency code of this currency
java.util.Date.clone(),Object,a clone of this instance.
"java.util.Date.UTC(int,int,int,int,int,int)",long,"the number of milliseconds since January 1, 1970, 00:00:00 GMT for the date and time specified by the arguments."
java.util.Date.parse(String),long,
java.util.Date.getYear(),int,"the year represented by this date, minus 1900."
java.util.Date.setYear(int),void,
java.util.Date.getMonth(),int,the month represented by this date.
java.util.Date.setMonth(int),void,
java.util.Date.getDate(),int,the day of the month represented by this date.
java.util.Date.setDate(int),void,
java.util.Date.getDay(),int,the day of the week represented by this date.
java.util.Date.getHours(),int,the hour represented by this date.
java.util.Date.setHours(int),void,
java.util.Date.getMinutes(),int,the number of minutes past the hour represented by this date.
java.util.Date.setMinutes(int),void,
java.util.Date.getSeconds(),int,the number of seconds past the minute represented by this date.
java.util.Date.setSeconds(int),void,
java.util.Date.getTime(),long,"the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this date."
java.util.Date.setTime(long),void,
java.util.Date.before(Date),boolean,true if and only if the instant of time represented by this Date object is strictly earlier than the instant represented by when; false otherwise.
java.util.Date.after(Date),boolean,true if and only if the instant represented by this Date object is strictly later than the instant represented by when; false otherwise.
java.util.Date.equals(Object),boolean,true if the objects are the same; false otherwise.
java.util.Date.compareTo(Date),int,the value 0 if the argument Date is equal to this Date; a value less than 0 if this Date is before the Date argument; and a value greater than 0 if this Date is after the Date argument.
java.util.Date.hashCode(),int,a hash code value for this object.
java.util.Date.toString(),String,
java.util.Date.toLocaleString(),String,"a string representation of this date, using the locale conventions."
java.util.Date.toGMTString(),String,
java.util.Date.getTimezoneOffset(),int,"the time-zone offset, in minutes, for the current time zone."
java.util.Date.from(Instant),Date,a Date representing the same point on the time-line as the provided instant
java.util.Date.toInstant(),Instant,an instant representing the same point on the time-line as this Date object
java.util.Dictionary.size(),abstractint,the number of keys in this dictionary.
java.util.Dictionary.isEmpty(),abstractboolean,true if this dictionary maps no keys to values; false otherwise.
java.util.Dictionary.keys(),abstractEnumeration&lt;K&gt;,an enumeration of the keys in this dictionary.
java.util.Dictionary.elements(),abstractEnumeration&lt;V&gt;,an enumeration of the values in this dictionary.
java.util.Dictionary.get(Object),abstractV,the value to which the key is mapped in this dictionary;
"java.util.Dictionary.put(K,V)",abstractV,"the previous value to which the key was mapped in this dictionary, or null if the key did not have a previous mapping."
java.util.Dictionary.remove(Object),abstractV,"the value to which the key had been mapped in this dictionary, or null if the key did not have a mapping."
java.util.DoubleSummaryStatistics.accept(double),void,
java.util.DoubleSummaryStatistics.combine(DoubleSummaryStatistics),void,
java.util.DoubleSummaryStatistics.getCount(),long,the count of values
java.util.DoubleSummaryStatistics.getSum(),double,"the sum of values, or zero if none"
java.util.DoubleSummaryStatistics.getMin(),double,"the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded"
java.util.DoubleSummaryStatistics.getMax(),double,"the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded"
java.util.DoubleSummaryStatistics.getAverage(),double,"the arithmetic mean of values, or zero if none"
java.util.DoubleSummaryStatistics.toString(),String,a string representation of the object.
java.util.EnumMap.size(),int,the number of key-value mappings in this map
java.util.EnumMap.containsValue(Object),boolean,true if this map maps one or more keys to this value
java.util.EnumMap.containsKey(Object),boolean,true if this map contains a mapping for the specified key
java.util.EnumMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
"java.util.EnumMap.put(K,V)",V,"the previous value associated with specified key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with the specified key.)"
java.util.EnumMap.remove(Object),V,"the previous value associated with specified key, or null if there was no entry for key. (A null return can also indicate that the map previously associated null with the specified key.)"
"java.util.EnumMap.putAll(Map&lt;?,?)",void,
java.util.EnumMap.clear(),void,
java.util.EnumMap.keySet(),Set&lt;K&gt;,a set view of the keys contained in this enum map
java.util.EnumMap.values(),Collection&lt;V&gt;,a collection view of the values contained in this map
java.util.EnumMap.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;",a set view of the mappings contained in this enum map
java.util.EnumMap.equals(Object),boolean,true if the specified object is equal to this map
java.util.EnumMap.hashCode(),int,the hash code value for this map
java.util.EnumMap.clone(),"EnumMap&lt;K,V&gt;",a shallow copy of this enum map
java.util.EnumSet.noneOf(Class&lt;E&gt;),&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,An empty enum set of the specified type.
java.util.EnumSet.allOf(Class&lt;E&gt;),&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,An enum set containing all the elements in the specified type.
java.util.EnumSet.copyOf(EnumSet&lt;E&gt;),&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,A copy of the specified enum set.
java.util.EnumSet.copyOf(Collection&lt;E&gt;),&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,An enum set initialized from the given collection.
java.util.EnumSet.complementOf(EnumSet&lt;E&gt;),&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,The complement of the specified set in this set
java.util.EnumSet.of(E),&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,an enum set initially containing the specified element
"java.util.EnumSet.of(E,E)",&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,an enum set initially containing the specified elements
"java.util.EnumSet.of(E,E,E)",&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,an enum set initially containing the specified elements
"java.util.EnumSet.of(E,E,E,E)",&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,an enum set initially containing the specified elements
"java.util.EnumSet.of(E,E,E,E,E)",&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,an enum set initially containing the specified elements
"java.util.EnumSet.of(E,E...)",&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,an enum set initially containing the specified elements
"java.util.EnumSet.range(E,E)",&lt;E extends Enum&lt;E&gt;&gt;EnumSet&lt;E&gt;,an enum set initially containing all of the elements in the range defined by the two specified endpoints
java.util.EnumSet.clone(),EnumSet&lt;E&gt;,a copy of this set
java.util.EventListenerProxy.getListener(),T,the listener associated with the proxy
java.util.EventObject.getSource(),Object,The object on which the Event initially occurred.
java.util.EventObject.toString(),String,A a String representation of this EventObject.
java.util.Formatter.locale(),Locale,"null if no localization is applied, otherwise a locale"
java.util.Formatter.out(),Appendable,The destination for the output
java.util.Formatter.toString(),String,The result of invoking toString() on the destination for the output
java.util.Formatter.flush(),void,
java.util.Formatter.close(),void,
java.util.Formatter.ioException(),IOException,The last exception thrown by the Appendable or null if no such exception exists.
"java.util.Formatter.format(String,Object...)",Formatter,This formatter
"java.util.Formatter.format(Locale,String,Object...)",Formatter,This formatter
java.util.GregorianCalendar.setGregorianChange(Date),void,
java.util.GregorianCalendar.getGregorianChange(),Date,the Gregorian cutover date for this GregorianCalendar object.
java.util.GregorianCalendar.isLeapYear(int),boolean,true if the given year is a leap year; false otherwise.
java.util.GregorianCalendar.getCalendarType(),String,"""gregory"""
java.util.GregorianCalendar.equals(Object),boolean,true if this object is equal to obj; false otherwise.
java.util.GregorianCalendar.hashCode(),int,a hash code value for this object.
"java.util.GregorianCalendar.add(int,int)",void,
"java.util.GregorianCalendar.roll(int,boolean)",void,
"java.util.GregorianCalendar.roll(int,int)",void,
java.util.GregorianCalendar.getMinimum(int),int,the minimum value for the given calendar field.
java.util.GregorianCalendar.getMaximum(int),int,the maximum value for the given calendar field.
java.util.GregorianCalendar.getGreatestMinimum(int),int,the highest minimum value for the given calendar field.
java.util.GregorianCalendar.getLeastMaximum(int),int,the lowest maximum value for the given calendar field.
java.util.GregorianCalendar.getActualMinimum(int),int,the minimum of the given field for the time value of this GregorianCalendar
java.util.GregorianCalendar.getActualMaximum(int),int,the maximum of the given field for the time value of this GregorianCalendar
java.util.GregorianCalendar.clone(),Object,a copy of this object.
java.util.GregorianCalendar.getTimeZone(),TimeZone,the time zone object associated with this calendar.
java.util.GregorianCalendar.setTimeZone(TimeZone),void,
java.util.GregorianCalendar.isWeekDateSupported(),boolean,true (always)
java.util.GregorianCalendar.getWeekYear(),int,"the week year represented by this GregorianCalendar. If the ERA value is BC, the year is represented by 0 or a negative number: BC 1 is 0, BC 2 is -1, BC 3 is -2, and so on."
"java.util.GregorianCalendar.setWeekDate(int,int,int)",void,
java.util.GregorianCalendar.getWeeksInWeekYear(),int,the number of weeks in the week year.
java.util.GregorianCalendar.computeFields(),void,
java.util.GregorianCalendar.computeTime(),void,
java.util.GregorianCalendar.toZonedDateTime(),ZonedDateTime,a zoned date-time representing the same point on the time-line as this gregorian calendar
java.util.GregorianCalendar.from(ZonedDateTime),GregorianCalendar,the gregorian calendar representing the same point on the time-line as the zoned date-time provided
java.util.HashMap.size(),int,the number of key-value mappings in this map
java.util.HashMap.isEmpty(),boolean,true if this map contains no key-value mappings
java.util.HashMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
java.util.HashMap.containsKey(Object),boolean,true if this map contains a mapping for the specified key.
"java.util.HashMap.put(K,V)",V,"the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"
"java.util.HashMap.putAll(Map&lt;?,?)",void,
java.util.HashMap.remove(Object),V,"the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"
java.util.HashMap.clear(),void,
java.util.HashMap.containsValue(Object),boolean,true if this map maps one or more keys to the specified value
java.util.HashMap.keySet(),Set&lt;K&gt;,a set view of the keys contained in this map
java.util.HashMap.values(),Collection&lt;V&gt;,a view of the values contained in this map
java.util.HashMap.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;",a set view of the mappings contained in this map
"java.util.HashMap.getOrDefault(Object,V)",V,"the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"
"java.util.HashMap.putIfAbsent(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"
"java.util.HashMap.remove(Object,Object)",boolean,true if the value was removed
"java.util.HashMap.replace(K,V,V)",boolean,true if the value was replaced
"java.util.HashMap.replace(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"
"java.util.HashMap.computeIfAbsent(K,Function&lt;?,?)",V,"the current (existing or computed) value associated with the specified key, or null if the computed value is null"
"java.util.HashMap.computeIfPresent(K,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
"java.util.HashMap.compute(K,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
"java.util.HashMap.merge(K,V,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if no value is associated with the key"
"java.util.HashMap.forEach(BiConsumer&lt;?,?)",void,
"java.util.HashMap.replaceAll(BiFunction&lt;?,?,?)",void,
java.util.HashMap.clone(),Object,a shallow copy of this map
java.util.HashSet.iterator(),Iterator&lt;E&gt;,an Iterator over the elements in this set
java.util.HashSet.size(),int,the number of elements in this set (its cardinality)
java.util.HashSet.isEmpty(),boolean,true if this set contains no elements
java.util.HashSet.contains(Object),boolean,true if this set contains the specified element
java.util.HashSet.add(E),boolean,true if this set did not already contain the specified element
java.util.HashSet.remove(Object),boolean,true if the set contained the specified element
java.util.HashSet.clear(),void,
java.util.HashSet.clone(),Object,a shallow copy of this set
java.util.HashSet.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this set
java.util.Hashtable.size(),int,the number of keys in this hashtable.
java.util.Hashtable.isEmpty(),boolean,true if this hashtable maps no keys to values; false otherwise.
java.util.Hashtable.keys(),Enumeration&lt;K&gt;,an enumeration of the keys in this hashtable.
java.util.Hashtable.elements(),Enumeration&lt;V&gt;,an enumeration of the values in this hashtable.
java.util.Hashtable.contains(Object),boolean,true if and only if some key maps to the value argument in this hashtable as determined by the equals method; false otherwise.
java.util.Hashtable.containsValue(Object),boolean,true if this map maps one or more keys to the specified value
java.util.Hashtable.containsKey(Object),boolean,"true if and only if the specified object is a key in this hashtable, as determined by the equals method; false otherwise."
java.util.Hashtable.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
java.util.Hashtable.rehash(),void,
"java.util.Hashtable.put(K,V)",V,"the previous value of the specified key in this hashtable, or null if it did not have one"
java.util.Hashtable.remove(Object),V,"the value to which the key had been mapped in this hashtable, or null if the key did not have a mapping"
"java.util.Hashtable.putAll(Map&lt;?,?)",void,
java.util.Hashtable.clear(),void,
java.util.Hashtable.clone(),Object,a clone of the hashtable
java.util.Hashtable.toString(),String,a string representation of this hashtable
java.util.Hashtable.keySet(),Set&lt;K&gt;,a set view of the keys contained in this map
java.util.Hashtable.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;",a set view of the mappings contained in this map
java.util.Hashtable.values(),Collection&lt;V&gt;,a collection view of the values contained in this map
java.util.Hashtable.equals(Object),boolean,true if the specified Object is equal to this Map
java.util.Hashtable.hashCode(),int,a hash code value for this object.
"java.util.Hashtable.getOrDefault(Object,V)",V,"the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"
"java.util.Hashtable.forEach(BiConsumer&lt;?,?)",void,
"java.util.Hashtable.replaceAll(BiFunction&lt;?,?,?)",void,
"java.util.Hashtable.putIfAbsent(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"
"java.util.Hashtable.remove(Object,Object)",boolean,true if the value was removed
"java.util.Hashtable.replace(K,V,V)",boolean,true if the value was replaced
"java.util.Hashtable.replace(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"
"java.util.Hashtable.computeIfAbsent(K,Function&lt;?,?)",V,"the current (existing or computed) value associated with the specified key, or null if the computed value is null"
"java.util.Hashtable.computeIfPresent(K,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
"java.util.Hashtable.compute(K,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
"java.util.Hashtable.merge(K,V,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if no value is associated with the key"
java.util.IdentityHashMap.size(),int,the number of key-value mappings in this map
java.util.IdentityHashMap.isEmpty(),boolean,true if this identity hash map contains no key-value mappings
java.util.IdentityHashMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
java.util.IdentityHashMap.containsKey(Object),boolean,true if the specified object reference is a key in this map
java.util.IdentityHashMap.containsValue(Object),boolean,true if this map maps one or more keys to the specified object reference
"java.util.IdentityHashMap.put(K,V)",V,"the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"
"java.util.IdentityHashMap.putAll(Map&lt;?,?)",void,
java.util.IdentityHashMap.remove(Object),V,"the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"
java.util.IdentityHashMap.clear(),void,
java.util.IdentityHashMap.equals(Object),boolean,true if the specified object is equal to this map
java.util.IdentityHashMap.hashCode(),int,the hash code value for this map
java.util.IdentityHashMap.clone(),Object,a shallow copy of this map
java.util.IdentityHashMap.keySet(),Set&lt;K&gt;,an identity-based set view of the keys contained in this map
java.util.IdentityHashMap.values(),Collection&lt;V&gt;,a collection view of the values contained in this map
java.util.IdentityHashMap.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;",a set view of the identity-mappings contained in this map
"java.util.IdentityHashMap.forEach(BiConsumer&lt;?,?)",void,
"java.util.IdentityHashMap.replaceAll(BiFunction&lt;?,?,?)",void,
java.util.IntSummaryStatistics.accept(int),void,
java.util.IntSummaryStatistics.combine(IntSummaryStatistics),void,
java.util.IntSummaryStatistics.getCount(),long,the count of values
java.util.IntSummaryStatistics.getSum(),long,"the sum of values, or zero if none"
java.util.IntSummaryStatistics.getMin(),int,"the minimum value, or Integer.MAX_VALUE if none"
java.util.IntSummaryStatistics.getMax(),int,"the maximum value, or Integer.MIN_VALUE if none"
java.util.IntSummaryStatistics.getAverage(),double,"the arithmetic mean of values, or zero if none"
java.util.IntSummaryStatistics.toString(),String,a string representation of the object.
java.util.LinkedHashMap.containsValue(Object),boolean,true if this map maps one or more keys to the specified value
java.util.LinkedHashMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
"java.util.LinkedHashMap.getOrDefault(Object,V)",V,"the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"
java.util.LinkedHashMap.clear(),void,
"java.util.LinkedHashMap.removeEldestEntry(Map.Entry&lt;K,V&gt;)",boolean,true if the eldest entry should be removed from the map; false if it should be retained.
java.util.LinkedHashMap.keySet(),Set&lt;K&gt;,a set view of the keys contained in this map
java.util.LinkedHashMap.values(),Collection&lt;V&gt;,a view of the values contained in this map
java.util.LinkedHashMap.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;",a set view of the mappings contained in this map
"java.util.LinkedHashMap.forEach(BiConsumer&lt;?,?)",void,
"java.util.LinkedHashMap.replaceAll(BiFunction&lt;?,?,?)",void,
java.util.LinkedHashSet.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this set
java.util.LinkedList.getFirst(),E,the first element in this list
java.util.LinkedList.getLast(),E,the last element in this list
java.util.LinkedList.removeFirst(),E,the first element from this list
java.util.LinkedList.removeLast(),E,the last element from this list
java.util.LinkedList.addFirst(E),void,
java.util.LinkedList.addLast(E),void,
java.util.LinkedList.contains(Object),boolean,true if this list contains the specified element
java.util.LinkedList.size(),int,the number of elements in this list
java.util.LinkedList.add(E),boolean,true (as specified by Collection.add(E))
java.util.LinkedList.remove(Object),boolean,true if this list contained the specified element
java.util.LinkedList.addAll(Collection&lt;?),boolean,true if this list changed as a result of the call
"java.util.LinkedList.addAll(int,Collection&lt;?)",boolean,true if this list changed as a result of the call
java.util.LinkedList.clear(),void,
java.util.LinkedList.get(int),E,the element at the specified position in this list
"java.util.LinkedList.set(int,E)",E,the element previously at the specified position
"java.util.LinkedList.add(int,E)",void,
java.util.LinkedList.remove(int),E,the element previously at the specified position
java.util.LinkedList.indexOf(Object),int,"the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
java.util.LinkedList.lastIndexOf(Object),int,"the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
java.util.LinkedList.peek(),E,"the head of this list, or null if this list is empty"
java.util.LinkedList.element(),E,the head of this list
java.util.LinkedList.poll(),E,"the head of this list, or null if this list is empty"
java.util.LinkedList.remove(),E,the head of this list
java.util.LinkedList.offer(E),boolean,true (as specified by Queue.offer(E))
java.util.LinkedList.offerFirst(E),boolean,true (as specified by Deque.offerFirst(E))
java.util.LinkedList.offerLast(E),boolean,true (as specified by Deque.offerLast(E))
java.util.LinkedList.peekFirst(),E,"the first element of this list, or null if this list is empty"
java.util.LinkedList.peekLast(),E,"the last element of this list, or null if this list is empty"
java.util.LinkedList.pollFirst(),E,"the first element of this list, or null if this list is empty"
java.util.LinkedList.pollLast(),E,"the last element of this list, or null if this list is empty"
java.util.LinkedList.push(E),void,
java.util.LinkedList.pop(),E,the element at the front of this list (which is the top of the stack represented by this list)
java.util.LinkedList.removeFirstOccurrence(Object),boolean,true if the list contained the specified element
java.util.LinkedList.removeLastOccurrence(Object),boolean,true if the list contained the specified element
java.util.LinkedList.listIterator(int),ListIterator&lt;E&gt;,"a ListIterator of the elements in this list (in proper sequence), starting at the specified position in the list"
java.util.LinkedList.descendingIterator(),Iterator&lt;E&gt;,an iterator over the elements in this deque in reverse sequence
java.util.LinkedList.clone(),Object,a shallow copy of this LinkedList instance
java.util.LinkedList.toArray(),Object[],an array containing all of the elements in this list in proper sequence
java.util.LinkedList.toArray(T[]),&lt;T&gt;T[],an array containing the elements of the list
java.util.LinkedList.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this list
java.util.ListResourceBundle.handleGetObject(String),Object,"the object for the given key, or null"
java.util.ListResourceBundle.getKeys(),Enumeration&lt;String&gt;,an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
java.util.ListResourceBundle.handleKeySet(),Set&lt;String&gt;,a Set of the keys contained only in this ResourceBundle
java.util.ListResourceBundle.getContents(),abstractObject[][],an array of an Object array representing a key-value pair.
java.util.Locale.getDefault(),Locale,the default locale for this instance of the Java Virtual Machine
java.util.Locale.getDefault(Locale.Category),Locale,the default locale for the specified Category for this instance of the Java Virtual Machine
java.util.Locale.setDefault(Locale),void,
"java.util.Locale.setDefault(Locale.Category,Locale)",void,
java.util.Locale.getAvailableLocales(),Locale[],An array of installed locales.
java.util.Locale.getISOCountries(),String[],An array of ISO 3166 two-letter country codes.
java.util.Locale.getISOLanguages(),String[],
java.util.Locale.getLanguage(),String,"The language code, or the empty string if none is defined."
java.util.Locale.getScript(),String,"The script code, or the empty string if none is defined."
java.util.Locale.getCountry(),String,"The country/region code, or the empty string if none is defined."
java.util.Locale.getVariant(),String,"The variant code, or the empty string if none is defined."
java.util.Locale.hasExtensions(),boolean,true if this Locale has any extensions
java.util.Locale.stripExtensions(),Locale,"a copy of this Locale with no extensions, or this if this has no extensions"
java.util.Locale.getExtension(char),String,"The extension, or null if this locale defines no extension for the specified key."
java.util.Locale.getExtensionKeys(),Set&lt;Character&gt;,"The set of extension keys, or the empty set if this locale has no extensions."
java.util.Locale.getUnicodeLocaleAttributes(),Set&lt;String&gt;,The set of attributes.
java.util.Locale.getUnicodeLocaleType(String),String,"The Unicode locale type associated with the key, or null if the locale does not define the key."
java.util.Locale.getUnicodeLocaleKeys(),Set&lt;String&gt;,"The set of Unicode locale keys, or the empty set if this locale has no Unicode locale keywords."
java.util.Locale.toString(),String,
java.util.Locale.toLanguageTag(),String,
java.util.Locale.forLanguageTag(String),Locale,
java.util.Locale.getISO3Language(),String,A three-letter abbreviation of this locale's language.
java.util.Locale.getISO3Country(),String,A three-letter abbreviation of this locale's country.
java.util.Locale.getDisplayLanguage(),String,The name of the display language.
java.util.Locale.getDisplayLanguage(Locale),String,The name of the display language appropriate to the given locale.
java.util.Locale.getDisplayScript(),String,the display name of the script code for the current default DISPLAY locale
java.util.Locale.getDisplayScript(Locale),String,the display name of the script code for the current default DISPLAY locale
java.util.Locale.getDisplayCountry(),String,The name of the country appropriate to the locale.
java.util.Locale.getDisplayCountry(Locale),String,The name of the country appropriate to the given locale.
java.util.Locale.getDisplayVariant(),String,The name of the display variant code appropriate to the locale.
java.util.Locale.getDisplayVariant(Locale),String,The name of the display variant code appropriate to the given locale.
java.util.Locale.getDisplayName(),String,The name of the locale appropriate to display.
java.util.Locale.getDisplayName(Locale),String,The name of the locale appropriate to display.
java.util.Locale.clone(),Object,a clone of this instance.
java.util.Locale.hashCode(),int,a hash code value for this object.
java.util.Locale.equals(Object),boolean,true if this Locale is equal to the specified object.
"java.util.Locale.filter(List&lt;Locale.LanguageRange&gt;,Collection&lt;Locale&gt;,Locale.FilteringMode)",List&lt;Locale&gt;,"a list of Locale instances for matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."
"java.util.Locale.filter(List&lt;Locale.LanguageRange&gt;,Collection&lt;Locale&gt;)",List&lt;Locale&gt;,"a list of Locale instances for matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."
"java.util.Locale.filterTags(List&lt;Locale.LanguageRange&gt;,Collection&lt;String&gt;,Locale.FilteringMode)",List&lt;String&gt;,"a list of matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."
"java.util.Locale.filterTags(List&lt;Locale.LanguageRange&gt;,Collection&lt;String&gt;)",List&lt;String&gt;,"a list of matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."
"java.util.Locale.lookup(List&lt;Locale.LanguageRange&gt;,Collection&lt;Locale&gt;)",Locale,"the best matching Locale instance chosen based on priority or weight, or null if nothing matches."
"java.util.Locale.lookupTag(List&lt;Locale.LanguageRange&gt;,Collection&lt;String&gt;)",String,"the best matching language tag chosen based on priority or weight, or null if nothing matches."
java.util.Locale.Builder.setLocale(Locale),Locale.Builder,
java.util.Locale.Builder.setLanguageTag(String),Locale.Builder,This builder.
java.util.Locale.Builder.setLanguage(String),Locale.Builder,This builder.
java.util.Locale.Builder.setScript(String),Locale.Builder,This builder.
java.util.Locale.Builder.setRegion(String),Locale.Builder,This builder.
java.util.Locale.Builder.setVariant(String),Locale.Builder,This builder.
"java.util.Locale.Builder.setExtension(char,String)",Locale.Builder,This builder.
"java.util.Locale.Builder.setUnicodeLocaleKeyword(String,String)",Locale.Builder,This builder.
java.util.Locale.Builder.addUnicodeLocaleAttribute(String),Locale.Builder,This builder.
java.util.Locale.Builder.removeUnicodeLocaleAttribute(String),Locale.Builder,This builder.
java.util.Locale.Builder.clear(),Locale.Builder,This builder.
java.util.Locale.Builder.clearExtensions(),Locale.Builder,This builder.
java.util.Locale.Builder.build(),Locale,A Locale.
java.util.Locale.LanguageRange.getRange(),String,the language range.
java.util.Locale.LanguageRange.getWeight(),double,the weight value.
java.util.Locale.LanguageRange.parse(String),List&lt;Locale.LanguageRange&gt;,a Language Priority List consisting of language ranges included in the given ranges and their equivalent language ranges if available. The list is modifiable.
"java.util.Locale.LanguageRange.parse(String,Map&lt;String,List&lt;String&gt;&gt;)",List&lt;Locale.LanguageRange&gt;,a Language Priority List with customization. The list is modifiable.
"java.util.Locale.LanguageRange.mapEquivalents(List&lt;Locale.LanguageRange&gt;,Map&lt;String,List&lt;String&gt;&gt;)",List&lt;Locale.LanguageRange&gt;,a new Language Priority List with customization. The list is modifiable.
java.util.Locale.LanguageRange.hashCode(),int,a hash code value for this object.
java.util.Locale.LanguageRange.equals(Object),boolean,true if this object's range and weight are the same as the obj's; false otherwise.
java.util.LongSummaryStatistics.accept(int),void,
java.util.LongSummaryStatistics.accept(long),void,
java.util.LongSummaryStatistics.combine(LongSummaryStatistics),void,
java.util.LongSummaryStatistics.getCount(),long,the count of values
java.util.LongSummaryStatistics.getSum(),long,"the sum of values, or zero if none"
java.util.LongSummaryStatistics.getMin(),long,"the minimum value, or Long.MAX_VALUE if none"
java.util.LongSummaryStatistics.getMax(),long,"the maximum value, or Long.MIN_VALUE if none"
java.util.LongSummaryStatistics.getAverage(),double,"The arithmetic mean of values, or zero if none"
java.util.LongSummaryStatistics.toString(),String,a string representation of the object.
"java.util.Objects.equals(Object,Object)",boolean,true if the arguments are equal to each other and false otherwise
"java.util.Objects.deepEquals(Object,Object)",boolean,true if the arguments are deeply equal to each other and false otherwise
java.util.Objects.hashCode(Object),int,the hash code of a non-null argument and 0 for a null argument
java.util.Objects.hash(Object...),int,a hash value of the sequence of input values
java.util.Objects.toString(Object),String,"the result of calling toString for a non-null argument and ""null"" for a null argument"
"java.util.Objects.toString(Object,String)",String,the result of calling toString on the first argument if it is not null and the second argument otherwise.
"java.util.Objects.compare(T,T,Comparator&lt;?)",&lt;T&gt;int,"0 if the arguments are identical and c.compare(a, b) otherwise."
java.util.Objects.requireNonNull(T),&lt;T&gt;T,obj if not null
"java.util.Objects.requireNonNull(T,String)",&lt;T&gt;T,obj if not null
java.util.Objects.isNull(Object),boolean,true if the provided reference is null otherwise false
java.util.Objects.nonNull(Object),boolean,true if the provided reference is non-null otherwise false
"java.util.Objects.requireNonNull(T,Supplier&lt;String&gt;)",&lt;T&gt;T,obj if not null
java.util.Observable.addObserver(Observer),void,
java.util.Observable.deleteObserver(Observer),void,
java.util.Observable.notifyObservers(),void,
java.util.Observable.notifyObservers(Object),void,
java.util.Observable.deleteObservers(),void,
java.util.Observable.setChanged(),void,
java.util.Observable.clearChanged(),void,
java.util.Observable.hasChanged(),boolean,true if and only if the setChanged method has been called more recently than the clearChanged method on this object; false otherwise.
java.util.Observable.countObservers(),int,the number of observers of this object.
java.util.Optional.empty(),&lt;T&gt;Optional&lt;T&gt;,an empty Optional
java.util.Optional.of(T),&lt;T&gt;Optional&lt;T&gt;,an Optional with the value present
java.util.Optional.ofNullable(T),&lt;T&gt;Optional&lt;T&gt;,"an Optional with a present value if the specified value is non-null, otherwise an empty Optional"
java.util.Optional.get(),T,the non-null value held by this Optional
java.util.Optional.isPresent(),boolean,"true if there is a value present, otherwise false"
java.util.Optional.ifPresent(Consumer&lt;?),void,
java.util.Optional.filter(Predicate&lt;?),Optional&lt;T&gt;,"an Optional describing the value of this Optional if a value is present and the value matches the given predicate, otherwise an empty Optional"
"java.util.Optional.map(Function&lt;?,?)",&lt;U&gt;Optional&lt;U&gt;,"an Optional describing the result of applying a mapping function to the value of this Optional, if a value is present, otherwise an empty Optional"
"java.util.Optional.flatMap(Function&lt;?,Optional&lt;U&gt;&gt;)",&lt;U&gt;Optional&lt;U&gt;,"the result of applying an Optional-bearing mapping function to the value of this Optional, if a value is present, otherwise an empty Optional"
java.util.Optional.orElse(T),T,"the value, if present, otherwise other"
java.util.Optional.orElseGet(Supplier&lt;?),T,the value if present otherwise the result of other.get()
java.util.Optional.orElseThrow(Supplier&lt;?),&lt;X extends Throwable&gt;T,the present value
java.util.Optional.equals(Object),boolean,
java.util.Optional.hashCode(),int,hash code value of the present value or 0 if no value is present
java.util.Optional.toString(),String,the string representation of this instance
java.util.OptionalDouble.empty(),OptionalDouble,an empty OptionalDouble.
java.util.OptionalDouble.of(double),OptionalDouble,an OptionalDouble with the value present
java.util.OptionalDouble.getAsDouble(),double,the value held by this OptionalDouble
java.util.OptionalDouble.isPresent(),boolean,"true if there is a value present, otherwise false"
java.util.OptionalDouble.ifPresent(DoubleConsumer),void,
java.util.OptionalDouble.orElse(double),double,"the value, if present, otherwise other"
java.util.OptionalDouble.orElseGet(DoubleSupplier),double,the value if present otherwise the result of other.getAsDouble()
java.util.OptionalDouble.orElseThrow(Supplier&lt;X&gt;),&lt;X extends Throwable&gt;double,the present value
java.util.OptionalDouble.equals(Object),boolean,
java.util.OptionalDouble.hashCode(),int,hash code value of the present value or 0 if no value is present
java.util.OptionalDouble.toString(),String,the string representation of this instance
java.util.OptionalInt.empty(),OptionalInt,an empty OptionalInt
java.util.OptionalInt.of(int),OptionalInt,an OptionalInt with the value present
java.util.OptionalInt.getAsInt(),int,the value held by this OptionalInt
java.util.OptionalInt.isPresent(),boolean,"true if there is a value present, otherwise false"
java.util.OptionalInt.ifPresent(IntConsumer),void,
java.util.OptionalInt.orElse(int),int,"the value, if present, otherwise other"
java.util.OptionalInt.orElseGet(IntSupplier),int,the value if present otherwise the result of other.getAsInt()
java.util.OptionalInt.orElseThrow(Supplier&lt;X&gt;),&lt;X extends Throwable&gt;int,the present value
java.util.OptionalInt.equals(Object),boolean,
java.util.OptionalInt.hashCode(),int,hash code value of the present value or 0 if no value is present
java.util.OptionalInt.toString(),String,the string representation of this instance
java.util.OptionalLong.empty(),OptionalLong,an empty OptionalLong.
java.util.OptionalLong.of(long),OptionalLong,an OptionalLong with the value present
java.util.OptionalLong.getAsLong(),long,the value held by this OptionalLong
java.util.OptionalLong.isPresent(),boolean,"true if there is a value present, otherwise false"
java.util.OptionalLong.ifPresent(LongConsumer),void,
java.util.OptionalLong.orElse(long),long,"the value, if present, otherwise other"
java.util.OptionalLong.orElseGet(LongSupplier),long,the value if present otherwise the result of other.getAsLong()
java.util.OptionalLong.orElseThrow(Supplier&lt;X&gt;),&lt;X extends Throwable&gt;long,the present value
java.util.OptionalLong.equals(Object),boolean,
java.util.OptionalLong.hashCode(),int,hash code value of the present value or 0 if no value is present
java.util.OptionalLong.toString(),String,the string representation of this instance
java.util.PriorityQueue.add(E),boolean,true (as specified by Collection.add(E))
java.util.PriorityQueue.offer(E),boolean,true (as specified by Queue.offer(E))
java.util.PriorityQueue.peek(),E,"the head of this queue, or null if this queue is empty"
java.util.PriorityQueue.remove(Object),boolean,true if this queue changed as a result of the call
java.util.PriorityQueue.contains(Object),boolean,true if this queue contains the specified element
java.util.PriorityQueue.toArray(),Object[],an array containing all of the elements in this queue
java.util.PriorityQueue.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this queue
java.util.PriorityQueue.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this queue
java.util.PriorityQueue.size(),int,the number of elements in this collection
java.util.PriorityQueue.clear(),void,
java.util.PriorityQueue.poll(),E,"the head of this queue, or null if this queue is empty"
java.util.PriorityQueue.comparator(),Comparator&lt;? super E&gt;,"the comparator used to order this queue, or null if this queue is sorted according to the natural ordering of its elements"
java.util.PriorityQueue.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this queue
"java.util.Properties.setProperty(String,String)",Object,"the previous value of the specified key in this property list, or null if it did not have one."
java.util.Properties.load(Reader),void,
java.util.Properties.load(InputStream),void,
"java.util.Properties.save(OutputStream,String)",void,
"java.util.Properties.store(Writer,String)",void,
"java.util.Properties.store(OutputStream,String)",void,
java.util.Properties.loadFromXML(InputStream),void,
"java.util.Properties.storeToXML(OutputStream,String)",void,
"java.util.Properties.storeToXML(OutputStream,String,String)",void,
java.util.Properties.getProperty(String),String,the value in this property list with the specified key value.
"java.util.Properties.getProperty(String,String)",String,the value in this property list with the specified key value.
java.util.Properties.propertyNames(),Enumeration&lt;?&gt;,"an enumeration of all the keys in this property list, including the keys in the default property list."
java.util.Properties.stringPropertyNames(),Set&lt;String&gt;,"a set of keys in this property list where the key and its corresponding value are strings, including the keys in the default property list."
java.util.Properties.list(PrintStream),void,
java.util.Properties.list(PrintWriter),void,
java.util.PropertyPermission.implies(Permission),boolean,
java.util.PropertyPermission.equals(Object),boolean,"true if obj is a PropertyPermission, and has the same name and actions as this PropertyPermission object."
java.util.PropertyPermission.hashCode(),int,a hash code value for this object.
java.util.PropertyPermission.getActions(),String,the canonical string representation of the actions.
java.util.PropertyPermission.newPermissionCollection(),PermissionCollection,a new PermissionCollection object suitable for storing PropertyPermissions.
java.util.PropertyResourceBundle.handleGetObject(String),Object,"the object for the given key, or null"
java.util.PropertyResourceBundle.getKeys(),Enumeration&lt;String&gt;,an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
java.util.PropertyResourceBundle.handleKeySet(),Set&lt;String&gt;,a Set of the keys contained only in this ResourceBundle
java.util.Random.setSeed(long),void,
java.util.Random.next(int),int,the next pseudorandom value from this random number generator's sequence
java.util.Random.nextBytes(byte[]),void,
java.util.Random.nextInt(),int,"the next pseudorandom, uniformly distributed int value from this random number generator's sequence"
java.util.Random.nextInt(int),int,"the next pseudorandom, uniformly distributed int value between zero (inclusive) and bound (exclusive) from this random number generator's sequence"
java.util.Random.nextLong(),long,"the next pseudorandom, uniformly distributed long value from this random number generator's sequence"
java.util.Random.nextBoolean(),boolean,"the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence"
java.util.Random.nextFloat(),float,"the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence"
java.util.Random.nextDouble(),double,"the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence"
java.util.Random.nextGaussian(),double,"the next pseudorandom, Gaussian (""normally"") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence"
java.util.Random.ints(long),IntStream,a stream of pseudorandom int values
java.util.Random.ints(),IntStream,a stream of pseudorandom int values
"java.util.Random.ints(long,int,int)",IntStream,"a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.Random.ints(int,int)",IntStream,"a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"
java.util.Random.longs(long),LongStream,a stream of pseudorandom long values
java.util.Random.longs(),LongStream,a stream of pseudorandom long values
"java.util.Random.longs(long,long,long)",LongStream,"a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.Random.longs(long,long)",LongStream,"a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"
java.util.Random.doubles(long),DoubleStream,a stream of double values
java.util.Random.doubles(),DoubleStream,a stream of pseudorandom double values
"java.util.Random.doubles(long,double,double)",DoubleStream,"a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.Random.doubles(double,double)",DoubleStream,"a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"
java.util.ResourceBundle.getBaseBundleName(),String,"The base name of the resource bundle, as provided to and expected by the ResourceBundle.getBundle(...) methods."
java.util.ResourceBundle.getString(String),String,the string for the given key
java.util.ResourceBundle.getStringArray(String),String[],the string array for the given key
java.util.ResourceBundle.getObject(String),Object,the object for the given key
java.util.ResourceBundle.getLocale(),Locale,the locale of this resource bundle
java.util.ResourceBundle.setParent(ResourceBundle),void,
java.util.ResourceBundle.getBundle(String),ResourceBundle,a resource bundle for the given base name and the default locale
"java.util.ResourceBundle.getBundle(String,ResourceBundle.Control)",ResourceBundle,a resource bundle for the given base name and the default locale
"java.util.ResourceBundle.getBundle(String,Locale)",ResourceBundle,a resource bundle for the given base name and locale
"java.util.ResourceBundle.getBundle(String,Locale,ResourceBundle.Control)",ResourceBundle,a resource bundle for the given base name and a Locale in locales
"java.util.ResourceBundle.getBundle(String,Locale,ClassLoader)",ResourceBundle,
"java.util.ResourceBundle.getBundle(String,Locale,ClassLoader,ResourceBundle.Control)",ResourceBundle,
java.util.ResourceBundle.clearCache(),void,
java.util.ResourceBundle.clearCache(ClassLoader),void,
java.util.ResourceBundle.handleGetObject(String),abstractObject,"the object for the given key, or null"
java.util.ResourceBundle.getKeys(),abstractEnumeration&lt;String&gt;,an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
java.util.ResourceBundle.containsKey(String),boolean,true if the given key is contained in this ResourceBundle or its parent bundles; false otherwise.
java.util.ResourceBundle.keySet(),Set&lt;String&gt;,a Set of all keys contained in this ResourceBundle and its parent bundles.
java.util.ResourceBundle.handleKeySet(),Set&lt;String&gt;,a Set of the keys contained only in this ResourceBundle
java.util.ResourceBundle.Control.getControl(List&lt;String&gt;),ResourceBundle.Control,a ResourceBundle.Control supporting the specified formats
java.util.ResourceBundle.Control.getNoFallbackControl(List&lt;String&gt;),ResourceBundle.Control,a ResourceBundle.Control supporting the specified formats with no fallback Locale support
java.util.ResourceBundle.Control.getFormats(String),List&lt;String&gt;,a List of Strings containing formats for loading resource bundles.
"java.util.ResourceBundle.Control.getCandidateLocales(String,Locale)",List&lt;Locale&gt;,
"java.util.ResourceBundle.Control.getFallbackLocale(String,Locale)",Locale,"a Locale for the fallback search, or null if no further fallback search is desired."
"java.util.ResourceBundle.Control.newBundle(String,Locale,String,ClassLoader,boolean)",ResourceBundle,
"java.util.ResourceBundle.Control.getTimeToLive(String,Locale)",long,"the time (0 or a positive millisecond offset from the cached time) to get loaded bundles expired in the cache, TTL_NO_EXPIRATION_CONTROL to disable the expiration control, or TTL_DONT_CACHE to disable caching."
"java.util.ResourceBundle.Control.needsReload(String,Locale,String,ClassLoader,ResourceBundle,long)",boolean,true if the expired bundle needs to be reloaded; false otherwise.
"java.util.ResourceBundle.Control.toBundleName(String,Locale)",String,the bundle name for the resource bundle
"java.util.ResourceBundle.Control.toResourceName(String,String)",String,the converted resource name
java.util.Scanner.close(),void,
java.util.Scanner.ioException(),IOException,the last exception thrown by this scanner's readable
java.util.Scanner.delimiter(),Pattern,this scanner's delimiting pattern.
java.util.Scanner.useDelimiter(Pattern),Scanner,this scanner
java.util.Scanner.useDelimiter(String),Scanner,this scanner
java.util.Scanner.locale(),Locale,this scanner's locale
java.util.Scanner.useLocale(Locale),Scanner,this scanner
java.util.Scanner.radix(),int,the default radix of this scanner
java.util.Scanner.useRadix(int),Scanner,this scanner
java.util.Scanner.match(),MatchResult,a match result for the last match operation
java.util.Scanner.toString(),String,The string representation of this scanner
java.util.Scanner.hasNext(),boolean,true if and only if this scanner has another token
java.util.Scanner.next(),String,the next token
java.util.Scanner.remove(),void,
java.util.Scanner.hasNext(String),boolean,true if and only if this scanner has another token matching the specified pattern
java.util.Scanner.next(String),String,the next token
java.util.Scanner.hasNext(Pattern),boolean,true if and only if this scanner has another token matching the specified pattern
java.util.Scanner.next(Pattern),String,the next token
java.util.Scanner.hasNextLine(),boolean,true if and only if this scanner has another line of input
java.util.Scanner.nextLine(),String,the line that was skipped
java.util.Scanner.findInLine(String),String,the text that matched the specified pattern
java.util.Scanner.findInLine(Pattern),String,the text that matched the specified pattern
"java.util.Scanner.findWithinHorizon(String,int)",String,the text that matched the specified pattern
"java.util.Scanner.findWithinHorizon(Pattern,int)",String,the text that matched the specified pattern
java.util.Scanner.skip(Pattern),Scanner,this scanner
java.util.Scanner.skip(String),Scanner,this scanner
java.util.Scanner.hasNextBoolean(),boolean,true if and only if this scanner's next token is a valid boolean value
java.util.Scanner.nextBoolean(),boolean,the boolean scanned from the input
java.util.Scanner.hasNextByte(),boolean,true if and only if this scanner's next token is a valid byte value
java.util.Scanner.hasNextByte(int),boolean,true if and only if this scanner's next token is a valid byte value
java.util.Scanner.nextByte(),byte,the byte scanned from the input
java.util.Scanner.nextByte(int),byte,the byte scanned from the input
java.util.Scanner.hasNextShort(),boolean,true if and only if this scanner's next token is a valid short value in the default radix
java.util.Scanner.hasNextShort(int),boolean,true if and only if this scanner's next token is a valid short value in the specified radix
java.util.Scanner.nextShort(),short,the short scanned from the input
java.util.Scanner.nextShort(int),short,the short scanned from the input
java.util.Scanner.hasNextInt(),boolean,true if and only if this scanner's next token is a valid int value
java.util.Scanner.hasNextInt(int),boolean,true if and only if this scanner's next token is a valid int value
java.util.Scanner.nextInt(),int,the int scanned from the input
java.util.Scanner.nextInt(int),int,the int scanned from the input
java.util.Scanner.hasNextLong(),boolean,true if and only if this scanner's next token is a valid long value
java.util.Scanner.hasNextLong(int),boolean,true if and only if this scanner's next token is a valid long value
java.util.Scanner.nextLong(),long,the long scanned from the input
java.util.Scanner.nextLong(int),long,the long scanned from the input
java.util.Scanner.hasNextFloat(),boolean,true if and only if this scanner's next token is a valid float value
java.util.Scanner.nextFloat(),float,the float scanned from the input
java.util.Scanner.hasNextDouble(),boolean,true if and only if this scanner's next token is a valid double value
java.util.Scanner.nextDouble(),double,the double scanned from the input
java.util.Scanner.hasNextBigInteger(),boolean,true if and only if this scanner's next token is a valid BigInteger
java.util.Scanner.hasNextBigInteger(int),boolean,true if and only if this scanner's next token is a valid BigInteger
java.util.Scanner.nextBigInteger(),BigInteger,the BigInteger scanned from the input
java.util.Scanner.nextBigInteger(int),BigInteger,the BigInteger scanned from the input
java.util.Scanner.hasNextBigDecimal(),boolean,true if and only if this scanner's next token is a valid BigDecimal
java.util.Scanner.nextBigDecimal(),BigDecimal,the BigDecimal scanned from the input
java.util.Scanner.reset(),Scanner,this scanner
java.util.ServiceLoader.reload(),void,
java.util.ServiceLoader.iterator(),Iterator&lt;S&gt;,An iterator that lazily loads providers for this loader's service
"java.util.ServiceLoader.load(Class&lt;S&gt;,ClassLoader)",&lt;S&gt;ServiceLoader&lt;S&gt;,A new service loader
java.util.ServiceLoader.load(Class&lt;S&gt;),&lt;S&gt;ServiceLoader&lt;S&gt;,A new service loader
java.util.ServiceLoader.loadInstalled(Class&lt;S&gt;),&lt;S&gt;ServiceLoader&lt;S&gt;,A new service loader
java.util.ServiceLoader.toString(),String,A descriptive string
java.util.SimpleTimeZone.setStartYear(int),void,
"java.util.SimpleTimeZone.setStartRule(int,int,int,int)",void,
"java.util.SimpleTimeZone.setStartRule(int,int,int)",void,
"java.util.SimpleTimeZone.setStartRule(int,int,int,int,boolean)",void,
"java.util.SimpleTimeZone.setEndRule(int,int,int,int)",void,
"java.util.SimpleTimeZone.setEndRule(int,int,int)",void,
"java.util.SimpleTimeZone.setEndRule(int,int,int,int,boolean)",void,
java.util.SimpleTimeZone.getOffset(long),int,the amount of time in milliseconds to add to UTC to get local time.
"java.util.SimpleTimeZone.getOffset(int,int,int,int,int,int)",int,The milliseconds to add to UTC to get local time.
java.util.SimpleTimeZone.getRawOffset(),int,the GMT offset value in milliseconds
java.util.SimpleTimeZone.setRawOffset(int),void,
java.util.SimpleTimeZone.setDSTSavings(int),void,
java.util.SimpleTimeZone.getDSTSavings(),int,"the number of milliseconds the time is advanced with respect to standard time when the daylight saving rules are in effect, or 0 (zero) if this time zone doesn't observe daylight saving time."
java.util.SimpleTimeZone.useDaylightTime(),boolean,true if this time zone uses daylight saving time; false otherwise.
java.util.SimpleTimeZone.observesDaylightTime(),boolean,true if this SimpleTimeZone observes Daylight Saving Time; false otherwise.
java.util.SimpleTimeZone.inDaylightTime(Date),boolean,true if daylight saving time is in effective at the given date; false otherwise.
java.util.SimpleTimeZone.clone(),Object,a clone of this instance.
java.util.SimpleTimeZone.hashCode(),int,the hash code for this object
java.util.SimpleTimeZone.equals(Object),boolean,True if the given obj is the same as this SimpleTimeZone object; false otherwise.
java.util.SimpleTimeZone.hasSameRules(TimeZone),boolean,true if the given zone is a SimpleTimeZone and has the same rules and offset as this one
java.util.SimpleTimeZone.toString(),String,a string representation of this time zone.
java.util.Spliterators.emptySpliterator(),&lt;T&gt;Spliterator&lt;T&gt;,An empty spliterator
java.util.Spliterators.emptyIntSpliterator(),Spliterator.OfInt,An empty spliterator
java.util.Spliterators.emptyLongSpliterator(),Spliterator.OfLong,An empty spliterator
java.util.Spliterators.emptyDoubleSpliterator(),Spliterator.OfDouble,An empty spliterator
"java.util.Spliterators.spliterator(Object[],int)",&lt;T&gt;Spliterator&lt;T&gt;,A spliterator for an array
"java.util.Spliterators.spliterator(Object[],int,int,int)",&lt;T&gt;Spliterator&lt;T&gt;,A spliterator for an array
"java.util.Spliterators.spliterator(int[],int)",Spliterator.OfInt,A spliterator for an array
"java.util.Spliterators.spliterator(int[],int,int,int)",Spliterator.OfInt,A spliterator for an array
"java.util.Spliterators.spliterator(long[],int)",Spliterator.OfLong,A spliterator for an array
"java.util.Spliterators.spliterator(long[],int,int,int)",Spliterator.OfLong,A spliterator for an array
"java.util.Spliterators.spliterator(double[],int)",Spliterator.OfDouble,A spliterator for an array
"java.util.Spliterators.spliterator(double[],int,int,int)",Spliterator.OfDouble,A spliterator for an array
"java.util.Spliterators.spliterator(Collection&lt;?,int)",&lt;T&gt;Spliterator&lt;T&gt;,A spliterator from an iterator
"java.util.Spliterators.spliterator(Iterator&lt;?,long,int)",&lt;T&gt;Spliterator&lt;T&gt;,A spliterator from an iterator
"java.util.Spliterators.spliteratorUnknownSize(Iterator&lt;?,int)",&lt;T&gt;Spliterator&lt;T&gt;,A spliterator from an iterator
"java.util.Spliterators.spliterator(PrimitiveIterator.OfInt,long,int)",Spliterator.OfInt,A spliterator from an iterator
"java.util.Spliterators.spliteratorUnknownSize(PrimitiveIterator.OfInt,int)",Spliterator.OfInt,A spliterator from an iterator
"java.util.Spliterators.spliterator(PrimitiveIterator.OfLong,long,int)",Spliterator.OfLong,A spliterator from an iterator
"java.util.Spliterators.spliteratorUnknownSize(PrimitiveIterator.OfLong,int)",Spliterator.OfLong,A spliterator from an iterator
"java.util.Spliterators.spliterator(PrimitiveIterator.OfDouble,long,int)",Spliterator.OfDouble,A spliterator from an iterator
"java.util.Spliterators.spliteratorUnknownSize(PrimitiveIterator.OfDouble,int)",Spliterator.OfDouble,A spliterator from an iterator
java.util.Spliterators.iterator(Spliterator&lt;?),&lt;T&gt;Iterator&lt;T&gt;,An iterator
java.util.Spliterators.iterator(Spliterator.OfInt),PrimitiveIterator.OfInt,An iterator
java.util.Spliterators.iterator(Spliterator.OfLong),PrimitiveIterator.OfLong,An iterator
java.util.Spliterators.iterator(Spliterator.OfDouble),PrimitiveIterator.OfDouble,An iterator
java.util.Spliterators.AbstractDoubleSpliterator.trySplit(),Spliterator.OfDouble,
java.util.Spliterators.AbstractDoubleSpliterator.estimateSize(),long,"the estimated size, or Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
java.util.Spliterators.AbstractDoubleSpliterator.characteristics(),int,a representation of characteristics
java.util.Spliterators.AbstractIntSpliterator.trySplit(),Spliterator.OfInt,
java.util.Spliterators.AbstractIntSpliterator.estimateSize(),long,"the estimated size, or Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
java.util.Spliterators.AbstractIntSpliterator.characteristics(),int,a representation of characteristics
java.util.Spliterators.AbstractLongSpliterator.trySplit(),Spliterator.OfLong,
java.util.Spliterators.AbstractLongSpliterator.estimateSize(),long,"the estimated size, or Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
java.util.Spliterators.AbstractLongSpliterator.characteristics(),int,a representation of characteristics
java.util.Spliterators.AbstractSpliterator.trySplit(),Spliterator&lt;T&gt;,
java.util.Spliterators.AbstractSpliterator.estimateSize(),long,"the estimated size, or Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
java.util.Spliterators.AbstractSpliterator.characteristics(),int,a representation of characteristics
java.util.SplittableRandom.split(),SplittableRandom,the new SplittableRandom instance
java.util.SplittableRandom.nextInt(),int,a pseudorandom int value
java.util.SplittableRandom.nextInt(int),int,a pseudorandom int value between zero (inclusive) and the bound (exclusive)
"java.util.SplittableRandom.nextInt(int,int)",int,a pseudorandom int value between the origin (inclusive) and the bound (exclusive)
java.util.SplittableRandom.nextLong(),long,a pseudorandom long value
java.util.SplittableRandom.nextLong(long),long,a pseudorandom long value between zero (inclusive) and the bound (exclusive)
"java.util.SplittableRandom.nextLong(long,long)",long,a pseudorandom long value between the origin (inclusive) and the bound (exclusive)
java.util.SplittableRandom.nextDouble(),double,a pseudorandom double value between zero (inclusive) and one (exclusive)
java.util.SplittableRandom.nextDouble(double),double,a pseudorandom double value between zero (inclusive) and the bound (exclusive)
"java.util.SplittableRandom.nextDouble(double,double)",double,a pseudorandom double value between the origin (inclusive) and the bound (exclusive)
java.util.SplittableRandom.nextBoolean(),boolean,a pseudorandom boolean value
java.util.SplittableRandom.ints(long),IntStream,a stream of pseudorandom int values
java.util.SplittableRandom.ints(),IntStream,a stream of pseudorandom int values
"java.util.SplittableRandom.ints(long,int,int)",IntStream,"a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.SplittableRandom.ints(int,int)",IntStream,"a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"
java.util.SplittableRandom.longs(long),LongStream,a stream of pseudorandom long values
java.util.SplittableRandom.longs(),LongStream,a stream of pseudorandom long values
"java.util.SplittableRandom.longs(long,long,long)",LongStream,"a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.SplittableRandom.longs(long,long)",LongStream,"a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"
java.util.SplittableRandom.doubles(long),DoubleStream,a stream of double values
java.util.SplittableRandom.doubles(),DoubleStream,a stream of pseudorandom double values
"java.util.SplittableRandom.doubles(long,double,double)",DoubleStream,"a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.SplittableRandom.doubles(double,double)",DoubleStream,"a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"
java.util.Stack.push(E),E,the item argument.
java.util.Stack.pop(),E,The object at the top of this stack (the last item of the Vector object).
java.util.Stack.peek(),E,the object at the top of this stack (the last item of the Vector object).
java.util.Stack.empty(),boolean,true if and only if this stack contains no items; false otherwise.
java.util.Stack.search(Object),int,the 1-based position from the top of the stack where the object is located; the return value -1 indicates that the object is not on the stack.
java.util.StringJoiner.setEmptyValue(CharSequence),StringJoiner,this StringJoiner itself so the calls may be chained
java.util.StringJoiner.toString(),String,the string representation of this StringJoiner
java.util.StringJoiner.add(CharSequence),StringJoiner,a reference to this StringJoiner
java.util.StringJoiner.merge(StringJoiner),StringJoiner,This StringJoiner
java.util.StringJoiner.length(),int,the length of the current value of StringJoiner
java.util.StringTokenizer.hasMoreTokens(),boolean,true if and only if there is at least one token in the string after the current position; false otherwise.
java.util.StringTokenizer.nextToken(),String,the next token from this string tokenizer.
java.util.StringTokenizer.nextToken(String),String,"the next token, after switching to the new delimiter set."
java.util.StringTokenizer.hasMoreElements(),boolean,true if there are more tokens; false otherwise.
java.util.StringTokenizer.nextElement(),Object,the next token in the string.
java.util.StringTokenizer.countTokens(),int,the number of tokens remaining in the string using the current delimiter set.
"java.util.Timer.schedule(TimerTask,long)",void,
"java.util.Timer.schedule(TimerTask,Date)",void,
"java.util.Timer.schedule(TimerTask,long,long)",void,
"java.util.Timer.schedule(TimerTask,Date,long)",void,
"java.util.Timer.scheduleAtFixedRate(TimerTask,long,long)",void,
"java.util.Timer.scheduleAtFixedRate(TimerTask,Date,long)",void,
java.util.Timer.cancel(),void,
java.util.Timer.purge(),int,the number of tasks removed from the queue.
java.util.TimerTask.run(),abstractvoid,
java.util.TimerTask.cancel(),boolean,"true if this task is scheduled for one-time execution and has not yet run, or this task is scheduled for repeated execution. Returns false if the task was scheduled for one-time execution and has already run, or if the task was never scheduled, or if the task was already cancelled. (Loosely speaking, this method returns true if it prevents one or more scheduled executions from taking place.)"
java.util.TimerTask.scheduledExecutionTime(),long,"the time at which the most recent execution of this task was scheduled to occur, in the format returned by Date.getTime(). The return value is undefined if the task has yet to commence its first execution."
"java.util.TimeZone.getOffset(int,int,int,int,int,int)",abstractint,the offset in milliseconds to add to GMT to get local time.
java.util.TimeZone.getOffset(long),int,the amount of time in milliseconds to add to UTC to get local time.
java.util.TimeZone.setRawOffset(int),abstractvoid,
java.util.TimeZone.getRawOffset(),abstractint,the amount of raw offset time in milliseconds to add to UTC.
java.util.TimeZone.getID(),String,the ID of this time zone.
java.util.TimeZone.setID(String),void,
java.util.TimeZone.getDisplayName(),String,the human-readable name of this time zone in the default locale.
java.util.TimeZone.getDisplayName(Locale),String,the human-readable name of this time zone in the given locale.
"java.util.TimeZone.getDisplayName(boolean,int)",String,the human-readable name of this time zone in the default locale.
"java.util.TimeZone.getDisplayName(boolean,int,Locale)",String,the human-readable name of this time zone in the given locale.
java.util.TimeZone.getDSTSavings(),int,the amount of saving time in milliseconds
java.util.TimeZone.useDaylightTime(),abstractboolean,"true if this TimeZone uses Daylight Saving Time, false, otherwise."
java.util.TimeZone.observesDaylightTime(),boolean,"true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time; false otherwise."
java.util.TimeZone.inDaylightTime(Date),abstractboolean,"true if the given date is in Daylight Saving Time, false, otherwise."
java.util.TimeZone.getTimeZone(String),TimeZone,"the specified TimeZone, or the GMT zone if the given ID cannot be understood."
java.util.TimeZone.getTimeZone(ZoneId),TimeZone,"the specified TimeZone, or the GMT zone if the given ID cannot be understood."
java.util.TimeZone.toZoneId(),ZoneId,a ZoneId representing the same time zone as this TimeZone
java.util.TimeZone.getAvailableIDs(int),String[],"an array of IDs, where the time zone for that ID has the specified GMT offset. For example, ""America/Phoenix"" and ""America/Denver"" both have GMT-07:00, but differ in daylight saving behavior."
java.util.TimeZone.getAvailableIDs(),String[],an array of IDs.
java.util.TimeZone.getDefault(),TimeZone,
java.util.TimeZone.setDefault(TimeZone),void,
java.util.TimeZone.hasSameRules(TimeZone),boolean,"true if the other zone is not null and is the same as this one, with the possible exception of the ID"
java.util.TimeZone.clone(),Object,a clone of this TimeZone
java.util.TreeMap.size(),int,the number of key-value mappings in this map
java.util.TreeMap.containsKey(Object),boolean,true if this map contains a mapping for the specified key
java.util.TreeMap.containsValue(Object),boolean,true if a mapping to value exists; false otherwise
java.util.TreeMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
java.util.TreeMap.comparator(),Comparator&lt;? super K&gt;,"the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys"
java.util.TreeMap.firstKey(),K,the first (lowest) key currently in this map
java.util.TreeMap.lastKey(),K,the last (highest) key currently in this map
"java.util.TreeMap.putAll(Map&lt;?,?)",void,
"java.util.TreeMap.put(K,V)",V,"the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"
java.util.TreeMap.remove(Object),V,"the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"
java.util.TreeMap.clear(),void,
java.util.TreeMap.clone(),Object,a shallow copy of this map
java.util.TreeMap.firstEntry(),"Map.Entry&lt;K,V&gt;","an entry with the least key, or null if this map is empty"
java.util.TreeMap.lastEntry(),"Map.Entry&lt;K,V&gt;","an entry with the greatest key, or null if this map is empty"
java.util.TreeMap.pollFirstEntry(),"Map.Entry&lt;K,V&gt;","the removed first entry of this map, or null if this map is empty"
java.util.TreeMap.pollLastEntry(),"Map.Entry&lt;K,V&gt;","the removed last entry of this map, or null if this map is empty"
java.util.TreeMap.lowerEntry(K),"Map.Entry&lt;K,V&gt;","an entry with the greatest key less than key, or null if there is no such key"
java.util.TreeMap.lowerKey(K),K,"the greatest key less than key, or null if there is no such key"
java.util.TreeMap.floorEntry(K),"Map.Entry&lt;K,V&gt;","an entry with the greatest key less than or equal to key, or null if there is no such key"
java.util.TreeMap.floorKey(K),K,"the greatest key less than or equal to key, or null if there is no such key"
java.util.TreeMap.ceilingEntry(K),"Map.Entry&lt;K,V&gt;","an entry with the least key greater than or equal to key, or null if there is no such key"
java.util.TreeMap.ceilingKey(K),K,"the least key greater than or equal to key, or null if there is no such key"
java.util.TreeMap.higherEntry(K),"Map.Entry&lt;K,V&gt;","an entry with the least key greater than key, or null if there is no such key"
java.util.TreeMap.higherKey(K),K,"the least key greater than key, or null if there is no such key"
java.util.TreeMap.keySet(),Set&lt;K&gt;,a set view of the keys contained in this map
java.util.TreeMap.navigableKeySet(),NavigableSet&lt;K&gt;,a navigable set view of the keys in this map
java.util.TreeMap.descendingKeySet(),NavigableSet&lt;K&gt;,a reverse order navigable set view of the keys in this map
java.util.TreeMap.values(),Collection&lt;V&gt;,a collection view of the values contained in this map
java.util.TreeMap.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;",a set view of the mappings contained in this map
java.util.TreeMap.descendingMap(),"NavigableMap&lt;K,V&gt;",a reverse order view of this map
"java.util.TreeMap.subMap(K,boolean,K,boolean)","NavigableMap&lt;K,V&gt;",a view of the portion of this map whose keys range from fromKey to toKey
"java.util.TreeMap.headMap(K,boolean)","NavigableMap&lt;K,V&gt;","a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"
"java.util.TreeMap.tailMap(K,boolean)","NavigableMap&lt;K,V&gt;","a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"
"java.util.TreeMap.subMap(K,K)","SortedMap&lt;K,V&gt;","a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"
java.util.TreeMap.headMap(K),"SortedMap&lt;K,V&gt;",a view of the portion of this map whose keys are strictly less than toKey
java.util.TreeMap.tailMap(K),"SortedMap&lt;K,V&gt;",a view of the portion of this map whose keys are greater than or equal to fromKey
"java.util.TreeMap.replace(K,V,V)",boolean,true if the value was replaced
"java.util.TreeMap.replace(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"
"java.util.TreeMap.forEach(BiConsumer&lt;?,?)",void,
"java.util.TreeMap.replaceAll(BiFunction&lt;?,?,?)",void,
java.util.TreeSet.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this set in ascending order
java.util.TreeSet.descendingIterator(),Iterator&lt;E&gt;,an iterator over the elements in this set in descending order
java.util.TreeSet.descendingSet(),NavigableSet&lt;E&gt;,a reverse order view of this set
java.util.TreeSet.size(),int,the number of elements in this set (its cardinality)
java.util.TreeSet.isEmpty(),boolean,true if this set contains no elements
java.util.TreeSet.contains(Object),boolean,true if this set contains the specified element
java.util.TreeSet.add(E),boolean,true if this set did not already contain the specified element
java.util.TreeSet.remove(Object),boolean,true if this set contained the specified element
java.util.TreeSet.clear(),void,
java.util.TreeSet.addAll(Collection&lt;?),boolean,true if this set changed as a result of the call
"java.util.TreeSet.subSet(E,boolean,E,boolean)",NavigableSet&lt;E&gt;,"a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"
"java.util.TreeSet.headSet(E,boolean)",NavigableSet&lt;E&gt;,"a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement"
"java.util.TreeSet.tailSet(E,boolean)",NavigableSet&lt;E&gt;,a view of the portion of this set whose elements are greater than or equal to fromElement
"java.util.TreeSet.subSet(E,E)",SortedSet&lt;E&gt;,"a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"
java.util.TreeSet.headSet(E),SortedSet&lt;E&gt;,a view of the portion of this set whose elements are strictly less than toElement
java.util.TreeSet.tailSet(E),SortedSet&lt;E&gt;,a view of the portion of this set whose elements are greater than or equal to fromElement
java.util.TreeSet.comparator(),Comparator&lt;? super E&gt;,"the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements"
java.util.TreeSet.first(),E,the first (lowest) element currently in this set
java.util.TreeSet.last(),E,the last (highest) element currently in this set
java.util.TreeSet.lower(E),E,"the greatest element less than e, or null if there is no such element"
java.util.TreeSet.floor(E),E,"the greatest element less than or equal to e, or null if there is no such element"
java.util.TreeSet.ceiling(E),E,"the least element greater than or equal to e, or null if there is no such element"
java.util.TreeSet.higher(E),E,"the least element greater than e, or null if there is no such element"
java.util.TreeSet.pollFirst(),E,"the first element, or null if this set is empty"
java.util.TreeSet.pollLast(),E,"the last element, or null if this set is empty"
java.util.TreeSet.clone(),Object,a shallow copy of this set
java.util.TreeSet.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this set
java.util.UUID.randomUUID(),UUID,A randomly generated UUID
java.util.UUID.nameUUIDFromBytes(byte[]),UUID,A UUID generated from the specified array
java.util.UUID.fromString(String),UUID,A UUID with the specified value
java.util.UUID.getLeastSignificantBits(),long,The least significant 64 bits of this UUID's 128 bit value
java.util.UUID.getMostSignificantBits(),long,The most significant 64 bits of this UUID's 128 bit value
java.util.UUID.version(),int,
java.util.UUID.variant(),int,
java.util.UUID.timestamp(),long,The timestamp of this UUID.
java.util.UUID.clockSequence(),int,The clock sequence of this UUID
java.util.UUID.node(),long,The node value of this UUID
java.util.UUID.toString(),String,A string representation of this UUID
java.util.UUID.hashCode(),int,A hash code value for this UUID
java.util.UUID.equals(Object),boolean,true if the objects are the same; false otherwise
java.util.UUID.compareTo(UUID),int,"-1, 0 or 1 as this UUID is less than, equal to, or greater than val"
java.util.Vector.copyInto(Object[]),void,
java.util.Vector.trimToSize(),void,
java.util.Vector.ensureCapacity(int),void,
java.util.Vector.setSize(int),void,
java.util.Vector.capacity(),int,"the current capacity (the length of its internal data array, kept in the field elementData of this vector)"
java.util.Vector.size(),int,the number of components in this vector
java.util.Vector.isEmpty(),boolean,"true if and only if this vector has no components, that is, its size is zero; false otherwise."
java.util.Vector.elements(),Enumeration&lt;E&gt;,an enumeration of the components of this vector
java.util.Vector.contains(Object),boolean,true if this vector contains the specified element
java.util.Vector.indexOf(Object),int,"the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element"
"java.util.Vector.indexOf(Object,int)",int,the index of the first occurrence of the element in this vector at position index or later in the vector; -1 if the element is not found.
java.util.Vector.lastIndexOf(Object),int,"the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element"
"java.util.Vector.lastIndexOf(Object,int)",int,the index of the last occurrence of the element at position less than or equal to index in this vector; -1 if the element is not found.
java.util.Vector.elementAt(int),E,the component at the specified index
java.util.Vector.firstElement(),E,the first component of this vector
java.util.Vector.lastElement(),E,"the last component of the vector, i.e., the component at index size()-1."
"java.util.Vector.setElementAt(E,int)",void,
java.util.Vector.removeElementAt(int),void,
"java.util.Vector.insertElementAt(E,int)",void,
java.util.Vector.addElement(E),void,
java.util.Vector.removeElement(Object),boolean,true if the argument was a component of this vector; false otherwise.
java.util.Vector.removeAllElements(),void,
java.util.Vector.clone(),Object,a clone of this vector
java.util.Vector.toArray(),Object[],an array containing all of the elements in this collection
java.util.Vector.toArray(T[]),&lt;T&gt;T[],an array containing the elements of the Vector
java.util.Vector.get(int),E,object at the specified index
"java.util.Vector.set(int,E)",E,the element previously at the specified position
java.util.Vector.add(E),boolean,true (as specified by Collection.add(E))
java.util.Vector.remove(Object),boolean,true if the Vector contained the specified element
"java.util.Vector.add(int,E)",void,
java.util.Vector.remove(int),E,element that was removed
java.util.Vector.clear(),void,
java.util.Vector.containsAll(Collection&lt;?&gt;),boolean,true if this Vector contains all of the elements in the specified collection
java.util.Vector.addAll(Collection&lt;?),boolean,true if this Vector changed as a result of the call
java.util.Vector.removeAll(Collection&lt;?&gt;),boolean,true if this Vector changed as a result of the call
java.util.Vector.retainAll(Collection&lt;?&gt;),boolean,true if this Vector changed as a result of the call
"java.util.Vector.addAll(int,Collection&lt;?)",boolean,true if this Vector changed as a result of the call
java.util.Vector.equals(Object),boolean,true if the specified Object is equal to this Vector
java.util.Vector.hashCode(),int,the hash code value for this list
java.util.Vector.toString(),String,a string representation of this collection
"java.util.Vector.subList(int,int)",List&lt;E&gt;,a view of the specified range within this List
"java.util.Vector.removeRange(int,int)",void,
java.util.Vector.listIterator(int),ListIterator&lt;E&gt;,"a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"
java.util.Vector.listIterator(),ListIterator&lt;E&gt;,a list iterator over the elements in this list (in proper sequence)
java.util.Vector.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this list in proper sequence
java.util.Vector.forEach(Consumer&lt;?),void,
java.util.Vector.removeIf(Predicate&lt;?),boolean,true if any elements were removed
java.util.Vector.replaceAll(UnaryOperator&lt;E&gt;),void,
java.util.Vector.sort(Comparator&lt;?),void,
java.util.Vector.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this list
java.util.WeakHashMap.size(),int,the number of key-value mappings in this map
java.util.WeakHashMap.isEmpty(),boolean,true if this map contains no key-value mappings
java.util.WeakHashMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
java.util.WeakHashMap.containsKey(Object),boolean,true if there is a mapping for key; false otherwise
"java.util.WeakHashMap.put(K,V)",V,"the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"
"java.util.WeakHashMap.putAll(Map&lt;?,?)",void,
java.util.WeakHashMap.remove(Object),V,"the previous value associated with key, or null if there was no mapping for key"
java.util.WeakHashMap.clear(),void,
java.util.WeakHashMap.containsValue(Object),boolean,true if this map maps one or more keys to the specified value
java.util.WeakHashMap.keySet(),Set&lt;K&gt;,a set view of the keys contained in this map
java.util.WeakHashMap.values(),Collection&lt;V&gt;,a collection view of the values contained in this map
java.util.WeakHashMap.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;",a set view of the mappings contained in this map
"java.util.WeakHashMap.forEach(BiConsumer&lt;?,?)",void,
"java.util.WeakHashMap.replaceAll(BiFunction&lt;?,?,?)",void,
"java.util.concurrent.AbstractExecutorService.newTaskFor(Runnable,T)",&lt;T&gt;RunnableFuture&lt;T&gt;,"a RunnableFuture which, when run, will run the underlying runnable and which, as a Future, will yield the given value as its result and provide for cancellation of the underlying task"
java.util.concurrent.AbstractExecutorService.newTaskFor(Callable&lt;T&gt;),&lt;T&gt;RunnableFuture&lt;T&gt;,"a RunnableFuture which, when run, will call the underlying callable and which, as a Future, will yield the callable's result as its result and provide for cancellation of the underlying task"
java.util.concurrent.AbstractExecutorService.submit(Runnable),Future&lt;?&gt;,a Future representing pending completion of the task
"java.util.concurrent.AbstractExecutorService.submit(Runnable,T)",&lt;T&gt;Future&lt;T&gt;,a Future representing pending completion of the task
java.util.concurrent.AbstractExecutorService.submit(Callable&lt;T&gt;),&lt;T&gt;Future&lt;T&gt;,a Future representing pending completion of the task
java.util.concurrent.AbstractExecutorService.invokeAny(Collection&lt;?),&lt;T&gt;T,the result returned by one of the tasks
"java.util.concurrent.AbstractExecutorService.invokeAny(Collection&lt;?,long,TimeUnit)",&lt;T&gt;T,the result returned by one of the tasks
java.util.concurrent.AbstractExecutorService.invokeAll(Collection&lt;?),&lt;T&gt;List&lt;Future&lt;T&gt;&gt;,"a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed"
"java.util.concurrent.AbstractExecutorService.invokeAll(Collection&lt;?,long,TimeUnit)",&lt;T&gt;List&lt;Future&lt;T&gt;&gt;,"a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed."
java.util.concurrent.ArrayBlockingQueue.add(E),boolean,true (as specified by Collection.add(E))
java.util.concurrent.ArrayBlockingQueue.offer(E),boolean,"true if the element was added to this queue, else false"
java.util.concurrent.ArrayBlockingQueue.put(E),void,
"java.util.concurrent.ArrayBlockingQueue.offer(E,long,TimeUnit)",boolean,"true if successful, or false if the specified waiting time elapses before space is available"
java.util.concurrent.ArrayBlockingQueue.poll(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.ArrayBlockingQueue.take(),E,the head of this queue
"java.util.concurrent.ArrayBlockingQueue.poll(long,TimeUnit)",E,"the head of this queue, or null if the specified waiting time elapses before an element is available"
java.util.concurrent.ArrayBlockingQueue.peek(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.ArrayBlockingQueue.size(),int,the number of elements in this queue
java.util.concurrent.ArrayBlockingQueue.remainingCapacity(),int,the remaining capacity
java.util.concurrent.ArrayBlockingQueue.remove(Object),boolean,true if this queue changed as a result of the call
java.util.concurrent.ArrayBlockingQueue.contains(Object),boolean,true if this queue contains the specified element
java.util.concurrent.ArrayBlockingQueue.toArray(),Object[],an array containing all of the elements in this queue
java.util.concurrent.ArrayBlockingQueue.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this queue
java.util.concurrent.ArrayBlockingQueue.toString(),String,a string representation of this collection
java.util.concurrent.ArrayBlockingQueue.clear(),void,
java.util.concurrent.ArrayBlockingQueue.drainTo(Collection&lt;?),int,the number of elements transferred
"java.util.concurrent.ArrayBlockingQueue.drainTo(Collection&lt;?,int)",int,the number of elements transferred
java.util.concurrent.ArrayBlockingQueue.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this queue in proper sequence
java.util.concurrent.ArrayBlockingQueue.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this queue
java.util.concurrent.CompletableFuture.supplyAsync(Supplier&lt;U&gt;),&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletableFuture
"java.util.concurrent.CompletableFuture.supplyAsync(Supplier&lt;U&gt;,Executor)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletableFuture
java.util.concurrent.CompletableFuture.runAsync(Runnable),CompletableFuture&lt;Void&gt;,the new CompletableFuture
"java.util.concurrent.CompletableFuture.runAsync(Runnable,Executor)",CompletableFuture&lt;Void&gt;,the new CompletableFuture
java.util.concurrent.CompletableFuture.completedFuture(U),&lt;U&gt;CompletableFuture&lt;U&gt;,the completed CompletableFuture
java.util.concurrent.CompletableFuture.isDone(),boolean,true if completed
java.util.concurrent.CompletableFuture.get(),T,the result value
"java.util.concurrent.CompletableFuture.get(long,TimeUnit)",T,the result value
java.util.concurrent.CompletableFuture.join(),T,the result value
java.util.concurrent.CompletableFuture.getNow(T),T,"the result value, if completed, else the given valueIfAbsent"
java.util.concurrent.CompletableFuture.complete(T),boolean,"true if this invocation caused this CompletableFuture to transition to a completed state, else false"
java.util.concurrent.CompletableFuture.completeExceptionally(Throwable),boolean,"true if this invocation caused this CompletableFuture to transition to a completed state, else false"
"java.util.concurrent.CompletableFuture.thenApply(Function&lt;?,?)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.thenApplyAsync(Function&lt;?,?)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.thenApplyAsync(Function&lt;?,?,Executor)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
java.util.concurrent.CompletableFuture.thenAccept(Consumer&lt;?),CompletableFuture&lt;Void&gt;,the new CompletionStage
java.util.concurrent.CompletableFuture.thenAcceptAsync(Consumer&lt;?),CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.thenAcceptAsync(Consumer&lt;?,Executor)",CompletableFuture&lt;Void&gt;,the new CompletionStage
java.util.concurrent.CompletableFuture.thenRun(Runnable),CompletableFuture&lt;Void&gt;,the new CompletionStage
java.util.concurrent.CompletableFuture.thenRunAsync(Runnable),CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.thenRunAsync(Runnable,Executor)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.thenCombine(CompletionStage&lt;?,BiFunction&lt;?,?,?)","&lt;U,V&gt;CompletableFuture&lt;V&gt;",the new CompletionStage
"java.util.concurrent.CompletableFuture.thenCombineAsync(CompletionStage&lt;?,BiFunction&lt;?,?,?)","&lt;U,V&gt;CompletableFuture&lt;V&gt;",the new CompletionStage
"java.util.concurrent.CompletableFuture.thenCombineAsync(CompletionStage&lt;?,BiFunction&lt;?,?,?,Executor)","&lt;U,V&gt;CompletableFuture&lt;V&gt;",the new CompletionStage
"java.util.concurrent.CompletableFuture.thenAcceptBoth(CompletionStage&lt;?,BiConsumer&lt;?,?)",&lt;U&gt;CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.thenAcceptBothAsync(CompletionStage&lt;?,BiConsumer&lt;?,?)",&lt;U&gt;CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.thenAcceptBothAsync(CompletionStage&lt;?,BiConsumer&lt;?,?,Executor)",&lt;U&gt;CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.runAfterBoth(CompletionStage&lt;?&gt;,Runnable)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.runAfterBothAsync(CompletionStage&lt;?&gt;,Runnable)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.runAfterBothAsync(CompletionStage&lt;?&gt;,Runnable,Executor)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.applyToEither(CompletionStage&lt;?,Function&lt;?,U&gt;)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.applyToEitherAsync(CompletionStage&lt;?,Function&lt;?,U&gt;)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.applyToEitherAsync(CompletionStage&lt;?,Function&lt;?,U&gt;,Executor)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.acceptEither(CompletionStage&lt;?,Consumer&lt;?)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.acceptEitherAsync(CompletionStage&lt;?,Consumer&lt;?)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.acceptEitherAsync(CompletionStage&lt;?,Consumer&lt;?,Executor)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.runAfterEither(CompletionStage&lt;?&gt;,Runnable)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.runAfterEitherAsync(CompletionStage&lt;?&gt;,Runnable)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.runAfterEitherAsync(CompletionStage&lt;?&gt;,Runnable,Executor)",CompletableFuture&lt;Void&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.thenCompose(Function&lt;?,?)",&lt;U&gt;CompletableFuture&lt;U&gt;,the CompletionStage
"java.util.concurrent.CompletableFuture.thenComposeAsync(Function&lt;?,?)",&lt;U&gt;CompletableFuture&lt;U&gt;,the CompletionStage
"java.util.concurrent.CompletableFuture.thenComposeAsync(Function&lt;?,?,Executor)",&lt;U&gt;CompletableFuture&lt;U&gt;,the CompletionStage
"java.util.concurrent.CompletableFuture.whenComplete(BiConsumer&lt;?,?)",CompletableFuture&lt;T&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.whenCompleteAsync(BiConsumer&lt;?,?)",CompletableFuture&lt;T&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.whenCompleteAsync(BiConsumer&lt;?,?,Executor)",CompletableFuture&lt;T&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.handle(BiFunction&lt;?,Throwable,?)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.handleAsync(BiFunction&lt;?,Throwable,?)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
"java.util.concurrent.CompletableFuture.handleAsync(BiFunction&lt;?,Throwable,?,Executor)",&lt;U&gt;CompletableFuture&lt;U&gt;,the new CompletionStage
java.util.concurrent.CompletableFuture.toCompletableFuture(),CompletableFuture&lt;T&gt;,this CompletableFuture
"java.util.concurrent.CompletableFuture.exceptionally(Function&lt;Throwable,?)",CompletableFuture&lt;T&gt;,the new CompletableFuture
java.util.concurrent.CompletableFuture.allOf(CompletableFuture&lt;?&gt;...),CompletableFuture&lt;Void&gt;,a new CompletableFuture that is completed when all of the given CompletableFutures complete
java.util.concurrent.CompletableFuture.anyOf(CompletableFuture&lt;?&gt;...),CompletableFuture&lt;Object&gt;,a new CompletableFuture that is completed with the result or exception of any of the given CompletableFutures when one completes
java.util.concurrent.CompletableFuture.cancel(boolean),boolean,true if this task is now cancelled
java.util.concurrent.CompletableFuture.isCancelled(),boolean,true if this CompletableFuture was cancelled before it completed normally
java.util.concurrent.CompletableFuture.isCompletedExceptionally(),boolean,true if this CompletableFuture completed exceptionally
java.util.concurrent.CompletableFuture.obtrudeValue(T),void,
java.util.concurrent.CompletableFuture.obtrudeException(Throwable),void,
java.util.concurrent.CompletableFuture.getNumberOfDependents(),int,the number of dependent CompletableFutures
java.util.concurrent.CompletableFuture.toString(),String,"a string identifying this CompletableFuture, as well as its state"
java.util.concurrent.ConcurrentHashMap.size(),int,the number of key-value mappings in this map
java.util.concurrent.ConcurrentHashMap.isEmpty(),boolean,true if this map contains no key-value mappings
java.util.concurrent.ConcurrentHashMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
java.util.concurrent.ConcurrentHashMap.containsKey(Object),boolean,"true if and only if the specified object is a key in this table, as determined by the equals method; false otherwise"
java.util.concurrent.ConcurrentHashMap.containsValue(Object),boolean,true if this map maps one or more keys to the specified value
"java.util.concurrent.ConcurrentHashMap.put(K,V)",V,"the previous value associated with key, or null if there was no mapping for key"
"java.util.concurrent.ConcurrentHashMap.putAll(Map&lt;?,?)",void,
java.util.concurrent.ConcurrentHashMap.remove(Object),V,"the previous value associated with key, or null if there was no mapping for key"
java.util.concurrent.ConcurrentHashMap.clear(),void,
java.util.concurrent.ConcurrentHashMap.keySet(),"ConcurrentHashMap.KeySetView&lt;K,V&gt;",the set view
java.util.concurrent.ConcurrentHashMap.values(),Collection&lt;V&gt;,the collection view
java.util.concurrent.ConcurrentHashMap.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;",the set view
java.util.concurrent.ConcurrentHashMap.hashCode(),int,the hash code value for this map
java.util.concurrent.ConcurrentHashMap.toString(),String,a string representation of this map
java.util.concurrent.ConcurrentHashMap.equals(Object),boolean,true if the specified object is equal to this map
"java.util.concurrent.ConcurrentHashMap.putIfAbsent(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key"
"java.util.concurrent.ConcurrentHashMap.remove(Object,Object)",boolean,true if the value was removed
"java.util.concurrent.ConcurrentHashMap.replace(K,V,V)",boolean,true if the value was replaced
"java.util.concurrent.ConcurrentHashMap.replace(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key"
"java.util.concurrent.ConcurrentHashMap.getOrDefault(Object,V)",V,"the mapping for the key, if present; else the default value"
"java.util.concurrent.ConcurrentHashMap.forEach(BiConsumer&lt;?,?)",void,
"java.util.concurrent.ConcurrentHashMap.replaceAll(BiFunction&lt;?,?,?)",void,
"java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,Function&lt;?,?)",V,"the current (existing or computed) value associated with the specified key, or null if the computed value is null"
"java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
"java.util.concurrent.ConcurrentHashMap.compute(K,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
"java.util.concurrent.ConcurrentHashMap.merge(K,V,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
java.util.concurrent.ConcurrentHashMap.contains(Object),boolean,true if and only if some key maps to the value argument in this table as determined by the equals method; false otherwise
java.util.concurrent.ConcurrentHashMap.keys(),Enumeration&lt;K&gt;,an enumeration of the keys in this table
java.util.concurrent.ConcurrentHashMap.elements(),Enumeration&lt;V&gt;,an enumeration of the values in this table
java.util.concurrent.ConcurrentHashMap.mappingCount(),long,the number of mappings
java.util.concurrent.ConcurrentHashMap.newKeySet(),"&lt;K&gt;ConcurrentHashMap.KeySetView&lt;K,Boolean&gt;",the new set
java.util.concurrent.ConcurrentHashMap.newKeySet(int),"&lt;K&gt;ConcurrentHashMap.KeySetView&lt;K,Boolean&gt;",the new set
java.util.concurrent.ConcurrentHashMap.keySet(V),"ConcurrentHashMap.KeySetView&lt;K,V&gt;",the set view
"java.util.concurrent.ConcurrentHashMap.forEach(long,BiConsumer&lt;?,?)",void,
"java.util.concurrent.ConcurrentHashMap.forEach(long,BiFunction&lt;?,?,?,Consumer&lt;?)",&lt;U&gt;void,
"java.util.concurrent.ConcurrentHashMap.search(long,BiFunction&lt;?,?,?)",&lt;U&gt;U,"a non-null result from applying the given search function on each (key, value), or null if none"
"java.util.concurrent.ConcurrentHashMap.reduce(long,BiFunction&lt;?,?,?,BiFunction&lt;?,?,?)",&lt;U&gt;U,"the result of accumulating the given transformation of all (key, value) pairs"
"java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,ToDoubleBiFunction&lt;?,?,double,DoubleBinaryOperator)",double,"the result of accumulating the given transformation of all (key, value) pairs"
"java.util.concurrent.ConcurrentHashMap.reduceToLong(long,ToLongBiFunction&lt;?,?,long,LongBinaryOperator)",long,"the result of accumulating the given transformation of all (key, value) pairs"
"java.util.concurrent.ConcurrentHashMap.reduceToInt(long,ToIntBiFunction&lt;?,?,int,IntBinaryOperator)",int,"the result of accumulating the given transformation of all (key, value) pairs"
"java.util.concurrent.ConcurrentHashMap.forEachKey(long,Consumer&lt;?)",void,
"java.util.concurrent.ConcurrentHashMap.forEachKey(long,Function&lt;?,?,Consumer&lt;?)",&lt;U&gt;void,
"java.util.concurrent.ConcurrentHashMap.searchKeys(long,Function&lt;?,?)",&lt;U&gt;U,"a non-null result from applying the given search function on each key, or null if none"
"java.util.concurrent.ConcurrentHashMap.reduceKeys(long,BiFunction&lt;?,?,?)",K,"the result of accumulating all keys using the given reducer to combine values, or null if none"
"java.util.concurrent.ConcurrentHashMap.reduceKeys(long,Function&lt;?,?,BiFunction&lt;?,?,?)",&lt;U&gt;U,the result of accumulating the given transformation of all keys
"java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,ToDoubleFunction&lt;?,double,DoubleBinaryOperator)",double,the result of accumulating the given transformation of all keys
"java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,ToLongFunction&lt;?,long,LongBinaryOperator)",long,the result of accumulating the given transformation of all keys
"java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,ToIntFunction&lt;?,int,IntBinaryOperator)",int,the result of accumulating the given transformation of all keys
"java.util.concurrent.ConcurrentHashMap.forEachValue(long,Consumer&lt;?)",void,
"java.util.concurrent.ConcurrentHashMap.forEachValue(long,Function&lt;?,?,Consumer&lt;?)",&lt;U&gt;void,
"java.util.concurrent.ConcurrentHashMap.searchValues(long,Function&lt;?,?)",&lt;U&gt;U,"a non-null result from applying the given search function on each value, or null if none"
"java.util.concurrent.ConcurrentHashMap.reduceValues(long,BiFunction&lt;?,?,?)",V,the result of accumulating all values
"java.util.concurrent.ConcurrentHashMap.reduceValues(long,Function&lt;?,?,BiFunction&lt;?,?,?)",&lt;U&gt;U,the result of accumulating the given transformation of all values
"java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,ToDoubleFunction&lt;?,double,DoubleBinaryOperator)",double,the result of accumulating the given transformation of all values
"java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,ToLongFunction&lt;?,long,LongBinaryOperator)",long,the result of accumulating the given transformation of all values
"java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,ToIntFunction&lt;?,int,IntBinaryOperator)",int,the result of accumulating the given transformation of all values
"java.util.concurrent.ConcurrentHashMap.forEachEntry(long,Consumer&lt;?,V&gt;&gt;)",void,
"java.util.concurrent.ConcurrentHashMap.forEachEntry(long,Function&lt;Map.Entry&lt;K,V&gt;,?,Consumer&lt;?)",&lt;U&gt;void,
"java.util.concurrent.ConcurrentHashMap.searchEntries(long,Function&lt;Map.Entry&lt;K,V&gt;,?)",&lt;U&gt;U,"a non-null result from applying the given search function on each entry, or null if none"
"java.util.concurrent.ConcurrentHashMap.reduceEntries(long,BiFunction&lt;Map.Entry&lt;K,V&gt;,Map.Entry&lt;K,V&gt;,?,V&gt;&gt;)","Map.Entry&lt;K,V&gt;",the result of accumulating all entries
"java.util.concurrent.ConcurrentHashMap.reduceEntries(long,Function&lt;Map.Entry&lt;K,V&gt;,?,BiFunction&lt;?,?,?)",&lt;U&gt;U,the result of accumulating the given transformation of all entries
"java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt;,double,DoubleBinaryOperator)",double,the result of accumulating the given transformation of all entries
"java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt;,long,LongBinaryOperator)",long,the result of accumulating the given transformation of all entries
"java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt;,int,IntBinaryOperator)",int,the result of accumulating the given transformation of all entries
java.util.concurrent.ConcurrentHashMap.KeySetView.getMappedValue(),V,"the default mapped value for additions, or null if not supported"
java.util.concurrent.ConcurrentHashMap.KeySetView.contains(Object),boolean,true if this collection contains the specified element
java.util.concurrent.ConcurrentHashMap.KeySetView.remove(Object),boolean,true if the backing map contained the specified key
java.util.concurrent.ConcurrentHashMap.KeySetView.iterator(),Iterator&lt;K&gt;,an iterator over the keys of the backing map
java.util.concurrent.ConcurrentHashMap.KeySetView.add(K),boolean,true if this set changed as a result of the call
java.util.concurrent.ConcurrentHashMap.KeySetView.addAll(Collection&lt;?),boolean,true if this set changed as a result of the call
java.util.concurrent.ConcurrentHashMap.KeySetView.hashCode(),int,
java.util.concurrent.ConcurrentHashMap.KeySetView.equals(Object),boolean,
java.util.concurrent.ConcurrentHashMap.KeySetView.spliterator(),Spliterator&lt;K&gt;,a Spliterator over the elements in this set
java.util.concurrent.ConcurrentHashMap.KeySetView.forEach(Consumer&lt;?),void,
java.util.concurrent.ConcurrentHashMap.KeySetView.getMap(),"ConcurrentHashMap&lt;K,V&gt;",the map backing this view
java.util.concurrent.ConcurrentHashMap.KeySetView.clear(),void,
java.util.concurrent.ConcurrentHashMap.KeySetView.size(),int,the number of elements in this collection
java.util.concurrent.ConcurrentHashMap.KeySetView.isEmpty(),boolean,true if this collection contains no elements
java.util.concurrent.ConcurrentHashMap.KeySetView.toArray(),Object[],an array containing all of the elements in this collection
java.util.concurrent.ConcurrentHashMap.KeySetView.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this collection
java.util.concurrent.ConcurrentHashMap.KeySetView.toString(),String,a string representation of this collection
java.util.concurrent.ConcurrentHashMap.KeySetView.containsAll(Collection&lt;?&gt;),boolean,true if this collection contains all of the elements in the specified collection
java.util.concurrent.ConcurrentHashMap.KeySetView.removeAll(Collection&lt;?&gt;),boolean,true if this collection changed as a result of the call
java.util.concurrent.ConcurrentHashMap.KeySetView.retainAll(Collection&lt;?&gt;),boolean,true if this collection changed as a result of the call
java.util.concurrent.ConcurrentLinkedDeque.addFirst(E),void,
java.util.concurrent.ConcurrentLinkedDeque.addLast(E),void,
java.util.concurrent.ConcurrentLinkedDeque.offerFirst(E),boolean,true (as specified by Deque.offerFirst(E))
java.util.concurrent.ConcurrentLinkedDeque.offerLast(E),boolean,true (as specified by Deque.offerLast(E))
java.util.concurrent.ConcurrentLinkedDeque.peekFirst(),E,"the head of this deque, or null if this deque is empty"
java.util.concurrent.ConcurrentLinkedDeque.peekLast(),E,"the tail of this deque, or null if this deque is empty"
java.util.concurrent.ConcurrentLinkedDeque.getFirst(),E,the head of this deque
java.util.concurrent.ConcurrentLinkedDeque.getLast(),E,the tail of this deque
java.util.concurrent.ConcurrentLinkedDeque.pollFirst(),E,"the head of this deque, or null if this deque is empty"
java.util.concurrent.ConcurrentLinkedDeque.pollLast(),E,"the tail of this deque, or null if this deque is empty"
java.util.concurrent.ConcurrentLinkedDeque.removeFirst(),E,the head of this deque
java.util.concurrent.ConcurrentLinkedDeque.removeLast(),E,the tail of this deque
java.util.concurrent.ConcurrentLinkedDeque.offer(E),boolean,true (as specified by Queue.offer(E))
java.util.concurrent.ConcurrentLinkedDeque.add(E),boolean,true (as specified by Collection.add(E))
java.util.concurrent.ConcurrentLinkedDeque.poll(),E,"the first element of this deque, or null if this deque is empty"
java.util.concurrent.ConcurrentLinkedDeque.peek(),E,"the head of the queue represented by this deque, or null if this deque is empty"
java.util.concurrent.ConcurrentLinkedDeque.remove(),E,the head of the queue represented by this deque
java.util.concurrent.ConcurrentLinkedDeque.pop(),E,the element at the front of this deque (which is the top of the stack represented by this deque)
java.util.concurrent.ConcurrentLinkedDeque.element(),E,the head of the queue represented by this deque
java.util.concurrent.ConcurrentLinkedDeque.push(E),void,
java.util.concurrent.ConcurrentLinkedDeque.removeFirstOccurrence(Object),boolean,true if the deque contained the specified element
java.util.concurrent.ConcurrentLinkedDeque.removeLastOccurrence(Object),boolean,true if the deque contained the specified element
java.util.concurrent.ConcurrentLinkedDeque.contains(Object),boolean,true if this deque contains the specified element
java.util.concurrent.ConcurrentLinkedDeque.isEmpty(),boolean,true if this collection contains no elements
java.util.concurrent.ConcurrentLinkedDeque.size(),int,the number of elements in this deque
java.util.concurrent.ConcurrentLinkedDeque.remove(Object),boolean,true if the deque contained the specified element
java.util.concurrent.ConcurrentLinkedDeque.addAll(Collection&lt;?),boolean,true if this deque changed as a result of the call
java.util.concurrent.ConcurrentLinkedDeque.clear(),void,
java.util.concurrent.ConcurrentLinkedDeque.toArray(),Object[],an array containing all of the elements in this deque
java.util.concurrent.ConcurrentLinkedDeque.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this deque
java.util.concurrent.ConcurrentLinkedDeque.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this deque in proper sequence
java.util.concurrent.ConcurrentLinkedDeque.descendingIterator(),Iterator&lt;E&gt;,an iterator over the elements in this deque in reverse order
java.util.concurrent.ConcurrentLinkedDeque.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this deque
java.util.concurrent.ConcurrentLinkedQueue.add(E),boolean,true (as specified by Collection.add(E))
java.util.concurrent.ConcurrentLinkedQueue.offer(E),boolean,true (as specified by Queue.offer(E))
java.util.concurrent.ConcurrentLinkedQueue.poll(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.ConcurrentLinkedQueue.peek(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.ConcurrentLinkedQueue.isEmpty(),boolean,true if this queue contains no elements
java.util.concurrent.ConcurrentLinkedQueue.size(),int,the number of elements in this queue
java.util.concurrent.ConcurrentLinkedQueue.contains(Object),boolean,true if this queue contains the specified element
java.util.concurrent.ConcurrentLinkedQueue.remove(Object),boolean,true if this queue changed as a result of the call
java.util.concurrent.ConcurrentLinkedQueue.addAll(Collection&lt;?),boolean,true if this queue changed as a result of the call
java.util.concurrent.ConcurrentLinkedQueue.toArray(),Object[],an array containing all of the elements in this queue
java.util.concurrent.ConcurrentLinkedQueue.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this queue
java.util.concurrent.ConcurrentLinkedQueue.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this queue in proper sequence
java.util.concurrent.ConcurrentLinkedQueue.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this queue
java.util.concurrent.ConcurrentSkipListMap.clone(),"ConcurrentSkipListMap&lt;K,V&gt;",a shallow copy of this map
java.util.concurrent.ConcurrentSkipListMap.containsKey(Object),boolean,true if this map contains a mapping for the specified key
java.util.concurrent.ConcurrentSkipListMap.get(Object),V,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
"java.util.concurrent.ConcurrentSkipListMap.getOrDefault(Object,V)",V,"the mapping for the key, if present; else the defaultValue"
"java.util.concurrent.ConcurrentSkipListMap.put(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key"
java.util.concurrent.ConcurrentSkipListMap.remove(Object),V,"the previous value associated with the specified key, or null if there was no mapping for the key"
java.util.concurrent.ConcurrentSkipListMap.containsValue(Object),boolean,true if a mapping to value exists; false otherwise
java.util.concurrent.ConcurrentSkipListMap.size(),int,the number of elements in this map
java.util.concurrent.ConcurrentSkipListMap.isEmpty(),boolean,true if this map contains no key-value mappings
java.util.concurrent.ConcurrentSkipListMap.clear(),void,
"java.util.concurrent.ConcurrentSkipListMap.computeIfAbsent(K,Function&lt;?,?)",V,"the current (existing or computed) value associated with the specified key, or null if the computed value is null"
"java.util.concurrent.ConcurrentSkipListMap.computeIfPresent(K,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
"java.util.concurrent.ConcurrentSkipListMap.compute(K,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
"java.util.concurrent.ConcurrentSkipListMap.merge(K,V,BiFunction&lt;?,?,?)",V,"the new value associated with the specified key, or null if none"
java.util.concurrent.ConcurrentSkipListMap.keySet(),NavigableSet&lt;K&gt;,a navigable set view of the keys in this map
java.util.concurrent.ConcurrentSkipListMap.navigableKeySet(),NavigableSet&lt;K&gt;,a navigable set view of the keys in this map
java.util.concurrent.ConcurrentSkipListMap.values(),Collection&lt;V&gt;,a collection view of the values contained in this map
java.util.concurrent.ConcurrentSkipListMap.entrySet(),"Set&lt;Map.Entry&lt;K,V&gt;&gt;","a set view of the mappings contained in this map, sorted in ascending key order"
java.util.concurrent.ConcurrentSkipListMap.descendingMap(),"ConcurrentNavigableMap&lt;K,V&gt;",a reverse order view of this map
java.util.concurrent.ConcurrentSkipListMap.descendingKeySet(),NavigableSet&lt;K&gt;,a reverse order navigable set view of the keys in this map
java.util.concurrent.ConcurrentSkipListMap.equals(Object),boolean,true if the specified object is equal to this map
"java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key"
"java.util.concurrent.ConcurrentSkipListMap.remove(Object,Object)",boolean,true if the value was removed
"java.util.concurrent.ConcurrentSkipListMap.replace(K,V,V)",boolean,true if the value was replaced
"java.util.concurrent.ConcurrentSkipListMap.replace(K,V)",V,"the previous value associated with the specified key, or null if there was no mapping for the key"
java.util.concurrent.ConcurrentSkipListMap.comparator(),Comparator&lt;? super K&gt;,"the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys"
java.util.concurrent.ConcurrentSkipListMap.firstKey(),K,the first (lowest) key currently in this map
java.util.concurrent.ConcurrentSkipListMap.lastKey(),K,the last (highest) key currently in this map
"java.util.concurrent.ConcurrentSkipListMap.subMap(K,boolean,K,boolean)","ConcurrentNavigableMap&lt;K,V&gt;",a view of the portion of this map whose keys range from fromKey to toKey
"java.util.concurrent.ConcurrentSkipListMap.headMap(K,boolean)","ConcurrentNavigableMap&lt;K,V&gt;","a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"
"java.util.concurrent.ConcurrentSkipListMap.tailMap(K,boolean)","ConcurrentNavigableMap&lt;K,V&gt;","a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"
"java.util.concurrent.ConcurrentSkipListMap.subMap(K,K)","ConcurrentNavigableMap&lt;K,V&gt;","a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"
java.util.concurrent.ConcurrentSkipListMap.headMap(K),"ConcurrentNavigableMap&lt;K,V&gt;",a view of the portion of this map whose keys are strictly less than toKey
java.util.concurrent.ConcurrentSkipListMap.tailMap(K),"ConcurrentNavigableMap&lt;K,V&gt;",a view of the portion of this map whose keys are greater than or equal to fromKey
java.util.concurrent.ConcurrentSkipListMap.lowerEntry(K),"Map.Entry&lt;K,V&gt;","an entry with the greatest key less than key, or null if there is no such key"
java.util.concurrent.ConcurrentSkipListMap.lowerKey(K),K,"the greatest key less than key, or null if there is no such key"
java.util.concurrent.ConcurrentSkipListMap.floorEntry(K),"Map.Entry&lt;K,V&gt;","an entry with the greatest key less than or equal to key, or null if there is no such key"
java.util.concurrent.ConcurrentSkipListMap.floorKey(K),K,"the greatest key less than or equal to key, or null if there is no such key"
java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(K),"Map.Entry&lt;K,V&gt;","an entry with the least key greater than or equal to key, or null if there is no such key"
java.util.concurrent.ConcurrentSkipListMap.ceilingKey(K),K,"the least key greater than or equal to key, or null if there is no such key"
java.util.concurrent.ConcurrentSkipListMap.higherEntry(K),"Map.Entry&lt;K,V&gt;","an entry with the least key greater than key, or null if there is no such key"
java.util.concurrent.ConcurrentSkipListMap.higherKey(K),K,"the least key greater than key, or null if there is no such key"
java.util.concurrent.ConcurrentSkipListMap.firstEntry(),"Map.Entry&lt;K,V&gt;","an entry with the least key, or null if this map is empty"
java.util.concurrent.ConcurrentSkipListMap.lastEntry(),"Map.Entry&lt;K,V&gt;","an entry with the greatest key, or null if this map is empty"
java.util.concurrent.ConcurrentSkipListMap.pollFirstEntry(),"Map.Entry&lt;K,V&gt;","the removed first entry of this map, or null if this map is empty"
java.util.concurrent.ConcurrentSkipListMap.pollLastEntry(),"Map.Entry&lt;K,V&gt;","the removed last entry of this map, or null if this map is empty"
"java.util.concurrent.ConcurrentSkipListMap.forEach(BiConsumer&lt;?,?)",void,
"java.util.concurrent.ConcurrentSkipListMap.replaceAll(BiFunction&lt;?,?,?)",void,
java.util.concurrent.ConcurrentSkipListSet.clone(),ConcurrentSkipListSet&lt;E&gt;,a shallow copy of this set
java.util.concurrent.ConcurrentSkipListSet.size(),int,the number of elements in this set
java.util.concurrent.ConcurrentSkipListSet.isEmpty(),boolean,true if this set contains no elements
java.util.concurrent.ConcurrentSkipListSet.contains(Object),boolean,true if this set contains the specified element
java.util.concurrent.ConcurrentSkipListSet.add(E),boolean,true if this set did not already contain the specified element
java.util.concurrent.ConcurrentSkipListSet.remove(Object),boolean,true if this set contained the specified element
java.util.concurrent.ConcurrentSkipListSet.clear(),void,
java.util.concurrent.ConcurrentSkipListSet.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this set in ascending order
java.util.concurrent.ConcurrentSkipListSet.descendingIterator(),Iterator&lt;E&gt;,an iterator over the elements in this set in descending order
java.util.concurrent.ConcurrentSkipListSet.equals(Object),boolean,true if the specified object is equal to this set
java.util.concurrent.ConcurrentSkipListSet.removeAll(Collection&lt;?&gt;),boolean,true if this set changed as a result of the call
java.util.concurrent.ConcurrentSkipListSet.lower(E),E,"the greatest element less than e, or null if there is no such element"
java.util.concurrent.ConcurrentSkipListSet.floor(E),E,"the greatest element less than or equal to e, or null if there is no such element"
java.util.concurrent.ConcurrentSkipListSet.ceiling(E),E,"the least element greater than or equal to e, or null if there is no such element"
java.util.concurrent.ConcurrentSkipListSet.higher(E),E,"the least element greater than e, or null if there is no such element"
java.util.concurrent.ConcurrentSkipListSet.pollFirst(),E,"the first element, or null if this set is empty"
java.util.concurrent.ConcurrentSkipListSet.pollLast(),E,"the last element, or null if this set is empty"
java.util.concurrent.ConcurrentSkipListSet.comparator(),Comparator&lt;? super E&gt;,"the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements"
java.util.concurrent.ConcurrentSkipListSet.first(),E,the first (lowest) element currently in this set
java.util.concurrent.ConcurrentSkipListSet.last(),E,the last (highest) element currently in this set
"java.util.concurrent.ConcurrentSkipListSet.subSet(E,boolean,E,boolean)",NavigableSet&lt;E&gt;,"a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"
"java.util.concurrent.ConcurrentSkipListSet.headSet(E,boolean)",NavigableSet&lt;E&gt;,"a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement"
"java.util.concurrent.ConcurrentSkipListSet.tailSet(E,boolean)",NavigableSet&lt;E&gt;,a view of the portion of this set whose elements are greater than or equal to fromElement
"java.util.concurrent.ConcurrentSkipListSet.subSet(E,E)",NavigableSet&lt;E&gt;,"a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"
java.util.concurrent.ConcurrentSkipListSet.headSet(E),NavigableSet&lt;E&gt;,a view of the portion of this set whose elements are strictly less than toElement
java.util.concurrent.ConcurrentSkipListSet.tailSet(E),NavigableSet&lt;E&gt;,a view of the portion of this set whose elements are greater than or equal to fromElement
java.util.concurrent.ConcurrentSkipListSet.descendingSet(),NavigableSet&lt;E&gt;,a reverse order view of this set
java.util.concurrent.ConcurrentSkipListSet.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this set
java.util.concurrent.CopyOnWriteArrayList.size(),int,the number of elements in this list
java.util.concurrent.CopyOnWriteArrayList.isEmpty(),boolean,true if this list contains no elements
java.util.concurrent.CopyOnWriteArrayList.contains(Object),boolean,true if this list contains the specified element
java.util.concurrent.CopyOnWriteArrayList.indexOf(Object),int,"the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
"java.util.concurrent.CopyOnWriteArrayList.indexOf(E,int)",int,the index of the first occurrence of the element in this list at position index or later in the list; -1 if the element is not found.
java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Object),int,"the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
"java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E,int)",int,the index of the last occurrence of the element at position less than or equal to index in this list; -1 if the element is not found.
java.util.concurrent.CopyOnWriteArrayList.clone(),Object,a clone of this list
java.util.concurrent.CopyOnWriteArrayList.toArray(),Object[],an array containing all the elements in this list
java.util.concurrent.CopyOnWriteArrayList.toArray(T[]),&lt;T&gt;T[],an array containing all the elements in this list
java.util.concurrent.CopyOnWriteArrayList.get(int),E,the element at the specified position in this list
"java.util.concurrent.CopyOnWriteArrayList.set(int,E)",E,the element previously at the specified position
java.util.concurrent.CopyOnWriteArrayList.add(E),boolean,true (as specified by Collection.add(E))
"java.util.concurrent.CopyOnWriteArrayList.add(int,E)",void,
java.util.concurrent.CopyOnWriteArrayList.remove(int),E,the element previously at the specified position
java.util.concurrent.CopyOnWriteArrayList.remove(Object),boolean,true if this list contained the specified element
java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E),boolean,true if the element was added
java.util.concurrent.CopyOnWriteArrayList.containsAll(Collection&lt;?&gt;),boolean,true if this list contains all of the elements of the specified collection
java.util.concurrent.CopyOnWriteArrayList.removeAll(Collection&lt;?&gt;),boolean,true if this list changed as a result of the call
java.util.concurrent.CopyOnWriteArrayList.retainAll(Collection&lt;?&gt;),boolean,true if this list changed as a result of the call
java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(Collection&lt;?),int,the number of elements added
java.util.concurrent.CopyOnWriteArrayList.clear(),void,
java.util.concurrent.CopyOnWriteArrayList.addAll(Collection&lt;?),boolean,true if this list changed as a result of the call
"java.util.concurrent.CopyOnWriteArrayList.addAll(int,Collection&lt;?)",boolean,true if this list changed as a result of the call
java.util.concurrent.CopyOnWriteArrayList.forEach(Consumer&lt;?),void,
java.util.concurrent.CopyOnWriteArrayList.removeIf(Predicate&lt;?),boolean,true if any elements were removed
java.util.concurrent.CopyOnWriteArrayList.replaceAll(UnaryOperator&lt;E&gt;),void,
java.util.concurrent.CopyOnWriteArrayList.sort(Comparator&lt;?),void,
java.util.concurrent.CopyOnWriteArrayList.toString(),String,a string representation of this list
java.util.concurrent.CopyOnWriteArrayList.equals(Object),boolean,true if the specified object is equal to this list
java.util.concurrent.CopyOnWriteArrayList.hashCode(),int,the hash code value for this list
java.util.concurrent.CopyOnWriteArrayList.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this list in proper sequence
java.util.concurrent.CopyOnWriteArrayList.listIterator(),ListIterator&lt;E&gt;,a list iterator over the elements in this list (in proper sequence)
java.util.concurrent.CopyOnWriteArrayList.listIterator(int),ListIterator&lt;E&gt;,"a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"
java.util.concurrent.CopyOnWriteArrayList.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this list
"java.util.concurrent.CopyOnWriteArrayList.subList(int,int)",List&lt;E&gt;,a view of the specified range within this list
java.util.concurrent.CopyOnWriteArraySet.size(),int,the number of elements in this set
java.util.concurrent.CopyOnWriteArraySet.isEmpty(),boolean,true if this set contains no elements
java.util.concurrent.CopyOnWriteArraySet.contains(Object),boolean,true if this set contains the specified element
java.util.concurrent.CopyOnWriteArraySet.toArray(),Object[],an array containing all the elements in this set
java.util.concurrent.CopyOnWriteArraySet.toArray(T[]),&lt;T&gt;T[],an array containing all the elements in this set
java.util.concurrent.CopyOnWriteArraySet.clear(),void,
java.util.concurrent.CopyOnWriteArraySet.remove(Object),boolean,true if this set contained the specified element
java.util.concurrent.CopyOnWriteArraySet.add(E),boolean,true if this set did not already contain the specified element
java.util.concurrent.CopyOnWriteArraySet.containsAll(Collection&lt;?&gt;),boolean,true if this set contains all of the elements of the specified collection
java.util.concurrent.CopyOnWriteArraySet.addAll(Collection&lt;?),boolean,true if this set changed as a result of the call
java.util.concurrent.CopyOnWriteArraySet.removeAll(Collection&lt;?&gt;),boolean,true if this set changed as a result of the call
java.util.concurrent.CopyOnWriteArraySet.retainAll(Collection&lt;?&gt;),boolean,true if this set changed as a result of the call
java.util.concurrent.CopyOnWriteArraySet.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this set
java.util.concurrent.CopyOnWriteArraySet.equals(Object),boolean,true if the specified object is equal to this set
java.util.concurrent.CopyOnWriteArraySet.removeIf(Predicate&lt;?),boolean,true if any elements were removed
java.util.concurrent.CopyOnWriteArraySet.forEach(Consumer&lt;?),void,
java.util.concurrent.CopyOnWriteArraySet.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this set
java.util.concurrent.CountDownLatch.await(),void,
"java.util.concurrent.CountDownLatch.await(long,TimeUnit)",boolean,
java.util.concurrent.CountDownLatch.countDown(),void,
java.util.concurrent.CountDownLatch.getCount(),long,the current count
java.util.concurrent.CountDownLatch.toString(),String,"a string identifying this latch, as well as its state"
java.util.concurrent.CountedCompleter.compute(),abstractvoid,
java.util.concurrent.CountedCompleter.onCompletion(CountedCompleter&lt;?&gt;),void,
"java.util.concurrent.CountedCompleter.onExceptionalCompletion(Throwable,CountedCompleter&lt;?&gt;)",boolean,"true if this exception should be propagated to this task's completer, if one exists"
java.util.concurrent.CountedCompleter.getCompleter(),CountedCompleter&lt;?&gt;,the completer
java.util.concurrent.CountedCompleter.getPendingCount(),int,the current pending count
java.util.concurrent.CountedCompleter.setPendingCount(int),void,
java.util.concurrent.CountedCompleter.addToPendingCount(int),void,
"java.util.concurrent.CountedCompleter.compareAndSetPendingCount(int,int)",boolean,true if successful
java.util.concurrent.CountedCompleter.decrementPendingCountUnlessZero(),int,the initial (undecremented) pending count holding on entry to this method
java.util.concurrent.CountedCompleter.getRoot(),CountedCompleter&lt;?&gt;,the root of the current computation
java.util.concurrent.CountedCompleter.tryComplete(),void,
java.util.concurrent.CountedCompleter.propagateCompletion(),void,
java.util.concurrent.CountedCompleter.complete(T),void,
java.util.concurrent.CountedCompleter.firstComplete(),CountedCompleter&lt;?&gt;,"this task, if pending count was zero, else null"
java.util.concurrent.CountedCompleter.nextComplete(),CountedCompleter&lt;?&gt;,"the completer, or null if none"
java.util.concurrent.CountedCompleter.quietlyCompleteRoot(),void,
java.util.concurrent.CountedCompleter.helpComplete(int),void,
java.util.concurrent.CountedCompleter.exec(),boolean,true if this task is known to have completed normally
java.util.concurrent.CountedCompleter.getRawResult(),T,the result of the computation
java.util.concurrent.CountedCompleter.setRawResult(T),void,
java.util.concurrent.CyclicBarrier.getParties(),int,the number of parties required to trip this barrier
java.util.concurrent.CyclicBarrier.await(),int,
"java.util.concurrent.CyclicBarrier.await(long,TimeUnit)",int,
java.util.concurrent.CyclicBarrier.isBroken(),boolean,"true if one or more parties broke out of this barrier due to interruption or timeout since construction or the last reset, or a barrier action failed due to an exception; false otherwise."
java.util.concurrent.CyclicBarrier.reset(),void,
java.util.concurrent.CyclicBarrier.getNumberWaiting(),int,the number of parties currently blocked in await()
java.util.concurrent.DelayQueue.add(E),boolean,true (as specified by Collection.add(E))
java.util.concurrent.DelayQueue.offer(E),boolean,true
java.util.concurrent.DelayQueue.put(E),void,
"java.util.concurrent.DelayQueue.offer(E,long,TimeUnit)",boolean,true
java.util.concurrent.DelayQueue.poll(),E,"the head of this queue, or null if this queue has no elements with an expired delay"
java.util.concurrent.DelayQueue.take(),E,the head of this queue
"java.util.concurrent.DelayQueue.poll(long,TimeUnit)",E,"the head of this queue, or null if the specified waiting time elapses before an element with an expired delay becomes available"
java.util.concurrent.DelayQueue.peek(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.DelayQueue.size(),int,the number of elements in this collection
java.util.concurrent.DelayQueue.drainTo(Collection&lt;?),int,the number of elements transferred
"java.util.concurrent.DelayQueue.drainTo(Collection&lt;?,int)",int,the number of elements transferred
java.util.concurrent.DelayQueue.clear(),void,
java.util.concurrent.DelayQueue.remainingCapacity(),int,Integer.MAX_VALUE
java.util.concurrent.DelayQueue.toArray(),Object[],an array containing all of the elements in this queue
java.util.concurrent.DelayQueue.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this queue
java.util.concurrent.DelayQueue.remove(Object),boolean,true if an element was removed as a result of this call
java.util.concurrent.DelayQueue.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this queue
java.util.concurrent.Exchanger.exchange(V),V,
"java.util.concurrent.Exchanger.exchange(V,long,TimeUnit)",V,
java.util.concurrent.ExecutorCompletionService.submit(Callable&lt;V&gt;),Future&lt;V&gt;,a Future representing pending completion of the task
"java.util.concurrent.ExecutorCompletionService.submit(Runnable,V)",Future&lt;V&gt;,"a Future representing pending completion of the task, and whose get() method will return the given result value upon completion"
java.util.concurrent.ExecutorCompletionService.take(),Future&lt;V&gt;,the Future representing the next completed task
java.util.concurrent.ExecutorCompletionService.poll(),Future&lt;V&gt;,"the Future representing the next completed task, or null if none are present"
"java.util.concurrent.ExecutorCompletionService.poll(long,TimeUnit)",Future&lt;V&gt;,the Future representing the next completed task or null if the specified waiting time elapses before one is present
java.util.concurrent.Executors.newFixedThreadPool(int),ExecutorService,the newly created thread pool
java.util.concurrent.Executors.newWorkStealingPool(int),ExecutorService,the newly created thread pool
java.util.concurrent.Executors.newWorkStealingPool(),ExecutorService,the newly created thread pool
"java.util.concurrent.Executors.newFixedThreadPool(int,ThreadFactory)",ExecutorService,the newly created thread pool
java.util.concurrent.Executors.newSingleThreadExecutor(),ExecutorService,the newly created single-threaded Executor
java.util.concurrent.Executors.newSingleThreadExecutor(ThreadFactory),ExecutorService,the newly created single-threaded Executor
java.util.concurrent.Executors.newCachedThreadPool(),ExecutorService,the newly created thread pool
java.util.concurrent.Executors.newCachedThreadPool(ThreadFactory),ExecutorService,the newly created thread pool
java.util.concurrent.Executors.newSingleThreadScheduledExecutor(),ScheduledExecutorService,the newly created scheduled executor
java.util.concurrent.Executors.newSingleThreadScheduledExecutor(ThreadFactory),ScheduledExecutorService,a newly created scheduled executor
java.util.concurrent.Executors.newScheduledThreadPool(int),ScheduledExecutorService,a newly created scheduled thread pool
"java.util.concurrent.Executors.newScheduledThreadPool(int,ThreadFactory)",ScheduledExecutorService,a newly created scheduled thread pool
java.util.concurrent.Executors.unconfigurableExecutorService(ExecutorService),ExecutorService,an ExecutorService instance
java.util.concurrent.Executors.unconfigurableScheduledExecutorService(ScheduledExecutorService),ScheduledExecutorService,a ScheduledExecutorService instance
java.util.concurrent.Executors.defaultThreadFactory(),ThreadFactory,a thread factory
java.util.concurrent.Executors.privilegedThreadFactory(),ThreadFactory,a thread factory
"java.util.concurrent.Executors.callable(Runnable,T)",&lt;T&gt;Callable&lt;T&gt;,a callable object
java.util.concurrent.Executors.callable(Runnable),Callable&lt;Object&gt;,a callable object
java.util.concurrent.Executors.callable(PrivilegedAction&lt;?&gt;),Callable&lt;Object&gt;,a callable object
java.util.concurrent.Executors.callable(PrivilegedExceptionAction&lt;?&gt;),Callable&lt;Object&gt;,a callable object
java.util.concurrent.Executors.privilegedCallable(Callable&lt;T&gt;),&lt;T&gt;Callable&lt;T&gt;,a callable object
java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader(Callable&lt;T&gt;),&lt;T&gt;Callable&lt;T&gt;,a callable object
java.util.concurrent.ForkJoinPool.commonPool(),ForkJoinPool,the common pool instance
java.util.concurrent.ForkJoinPool.invoke(ForkJoinTask&lt;T&gt;),&lt;T&gt;T,the task's result
java.util.concurrent.ForkJoinPool.execute(ForkJoinTask&lt;?&gt;),void,
java.util.concurrent.ForkJoinPool.execute(Runnable),void,
java.util.concurrent.ForkJoinPool.submit(ForkJoinTask&lt;T&gt;),&lt;T&gt;ForkJoinTask&lt;T&gt;,the task
java.util.concurrent.ForkJoinPool.submit(Callable&lt;T&gt;),&lt;T&gt;ForkJoinTask&lt;T&gt;,a Future representing pending completion of the task
"java.util.concurrent.ForkJoinPool.submit(Runnable,T)",&lt;T&gt;ForkJoinTask&lt;T&gt;,a Future representing pending completion of the task
java.util.concurrent.ForkJoinPool.submit(Runnable),ForkJoinTask&lt;?&gt;,a Future representing pending completion of the task
java.util.concurrent.ForkJoinPool.invokeAll(Collection&lt;?),&lt;T&gt;List&lt;Future&lt;T&gt;&gt;,"a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed"
java.util.concurrent.ForkJoinPool.getFactory(),ForkJoinPool.ForkJoinWorkerThreadFactory,the factory used for constructing new workers
java.util.concurrent.ForkJoinPool.getUncaughtExceptionHandler(),Thread.UncaughtExceptionHandler,"the handler, or null if none"
java.util.concurrent.ForkJoinPool.getParallelism(),int,the targeted parallelism level of this pool
java.util.concurrent.ForkJoinPool.getCommonPoolParallelism(),int,the targeted parallelism level of the common pool
java.util.concurrent.ForkJoinPool.getPoolSize(),int,the number of worker threads
java.util.concurrent.ForkJoinPool.getAsyncMode(),boolean,true if this pool uses async mode
java.util.concurrent.ForkJoinPool.getRunningThreadCount(),int,the number of worker threads
java.util.concurrent.ForkJoinPool.getActiveThreadCount(),int,the number of active threads
java.util.concurrent.ForkJoinPool.isQuiescent(),boolean,true if all threads are currently idle
java.util.concurrent.ForkJoinPool.getStealCount(),long,the number of steals
java.util.concurrent.ForkJoinPool.getQueuedTaskCount(),long,the number of queued tasks
java.util.concurrent.ForkJoinPool.getQueuedSubmissionCount(),int,the number of queued submissions
java.util.concurrent.ForkJoinPool.hasQueuedSubmissions(),boolean,true if there are any queued submissions
java.util.concurrent.ForkJoinPool.pollSubmission(),ForkJoinTask&lt;?&gt;,"the next submission, or null if none"
java.util.concurrent.ForkJoinPool.drainTasksTo(Collection&lt;?),int,the number of elements transferred
java.util.concurrent.ForkJoinPool.toString(),String,"a string identifying this pool, as well as its state"
java.util.concurrent.ForkJoinPool.shutdown(),void,
java.util.concurrent.ForkJoinPool.shutdownNow(),List&lt;Runnable&gt;,an empty list
java.util.concurrent.ForkJoinPool.isTerminated(),boolean,true if all tasks have completed following shut down
java.util.concurrent.ForkJoinPool.isTerminating(),boolean,true if terminating but not yet terminated
java.util.concurrent.ForkJoinPool.isShutdown(),boolean,true if this pool has been shut down
"java.util.concurrent.ForkJoinPool.awaitTermination(long,TimeUnit)",boolean,true if this executor terminated and false if the timeout elapsed before termination
"java.util.concurrent.ForkJoinPool.awaitQuiescence(long,TimeUnit)",boolean,true if quiescent; false if the timeout elapsed.
java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.ManagedBlocker),void,
"java.util.concurrent.ForkJoinPool.newTaskFor(Runnable,T)",&lt;T&gt;RunnableFuture&lt;T&gt;,"a RunnableFuture which, when run, will run the underlying runnable and which, as a Future, will yield the given value as its result and provide for cancellation of the underlying task"
java.util.concurrent.ForkJoinPool.newTaskFor(Callable&lt;T&gt;),&lt;T&gt;RunnableFuture&lt;T&gt;,"a RunnableFuture which, when run, will call the underlying callable and which, as a Future, will yield the callable's result as its result and provide for cancellation of the underlying task"
java.util.concurrent.ForkJoinTask.fork(),ForkJoinTask&lt;V&gt;,"this, to simplify usage"
java.util.concurrent.ForkJoinTask.join(),V,the computed result
java.util.concurrent.ForkJoinTask.invoke(),V,the computed result
"java.util.concurrent.ForkJoinTask.invokeAll(ForkJoinTask&lt;?&gt;,ForkJoinTask&lt;?&gt;)",void,
java.util.concurrent.ForkJoinTask.invokeAll(ForkJoinTask&lt;?&gt;...),void,
java.util.concurrent.ForkJoinTask.invokeAll(Collection&lt;T&gt;),&lt;T extends ForkJoinTask&lt;?&gt;&gt;Collection&lt;T&gt;,"the tasks argument, to simplify usage"
java.util.concurrent.ForkJoinTask.cancel(boolean),boolean,true if this task is now cancelled
java.util.concurrent.ForkJoinTask.isDone(),boolean,true if this task completed
java.util.concurrent.ForkJoinTask.isCancelled(),boolean,true if this task was cancelled before it completed
java.util.concurrent.ForkJoinTask.isCompletedAbnormally(),boolean,true if this task threw an exception or was cancelled
java.util.concurrent.ForkJoinTask.isCompletedNormally(),boolean,true if this task completed without throwing an exception and was not cancelled
java.util.concurrent.ForkJoinTask.getException(),Throwable,"the exception, or null if none"
java.util.concurrent.ForkJoinTask.completeExceptionally(Throwable),void,
java.util.concurrent.ForkJoinTask.complete(V),void,
java.util.concurrent.ForkJoinTask.quietlyComplete(),void,
java.util.concurrent.ForkJoinTask.get(),V,the computed result
"java.util.concurrent.ForkJoinTask.get(long,TimeUnit)",V,the computed result
java.util.concurrent.ForkJoinTask.quietlyJoin(),void,
java.util.concurrent.ForkJoinTask.quietlyInvoke(),void,
java.util.concurrent.ForkJoinTask.helpQuiesce(),void,
java.util.concurrent.ForkJoinTask.reinitialize(),void,
java.util.concurrent.ForkJoinTask.getPool(),ForkJoinPool,"the pool, or null if none"
java.util.concurrent.ForkJoinTask.inForkJoinPool(),boolean,"true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation, or false otherwise"
java.util.concurrent.ForkJoinTask.tryUnfork(),boolean,true if unforked
java.util.concurrent.ForkJoinTask.getQueuedTaskCount(),int,the number of tasks
java.util.concurrent.ForkJoinTask.getSurplusQueuedTaskCount(),int,"the surplus number of tasks, which may be negative"
java.util.concurrent.ForkJoinTask.getRawResult(),abstractV,"the result, or null if not completed"
java.util.concurrent.ForkJoinTask.setRawResult(V),abstractvoid,
java.util.concurrent.ForkJoinTask.exec(),abstractboolean,true if this task is known to have completed normally
java.util.concurrent.ForkJoinTask.peekNextLocalTask(),ForkJoinTask&lt;?&gt;,"the next task, or null if none are available"
java.util.concurrent.ForkJoinTask.pollNextLocalTask(),ForkJoinTask&lt;?&gt;,"the next task, or null if none are available"
java.util.concurrent.ForkJoinTask.pollTask(),ForkJoinTask&lt;?&gt;,"a task, or null if none are available"
java.util.concurrent.ForkJoinTask.getForkJoinTaskTag(),short,the tag for this task
java.util.concurrent.ForkJoinTask.setForkJoinTaskTag(short),short,the previous value of the tag
"java.util.concurrent.ForkJoinTask.compareAndSetForkJoinTaskTag(short,short)",boolean,"true if successful; i.e., the current value was equal to e and is now tag."
java.util.concurrent.ForkJoinTask.adapt(Runnable),ForkJoinTask&lt;?&gt;,the task
"java.util.concurrent.ForkJoinTask.adapt(Runnable,T)",&lt;T&gt;ForkJoinTask&lt;T&gt;,the task
java.util.concurrent.ForkJoinTask.adapt(Callable&lt;?),&lt;T&gt;ForkJoinTask&lt;T&gt;,the task
java.util.concurrent.ForkJoinWorkerThread.getPool(),ForkJoinPool,the pool
java.util.concurrent.ForkJoinWorkerThread.getPoolIndex(),int,the index number
java.util.concurrent.ForkJoinWorkerThread.onStart(),void,
java.util.concurrent.ForkJoinWorkerThread.onTermination(Throwable),void,
java.util.concurrent.ForkJoinWorkerThread.run(),void,
java.util.concurrent.FutureTask.isCancelled(),boolean,true if this task was cancelled before it completed
java.util.concurrent.FutureTask.isDone(),boolean,true if this task completed
java.util.concurrent.FutureTask.cancel(boolean),boolean,"false if the task could not be cancelled, typically because it has already completed normally; true otherwise"
java.util.concurrent.FutureTask.get(),V,the computed result
"java.util.concurrent.FutureTask.get(long,TimeUnit)",V,the computed result
java.util.concurrent.FutureTask.done(),void,
java.util.concurrent.FutureTask.set(V),void,
java.util.concurrent.FutureTask.setException(Throwable),void,
java.util.concurrent.FutureTask.run(),void,
java.util.concurrent.FutureTask.runAndReset(),boolean,true if successfully run and reset
java.util.concurrent.LinkedBlockingDeque.addFirst(E),void,
java.util.concurrent.LinkedBlockingDeque.addLast(E),void,
java.util.concurrent.LinkedBlockingDeque.offerFirst(E),boolean,"true if the element was added to this deque, else false"
java.util.concurrent.LinkedBlockingDeque.offerLast(E),boolean,"true if the element was added to this deque, else false"
java.util.concurrent.LinkedBlockingDeque.putFirst(E),void,
java.util.concurrent.LinkedBlockingDeque.putLast(E),void,
"java.util.concurrent.LinkedBlockingDeque.offerFirst(E,long,TimeUnit)",boolean,"true if successful, or false if the specified waiting time elapses before space is available"
"java.util.concurrent.LinkedBlockingDeque.offerLast(E,long,TimeUnit)",boolean,"true if successful, or false if the specified waiting time elapses before space is available"
java.util.concurrent.LinkedBlockingDeque.removeFirst(),E,the head of this deque
java.util.concurrent.LinkedBlockingDeque.removeLast(),E,the tail of this deque
java.util.concurrent.LinkedBlockingDeque.pollFirst(),E,"the head of this deque, or null if this deque is empty"
java.util.concurrent.LinkedBlockingDeque.pollLast(),E,"the tail of this deque, or null if this deque is empty"
java.util.concurrent.LinkedBlockingDeque.takeFirst(),E,the head of this deque
java.util.concurrent.LinkedBlockingDeque.takeLast(),E,the tail of this deque
"java.util.concurrent.LinkedBlockingDeque.pollFirst(long,TimeUnit)",E,"the head of this deque, or null if the specified waiting time elapses before an element is available"
"java.util.concurrent.LinkedBlockingDeque.pollLast(long,TimeUnit)",E,"the tail of this deque, or null if the specified waiting time elapses before an element is available"
java.util.concurrent.LinkedBlockingDeque.getFirst(),E,the head of this deque
java.util.concurrent.LinkedBlockingDeque.getLast(),E,the tail of this deque
java.util.concurrent.LinkedBlockingDeque.peekFirst(),E,"the head of this deque, or null if this deque is empty"
java.util.concurrent.LinkedBlockingDeque.peekLast(),E,"the tail of this deque, or null if this deque is empty"
java.util.concurrent.LinkedBlockingDeque.removeFirstOccurrence(Object),boolean,true if an element was removed as a result of this call
java.util.concurrent.LinkedBlockingDeque.removeLastOccurrence(Object),boolean,true if an element was removed as a result of this call
java.util.concurrent.LinkedBlockingDeque.add(E),boolean,true (as specified by Collection.add(E))
java.util.concurrent.LinkedBlockingDeque.offer(E),boolean,"true if the element was added to this queue, else false"
java.util.concurrent.LinkedBlockingDeque.put(E),void,
"java.util.concurrent.LinkedBlockingDeque.offer(E,long,TimeUnit)",boolean,"true if the element was added to this deque, else false"
java.util.concurrent.LinkedBlockingDeque.remove(),E,the head of the queue represented by this deque
java.util.concurrent.LinkedBlockingDeque.poll(),E,"the head of this deque, or null if this deque is empty"
java.util.concurrent.LinkedBlockingDeque.take(),E,the head of this deque
"java.util.concurrent.LinkedBlockingDeque.poll(long,TimeUnit)",E,"the head of this deque, or null if the specified waiting time elapses before an element is available"
java.util.concurrent.LinkedBlockingDeque.element(),E,the head of the queue represented by this deque
java.util.concurrent.LinkedBlockingDeque.peek(),E,"the head of this deque, or null if this deque is empty"
java.util.concurrent.LinkedBlockingDeque.remainingCapacity(),int,the remaining capacity
java.util.concurrent.LinkedBlockingDeque.drainTo(Collection&lt;?),int,the number of elements transferred
"java.util.concurrent.LinkedBlockingDeque.drainTo(Collection&lt;?,int)",int,the number of elements transferred
java.util.concurrent.LinkedBlockingDeque.push(E),void,
java.util.concurrent.LinkedBlockingDeque.pop(),E,the element at the front of this deque (which is the top of the stack represented by this deque)
java.util.concurrent.LinkedBlockingDeque.remove(Object),boolean,true if this deque changed as a result of the call
java.util.concurrent.LinkedBlockingDeque.size(),int,the number of elements in this deque
java.util.concurrent.LinkedBlockingDeque.contains(Object),boolean,true if this deque contains the specified element
java.util.concurrent.LinkedBlockingDeque.toArray(),Object[],an array containing all of the elements in this deque
java.util.concurrent.LinkedBlockingDeque.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this deque
java.util.concurrent.LinkedBlockingDeque.toString(),String,a string representation of this collection
java.util.concurrent.LinkedBlockingDeque.clear(),void,
java.util.concurrent.LinkedBlockingDeque.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this deque in proper sequence
java.util.concurrent.LinkedBlockingDeque.descendingIterator(),Iterator&lt;E&gt;,an iterator over the elements in this deque in reverse order
java.util.concurrent.LinkedBlockingDeque.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this deque
java.util.concurrent.LinkedBlockingQueue.size(),int,the number of elements in this queue
java.util.concurrent.LinkedBlockingQueue.remainingCapacity(),int,the remaining capacity
java.util.concurrent.LinkedBlockingQueue.put(E),void,
"java.util.concurrent.LinkedBlockingQueue.offer(E,long,TimeUnit)",boolean,"true if successful, or false if the specified waiting time elapses before space is available"
java.util.concurrent.LinkedBlockingQueue.offer(E),boolean,"true if the element was added to this queue, else false"
java.util.concurrent.LinkedBlockingQueue.take(),E,the head of this queue
"java.util.concurrent.LinkedBlockingQueue.poll(long,TimeUnit)",E,"the head of this queue, or null if the specified waiting time elapses before an element is available"
java.util.concurrent.LinkedBlockingQueue.poll(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.LinkedBlockingQueue.peek(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.LinkedBlockingQueue.remove(Object),boolean,true if this queue changed as a result of the call
java.util.concurrent.LinkedBlockingQueue.contains(Object),boolean,true if this queue contains the specified element
java.util.concurrent.LinkedBlockingQueue.toArray(),Object[],an array containing all of the elements in this queue
java.util.concurrent.LinkedBlockingQueue.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this queue
java.util.concurrent.LinkedBlockingQueue.toString(),String,a string representation of this collection
java.util.concurrent.LinkedBlockingQueue.clear(),void,
java.util.concurrent.LinkedBlockingQueue.drainTo(Collection&lt;?),int,the number of elements transferred
"java.util.concurrent.LinkedBlockingQueue.drainTo(Collection&lt;?,int)",int,the number of elements transferred
java.util.concurrent.LinkedBlockingQueue.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this queue in proper sequence
java.util.concurrent.LinkedBlockingQueue.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this queue
java.util.concurrent.LinkedTransferQueue.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this queue
java.util.concurrent.LinkedTransferQueue.put(E),void,
"java.util.concurrent.LinkedTransferQueue.offer(E,long,TimeUnit)",boolean,true (as specified by BlockingQueue.offer)
java.util.concurrent.LinkedTransferQueue.offer(E),boolean,true (as specified by Queue.offer(E))
java.util.concurrent.LinkedTransferQueue.add(E),boolean,true (as specified by Collection.add(E))
java.util.concurrent.LinkedTransferQueue.tryTransfer(E),boolean,"true if the element was transferred, else false"
java.util.concurrent.LinkedTransferQueue.transfer(E),void,
"java.util.concurrent.LinkedTransferQueue.tryTransfer(E,long,TimeUnit)",boolean,"true if successful, or false if the specified waiting time elapses before completion, in which case the element is not left enqueued"
java.util.concurrent.LinkedTransferQueue.take(),E,the head of this queue
"java.util.concurrent.LinkedTransferQueue.poll(long,TimeUnit)",E,"the head of this queue, or null if the specified waiting time elapses before an element is available"
java.util.concurrent.LinkedTransferQueue.poll(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.LinkedTransferQueue.drainTo(Collection&lt;?),int,the number of elements transferred
"java.util.concurrent.LinkedTransferQueue.drainTo(Collection&lt;?,int)",int,the number of elements transferred
java.util.concurrent.LinkedTransferQueue.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this queue in proper sequence
java.util.concurrent.LinkedTransferQueue.peek(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.LinkedTransferQueue.isEmpty(),boolean,true if this queue contains no elements
java.util.concurrent.LinkedTransferQueue.hasWaitingConsumer(),boolean,true if there is at least one waiting consumer
java.util.concurrent.LinkedTransferQueue.size(),int,the number of elements in this queue
java.util.concurrent.LinkedTransferQueue.getWaitingConsumerCount(),int,the number of consumers waiting to receive elements
java.util.concurrent.LinkedTransferQueue.remove(Object),boolean,true if this queue changed as a result of the call
java.util.concurrent.LinkedTransferQueue.contains(Object),boolean,true if this queue contains the specified element
java.util.concurrent.LinkedTransferQueue.remainingCapacity(),int,Integer.MAX_VALUE (as specified by BlockingQueue.remainingCapacity)
java.util.concurrent.Phaser.register(),int,"the arrival phase number to which this registration applied. If this value is negative, then this phaser has terminated, in which case registration has no effect."
java.util.concurrent.Phaser.bulkRegister(int),int,"the arrival phase number to which this registration applied. If this value is negative, then this phaser has terminated, in which case registration has no effect."
java.util.concurrent.Phaser.arrive(),int,"the arrival phase number, or a negative value if terminated"
java.util.concurrent.Phaser.arriveAndDeregister(),int,"the arrival phase number, or a negative value if terminated"
java.util.concurrent.Phaser.arriveAndAwaitAdvance(),int,"the arrival phase number, or the (negative) current phase if terminated"
java.util.concurrent.Phaser.awaitAdvance(int),int,"the next arrival phase number, or the argument if it is negative, or the (negative) current phase if terminated"
java.util.concurrent.Phaser.awaitAdvanceInterruptibly(int),int,"the next arrival phase number, or the argument if it is negative, or the (negative) current phase if terminated"
"java.util.concurrent.Phaser.awaitAdvanceInterruptibly(int,long,TimeUnit)",int,"the next arrival phase number, or the argument if it is negative, or the (negative) current phase if terminated"
java.util.concurrent.Phaser.forceTermination(),void,
java.util.concurrent.Phaser.getPhase(),int,"the phase number, or a negative value if terminated"
java.util.concurrent.Phaser.getRegisteredParties(),int,the number of parties
java.util.concurrent.Phaser.getArrivedParties(),int,the number of arrived parties
java.util.concurrent.Phaser.getUnarrivedParties(),int,the number of unarrived parties
java.util.concurrent.Phaser.getParent(),Phaser,"the parent of this phaser, or null if none"
java.util.concurrent.Phaser.getRoot(),Phaser,the root ancestor of this phaser
java.util.concurrent.Phaser.isTerminated(),boolean,true if this phaser has been terminated
"java.util.concurrent.Phaser.onAdvance(int,int)",boolean,true if this phaser should terminate
java.util.concurrent.Phaser.toString(),String,"a string identifying this phaser, as well as its state"
java.util.concurrent.PriorityBlockingQueue.add(E),boolean,true (as specified by Collection.add(E))
java.util.concurrent.PriorityBlockingQueue.offer(E),boolean,true (as specified by Queue.offer(E))
java.util.concurrent.PriorityBlockingQueue.put(E),void,
"java.util.concurrent.PriorityBlockingQueue.offer(E,long,TimeUnit)",boolean,true (as specified by BlockingQueue.offer)
java.util.concurrent.PriorityBlockingQueue.poll(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.PriorityBlockingQueue.take(),E,the head of this queue
"java.util.concurrent.PriorityBlockingQueue.poll(long,TimeUnit)",E,"the head of this queue, or null if the specified waiting time elapses before an element is available"
java.util.concurrent.PriorityBlockingQueue.peek(),E,"the head of this queue, or null if this queue is empty"
java.util.concurrent.PriorityBlockingQueue.comparator(),Comparator&lt;? super E&gt;,"the comparator used to order the elements in this queue, or null if this queue uses the natural ordering of its elements"
java.util.concurrent.PriorityBlockingQueue.size(),int,the number of elements in this collection
java.util.concurrent.PriorityBlockingQueue.remainingCapacity(),int,Integer.MAX_VALUE always
java.util.concurrent.PriorityBlockingQueue.remove(Object),boolean,true if this queue changed as a result of the call
java.util.concurrent.PriorityBlockingQueue.contains(Object),boolean,true if this queue contains the specified element
java.util.concurrent.PriorityBlockingQueue.toArray(),Object[],an array containing all of the elements in this queue
java.util.concurrent.PriorityBlockingQueue.toString(),String,a string representation of this collection
java.util.concurrent.PriorityBlockingQueue.drainTo(Collection&lt;?),int,the number of elements transferred
"java.util.concurrent.PriorityBlockingQueue.drainTo(Collection&lt;?,int)",int,the number of elements transferred
java.util.concurrent.PriorityBlockingQueue.clear(),void,
java.util.concurrent.PriorityBlockingQueue.toArray(T[]),&lt;T&gt;T[],an array containing all of the elements in this queue
java.util.concurrent.PriorityBlockingQueue.iterator(),Iterator&lt;E&gt;,an iterator over the elements in this queue
java.util.concurrent.PriorityBlockingQueue.spliterator(),Spliterator&lt;E&gt;,a Spliterator over the elements in this queue
java.util.concurrent.RecursiveAction.compute(),abstractvoid,
java.util.concurrent.RecursiveAction.getRawResult(),Void,null always
java.util.concurrent.RecursiveAction.setRawResult(Void),void,
java.util.concurrent.RecursiveAction.exec(),boolean,true if this task is known to have completed normally
java.util.concurrent.RecursiveTask.compute(),abstractV,the result of the computation
java.util.concurrent.RecursiveTask.getRawResult(),V,"the result, or null if not completed"
java.util.concurrent.RecursiveTask.setRawResult(V),void,
java.util.concurrent.RecursiveTask.exec(),boolean,true if this task is known to have completed normally
"java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Runnable,RunnableScheduledFuture&lt;V&gt;)",&lt;V&gt;RunnableScheduledFuture&lt;V&gt;,a task that can execute the runnable
"java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Callable&lt;V&gt;,RunnableScheduledFuture&lt;V&gt;)",&lt;V&gt;RunnableScheduledFuture&lt;V&gt;,a task that can execute the callable
"java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Runnable,long,TimeUnit)",ScheduledFuture&lt;?&gt;,a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion
"java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Callable&lt;V&gt;,long,TimeUnit)",&lt;V&gt;ScheduledFuture&lt;V&gt;,a ScheduledFuture that can be used to extract result or cancel
"java.util.concurrent.ScheduledThreadPoolExecutor.scheduleAtFixedRate(Runnable,long,long,TimeUnit)",ScheduledFuture&lt;?&gt;,"a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation"
"java.util.concurrent.ScheduledThreadPoolExecutor.scheduleWithFixedDelay(Runnable,long,long,TimeUnit)",ScheduledFuture&lt;?&gt;,"a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation"
java.util.concurrent.ScheduledThreadPoolExecutor.execute(Runnable),void,
java.util.concurrent.ScheduledThreadPoolExecutor.submit(Runnable),Future&lt;?&gt;,a Future representing pending completion of the task
"java.util.concurrent.ScheduledThreadPoolExecutor.submit(Runnable,T)",&lt;T&gt;Future&lt;T&gt;,a Future representing pending completion of the task
java.util.concurrent.ScheduledThreadPoolExecutor.submit(Callable&lt;T&gt;),&lt;T&gt;Future&lt;T&gt;,a Future representing pending completion of the task
java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean),void,
java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy(),boolean,true if will continue after shutdown
java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean),void,
java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy(),boolean,true if will execute after shutdown
java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean),void,
java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy(),boolean,true if cancelled tasks are immediately removed from the queue
java.util.concurrent.ScheduledThreadPoolExecutor.shutdown(),void,
java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow(),List&lt;Runnable&gt;,"list of tasks that never commenced execution. Each element of this list is a ScheduledFuture, including those tasks submitted using execute, which are for scheduling purposes used as the basis of a zero-delay ScheduledFuture."
java.util.concurrent.ScheduledThreadPoolExecutor.getQueue(),BlockingQueue&lt;Runnable&gt;,the task queue
java.util.concurrent.Semaphore.acquire(),void,
java.util.concurrent.Semaphore.acquireUninterruptibly(),void,
java.util.concurrent.Semaphore.tryAcquire(),boolean,true if a permit was acquired and false otherwise
"java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit)",boolean,
java.util.concurrent.Semaphore.release(),void,
java.util.concurrent.Semaphore.acquire(int),void,
java.util.concurrent.Semaphore.acquireUninterruptibly(int),void,
java.util.concurrent.Semaphore.tryAcquire(int),boolean,true if the permits were acquired and false otherwise
"java.util.concurrent.Semaphore.tryAcquire(int,long,TimeUnit)",boolean,
java.util.concurrent.Semaphore.release(int),void,
java.util.concurrent.Semaphore.availablePermits(),int,the number of permits available in this semaphore
java.util.concurrent.Semaphore.drainPermits(),int,the number of permits acquired
java.util.concurrent.Semaphore.reducePermits(int),void,
java.util.concurrent.Semaphore.isFair(),boolean,true if this semaphore has fairness set true
java.util.concurrent.Semaphore.hasQueuedThreads(),boolean,true if there may be other threads waiting to acquire the lock
java.util.concurrent.Semaphore.getQueueLength(),int,the estimated number of threads waiting for this lock
java.util.concurrent.Semaphore.getQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.Semaphore.toString(),String,"a string identifying this semaphore, as well as its state"
java.util.concurrent.SynchronousQueue.put(E),void,
"java.util.concurrent.SynchronousQueue.offer(E,long,TimeUnit)",boolean,"true if successful, or false if the specified waiting time elapses before a consumer appears"
java.util.concurrent.SynchronousQueue.offer(E),boolean,"true if the element was added to this queue, else false"
java.util.concurrent.SynchronousQueue.take(),E,the head of this queue
"java.util.concurrent.SynchronousQueue.poll(long,TimeUnit)",E,"the head of this queue, or null if the specified waiting time elapses before an element is present"
java.util.concurrent.SynchronousQueue.poll(),E,"the head of this queue, or null if no element is available"
java.util.concurrent.SynchronousQueue.isEmpty(),boolean,true
java.util.concurrent.SynchronousQueue.size(),int,zero
java.util.concurrent.SynchronousQueue.remainingCapacity(),int,zero
java.util.concurrent.SynchronousQueue.clear(),void,
java.util.concurrent.SynchronousQueue.contains(Object),boolean,false
java.util.concurrent.SynchronousQueue.remove(Object),boolean,false
java.util.concurrent.SynchronousQueue.containsAll(Collection&lt;?&gt;),boolean,false unless given collection is empty
java.util.concurrent.SynchronousQueue.removeAll(Collection&lt;?&gt;),boolean,false
java.util.concurrent.SynchronousQueue.retainAll(Collection&lt;?&gt;),boolean,false
java.util.concurrent.SynchronousQueue.peek(),E,null
java.util.concurrent.SynchronousQueue.iterator(),Iterator&lt;E&gt;,an empty iterator
java.util.concurrent.SynchronousQueue.spliterator(),Spliterator&lt;E&gt;,an empty spliterator
java.util.concurrent.SynchronousQueue.toArray(),Object[],a zero-length array
java.util.concurrent.SynchronousQueue.toArray(T[]),&lt;T&gt;T[],the specified array
java.util.concurrent.SynchronousQueue.drainTo(Collection&lt;?),int,the number of elements transferred
"java.util.concurrent.SynchronousQueue.drainTo(Collection&lt;?,int)",int,the number of elements transferred
java.util.concurrent.ThreadLocalRandom.current(),ThreadLocalRandom,the current thread's ThreadLocalRandom
java.util.concurrent.ThreadLocalRandom.setSeed(long),void,
java.util.concurrent.ThreadLocalRandom.next(int),int,the next pseudorandom value from this random number generator's sequence
java.util.concurrent.ThreadLocalRandom.nextInt(),int,a pseudorandom int value
java.util.concurrent.ThreadLocalRandom.nextInt(int),int,a pseudorandom int value between zero (inclusive) and the bound (exclusive)
"java.util.concurrent.ThreadLocalRandom.nextInt(int,int)",int,a pseudorandom int value between the origin (inclusive) and the bound (exclusive)
java.util.concurrent.ThreadLocalRandom.nextLong(),long,a pseudorandom long value
java.util.concurrent.ThreadLocalRandom.nextLong(long),long,a pseudorandom long value between zero (inclusive) and the bound (exclusive)
"java.util.concurrent.ThreadLocalRandom.nextLong(long,long)",long,a pseudorandom long value between the origin (inclusive) and the bound (exclusive)
java.util.concurrent.ThreadLocalRandom.nextDouble(),double,a pseudorandom double value between zero (inclusive) and one (exclusive)
java.util.concurrent.ThreadLocalRandom.nextDouble(double),double,a pseudorandom double value between zero (inclusive) and the bound (exclusive)
"java.util.concurrent.ThreadLocalRandom.nextDouble(double,double)",double,a pseudorandom double value between the origin (inclusive) and the bound (exclusive)
java.util.concurrent.ThreadLocalRandom.nextBoolean(),boolean,a pseudorandom boolean value
java.util.concurrent.ThreadLocalRandom.nextFloat(),float,a pseudorandom float value between zero (inclusive) and one (exclusive)
java.util.concurrent.ThreadLocalRandom.nextGaussian(),double,"the next pseudorandom, Gaussian (""normally"") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence"
java.util.concurrent.ThreadLocalRandom.ints(long),IntStream,a stream of pseudorandom int values
java.util.concurrent.ThreadLocalRandom.ints(),IntStream,a stream of pseudorandom int values
"java.util.concurrent.ThreadLocalRandom.ints(long,int,int)",IntStream,"a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.concurrent.ThreadLocalRandom.ints(int,int)",IntStream,"a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"
java.util.concurrent.ThreadLocalRandom.longs(long),LongStream,a stream of pseudorandom long values
java.util.concurrent.ThreadLocalRandom.longs(),LongStream,a stream of pseudorandom long values
"java.util.concurrent.ThreadLocalRandom.longs(long,long,long)",LongStream,"a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.concurrent.ThreadLocalRandom.longs(long,long)",LongStream,"a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"
java.util.concurrent.ThreadLocalRandom.doubles(long),DoubleStream,a stream of double values
java.util.concurrent.ThreadLocalRandom.doubles(),DoubleStream,a stream of pseudorandom double values
"java.util.concurrent.ThreadLocalRandom.doubles(long,double,double)",DoubleStream,"a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"
"java.util.concurrent.ThreadLocalRandom.doubles(double,double)",DoubleStream,"a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"
java.util.concurrent.ThreadPoolExecutor.execute(Runnable),void,
java.util.concurrent.ThreadPoolExecutor.shutdown(),void,
java.util.concurrent.ThreadPoolExecutor.shutdownNow(),List&lt;Runnable&gt;,list of tasks that never commenced execution
java.util.concurrent.ThreadPoolExecutor.isShutdown(),boolean,true if this executor has been shut down
java.util.concurrent.ThreadPoolExecutor.isTerminating(),boolean,true if terminating but not yet terminated
java.util.concurrent.ThreadPoolExecutor.isTerminated(),boolean,true if all tasks have completed following shut down
"java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,TimeUnit)",boolean,true if this executor terminated and false if the timeout elapsed before termination
java.util.concurrent.ThreadPoolExecutor.finalize(),voidize(),
java.util.concurrent.ThreadPoolExecutor.setThreadFactory(ThreadFactory),void,
java.util.concurrent.ThreadPoolExecutor.getThreadFactory(),ThreadFactory,the current thread factory
java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(RejectedExecutionHandler),void,
java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler(),RejectedExecutionHandler,the current handler
java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int),void,
java.util.concurrent.ThreadPoolExecutor.getCorePoolSize(),int,the core number of threads
java.util.concurrent.ThreadPoolExecutor.prestartCoreThread(),boolean,true if a thread was started
java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads(),int,the number of threads started
java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut(),boolean,"true if core threads are allowed to time out, else false"
java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean),void,
java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int),void,
java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize(),int,the maximum allowed number of threads
"java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long,TimeUnit)",void,
java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(TimeUnit),long,the time limit
java.util.concurrent.ThreadPoolExecutor.getQueue(),BlockingQueue&lt;Runnable&gt;,the task queue
java.util.concurrent.ThreadPoolExecutor.remove(Runnable),boolean,true if the task was removed
java.util.concurrent.ThreadPoolExecutor.purge(),void,
java.util.concurrent.ThreadPoolExecutor.getPoolSize(),int,the number of threads
java.util.concurrent.ThreadPoolExecutor.getActiveCount(),int,the number of threads
java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize(),int,the number of threads
java.util.concurrent.ThreadPoolExecutor.getTaskCount(),long,the number of tasks
java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount(),long,the number of tasks
java.util.concurrent.ThreadPoolExecutor.toString(),String,"a string identifying this pool, as well as its state"
"java.util.concurrent.ThreadPoolExecutor.beforeExecute(Thread,Runnable)",void,
"java.util.concurrent.ThreadPoolExecutor.afterExecute(Runnable,Throwable)",void,
java.util.concurrent.ThreadPoolExecutor.terminated(),void,
"java.util.concurrent.ThreadPoolExecutor.AbortPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)",void,
"java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)",void,
"java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)",void,
"java.util.concurrent.ThreadPoolExecutor.DiscardPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)",void,
java.util.concurrent.atomic.AtomicBoolean.get(),boolean,the current value
"java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
"java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean,boolean)",boolean,true if successful
java.util.concurrent.atomic.AtomicBoolean.set(boolean),void,
java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean),void,
java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean),boolean,the previous value
java.util.concurrent.atomic.AtomicBoolean.toString(),String,the String representation of the current value
java.util.concurrent.atomic.AtomicInteger.get(),int,the current value
java.util.concurrent.atomic.AtomicInteger.set(int),void,
java.util.concurrent.atomic.AtomicInteger.lazySet(int),void,
java.util.concurrent.atomic.AtomicInteger.getAndSet(int),int,the previous value
"java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
"java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(int,int)",boolean,true if successful
java.util.concurrent.atomic.AtomicInteger.getAndIncrement(),int,the previous value
java.util.concurrent.atomic.AtomicInteger.getAndDecrement(),int,the previous value
java.util.concurrent.atomic.AtomicInteger.getAndAdd(int),int,the previous value
java.util.concurrent.atomic.AtomicInteger.incrementAndGet(),int,the updated value
java.util.concurrent.atomic.AtomicInteger.decrementAndGet(),int,the updated value
java.util.concurrent.atomic.AtomicInteger.addAndGet(int),int,the updated value
java.util.concurrent.atomic.AtomicInteger.getAndUpdate(IntUnaryOperator),int,the previous value
java.util.concurrent.atomic.AtomicInteger.updateAndGet(IntUnaryOperator),int,the updated value
"java.util.concurrent.atomic.AtomicInteger.getAndAccumulate(int,IntBinaryOperator)",int,the previous value
"java.util.concurrent.atomic.AtomicInteger.accumulateAndGet(int,IntBinaryOperator)",int,the updated value
java.util.concurrent.atomic.AtomicInteger.toString(),String,the String representation of the current value
java.util.concurrent.atomic.AtomicInteger.intValue(),int,the numeric value represented by this object after conversion to type int.
java.util.concurrent.atomic.AtomicInteger.longValue(),long,the numeric value represented by this object after conversion to type long.
java.util.concurrent.atomic.AtomicInteger.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.util.concurrent.atomic.AtomicInteger.doubleValue(),double,the numeric value represented by this object after conversion to type double.
java.util.concurrent.atomic.AtomicIntegerArray.length(),int,the length of the array
java.util.concurrent.atomic.AtomicIntegerArray.get(int),int,the current value
"java.util.concurrent.atomic.AtomicIntegerArray.set(int,int)",void,
"java.util.concurrent.atomic.AtomicIntegerArray.lazySet(int,int)",void,
"java.util.concurrent.atomic.AtomicIntegerArray.getAndSet(int,int)",int,the previous value
"java.util.concurrent.atomic.AtomicIntegerArray.compareAndSet(int,int,int)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
"java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(int,int,int)",boolean,true if successful
java.util.concurrent.atomic.AtomicIntegerArray.getAndIncrement(int),int,the previous value
java.util.concurrent.atomic.AtomicIntegerArray.getAndDecrement(int),int,the previous value
"java.util.concurrent.atomic.AtomicIntegerArray.getAndAdd(int,int)",int,the previous value
java.util.concurrent.atomic.AtomicIntegerArray.incrementAndGet(int),int,the updated value
java.util.concurrent.atomic.AtomicIntegerArray.decrementAndGet(int),int,the updated value
"java.util.concurrent.atomic.AtomicIntegerArray.addAndGet(int,int)",int,the updated value
"java.util.concurrent.atomic.AtomicIntegerArray.getAndUpdate(int,IntUnaryOperator)",int,the previous value
"java.util.concurrent.atomic.AtomicIntegerArray.updateAndGet(int,IntUnaryOperator)",int,the updated value
"java.util.concurrent.atomic.AtomicIntegerArray.getAndAccumulate(int,int,IntBinaryOperator)",int,the previous value
"java.util.concurrent.atomic.AtomicIntegerArray.accumulateAndGet(int,int,IntBinaryOperator)",int,the updated value
java.util.concurrent.atomic.AtomicIntegerArray.toString(),String,the String representation of the current values of array
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(Class&lt;U&gt;,String)",&lt;U&gt;AtomicIntegerFieldUpdater&lt;U&gt;,the updater
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(T,int,int)",abstractboolean,true if successful
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.weakCompareAndSet(T,int,int)",abstractboolean,true if successful
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.set(T,int)",abstractvoid,
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.lazySet(T,int)",abstractvoid,
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.get(T),abstractint,the current value
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(T,int)",int,the previous value
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndIncrement(T),int,the previous value
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndDecrement(T),int,the previous value
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAdd(T,int)",int,the previous value
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(T),int,the updated value
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(T),int,the updated value
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.addAndGet(T,int)",int,the updated value
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndUpdate(T,IntUnaryOperator)",int,the previous value
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.updateAndGet(T,IntUnaryOperator)",int,the updated value
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAccumulate(T,int,IntBinaryOperator)",int,the previous value
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.accumulateAndGet(T,int,IntBinaryOperator)",int,the updated value
java.util.concurrent.atomic.AtomicLong.get(),long,the current value
java.util.concurrent.atomic.AtomicLong.set(long),void,
java.util.concurrent.atomic.AtomicLong.lazySet(long),void,
java.util.concurrent.atomic.AtomicLong.getAndSet(long),long,the previous value
"java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
"java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long,long)",boolean,true if successful
java.util.concurrent.atomic.AtomicLong.getAndIncrement(),long,the previous value
java.util.concurrent.atomic.AtomicLong.getAndDecrement(),long,the previous value
java.util.concurrent.atomic.AtomicLong.getAndAdd(long),long,the previous value
java.util.concurrent.atomic.AtomicLong.incrementAndGet(),long,the updated value
java.util.concurrent.atomic.AtomicLong.decrementAndGet(),long,the updated value
java.util.concurrent.atomic.AtomicLong.addAndGet(long),long,the updated value
java.util.concurrent.atomic.AtomicLong.getAndUpdate(LongUnaryOperator),long,the previous value
java.util.concurrent.atomic.AtomicLong.updateAndGet(LongUnaryOperator),long,the updated value
"java.util.concurrent.atomic.AtomicLong.getAndAccumulate(long,LongBinaryOperator)",long,the previous value
"java.util.concurrent.atomic.AtomicLong.accumulateAndGet(long,LongBinaryOperator)",long,the updated value
java.util.concurrent.atomic.AtomicLong.toString(),String,the String representation of the current value
java.util.concurrent.atomic.AtomicLong.intValue(),int,the numeric value represented by this object after conversion to type int.
java.util.concurrent.atomic.AtomicLong.longValue(),long,the numeric value represented by this object after conversion to type long.
java.util.concurrent.atomic.AtomicLong.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.util.concurrent.atomic.AtomicLong.doubleValue(),double,the numeric value represented by this object after conversion to type double.
java.util.concurrent.atomic.AtomicLongArray.length(),int,the length of the array
java.util.concurrent.atomic.AtomicLongArray.get(int),long,the current value
"java.util.concurrent.atomic.AtomicLongArray.set(int,long)",void,
"java.util.concurrent.atomic.AtomicLongArray.lazySet(int,long)",void,
"java.util.concurrent.atomic.AtomicLongArray.getAndSet(int,long)",long,the previous value
"java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
"java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet(int,long,long)",boolean,true if successful
java.util.concurrent.atomic.AtomicLongArray.getAndIncrement(int),long,the previous value
java.util.concurrent.atomic.AtomicLongArray.getAndDecrement(int),long,the previous value
"java.util.concurrent.atomic.AtomicLongArray.getAndAdd(int,long)",long,the previous value
java.util.concurrent.atomic.AtomicLongArray.incrementAndGet(int),long,the updated value
java.util.concurrent.atomic.AtomicLongArray.decrementAndGet(int),long,the updated value
"java.util.concurrent.atomic.AtomicLongArray.addAndGet(int,long)",long,the updated value
"java.util.concurrent.atomic.AtomicLongArray.getAndUpdate(int,LongUnaryOperator)",long,the previous value
"java.util.concurrent.atomic.AtomicLongArray.updateAndGet(int,LongUnaryOperator)",long,the updated value
"java.util.concurrent.atomic.AtomicLongArray.getAndAccumulate(int,long,LongBinaryOperator)",long,the previous value
"java.util.concurrent.atomic.AtomicLongArray.accumulateAndGet(int,long,LongBinaryOperator)",long,the updated value
java.util.concurrent.atomic.AtomicLongArray.toString(),String,the String representation of the current values of array
"java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(Class&lt;U&gt;,String)",&lt;U&gt;AtomicLongFieldUpdater&lt;U&gt;,the updater
"java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T,long,long)",abstractboolean,true if successful
"java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T,long,long)",abstractboolean,true if successful
"java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T,long)",abstractvoid,
"java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(T,long)",abstractvoid,
java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T),abstractlong,the current value
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T,long)",long,the previous value
java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T),long,the previous value
java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T),long,the previous value
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T,long)",long,the previous value
java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T),long,the updated value
java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T),long,the updated value
"java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T,long)",long,the updated value
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndUpdate(T,LongUnaryOperator)",long,the previous value
"java.util.concurrent.atomic.AtomicLongFieldUpdater.updateAndGet(T,LongUnaryOperator)",long,the updated value
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAccumulate(T,long,LongBinaryOperator)",long,the previous value
"java.util.concurrent.atomic.AtomicLongFieldUpdater.accumulateAndGet(T,long,LongBinaryOperator)",long,the updated value
java.util.concurrent.atomic.AtomicMarkableReference.getReference(),V,the current value of the reference
java.util.concurrent.atomic.AtomicMarkableReference.isMarked(),boolean,the current value of the mark
java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[]),V,the current value of the reference
"java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V,V,boolean,boolean)",boolean,true if successful
"java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V,V,boolean,boolean)",boolean,true if successful
"java.util.concurrent.atomic.AtomicMarkableReference.set(V,boolean)",void,
"java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V,boolean)",boolean,true if successful
java.util.concurrent.atomic.AtomicReference.get(),V,the current value
java.util.concurrent.atomic.AtomicReference.set(V),void,
java.util.concurrent.atomic.AtomicReference.lazySet(V),void,
"java.util.concurrent.atomic.AtomicReference.compareAndSet(V,V)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
"java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V,V)",boolean,true if successful
java.util.concurrent.atomic.AtomicReference.getAndSet(V),V,the previous value
java.util.concurrent.atomic.AtomicReference.getAndUpdate(UnaryOperator&lt;V&gt;),V,the previous value
java.util.concurrent.atomic.AtomicReference.updateAndGet(UnaryOperator&lt;V&gt;),V,the updated value
"java.util.concurrent.atomic.AtomicReference.getAndAccumulate(V,BinaryOperator&lt;V&gt;)",V,the previous value
"java.util.concurrent.atomic.AtomicReference.accumulateAndGet(V,BinaryOperator&lt;V&gt;)",V,the updated value
java.util.concurrent.atomic.AtomicReference.toString(),String,the String representation of the current value
java.util.concurrent.atomic.AtomicReferenceArray.length(),int,the length of the array
java.util.concurrent.atomic.AtomicReferenceArray.get(int),E,the current value
"java.util.concurrent.atomic.AtomicReferenceArray.set(int,E)",void,
"java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int,E)",void,
"java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int,E)",E,the previous value
"java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int,E,E)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
"java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int,E,E)",boolean,true if successful
"java.util.concurrent.atomic.AtomicReferenceArray.getAndUpdate(int,UnaryOperator&lt;E&gt;)",E,the previous value
"java.util.concurrent.atomic.AtomicReferenceArray.updateAndGet(int,UnaryOperator&lt;E&gt;)",E,the updated value
"java.util.concurrent.atomic.AtomicReferenceArray.getAndAccumulate(int,E,BinaryOperator&lt;E&gt;)",E,the previous value
"java.util.concurrent.atomic.AtomicReferenceArray.accumulateAndGet(int,E,BinaryOperator&lt;E&gt;)",E,the updated value
java.util.concurrent.atomic.AtomicReferenceArray.toString(),String,the String representation of the current values of array
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(Class&lt;U&gt;,Class&lt;W&gt;,String)","&lt;U,W&gt;AtomicReferenceFieldUpdater&lt;U,W&gt;",the updater
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(T,V,V)",abstractboolean,true if successful
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(T,V,V)",abstractboolean,true if successful
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(T,V)",abstractvoid,
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(T,V)",abstractvoid,
java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(T),abstractV,the current value
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(T,V)",V,the previous value
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndUpdate(T,UnaryOperator&lt;V&gt;)",V,the previous value
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.updateAndGet(T,UnaryOperator&lt;V&gt;)",V,the updated value
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndAccumulate(T,V,BinaryOperator&lt;V&gt;)",V,the previous value
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.accumulateAndGet(T,V,BinaryOperator&lt;V&gt;)",V,the updated value
java.util.concurrent.atomic.AtomicStampedReference.getReference(),V,the current value of the reference
java.util.concurrent.atomic.AtomicStampedReference.getStamp(),int,the current value of the stamp
java.util.concurrent.atomic.AtomicStampedReference.get(int[]),V,the current value of the reference
"java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(V,V,int,int)",boolean,true if successful
"java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(V,V,int,int)",boolean,true if successful
"java.util.concurrent.atomic.AtomicStampedReference.set(V,int)",void,
"java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(V,int)",boolean,true if successful
java.util.concurrent.atomic.DoubleAccumulator.accumulate(double),void,
java.util.concurrent.atomic.DoubleAccumulator.get(),double,the current value
java.util.concurrent.atomic.DoubleAccumulator.reset(),void,
java.util.concurrent.atomic.DoubleAccumulator.getThenReset(),double,the value before reset
java.util.concurrent.atomic.DoubleAccumulator.toString(),String,the String representation of the current value
java.util.concurrent.atomic.DoubleAccumulator.doubleValue(),double,the current value
java.util.concurrent.atomic.DoubleAccumulator.longValue(),long,the numeric value represented by this object after conversion to type long.
java.util.concurrent.atomic.DoubleAccumulator.intValue(),int,the numeric value represented by this object after conversion to type int.
java.util.concurrent.atomic.DoubleAccumulator.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.util.concurrent.atomic.DoubleAdder.add(double),void,
java.util.concurrent.atomic.DoubleAdder.sum(),double,the sum
java.util.concurrent.atomic.DoubleAdder.reset(),void,
java.util.concurrent.atomic.DoubleAdder.sumThenReset(),double,the sum
java.util.concurrent.atomic.DoubleAdder.toString(),String,the String representation of the sum()
java.util.concurrent.atomic.DoubleAdder.doubleValue(),double,the sum
java.util.concurrent.atomic.DoubleAdder.longValue(),long,the numeric value represented by this object after conversion to type long.
java.util.concurrent.atomic.DoubleAdder.intValue(),int,the numeric value represented by this object after conversion to type int.
java.util.concurrent.atomic.DoubleAdder.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.util.concurrent.atomic.LongAccumulator.accumulate(long),void,
java.util.concurrent.atomic.LongAccumulator.get(),long,the current value
java.util.concurrent.atomic.LongAccumulator.reset(),void,
java.util.concurrent.atomic.LongAccumulator.getThenReset(),long,the value before reset
java.util.concurrent.atomic.LongAccumulator.toString(),String,the String representation of the current value
java.util.concurrent.atomic.LongAccumulator.longValue(),long,the current value
java.util.concurrent.atomic.LongAccumulator.intValue(),int,the numeric value represented by this object after conversion to type int.
java.util.concurrent.atomic.LongAccumulator.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.util.concurrent.atomic.LongAccumulator.doubleValue(),double,the numeric value represented by this object after conversion to type double.
java.util.concurrent.atomic.LongAdder.add(long),void,
java.util.concurrent.atomic.LongAdder.increment(),void,
java.util.concurrent.atomic.LongAdder.decrement(),void,
java.util.concurrent.atomic.LongAdder.sum(),long,the sum
java.util.concurrent.atomic.LongAdder.reset(),void,
java.util.concurrent.atomic.LongAdder.sumThenReset(),long,the sum
java.util.concurrent.atomic.LongAdder.toString(),String,the String representation of the sum()
java.util.concurrent.atomic.LongAdder.longValue(),long,the sum
java.util.concurrent.atomic.LongAdder.intValue(),int,the numeric value represented by this object after conversion to type int.
java.util.concurrent.atomic.LongAdder.floatValue(),float,the numeric value represented by this object after conversion to type float.
java.util.concurrent.atomic.LongAdder.doubleValue(),double,the numeric value represented by this object after conversion to type double.
java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread),void,
java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread(),Thread,the owner thread
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getState(),long,current state value
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setState(long),void,
"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetState(long,long)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquire(long),boolean,"true if successful. Upon success, this object has been acquired."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryRelease(long),boolean,"true if this object is now in a fully released state, so that any waiting threads may attempt to acquire; and false otherwise."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireShared(long),long,"a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(long),boolean,true if this release of shared mode may permit a waiting acquire (shared or exclusive) to succeed; and false otherwise
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isHeldExclusively(),boolean,true if synchronization is held exclusively; false otherwise
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquire(long),void,
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireInterruptibly(long),void,
"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireNanos(long,long)",boolean,true if acquired; false if timed out
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.release(long),boolean,the value returned from tryRelease(long)
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireShared(long),void,
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireSharedInterruptibly(long),void,
"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireSharedNanos(long,long)",boolean,true if acquired; false if timed out
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.releaseShared(long),boolean,the value returned from tryReleaseShared(long)
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedThreads(),boolean,true if there may be other threads waiting to acquire
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasContended(),boolean,true if there has ever been contention
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getFirstQueuedThread(),Thread,"the first (longest-waiting) thread in the queue, or null if no threads are currently queued"
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isQueued(Thread),boolean,true if the given thread is on the queue
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedPredecessors(),boolean,"true if there is a queued thread preceding the current thread, and false if the current thread is at the head of the queue or the queue is empty"
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueueLength(),int,the estimated number of threads waiting to acquire
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getSharedQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.toString(),String,"a string identifying this synchronizer, as well as its state"
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.owns(AbstractQueuedLongSynchronizer.ConditionObject),boolean,true if owned
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters(AbstractQueuedLongSynchronizer.ConditionObject),boolean,true if there are any waiting threads
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength(AbstractQueuedLongSynchronizer.ConditionObject),int,the estimated number of waiting threads
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads(AbstractQueuedLongSynchronizer.ConditionObject),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.AbstractQueuedSynchronizer.getState(),int,current state value
java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int),void,
"java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int,int)",boolean,true if successful. False return indicates that the actual value was not equal to the expected value.
java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquire(int),boolean,"true if successful. Upon success, this object has been acquired."
java.util.concurrent.locks.AbstractQueuedSynchronizer.tryRelease(int),boolean,"true if this object is now in a fully released state, so that any waiting threads may attempt to acquire; and false otherwise."
java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int),int,"a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired."
java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared(int),boolean,true if this release of shared mode may permit a waiting acquire (shared or exclusive) to succeed; and false otherwise
java.util.concurrent.locks.AbstractQueuedSynchronizer.isHeldExclusively(),boolean,true if synchronization is held exclusively; false otherwise
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int),void,
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(int),void,
"java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int,long)",boolean,true if acquired; false if timed out
java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int),boolean,the value returned from tryRelease(int)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(int),void,
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(int),void,
"java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(int,long)",boolean,true if acquired; false if timed out
java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared(int),boolean,the value returned from tryReleaseShared(int)
java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedThreads(),boolean,true if there may be other threads waiting to acquire
java.util.concurrent.locks.AbstractQueuedSynchronizer.hasContended(),boolean,true if there has ever been contention
java.util.concurrent.locks.AbstractQueuedSynchronizer.getFirstQueuedThread(),Thread,"the first (longest-waiting) thread in the queue, or null if no threads are currently queued"
java.util.concurrent.locks.AbstractQueuedSynchronizer.isQueued(Thread),boolean,true if the given thread is on the queue
java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedPredecessors(),boolean,"true if there is a queued thread preceding the current thread, and false if the current thread is at the head of the queue or the queue is empty"
java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueueLength(),int,the estimated number of threads waiting to acquire
java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.AbstractQueuedSynchronizer.getExclusiveQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.AbstractQueuedSynchronizer.getSharedQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.AbstractQueuedSynchronizer.toString(),String,"a string identifying this synchronizer, as well as its state"
java.util.concurrent.locks.AbstractQueuedSynchronizer.owns(AbstractQueuedSynchronizer.ConditionObject),boolean,true if owned
java.util.concurrent.locks.AbstractQueuedSynchronizer.hasWaiters(AbstractQueuedSynchronizer.ConditionObject),boolean,true if there are any waiting threads
java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitQueueLength(AbstractQueuedSynchronizer.ConditionObject),int,the estimated number of waiting threads
java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads(AbstractQueuedSynchronizer.ConditionObject),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.LockSupport.unpark(Thread),void,
java.util.concurrent.locks.LockSupport.park(Object),void,
"java.util.concurrent.locks.LockSupport.parkNanos(Object,long)",void,
"java.util.concurrent.locks.LockSupport.parkUntil(Object,long)",void,
java.util.concurrent.locks.LockSupport.getBlocker(Thread),Object,the blocker
java.util.concurrent.locks.LockSupport.park(),void,
java.util.concurrent.locks.LockSupport.parkNanos(long),void,
java.util.concurrent.locks.LockSupport.parkUntil(long),void,
java.util.concurrent.locks.ReentrantLock.lock(),void,
java.util.concurrent.locks.ReentrantLock.lockInterruptibly(),void,
java.util.concurrent.locks.ReentrantLock.tryLock(),boolean,"true if the lock was free and was acquired by the current thread, or the lock was already held by the current thread; and false otherwise"
"java.util.concurrent.locks.ReentrantLock.tryLock(long,TimeUnit)",boolean,
java.util.concurrent.locks.ReentrantLock.unlock(),void,
java.util.concurrent.locks.ReentrantLock.newCondition(),Condition,
java.util.concurrent.locks.ReentrantLock.getHoldCount(),int,"the number of holds on this lock by the current thread, or zero if this lock is not held by the current thread"
java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread(),boolean,true if current thread holds this lock and false otherwise
java.util.concurrent.locks.ReentrantLock.isLocked(),boolean,true if any thread holds this lock and false otherwise
java.util.concurrent.locks.ReentrantLock.isFair(),boolean,true if this lock has fairness set true
java.util.concurrent.locks.ReentrantLock.getOwner(),Thread,"the owner, or null if not owned"
java.util.concurrent.locks.ReentrantLock.hasQueuedThreads(),boolean,true if there may be other threads waiting to acquire the lock
java.util.concurrent.locks.ReentrantLock.hasQueuedThread(Thread),boolean,true if the given thread is queued waiting for this lock
java.util.concurrent.locks.ReentrantLock.getQueueLength(),int,the estimated number of threads waiting for this lock
java.util.concurrent.locks.ReentrantLock.getQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.ReentrantLock.hasWaiters(Condition),boolean,true if there are any waiting threads
java.util.concurrent.locks.ReentrantLock.getWaitQueueLength(Condition),int,the estimated number of waiting threads
java.util.concurrent.locks.ReentrantLock.getWaitingThreads(Condition),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.ReentrantLock.toString(),String,"a string identifying this lock, as well as its lock state"
java.util.concurrent.locks.ReentrantReadWriteLock.writeLock(),ReentrantReadWriteLock.WriteLock,the lock used for writing
java.util.concurrent.locks.ReentrantReadWriteLock.readLock(),ReentrantReadWriteLock.ReadLock,the lock used for reading
java.util.concurrent.locks.ReentrantReadWriteLock.isFair(),boolean,true if this lock has fairness set true
java.util.concurrent.locks.ReentrantReadWriteLock.getOwner(),Thread,"the owner, or null if not owned"
java.util.concurrent.locks.ReentrantReadWriteLock.getReadLockCount(),int,the number of read locks held
java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLocked(),boolean,true if any thread holds the write lock and false otherwise
java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLockedByCurrentThread(),boolean,true if the current thread holds the write lock and false otherwise
java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount(),int,"the number of holds on the write lock by the current thread, or zero if the write lock is not held by the current thread"
java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount(),int,"the number of holds on the read lock by the current thread, or zero if the read lock is not held by the current thread"
java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedWriterThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedReaderThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThreads(),boolean,true if there may be other threads waiting to acquire the lock
java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThread(Thread),boolean,true if the given thread is queued waiting for this lock
java.util.concurrent.locks.ReentrantReadWriteLock.getQueueLength(),int,the estimated number of threads waiting for this lock
java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedThreads(),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(Condition),boolean,true if there are any waiting threads
java.util.concurrent.locks.ReentrantReadWriteLock.getWaitQueueLength(Condition),int,the estimated number of waiting threads
java.util.concurrent.locks.ReentrantReadWriteLock.getWaitingThreads(Condition),Collection&lt;Thread&gt;,the collection of threads
java.util.concurrent.locks.ReentrantReadWriteLock.toString(),String,"a string identifying this lock, as well as its lock state"
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock(),void,
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lockInterruptibly(),void,
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock(),boolean,true if the read lock was acquired
"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock(long,TimeUnit)",boolean,
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock(),void,
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.newCondition(),Condition,A new Condition instance for this Lock instance
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.toString(),String,"a string identifying this lock, as well as its lock state"
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock(),void,
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lockInterruptibly(),void,
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock(),boolean,"true if the lock was free and was acquired by the current thread, or the write lock was already held by the current thread; and false otherwise."
"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock(long,TimeUnit)",boolean,
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock(),void,
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.newCondition(),Condition,
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.toString(),String,"a string identifying this lock, as well as its lock state"
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.isHeldByCurrentThread(),boolean,true if the current thread holds this lock and false otherwise
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.getHoldCount(),int,"the number of holds on this lock by the current thread, or zero if this lock is not held by the current thread"
java.util.concurrent.locks.StampedLock.writeLock(),long,a stamp that can be used to unlock or convert mode
java.util.concurrent.locks.StampedLock.tryWriteLock(),long,"a stamp that can be used to unlock or convert mode, or zero if the lock is not available"
"java.util.concurrent.locks.StampedLock.tryWriteLock(long,TimeUnit)",long,"a stamp that can be used to unlock or convert mode, or zero if the lock is not available"
java.util.concurrent.locks.StampedLock.writeLockInterruptibly(),long,a stamp that can be used to unlock or convert mode
java.util.concurrent.locks.StampedLock.readLock(),long,a stamp that can be used to unlock or convert mode
java.util.concurrent.locks.StampedLock.tryReadLock(),long,"a stamp that can be used to unlock or convert mode, or zero if the lock is not available"
"java.util.concurrent.locks.StampedLock.tryReadLock(long,TimeUnit)",long,"a stamp that can be used to unlock or convert mode, or zero if the lock is not available"
java.util.concurrent.locks.StampedLock.readLockInterruptibly(),long,a stamp that can be used to unlock or convert mode
java.util.concurrent.locks.StampedLock.tryOptimisticRead(),long,"a stamp, or zero if exclusively locked"
java.util.concurrent.locks.StampedLock.validate(long),boolean,true if the lock has not been exclusively acquired since issuance of the given stamp; else false
java.util.concurrent.locks.StampedLock.unlockWrite(long),void,
java.util.concurrent.locks.StampedLock.unlockRead(long),void,
java.util.concurrent.locks.StampedLock.unlock(long),void,
java.util.concurrent.locks.StampedLock.tryConvertToWriteLock(long),long,"a valid write stamp, or zero on failure"
java.util.concurrent.locks.StampedLock.tryConvertToReadLock(long),long,"a valid read stamp, or zero on failure"
java.util.concurrent.locks.StampedLock.tryConvertToOptimisticRead(long),long,"a valid optimistic read stamp, or zero on failure"
java.util.concurrent.locks.StampedLock.tryUnlockWrite(),boolean,"true if the lock was held, else false"
java.util.concurrent.locks.StampedLock.tryUnlockRead(),boolean,"true if the read lock was held, else false"
java.util.concurrent.locks.StampedLock.isWriteLocked(),boolean,true if the lock is currently held exclusively
java.util.concurrent.locks.StampedLock.isReadLocked(),boolean,true if the lock is currently held non-exclusively
java.util.concurrent.locks.StampedLock.getReadLockCount(),int,the number of read locks held
java.util.concurrent.locks.StampedLock.toString(),String,"a string identifying this lock, as well as its lock state"
java.util.concurrent.locks.StampedLock.asReadLock(),Lock,the lock
java.util.concurrent.locks.StampedLock.asWriteLock(),Lock,the lock
java.util.concurrent.locks.StampedLock.asReadWriteLock(),ReadWriteLock,the lock
java.util.jar.Attributes.get(Object),Object,"the value of the specified attribute name, or null if not found."
java.util.jar.Attributes.getValue(String),String,"the String value of the specified attribute name, or null if not found."
java.util.jar.Attributes.getValue(Attributes.Name),String,"the String value of the specified Attribute.Name, or null if not found."
"java.util.jar.Attributes.put(Object,Object)",Object,"the previous value of the attribute, or null if none"
"java.util.jar.Attributes.putValue(String,String)",String,"the previous value of the attribute, or null if none"
java.util.jar.Attributes.remove(Object),Object,"the previous value of the attribute, or null if none"
java.util.jar.Attributes.containsValue(Object),boolean,true if this Map maps one or more attribute names to the specified value
java.util.jar.Attributes.containsKey(Object),boolean,true if this Map contains the specified attribute name
"java.util.jar.Attributes.putAll(Map&lt;?,?&gt;)",void,
java.util.jar.Attributes.clear(),void,
java.util.jar.Attributes.size(),int,the number of key-value mappings in this map
java.util.jar.Attributes.isEmpty(),boolean,true if this map contains no key-value mappings
java.util.jar.Attributes.keySet(),Set&lt;Object&gt;,a set view of the keys contained in this map
java.util.jar.Attributes.values(),Collection&lt;Object&gt;,a collection view of the values contained in this map
java.util.jar.Attributes.entrySet(),"Set&lt;Map.Entry&lt;Object,Object&gt;&gt;",a set view of the mappings contained in this map
java.util.jar.Attributes.equals(Object),boolean,true if the specified Object is equal to this Map
java.util.jar.Attributes.hashCode(),int,a hash code value for this object.
java.util.jar.Attributes.clone(),Object,a clone of this instance.
java.util.jar.Attributes.Name.equals(Object),boolean,true if this attribute name is equal to the specified attribute object
java.util.jar.Attributes.Name.hashCode(),int,a hash code value for this object.
java.util.jar.Attributes.Name.toString(),String,a string representation of the object.
java.util.jar.JarEntry.getAttributes(),Attributes,"the Manifest Attributes for this entry, or null if none"
java.util.jar.JarEntry.getCertificates(),Certificate[],"the Certificate objects for this entry, or null if none."
java.util.jar.JarEntry.getCodeSigners(),CodeSigner[],"the CodeSigner objects for this entry, or null if none."
java.util.jar.JarFile.getManifest(),Manifest,"the jar file manifest, or null if none"
java.util.jar.JarFile.getJarEntry(String),JarEntry,the JarEntry for the given entry name or null if not found.
java.util.jar.JarFile.getEntry(String),ZipEntry,the ZipEntry for the given entry name or null if not found
java.util.jar.JarFile.entries(),Enumeration&lt;JarEntry&gt;,an enumeration of the ZIP file entries
java.util.jar.JarFile.stream(),Stream&lt;JarEntry&gt;,an ordered Stream of entries in this ZIP file
java.util.jar.JarFile.getInputStream(ZipEntry),InputStream,an input stream for reading the contents of the specified zip file entry
java.util.jar.JarInputStream.getManifest(),Manifest,"the Manifest for this JAR file, or null if none."
java.util.jar.JarInputStream.getNextEntry(),ZipEntry,"the next ZIP file entry, or null if there are no more entries"
java.util.jar.JarInputStream.getNextJarEntry(),JarEntry,"the next JAR file entry, or null if there are no more entries"
"java.util.jar.JarInputStream.read(byte[],int,int)",int,"the actual number of bytes read, or -1 if the end of the entry is reached"
java.util.jar.JarInputStream.createZipEntry(String),ZipEntry,the JarEntry object just created
java.util.jar.JarOutputStream.putNextEntry(ZipEntry),void,
java.util.jar.Manifest.getMainAttributes(),Attributes,the main Attributes for the Manifest
java.util.jar.Manifest.getEntries(),"Map&lt;String,Attributes&gt;",a Map of the entries contained in this Manifest
java.util.jar.Manifest.getAttributes(String),Attributes,the Attributes for the specified entry name
java.util.jar.Manifest.clear(),void,
java.util.jar.Manifest.write(OutputStream),void,
java.util.jar.Manifest.read(InputStream),void,
java.util.jar.Manifest.equals(Object),boolean,true if the specified Object is also a Manifest and has the same main Attributes and entries
java.util.jar.Manifest.hashCode(),int,a hash code value for this object.
java.util.jar.Manifest.clone(),Object,a shallow copy of this Manifest
java.util.jar.Pack200.newPacker(),Pack200.Packer,
java.util.jar.Pack200.newUnpacker(),Pack200.Unpacker,
java.util.logging.ConsoleHandler.publish(LogRecord),void,
java.util.logging.ConsoleHandler.close(),void,
"java.util.logging.ErrorManager.error(String,Exception,int)",void,
java.util.logging.FileHandler.publish(LogRecord),void,
java.util.logging.FileHandler.close(),void,
java.util.logging.Formatter.format(LogRecord),abstractString,the formatted log record
java.util.logging.Formatter.getHead(Handler),String,header string
java.util.logging.Formatter.getTail(Handler),String,tail string
java.util.logging.Formatter.formatMessage(LogRecord),String,
java.util.logging.Handler.publish(LogRecord),abstractvoid,
java.util.logging.Handler.flush(),abstractvoid,
java.util.logging.Handler.close(),abstractvoid,
java.util.logging.Handler.setFormatter(Formatter),void,
java.util.logging.Handler.getFormatter(),Formatter,the Formatter (may be null).
java.util.logging.Handler.setEncoding(String),void,
java.util.logging.Handler.getEncoding(),String,"The encoding name. May be null, which indicates the default encoding should be used."
java.util.logging.Handler.setFilter(Filter),void,
java.util.logging.Handler.getFilter(),Filter,a Filter object (may be null)
java.util.logging.Handler.setErrorManager(ErrorManager),void,
java.util.logging.Handler.getErrorManager(),ErrorManager,the ErrorManager for this Handler
"java.util.logging.Handler.reportError(String,Exception,int)",void,
java.util.logging.Handler.setLevel(Level),void,
java.util.logging.Handler.getLevel(),Level,the level of messages being logged.
java.util.logging.Handler.isLoggable(LogRecord),boolean,true if the LogRecord would be logged.
java.util.logging.Level.getResourceBundleName(),String,localization resource bundle name
java.util.logging.Level.getName(),String,non-localized name
java.util.logging.Level.getLocalizedName(),String,localized name
java.util.logging.Level.toString(),String,"the non-localized name of the Level, for example ""INFO""."
java.util.logging.Level.intValue(),int,the integer value for this level.
java.util.logging.Level.parse(String),Level,
java.util.logging.Level.equals(Object),boolean,true if and only if the two objects have the same level value.
java.util.logging.Level.hashCode(),int,a hashcode based on the level value
java.util.logging.Logger.getGlobal(),Logger,global logger object
java.util.logging.Logger.getLogger(String),Logger,a suitable Logger
"java.util.logging.Logger.getLogger(String,String)",Logger,a suitable Logger
java.util.logging.Logger.getAnonymousLogger(),Logger,a newly created private Logger
java.util.logging.Logger.getAnonymousLogger(String),Logger,a newly created private Logger
java.util.logging.Logger.getResourceBundle(),ResourceBundle,localization bundle (may be null)
java.util.logging.Logger.getResourceBundleName(),String,localization bundle name (may be null)
java.util.logging.Logger.setFilter(Filter),void,
java.util.logging.Logger.getFilter(),Filter,a filter object (may be null)
java.util.logging.Logger.log(LogRecord),void,
"java.util.logging.Logger.log(Level,String)",void,
"java.util.logging.Logger.log(Level,Supplier&lt;String&gt;)",void,
"java.util.logging.Logger.log(Level,String,Object)",void,
"java.util.logging.Logger.log(Level,String,Object[])",void,
"java.util.logging.Logger.log(Level,String,Throwable)",void,
"java.util.logging.Logger.log(Level,Throwable,Supplier&lt;String&gt;)",void,
"java.util.logging.Logger.logp(Level,String,String,String)",void,
"java.util.logging.Logger.logp(Level,String,String,Supplier&lt;String&gt;)",void,
"java.util.logging.Logger.logp(Level,String,String,String,Object)",void,
"java.util.logging.Logger.logp(Level,String,String,String,Object[])",void,
"java.util.logging.Logger.logp(Level,String,String,String,Throwable)",void,
"java.util.logging.Logger.logp(Level,String,String,Throwable,Supplier&lt;String&gt;)",void,
"java.util.logging.Logger.logrb(Level,String,String,String,String)",void,
"java.util.logging.Logger.logrb(Level,String,String,String,String,Object)",void,
"java.util.logging.Logger.logrb(Level,String,String,String,String,Object[])",void,
"java.util.logging.Logger.logrb(Level,String,String,ResourceBundle,String,Object...)",void,
"java.util.logging.Logger.logrb(Level,String,String,String,String,Throwable)",void,
"java.util.logging.Logger.logrb(Level,String,String,ResourceBundle,String,Throwable)",void,
"java.util.logging.Logger.entering(String,String)",void,
"java.util.logging.Logger.entering(String,String,Object)",void,
"java.util.logging.Logger.entering(String,String,Object[])",void,
"java.util.logging.Logger.exiting(String,String)",void,
"java.util.logging.Logger.exiting(String,String,Object)",void,
"java.util.logging.Logger.throwing(String,String,Throwable)",void,
java.util.logging.Logger.severe(String),void,
java.util.logging.Logger.warning(String),void,
java.util.logging.Logger.info(String),void,
java.util.logging.Logger.config(String),void,
java.util.logging.Logger.fine(String),void,
java.util.logging.Logger.finer(String),void,
java.util.logging.Logger.finest(String),void,
java.util.logging.Logger.severe(Supplier&lt;String&gt;),void,
java.util.logging.Logger.warning(Supplier&lt;String&gt;),void,
java.util.logging.Logger.info(Supplier&lt;String&gt;),void,
java.util.logging.Logger.config(Supplier&lt;String&gt;),void,
java.util.logging.Logger.fine(Supplier&lt;String&gt;),void,
java.util.logging.Logger.finer(Supplier&lt;String&gt;),void,
java.util.logging.Logger.finest(Supplier&lt;String&gt;),void,
java.util.logging.Logger.setLevel(Level),void,
java.util.logging.Logger.getLevel(),Level,this Logger's level
java.util.logging.Logger.isLoggable(Level),boolean,true if the given message level is currently being logged.
java.util.logging.Logger.getName(),String,logger name. Will be null for anonymous Loggers.
java.util.logging.Logger.addHandler(Handler),void,
java.util.logging.Logger.removeHandler(Handler),void,
java.util.logging.Logger.getHandlers(),Handler[],an array of all registered Handlers
java.util.logging.Logger.setUseParentHandlers(boolean),void,
java.util.logging.Logger.getUseParentHandlers(),boolean,true if output is to be sent to the logger's parent
java.util.logging.Logger.setResourceBundle(ResourceBundle),void,
java.util.logging.Logger.getParent(),Logger,nearest existing parent Logger
java.util.logging.Logger.setParent(Logger),void,
java.util.logging.LogManager.getLogManager(),LogManager,the global LogManager object
java.util.logging.LogManager.addPropertyChangeListener(PropertyChangeListener),void,
java.util.logging.LogManager.removePropertyChangeListener(PropertyChangeListener),void,
java.util.logging.LogManager.addLogger(Logger),boolean,"true if the argument logger was registered successfully, false if a logger of that name already exists."
java.util.logging.LogManager.getLogger(String),Logger,matching logger or null if none is found
java.util.logging.LogManager.getLoggerNames(),Enumeration&lt;String&gt;,enumeration of logger name strings
java.util.logging.LogManager.readConfiguration(),void,
java.util.logging.LogManager.reset(),void,
java.util.logging.LogManager.readConfiguration(InputStream),void,
java.util.logging.LogManager.getProperty(String),String,property value
java.util.logging.LogManager.checkAccess(),void,
java.util.logging.LogManager.getLoggingMXBean(),LoggingMXBean,a LoggingMXBean object.
java.util.logging.LogRecord.getLoggerName(),String,source logger name (may be null)
java.util.logging.LogRecord.setLoggerName(String),void,
java.util.logging.LogRecord.getResourceBundle(),ResourceBundle,the localization resource bundle
java.util.logging.LogRecord.setResourceBundle(ResourceBundle),void,
java.util.logging.LogRecord.getResourceBundleName(),String,the localization resource bundle name
java.util.logging.LogRecord.setResourceBundleName(String),void,
java.util.logging.LogRecord.getLevel(),Level,the logging message level
java.util.logging.LogRecord.setLevel(Level),void,
java.util.logging.LogRecord.getSequenceNumber(),long,the sequence number
java.util.logging.LogRecord.setSequenceNumber(long),void,
java.util.logging.LogRecord.getSourceClassName(),String,the source class name
java.util.logging.LogRecord.setSourceClassName(String),void,
java.util.logging.LogRecord.getSourceMethodName(),String,the source method name
java.util.logging.LogRecord.setSourceMethodName(String),void,
java.util.logging.LogRecord.getMessage(),String,the raw message string
java.util.logging.LogRecord.setMessage(String),void,
java.util.logging.LogRecord.getParameters(),Object[],the log message parameters. May be null if there are no parameters.
java.util.logging.LogRecord.setParameters(Object[]),void,
java.util.logging.LogRecord.getThreadID(),int,thread ID
java.util.logging.LogRecord.setThreadID(int),void,
java.util.logging.LogRecord.getMillis(),long,event time in millis since 1970
java.util.logging.LogRecord.setMillis(long),void,
java.util.logging.LogRecord.getThrown(),Throwable,a throwable
java.util.logging.LogRecord.setThrown(Throwable),void,
java.util.logging.MemoryHandler.publish(LogRecord),void,
java.util.logging.MemoryHandler.push(),void,
java.util.logging.MemoryHandler.flush(),void,
java.util.logging.MemoryHandler.close(),void,
java.util.logging.MemoryHandler.setPushLevel(Level),void,
java.util.logging.MemoryHandler.getPushLevel(),Level,the value of the pushLevel
java.util.logging.MemoryHandler.isLoggable(LogRecord),boolean,true if the LogRecord would be logged.
java.util.logging.SimpleFormatter.format(LogRecord),String,
java.util.logging.SocketHandler.close(),void,
java.util.logging.SocketHandler.publish(LogRecord),void,
java.util.logging.StreamHandler.setOutputStream(OutputStream),void,
java.util.logging.StreamHandler.setEncoding(String),void,
java.util.logging.StreamHandler.publish(LogRecord),void,
java.util.logging.StreamHandler.isLoggable(LogRecord),boolean,true if the LogRecord would be logged.
java.util.logging.StreamHandler.flush(),void,
java.util.logging.StreamHandler.close(),void,
java.util.logging.XMLFormatter.format(LogRecord),String,a formatted log record
java.util.logging.XMLFormatter.getHead(Handler),String,a valid XML string
java.util.logging.XMLFormatter.getTail(Handler),String,a valid XML string
"java.util.prefs.AbstractPreferences.put(String,String)",void,
"java.util.prefs.AbstractPreferences.get(String,String)",String,"the value associated with key, or def if no value is associated with key."
java.util.prefs.AbstractPreferences.remove(String),void,
java.util.prefs.AbstractPreferences.clear(),void,
"java.util.prefs.AbstractPreferences.putInt(String,int)",void,
"java.util.prefs.AbstractPreferences.getInt(String,int)",int,"the int value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as an int."
"java.util.prefs.AbstractPreferences.putLong(String,long)",void,
"java.util.prefs.AbstractPreferences.getLong(String,long)",long,"the long value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a long."
"java.util.prefs.AbstractPreferences.putBoolean(String,boolean)",void,
"java.util.prefs.AbstractPreferences.getBoolean(String,boolean)",boolean,"the boolean value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a boolean."
"java.util.prefs.AbstractPreferences.putFloat(String,float)",void,
"java.util.prefs.AbstractPreferences.getFloat(String,float)",float,"the float value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a float."
"java.util.prefs.AbstractPreferences.putDouble(String,double)",void,
"java.util.prefs.AbstractPreferences.getDouble(String,double)",double,"the double value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a double."
"java.util.prefs.AbstractPreferences.putByteArray(String,byte[])",void,
"java.util.prefs.AbstractPreferences.getByteArray(String,byte[])",byte[],"the byte array value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a byte array."
java.util.prefs.AbstractPreferences.keys(),String[],an array of the keys that have an associated value in this preference node.
java.util.prefs.AbstractPreferences.childrenNames(),String[],the names of the children of this preference node.
java.util.prefs.AbstractPreferences.cachedChildren(),AbstractPreferences[],all known unremoved children of this node.
java.util.prefs.AbstractPreferences.parent(),Preferences,the parent of this preference node.
java.util.prefs.AbstractPreferences.node(String),Preferences,the specified preference node.
java.util.prefs.AbstractPreferences.nodeExists(String),boolean,true if the specified node exists.
java.util.prefs.AbstractPreferences.removeNode(),void,
java.util.prefs.AbstractPreferences.name(),String,"this preference node's name, relative to its parent."
java.util.prefs.AbstractPreferences.absolutePath(),String,this preference node's absolute path name.
java.util.prefs.AbstractPreferences.isUserNode(),boolean,"true if this preference node is in the user preference tree, false if it's in the system preference tree."
java.util.prefs.AbstractPreferences.addPreferenceChangeListener(PreferenceChangeListener),void,
java.util.prefs.AbstractPreferences.removePreferenceChangeListener(PreferenceChangeListener),void,
java.util.prefs.AbstractPreferences.addNodeChangeListener(NodeChangeListener),void,
java.util.prefs.AbstractPreferences.removeNodeChangeListener(NodeChangeListener),void,
"java.util.prefs.AbstractPreferences.putSpi(String,String)",abstractvoid,
java.util.prefs.AbstractPreferences.getSpi(String),abstractString,"the value associated with the specified key at this preference node, or null if there is no association for this key, or the association cannot be determined at this time."
java.util.prefs.AbstractPreferences.removeSpi(String),abstractvoid,
java.util.prefs.AbstractPreferences.removeNodeSpi(),abstractvoid,
java.util.prefs.AbstractPreferences.keysSpi(),abstractString[],an array of the keys that have an associated value in this preference node.
java.util.prefs.AbstractPreferences.childrenNamesSpi(),abstractString[],an array containing the names of the children of this preference node.
java.util.prefs.AbstractPreferences.getChild(String),AbstractPreferences,"the named child if it exists, or null if it does not."
java.util.prefs.AbstractPreferences.childSpi(String),abstractAbstractPreferences,The named child node.
java.util.prefs.AbstractPreferences.toString(),String,a string representation of the object.
java.util.prefs.AbstractPreferences.sync(),void,
java.util.prefs.AbstractPreferences.syncSpi(),abstractvoid,
java.util.prefs.AbstractPreferences.flush(),void,
java.util.prefs.AbstractPreferences.flushSpi(),abstractvoid,
java.util.prefs.AbstractPreferences.isRemoved(),boolean,true iff this node (or an ancestor) has been removed with the removeNode() method.
java.util.prefs.AbstractPreferences.exportNode(OutputStream),void,
java.util.prefs.AbstractPreferences.exportSubtree(OutputStream),void,
java.util.prefs.NodeChangeEvent.getParent(),Preferences,The parent Preferences node whose child was added or removed
java.util.prefs.NodeChangeEvent.getChild(),Preferences,The node that was added or removed.
java.util.prefs.PreferenceChangeEvent.getNode(),Preferences,The preference node that emitted the event.
java.util.prefs.PreferenceChangeEvent.getKey(),String,The key of the preference that was changed.
java.util.prefs.PreferenceChangeEvent.getNewValue(),String,"The new value for the preference, or null if the preference was removed."
java.util.prefs.Preferences.userNodeForPackage(Class&lt;?&gt;),Preferences,the user preference node associated with the package of which c is a member.
java.util.prefs.Preferences.systemNodeForPackage(Class&lt;?&gt;),Preferences,the system preference node associated with the package of which c is a member.
java.util.prefs.Preferences.userRoot(),Preferences,the root preference node for the calling user.
java.util.prefs.Preferences.systemRoot(),Preferences,the root preference node for the system.
"java.util.prefs.Preferences.put(String,String)",abstractvoid,
"java.util.prefs.Preferences.get(String,String)",abstractString,"the value associated with key, or def if no value is associated with key, or the backing store is inaccessible."
java.util.prefs.Preferences.remove(String),abstractvoid,
java.util.prefs.Preferences.clear(),abstractvoid,
"java.util.prefs.Preferences.putInt(String,int)",abstractvoid,
"java.util.prefs.Preferences.getInt(String,int)",abstractint,"the int value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as an int."
"java.util.prefs.Preferences.putLong(String,long)",abstractvoid,
"java.util.prefs.Preferences.getLong(String,long)",abstractlong,"the long value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a long."
"java.util.prefs.Preferences.putBoolean(String,boolean)",abstractvoid,
"java.util.prefs.Preferences.getBoolean(String,boolean)",abstractboolean,"the boolean value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a boolean."
"java.util.prefs.Preferences.putFloat(String,float)",abstractvoid,
"java.util.prefs.Preferences.getFloat(String,float)",abstractfloat,"the float value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a float."
"java.util.prefs.Preferences.putDouble(String,double)",abstractvoid,
"java.util.prefs.Preferences.getDouble(String,double)",abstractdouble,"the double value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a double."
"java.util.prefs.Preferences.putByteArray(String,byte[])",abstractvoid,
"java.util.prefs.Preferences.getByteArray(String,byte[])",abstractbyte[],"the byte array value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a byte array."
java.util.prefs.Preferences.keys(),abstractString[],an array of the keys that have an associated value in this preference node.
java.util.prefs.Preferences.childrenNames(),abstractString[],the names of the children of this preference node.
java.util.prefs.Preferences.parent(),abstractPreferences,the parent of this preference node.
java.util.prefs.Preferences.node(String),abstractPreferences,the specified preference node.
java.util.prefs.Preferences.nodeExists(String),abstractboolean,true if the specified node exists.
java.util.prefs.Preferences.removeNode(),abstractvoid,
java.util.prefs.Preferences.name(),abstractString,"this preference node's name, relative to its parent."
java.util.prefs.Preferences.absolutePath(),abstractString,this preference node's absolute path name.
java.util.prefs.Preferences.isUserNode(),abstractboolean,"true if this preference node is in the user preference tree, false if it's in the system preference tree."
java.util.prefs.Preferences.toString(),abstractString,a string representation of the object.
java.util.prefs.Preferences.flush(),abstractvoid,
java.util.prefs.Preferences.sync(),abstractvoid,
java.util.prefs.Preferences.addPreferenceChangeListener(PreferenceChangeListener),abstractvoid,
java.util.prefs.Preferences.removePreferenceChangeListener(PreferenceChangeListener),abstractvoid,
java.util.prefs.Preferences.addNodeChangeListener(NodeChangeListener),abstractvoid,
java.util.prefs.Preferences.removeNodeChangeListener(NodeChangeListener),abstractvoid,
java.util.prefs.Preferences.exportNode(OutputStream),abstractvoid,
java.util.prefs.Preferences.exportSubtree(OutputStream),abstractvoid,
java.util.prefs.Preferences.importPreferences(InputStream),void,
java.util.regex.Matcher.pattern(),Pattern,The pattern for which this matcher was created
java.util.regex.Matcher.toMatchResult(),MatchResult,a MatchResult with the state of this matcher
java.util.regex.Matcher.usePattern(Pattern),Matcher,This matcher
java.util.regex.Matcher.reset(),Matcher,This matcher
java.util.regex.Matcher.reset(CharSequence),Matcher,This matcher
java.util.regex.Matcher.start(),int,The index of the first character matched
java.util.regex.Matcher.start(int),int,"The index of the first character captured by the group, or -1 if the match was successful but the group itself did not match anything"
java.util.regex.Matcher.start(String),int,"The index of the first character captured by the group, or -1 if the match was successful but the group itself did not match anything"
java.util.regex.Matcher.end(),int,The offset after the last character matched
java.util.regex.Matcher.end(int),int,"The offset after the last character captured by the group, or -1 if the match was successful but the group itself did not match anything"
java.util.regex.Matcher.end(String),int,"The offset after the last character captured by the group, or -1 if the match was successful but the group itself did not match anything"
java.util.regex.Matcher.group(),String,"The (possibly empty) subsequence matched by the previous match, in string form"
java.util.regex.Matcher.group(int),String,"The (possibly empty) subsequence captured by the group during the previous match, or null if the group failed to match part of the input"
java.util.regex.Matcher.group(String),String,"The (possibly empty) subsequence captured by the named group during the previous match, or null if the group failed to match part of the input"
java.util.regex.Matcher.groupCount(),int,The number of capturing groups in this matcher's pattern
java.util.regex.Matcher.matches(),boolean,"true if, and only if, the entire region sequence matches this matcher's pattern"
java.util.regex.Matcher.find(),boolean,"true if, and only if, a subsequence of the input sequence matches this matcher's pattern"
java.util.regex.Matcher.find(int),boolean,"true if, and only if, a subsequence of the input sequence starting at the given index matches this matcher's pattern"
java.util.regex.Matcher.lookingAt(),boolean,"true if, and only if, a prefix of the input sequence matches this matcher's pattern"
java.util.regex.Matcher.quoteReplacement(String),String,A literal string replacement
"java.util.regex.Matcher.appendReplacement(StringBuffer,String)",Matcher,
java.util.regex.Matcher.appendTail(StringBuffer),StringBuffer,The target string buffer
java.util.regex.Matcher.replaceAll(String),String,"The string constructed by replacing each matching subsequence by the replacement string, substituting captured subsequences as needed"
java.util.regex.Matcher.replaceFirst(String),String,"The string constructed by replacing the first matching subsequence by the replacement string, substituting captured subsequences as needed"
"java.util.regex.Matcher.region(int,int)",Matcher,this matcher
java.util.regex.Matcher.regionStart(),int,The starting point of this matcher's region
java.util.regex.Matcher.regionEnd(),int,the ending point of this matcher's region
java.util.regex.Matcher.hasTransparentBounds(),boolean,"true iff this matcher is using transparent bounds, false otherwise."
java.util.regex.Matcher.useTransparentBounds(boolean),Matcher,this matcher
java.util.regex.Matcher.hasAnchoringBounds(),boolean,"true iff this matcher is using anchoring bounds, false otherwise."
java.util.regex.Matcher.useAnchoringBounds(boolean),Matcher,this matcher
java.util.regex.Matcher.toString(),String,The string representation of this matcher
java.util.regex.Matcher.hitEnd(),boolean,true iff the end of input was hit in the last match; false otherwise
java.util.regex.Matcher.requireEnd(),boolean,true iff more input could change a positive match into a negative one.
java.util.regex.Pattern.compile(String),Pattern,the given regular expression compiled into a pattern
"java.util.regex.Pattern.compile(String,int)",Pattern,the given regular expression compiled into a pattern with the given flags
java.util.regex.Pattern.pattern(),String,The source of this pattern
java.util.regex.Pattern.toString(),String,The string representation of this pattern
java.util.regex.Pattern.matcher(CharSequence),Matcher,A new matcher for this pattern
java.util.regex.Pattern.flags(),int,The match flags specified when this pattern was compiled
"java.util.regex.Pattern.matches(String,CharSequence)",boolean,whether or not the regular expression matches on the input
"java.util.regex.Pattern.split(CharSequence,int)",String[],The array of strings computed by splitting the input around matches of this pattern
java.util.regex.Pattern.split(CharSequence),String[],The array of strings computed by splitting the input around matches of this pattern
java.util.regex.Pattern.quote(String),String,A literal string replacement
java.util.regex.Pattern.asPredicate(),Predicate&lt;String&gt;,The predicate which can be used for matching on a string
java.util.regex.Pattern.splitAsStream(CharSequence),Stream&lt;String&gt;,The stream of strings computed by splitting the input around matches of this pattern
java.util.spi.CalendarDataProvider.getFirstDayOfWeek(Locale),abstractint,"the first day of a week; one of Calendar.SUNDAY .. Calendar.SATURDAY, or 0 if the value isn't available for the locale"
java.util.spi.CalendarDataProvider.getMinimalDaysInFirstWeek(Locale),abstractint,"the minimal number of days of the first week, or 0 if the value isn't available for the locale"
"java.util.spi.CalendarNameProvider.getDisplayName(String,int,int,int,Locale)",abstractString,"the string representation of the field value, or null if the string representation is not applicable or the given calendar type is unknown"
"java.util.spi.CalendarNameProvider.getDisplayNames(String,int,int,Locale)","abstractMap&lt;String,Integer&gt;","a Map containing all display names of field in style and locale and their field values, or null if no display names are defined for field"
"java.util.spi.CurrencyNameProvider.getSymbol(String,Locale)",abstractString,"the symbol of the given currency code for the specified locale, or null if the symbol is not available for the locale"
"java.util.spi.CurrencyNameProvider.getDisplayName(String,Locale)",String,"the name for the currency that is appropriate for display to the user, or null if the name is not available for the locale"
"java.util.spi.LocaleNameProvider.getDisplayLanguage(String,Locale)",abstractString,"the name of the given language code for the specified locale, or null if it's not available."
"java.util.spi.LocaleNameProvider.getDisplayScript(String,Locale)",String,"the name of the given script code for the specified locale, or null if it's not available."
"java.util.spi.LocaleNameProvider.getDisplayCountry(String,Locale)",abstractString,"the name of the given country code for the specified locale, or null if it's not available."
"java.util.spi.LocaleNameProvider.getDisplayVariant(String,Locale)",abstractString,"the name of the given variant string for the specified locale, or null if it's not available."
java.util.spi.LocaleServiceProvider.getAvailableLocales(),abstractLocale[],An array of all locales for which this locale service provider can provide localized objects or names.
java.util.spi.LocaleServiceProvider.isSupportedLocale(Locale),boolean,true if the given locale is supported by this provider; false otherwise.
"java.util.spi.TimeZoneNameProvider.getDisplayName(String,boolean,int,Locale)",abstractString,"the human-readable name of the given time zone in the given locale, or null if it's not available."
"java.util.spi.TimeZoneNameProvider.getGenericDisplayName(String,int,Locale)",String,"the human-readable generic name of the given time zone in the given locale, or null if it's not available."
java.util.stream.Collectors.toCollection(Supplier&lt;C&gt;),"&lt;T,C extends Collection&lt;T&gt;&gt;Collector&lt;T,?,C&gt;","a Collector which collects all the input elements into a Collection, in encounter order"
java.util.stream.Collectors.toList(),"&lt;T&gt;Collector&lt;T,?,List&lt;T&gt;&gt;","a Collector which collects all the input elements into a List, in encounter order"
java.util.stream.Collectors.toSet(),"&lt;T&gt;Collector&lt;T,?,Set&lt;T&gt;&gt;",a Collector which collects all the input elements into a Set
java.util.stream.Collectors.joining(),"Collector&lt;CharSequence,?,String&gt;","a Collector that concatenates the input elements into a String, in encounter order"
java.util.stream.Collectors.joining(CharSequence),"Collector&lt;CharSequence,?,String&gt;","A Collector which concatenates CharSequence elements, separated by the specified delimiter, in encounter order"
"java.util.stream.Collectors.joining(CharSequence,CharSequence,CharSequence)","Collector&lt;CharSequence,?,String&gt;","A Collector which concatenates CharSequence elements, separated by the specified delimiter, in encounter order"
"java.util.stream.Collectors.mapping(Function&lt;?,?,Collector&lt;?,A,R&gt;)","&lt;T,U,A,R&gt;Collector&lt;T,?,R&gt;",a collector which applies the mapping function to the input elements and provides the mapped results to the downstream collector
"java.util.stream.Collectors.collectingAndThen(Collector&lt;T,A,R&gt;,Function&lt;R,RR&gt;)","&lt;T,A,R,RR&gt;Collector&lt;T,A,RR&gt;","a collector which performs the action of the downstream collector, followed by an additional finishing step"
java.util.stream.Collectors.counting(),"&lt;T&gt;Collector&lt;T,?,Long&gt;",a Collector that counts the input elements
java.util.stream.Collectors.minBy(Comparator&lt;?),"&lt;T&gt;Collector&lt;T,?,Optional&lt;T&gt;&gt;",a Collector that produces the minimal value
java.util.stream.Collectors.maxBy(Comparator&lt;?),"&lt;T&gt;Collector&lt;T,?,Optional&lt;T&gt;&gt;",a Collector that produces the maximal value
java.util.stream.Collectors.summingInt(ToIntFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,Integer&gt;",a Collector that produces the sum of a derived property
java.util.stream.Collectors.summingLong(ToLongFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,Long&gt;",a Collector that produces the sum of a derived property
java.util.stream.Collectors.summingDouble(ToDoubleFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,Double&gt;",a Collector that produces the sum of a derived property
java.util.stream.Collectors.averagingInt(ToIntFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,Double&gt;",a Collector that produces the sum of a derived property
java.util.stream.Collectors.averagingLong(ToLongFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,Double&gt;",a Collector that produces the sum of a derived property
java.util.stream.Collectors.averagingDouble(ToDoubleFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,Double&gt;",a Collector that produces the sum of a derived property
"java.util.stream.Collectors.reducing(T,BinaryOperator&lt;T&gt;)","&lt;T&gt;Collector&lt;T,?,T&gt;",a Collector which implements the reduction operation
java.util.stream.Collectors.reducing(BinaryOperator&lt;T&gt;),"&lt;T&gt;Collector&lt;T,?,Optional&lt;T&gt;&gt;",a Collector which implements the reduction operation
"java.util.stream.Collectors.reducing(U,Function&lt;?,?,BinaryOperator&lt;U&gt;)","&lt;T,U&gt;Collector&lt;T,?,U&gt;",a Collector implementing the map-reduce operation
"java.util.stream.Collectors.groupingBy(Function&lt;?,?)","&lt;T,K&gt;Collector&lt;T,?,Map&lt;K,List&lt;T&gt;&gt;&gt;",a Collector implementing the group-by operation
"java.util.stream.Collectors.groupingBy(Function&lt;?,?,Collector&lt;?,A,D&gt;)","&lt;T,K,A,D&gt;Collector&lt;T,?,Map&lt;K,D&gt;&gt;",a Collector implementing the cascaded group-by operation
"java.util.stream.Collectors.groupingBy(Function&lt;?,?,Supplier&lt;M&gt;,Collector&lt;?,A,D&gt;)","&lt;T,K,D,A,M extends Map&lt;K,D&gt;&gt;Collector&lt;T,?,M&gt;",a Collector implementing the cascaded group-by operation
"java.util.stream.Collectors.groupingByConcurrent(Function&lt;?,?)","&lt;T,K&gt;Collector&lt;T,?,ConcurrentMap&lt;K,List&lt;T&gt;&gt;&gt;","a concurrent, unordered Collector implementing the group-by operation"
"java.util.stream.Collectors.groupingByConcurrent(Function&lt;?,?,Collector&lt;?,A,D&gt;)","&lt;T,K,A,D&gt;Collector&lt;T,?,ConcurrentMap&lt;K,D&gt;&gt;","a concurrent, unordered Collector implementing the cascaded group-by operation"
"java.util.stream.Collectors.groupingByConcurrent(Function&lt;?,?,Supplier&lt;M&gt;,Collector&lt;?,A,D&gt;)","&lt;T,K,A,D,M extends ConcurrentMap&lt;K,D&gt;&gt;Collector&lt;T,?,M&gt;","a concurrent, unordered Collector implementing the cascaded group-by operation"
java.util.stream.Collectors.partitioningBy(Predicate&lt;?),"&lt;T&gt;Collector&lt;T,?,Map&lt;Boolean,List&lt;T&gt;&gt;&gt;",a Collector implementing the partitioning operation
"java.util.stream.Collectors.partitioningBy(Predicate&lt;?,Collector&lt;?,A,D&gt;)","&lt;T,D,A&gt;Collector&lt;T,?,Map&lt;Boolean,D&gt;&gt;",a Collector implementing the cascaded partitioning operation
"java.util.stream.Collectors.toMap(Function&lt;?,?,Function&lt;?,?)","&lt;T,K,U&gt;Collector&lt;T,?,Map&lt;K,U&gt;&gt;",a Collector which collects elements into a Map whose keys and values are the result of applying mapping functions to the input elements
"java.util.stream.Collectors.toMap(Function&lt;?,?,Function&lt;?,?,BinaryOperator&lt;U&gt;)","&lt;T,K,U&gt;Collector&lt;T,?,Map&lt;K,U&gt;&gt;","a Collector which collects elements into a Map whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function"
"java.util.stream.Collectors.toMap(Function&lt;?,?,Function&lt;?,?,BinaryOperator&lt;U&gt;,Supplier&lt;M&gt;)","&lt;T,K,U,M extends Map&lt;K,U&gt;&gt;Collector&lt;T,?,M&gt;","a Collector which collects elements into a Map whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function"
"java.util.stream.Collectors.toConcurrentMap(Function&lt;?,?,Function&lt;?,?)","&lt;T,K,U&gt;Collector&lt;T,?,ConcurrentMap&lt;K,U&gt;&gt;","a concurrent, unordered Collector which collects elements into a ConcurrentMap whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to the input elements"
"java.util.stream.Collectors.toConcurrentMap(Function&lt;?,?,Function&lt;?,?,BinaryOperator&lt;U&gt;)","&lt;T,K,U&gt;Collector&lt;T,?,ConcurrentMap&lt;K,U&gt;&gt;","a concurrent, unordered Collector which collects elements into a ConcurrentMap whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function"
"java.util.stream.Collectors.toConcurrentMap(Function&lt;?,?,Function&lt;?,?,BinaryOperator&lt;U&gt;,Supplier&lt;M&gt;)","&lt;T,K,U,M extends ConcurrentMap&lt;K,U&gt;&gt;Collector&lt;T,?,M&gt;","a concurrent, unordered Collector which collects elements into a ConcurrentMap whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function"
java.util.stream.Collectors.summarizingInt(ToIntFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,IntSummaryStatistics&gt;",a Collector implementing the summary-statistics reduction
java.util.stream.Collectors.summarizingLong(ToLongFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,LongSummaryStatistics&gt;",a Collector implementing the summary-statistics reduction
java.util.stream.Collectors.summarizingDouble(ToDoubleFunction&lt;?),"&lt;T&gt;Collector&lt;T,?,DoubleSummaryStatistics&gt;",a Collector implementing the summary-statistics reduction
"java.util.stream.StreamSupport.stream(Spliterator&lt;T&gt;,boolean)",&lt;T&gt;Stream&lt;T&gt;,a new sequential or parallel Stream
"java.util.stream.StreamSupport.stream(Supplier&lt;?,int,boolean)",&lt;T&gt;Stream&lt;T&gt;,a new sequential or parallel Stream
"java.util.stream.StreamSupport.intStream(Spliterator.OfInt,boolean)",IntStream,a new sequential or parallel IntStream
"java.util.stream.StreamSupport.intStream(Supplier&lt;?,int,boolean)",IntStream,a new sequential or parallel IntStream
"java.util.stream.StreamSupport.longStream(Spliterator.OfLong,boolean)",LongStream,a new sequential or parallel LongStream
"java.util.stream.StreamSupport.longStream(Supplier&lt;?,int,boolean)",LongStream,a new sequential or parallel LongStream
"java.util.stream.StreamSupport.doubleStream(Spliterator.OfDouble,boolean)",DoubleStream,a new sequential or parallel DoubleStream
"java.util.stream.StreamSupport.doubleStream(Supplier&lt;?,int,boolean)",DoubleStream,a new sequential or parallel DoubleStream
java.util.zip.Adler32.update(int),void,
"java.util.zip.Adler32.update(byte[],int,int)",void,
java.util.zip.Adler32.update(byte[]),void,
java.util.zip.Adler32.update(ByteBuffer),void,
java.util.zip.Adler32.reset(),void,
java.util.zip.Adler32.getValue(),long,the current checksum value
java.util.zip.CheckedInputStream.read(),int,"the byte read, or -1 if the end of the stream is reached."
"java.util.zip.CheckedInputStream.read(byte[],int,int)",int,"the actual number of bytes read, or -1 if the end of the stream is reached."
java.util.zip.CheckedInputStream.skip(long),long,the actual number of bytes skipped
java.util.zip.CheckedInputStream.getChecksum(),Checksum,the Checksum value
java.util.zip.CheckedOutputStream.write(int),void,
"java.util.zip.CheckedOutputStream.write(byte[],int,int)",void,
java.util.zip.CheckedOutputStream.getChecksum(),Checksum,the Checksum
java.util.zip.CRC32.update(int),void,
"java.util.zip.CRC32.update(byte[],int,int)",void,
java.util.zip.CRC32.update(byte[]),void,
java.util.zip.CRC32.update(ByteBuffer),void,
java.util.zip.CRC32.reset(),void,
java.util.zip.CRC32.getValue(),long,the current checksum value
"java.util.zip.Deflater.setInput(byte[],int,int)",void,
java.util.zip.Deflater.setInput(byte[]),void,
"java.util.zip.Deflater.setDictionary(byte[],int,int)",void,
java.util.zip.Deflater.setDictionary(byte[]),void,
java.util.zip.Deflater.setStrategy(int),void,
java.util.zip.Deflater.setLevel(int),void,
java.util.zip.Deflater.needsInput(),boolean,true if the input data buffer is empty and setInput() should be called in order to provide more input
java.util.zip.Deflater.finish(),void,
java.util.zip.Deflater.finished(),boolean,true if the end of the compressed data output stream has been reached
"java.util.zip.Deflater.deflate(byte[],int,int)",int,the actual number of bytes of compressed data written to the output buffer
java.util.zip.Deflater.deflate(byte[]),int,the actual number of bytes of compressed data written to the output buffer
"java.util.zip.Deflater.deflate(byte[],int,int,int)",int,
java.util.zip.Deflater.getAdler(),int,the ADLER-32 value of the uncompressed data
java.util.zip.Deflater.getTotalIn(),int,the total number of uncompressed bytes input so far
java.util.zip.Deflater.getBytesRead(),long,the total (non-negative) number of uncompressed bytes input so far
java.util.zip.Deflater.getTotalOut(),int,the total number of compressed bytes output so far
java.util.zip.Deflater.getBytesWritten(),long,the total (non-negative) number of compressed bytes output so far
java.util.zip.Deflater.reset(),void,
java.util.zip.Deflater.end(),void,
java.util.zip.Deflater.finalize(),voidize(),
java.util.zip.DeflaterInputStream.close(),void,
java.util.zip.DeflaterInputStream.read(),int,"a single byte of compressed data, or -1 if the end of the uncompressed input stream is reached"
"java.util.zip.DeflaterInputStream.read(byte[],int,int)",int,"the actual number of bytes read, or -1 if the end of the uncompressed input stream is reached"
java.util.zip.DeflaterInputStream.skip(long),long,the actual number of bytes skipped
java.util.zip.DeflaterInputStream.available(),int,"zero after the end of the underlying input stream has been reached, otherwise always returns 1"
java.util.zip.DeflaterInputStream.markSupported(),boolean,"false, always"
java.util.zip.DeflaterInputStream.mark(int),void,
java.util.zip.DeflaterInputStream.reset(),void,
java.util.zip.DeflaterOutputStream.write(int),void,
"java.util.zip.DeflaterOutputStream.write(byte[],int,int)",void,
java.util.zip.DeflaterOutputStream.finish(),void,
java.util.zip.DeflaterOutputStream.close(),void,
java.util.zip.DeflaterOutputStream.deflate(),void,
java.util.zip.DeflaterOutputStream.flush(),void,
"java.util.zip.GZIPInputStream.read(byte[],int,int)",int,"the actual number of bytes read, or -1 if the end of the compressed input stream is reached"
java.util.zip.GZIPInputStream.close(),void,
"java.util.zip.GZIPOutputStream.write(byte[],int,int)",void,
java.util.zip.GZIPOutputStream.finish(),void,
"java.util.zip.Inflater.setInput(byte[],int,int)",void,
java.util.zip.Inflater.setInput(byte[]),void,
"java.util.zip.Inflater.setDictionary(byte[],int,int)",void,
java.util.zip.Inflater.setDictionary(byte[]),void,
java.util.zip.Inflater.getRemaining(),int,the total number of bytes remaining in the input buffer
java.util.zip.Inflater.needsInput(),boolean,true if no data remains in the input buffer
java.util.zip.Inflater.needsDictionary(),boolean,true if a preset dictionary is needed for decompression
java.util.zip.Inflater.finished(),boolean,true if the end of the compressed data stream has been reached
"java.util.zip.Inflater.inflate(byte[],int,int)",int,the actual number of uncompressed bytes
java.util.zip.Inflater.inflate(byte[]),int,the actual number of uncompressed bytes
java.util.zip.Inflater.getAdler(),int,the ADLER-32 value of the uncompressed data
java.util.zip.Inflater.getTotalIn(),int,the total number of compressed bytes input so far
java.util.zip.Inflater.getBytesRead(),long,the total (non-negative) number of compressed bytes input so far
java.util.zip.Inflater.getTotalOut(),int,the total number of uncompressed bytes output so far
java.util.zip.Inflater.getBytesWritten(),long,the total (non-negative) number of uncompressed bytes output so far
java.util.zip.Inflater.reset(),void,
java.util.zip.Inflater.end(),void,
java.util.zip.Inflater.finalize(),voidize(),
java.util.zip.InflaterInputStream.read(),int,"the byte read, or -1 if end of compressed input is reached"
"java.util.zip.InflaterInputStream.read(byte[],int,int)",int,"the actual number of bytes read, or -1 if the end of the compressed input is reached or a preset dictionary is needed"
java.util.zip.InflaterInputStream.available(),int,1 before EOF and 0 after EOF.
java.util.zip.InflaterInputStream.skip(long),long,the actual number of bytes skipped.
java.util.zip.InflaterInputStream.close(),void,
java.util.zip.InflaterInputStream.fill(),void,
java.util.zip.InflaterInputStream.markSupported(),boolean,a boolean indicating if this stream type supports the mark and reset methods.
java.util.zip.InflaterInputStream.mark(int),void,
java.util.zip.InflaterInputStream.reset(),void,
java.util.zip.InflaterOutputStream.close(),void,
java.util.zip.InflaterOutputStream.flush(),void,
java.util.zip.InflaterOutputStream.finish(),void,
java.util.zip.InflaterOutputStream.write(int),void,
"java.util.zip.InflaterOutputStream.write(byte[],int,int)",void,
java.util.zip.ZipEntry.getName(),String,the name of the entry
java.util.zip.ZipEntry.setTime(long),void,
java.util.zip.ZipEntry.getTime(),long,"The last modification time of the entry in milliseconds since the epoch, or -1 if not specified"
java.util.zip.ZipEntry.setLastModifiedTime(FileTime),ZipEntry,This zip entry
java.util.zip.ZipEntry.getLastModifiedTime(),FileTime,"The last modification time of the entry, null if not specified"
java.util.zip.ZipEntry.setLastAccessTime(FileTime),ZipEntry,This zip entry
java.util.zip.ZipEntry.getLastAccessTime(),FileTime,"The last access time of the entry, null if not specified"
java.util.zip.ZipEntry.setCreationTime(FileTime),ZipEntry,This zip entry
java.util.zip.ZipEntry.getCreationTime(),FileTime,"the creation time of the entry, null if not specified"
java.util.zip.ZipEntry.setSize(long),void,
java.util.zip.ZipEntry.getSize(),long,"the uncompressed size of the entry data, or -1 if not known"
java.util.zip.ZipEntry.getCompressedSize(),long,"the size of the compressed entry data, or -1 if not known"
java.util.zip.ZipEntry.setCompressedSize(long),void,
java.util.zip.ZipEntry.setCrc(long),void,
java.util.zip.ZipEntry.getCrc(),long,"the CRC-32 checksum of the uncompressed entry data, or -1 if not known"
java.util.zip.ZipEntry.setMethod(int),void,
java.util.zip.ZipEntry.getMethod(),int,"the compression method of the entry, or -1 if not specified"
java.util.zip.ZipEntry.setExtra(byte[]),void,
java.util.zip.ZipEntry.getExtra(),byte[],"the extra field data for the entry, or null if none"
java.util.zip.ZipEntry.setComment(String),void,
java.util.zip.ZipEntry.getComment(),String,"the comment string for the entry, or null if none"
java.util.zip.ZipEntry.isDirectory(),boolean,true if this is a directory entry
java.util.zip.ZipEntry.toString(),String,a string representation of the object.
java.util.zip.ZipEntry.hashCode(),int,a hash code value for this object.
java.util.zip.ZipEntry.clone(),Object,a clone of this instance.
java.util.zip.ZipFile.getComment(),String,"the comment string for the zip file, or null if none"
java.util.zip.ZipFile.getEntry(String),ZipEntry,"the zip file entry, or null if not found"
java.util.zip.ZipFile.getInputStream(ZipEntry),InputStream,the input stream for reading the contents of the specified zip file entry.
java.util.zip.ZipFile.getName(),String,the path name of the ZIP file
java.util.zip.ZipFile.entries(),Enumeration&lt;? extends ZipEntry&gt;,an enumeration of the ZIP file entries
java.util.zip.ZipFile.stream(),Stream&lt;? extends ZipEntry&gt;,an ordered Stream of entries in this ZIP file
java.util.zip.ZipFile.size(),int,the number of entries in the ZIP file
java.util.zip.ZipFile.close(),void,
java.util.zip.ZipFile.finalize(),"voidize()
                 throws IOException",
java.util.zip.ZipInputStream.getNextEntry(),ZipEntry,"the next ZIP file entry, or null if there are no more entries"
java.util.zip.ZipInputStream.closeEntry(),void,
java.util.zip.ZipInputStream.available(),int,1 before EOF and 0 after EOF has reached for current entry.
"java.util.zip.ZipInputStream.read(byte[],int,int)",int,"the actual number of bytes read, or -1 if the end of the entry is reached"
java.util.zip.ZipInputStream.skip(long),long,the actual number of bytes skipped
java.util.zip.ZipInputStream.close(),void,
java.util.zip.ZipInputStream.createZipEntry(String),ZipEntry,the ZipEntry just created
java.util.zip.ZipOutputStream.setComment(String),void,
java.util.zip.ZipOutputStream.setMethod(int),void,
java.util.zip.ZipOutputStream.setLevel(int),void,
java.util.zip.ZipOutputStream.putNextEntry(ZipEntry),void,
java.util.zip.ZipOutputStream.closeEntry(),void,
"java.util.zip.ZipOutputStream.write(byte[],int,int)",void,
java.util.zip.ZipOutputStream.finish(),void,
java.util.zip.ZipOutputStream.close(),void,
"javax.accessibility.AccessibleBundle.toDisplayString(String,Locale)",String,a localized String for the key.
javax.accessibility.AccessibleBundle.toDisplayString(Locale),String,a localized String for the key.
javax.accessibility.AccessibleBundle.toDisplayString(),String,a localized String describing the key for the default locale
javax.accessibility.AccessibleBundle.toString(),String,a localized String describing the key using the default locale
javax.accessibility.AccessibleContext.getAccessibleName(),String,the localized name of the object; null if this object does not have a name
javax.accessibility.AccessibleContext.setAccessibleName(String),void,
javax.accessibility.AccessibleContext.getAccessibleDescription(),String,the localized description of the object; null if this object does not have a description
javax.accessibility.AccessibleContext.setAccessibleDescription(String),void,
javax.accessibility.AccessibleContext.getAccessibleRole(),abstractAccessibleRole,an instance of AccessibleRole describing the role of the object
javax.accessibility.AccessibleContext.getAccessibleStateSet(),abstractAccessibleStateSet,an instance of AccessibleStateSet containing the current state set of the object
javax.accessibility.AccessibleContext.getAccessibleParent(),Accessible,the Accessible parent of this object; null if this object does not have an Accessible parent
javax.accessibility.AccessibleContext.setAccessibleParent(Accessible),void,
javax.accessibility.AccessibleContext.getAccessibleIndexInParent(),abstractint,the 0-based index of this object in its parent; -1 if this object does not have an accessible parent.
javax.accessibility.AccessibleContext.getAccessibleChildrenCount(),abstractint,the number of accessible children of the object.
javax.accessibility.AccessibleContext.getAccessibleChild(int),abstractAccessible,the Accessible child of the object
javax.accessibility.AccessibleContext.getLocale(),abstractLocale,"this component's locale. If this component does not have a locale, the locale of its parent is returned."
javax.accessibility.AccessibleContext.addPropertyChangeListener(PropertyChangeListener),void,
javax.accessibility.AccessibleContext.removePropertyChangeListener(PropertyChangeListener),void,
javax.accessibility.AccessibleContext.getAccessibleAction(),AccessibleAction,AccessibleAction if supported by object; else return null
javax.accessibility.AccessibleContext.getAccessibleComponent(),AccessibleComponent,AccessibleComponent if supported by object; else return null
javax.accessibility.AccessibleContext.getAccessibleSelection(),AccessibleSelection,AccessibleSelection if supported by object; else return null
javax.accessibility.AccessibleContext.getAccessibleText(),AccessibleText,AccessibleText if supported by object; else return null
javax.accessibility.AccessibleContext.getAccessibleEditableText(),AccessibleEditableText,AccessibleEditableText if supported by object; else return null
javax.accessibility.AccessibleContext.getAccessibleValue(),AccessibleValue,AccessibleValue if supported by object; else return null
javax.accessibility.AccessibleContext.getAccessibleIcon(),AccessibleIcon[],an array of AccessibleIcon if supported by object; otherwise return null
javax.accessibility.AccessibleContext.getAccessibleRelationSet(),AccessibleRelationSet,an AccessibleRelationSet if supported by object; otherwise return null
javax.accessibility.AccessibleContext.getAccessibleTable(),AccessibleTable,an AccessibleTable if supported by object; otherwise return null
"javax.accessibility.AccessibleContext.firePropertyChange(String,Object,Object)",void,
javax.accessibility.AccessibleHyperlink.isValid(),abstractboolean,a flag indicating whether this link is still valid with respect to the AccessibleHypertext it belongs to
javax.accessibility.AccessibleHyperlink.getAccessibleActionCount(),abstractint,the zero-based number of Actions in this object
javax.accessibility.AccessibleHyperlink.doAccessibleAction(int),abstractboolean,true if the action was performed; otherwise false.
javax.accessibility.AccessibleHyperlink.getAccessibleActionDescription(int),abstractString,a String description of the action
javax.accessibility.AccessibleHyperlink.getAccessibleActionObject(int),abstractObject,an Object representing the hypertext link itself
javax.accessibility.AccessibleHyperlink.getAccessibleActionAnchor(int),abstractObject,an Object representing the hypertext anchor
javax.accessibility.AccessibleHyperlink.getStartIndex(),abstractint,index of start of link
javax.accessibility.AccessibleHyperlink.getEndIndex(),abstractint,index of end of link
javax.accessibility.AccessibleRelation.getKey(),String,the key for this relation
javax.accessibility.AccessibleRelation.getTarget(),Object[],an array containing the target objects for this relation
javax.accessibility.AccessibleRelation.setTarget(Object),void,
javax.accessibility.AccessibleRelation.setTarget(Object[]),void,
javax.accessibility.AccessibleRelationSet.add(AccessibleRelation),boolean,true if relation is added to the relation set; false if the relation set is unchanged
javax.accessibility.AccessibleRelationSet.addAll(AccessibleRelation[]),void,
javax.accessibility.AccessibleRelationSet.remove(AccessibleRelation),boolean,true if the relation is in the relation set; false if the relation set is unchanged
javax.accessibility.AccessibleRelationSet.clear(),void,
javax.accessibility.AccessibleRelationSet.size(),int,the number of relations in the relation set
javax.accessibility.AccessibleRelationSet.contains(String),boolean,true if the relation is in the relation set; otherwise false
javax.accessibility.AccessibleRelationSet.get(String),AccessibleRelation,"the relation, if one exists, that matches the specified key. Otherwise, null is returned."
javax.accessibility.AccessibleRelationSet.toArray(),AccessibleRelation[],AccessibleRelation array contacting the current relation.
javax.accessibility.AccessibleRelationSet.toString(),String,comma separated localized String
javax.accessibility.AccessibleResourceBundle.getContents(),Object[][],an array of an Object array representing a key-value pair.
javax.accessibility.AccessibleStateSet.add(AccessibleState),boolean,true if state is added to the state set; false if the state set is unchanged
javax.accessibility.AccessibleStateSet.addAll(AccessibleState[]),void,
javax.accessibility.AccessibleStateSet.remove(AccessibleState),boolean,true if the state is in the state set; false if the state set will be unchanged
javax.accessibility.AccessibleStateSet.clear(),void,
javax.accessibility.AccessibleStateSet.contains(AccessibleState),boolean,true if the state is in the state set; otherwise false
javax.accessibility.AccessibleStateSet.toArray(),AccessibleState[],AccessibleState array containing the current state.
javax.accessibility.AccessibleStateSet.toString(),String,comma separated localized String
javax.activation.ActivationDataFlavor.getMimeType(),String,the MIME type
javax.activation.ActivationDataFlavor.getRepresentationClass(),Class,the representation class
javax.activation.ActivationDataFlavor.getHumanPresentableName(),String,the human presentable name
javax.activation.ActivationDataFlavor.setHumanPresentableName(String),void,
javax.activation.ActivationDataFlavor.equals(DataFlavor),boolean,true if the MIME type and representation class are the same
javax.activation.ActivationDataFlavor.isMimeTypeEqual(String),boolean,true if the same MIME type
"javax.activation.ActivationDataFlavor.normalizeMimeTypeParameter(String,String)",String,the normalized parameter value
javax.activation.ActivationDataFlavor.normalizeMimeType(String),String,the normalized MIME type
javax.activation.CommandInfo.getCommandName(),String,the command verb.
javax.activation.CommandInfo.getCommandClass(),String,"The class name of the command, or null"
"javax.activation.CommandInfo.getCommandObject(DataHandler,ClassLoader)",Object,The bean
javax.activation.CommandMap.getDefaultCommandMap(),CommandMap,
javax.activation.CommandMap.setDefaultCommandMap(CommandMap),void,
javax.activation.CommandMap.getPreferredCommands(String),abstractCommandInfo[],the CommandInfo classes that represent the command Beans.
"javax.activation.CommandMap.getPreferredCommands(String,DataSource)",CommandInfo[],the CommandInfo classes that represent the command Beans.
javax.activation.CommandMap.getAllCommands(String),abstractCommandInfo[],the CommandInfo objects representing all the commands.
"javax.activation.CommandMap.getAllCommands(String,DataSource)",CommandInfo[],the CommandInfo objects representing all the commands.
"javax.activation.CommandMap.getCommand(String,String)",abstractCommandInfo,the CommandInfo corresponding to the command.
"javax.activation.CommandMap.getCommand(String,String,DataSource)",CommandInfo,the CommandInfo corresponding to the command.
javax.activation.CommandMap.createDataContentHandler(String),abstractDataContentHandler,the DataContentHandler for the MIME type
"javax.activation.CommandMap.createDataContentHandler(String,DataSource)",DataContentHandler,the DataContentHandler for the MIME type
javax.activation.CommandMap.getMimeTypes(),String[],"array of MIME types as strings, or null if not supported"
javax.activation.DataHandler.getDataSource(),DataSource,a valid DataSource object for this DataHandler
javax.activation.DataHandler.getName(),String,the name of the object
javax.activation.DataHandler.getContentType(),String,the MIME type
javax.activation.DataHandler.getInputStream(),InputStream,the InputStream representing this data
javax.activation.DataHandler.writeTo(OutputStream),void,
javax.activation.DataHandler.getOutputStream(),OutputStream,the OutputStream
javax.activation.DataHandler.getTransferDataFlavors(),DataFlavor[],an array of data flavors in which this data can be transferred
javax.activation.DataHandler.isDataFlavorSupported(DataFlavor),boolean,true if the data flavor is supported
javax.activation.DataHandler.getTransferData(DataFlavor),Object,the object
javax.activation.DataHandler.setCommandMap(CommandMap),void,
javax.activation.DataHandler.getPreferredCommands(),CommandInfo[],the CommandInfo objects representing the preferred commands
javax.activation.DataHandler.getAllCommands(),CommandInfo[],the CommandInfo objects representing all the commands
javax.activation.DataHandler.getCommand(String),CommandInfo,the CommandInfo corresponding to the command
javax.activation.DataHandler.getContent(),Object,the content.
javax.activation.DataHandler.getBean(CommandInfo),Object,the instantiated command object
javax.activation.DataHandler.setDataContentHandlerFactory(DataContentHandlerFactory),void,
javax.activation.FileDataSource.getInputStream(),InputStream,an InputStream
javax.activation.FileDataSource.getOutputStream(),OutputStream,an OutputStream
javax.activation.FileDataSource.getContentType(),String,the MIME Type
javax.activation.FileDataSource.getName(),String,the name of the object.
javax.activation.FileDataSource.getFile(),File,the File object for the file represented by this object.
javax.activation.FileDataSource.setFileTypeMap(FileTypeMap),void,
javax.activation.FileTypeMap.getContentType(File),abstractString,The content type.
javax.activation.FileTypeMap.getContentType(String),abstractString,The content type.
javax.activation.FileTypeMap.setDefaultFileTypeMap(FileTypeMap),void,
javax.activation.FileTypeMap.getDefaultFileTypeMap(),FileTypeMap,The default FileTypeMap
javax.activation.MailcapCommandMap.getPreferredCommands(String),CommandInfo[],the CommandInfo objects representing the preferred commands.
javax.activation.MailcapCommandMap.getAllCommands(String),CommandInfo[],the CommandInfo objects representing all the commands.
"javax.activation.MailcapCommandMap.getCommand(String,String)",CommandInfo,the CommandInfo object corresponding to the command.
javax.activation.MailcapCommandMap.addMailcap(String),void,
javax.activation.MailcapCommandMap.createDataContentHandler(String),DataContentHandler,the DataContentHandler
javax.activation.MailcapCommandMap.getMimeTypes(),String[],array of MIME types as strings
javax.activation.MailcapCommandMap.getNativeCommands(String),String[],array of native command entries
javax.activation.MimeType.getPrimaryType(),String,the primary MIME type
javax.activation.MimeType.setPrimaryType(String),void,
javax.activation.MimeType.getSubType(),String,the MIME subtype
javax.activation.MimeType.setSubType(String),void,
javax.activation.MimeType.getParameters(),MimeTypeParameterList,a MimeTypeParameterList object representing the parameters
javax.activation.MimeType.getParameter(String),String,the paramter's value
"javax.activation.MimeType.setParameter(String,String)",void,
javax.activation.MimeType.removeParameter(String),void,
javax.activation.MimeType.toString(),String,a string representation of the object.
javax.activation.MimeType.getBaseType(),String,the MIME type and sub-type
javax.activation.MimeType.match(MimeType),boolean,true if they match
javax.activation.MimeType.match(String),boolean,true if they match
javax.activation.MimeType.writeExternal(ObjectOutput),void,
javax.activation.MimeType.readExternal(ObjectInput),void,
javax.activation.MimeTypeParameterList.parse(String),void,
javax.activation.MimeTypeParameterList.size(),int,the number of parameters
javax.activation.MimeTypeParameterList.isEmpty(),boolean,true if there are no parameters
javax.activation.MimeTypeParameterList.get(String),String,the parameter's value
"javax.activation.MimeTypeParameterList.set(String,String)",void,
javax.activation.MimeTypeParameterList.remove(String),void,
javax.activation.MimeTypeParameterList.getNames(),Enumeration,an enumeration of all parameter names
javax.activation.MimeTypeParameterList.toString(),String,a string representation of the object.
javax.activation.MimetypesFileTypeMap.addMimeTypes(String),void,
javax.activation.MimetypesFileTypeMap.getContentType(File),String,the file's MIME type
javax.activation.MimetypesFileTypeMap.getContentType(String),String,the file's MIME type
javax.activation.URLDataSource.getContentType(),String,the content type.
javax.activation.URLDataSource.getName(),String,the result of calling the URL's getFile method.
javax.activation.URLDataSource.getInputStream(),InputStream,the InputStream.
javax.activation.URLDataSource.getOutputStream(),OutputStream,the OutputStream.
javax.activation.URLDataSource.getURL(),URL,The URL.
javax.annotation.processing.AbstractProcessor.getSupportedOptions(),Set&lt;String&gt;,"the options recognized by this processor, or an empty set if none"
javax.annotation.processing.AbstractProcessor.getSupportedAnnotationTypes(),Set&lt;String&gt;,"the names of the annotation types supported by this processor, or an empty set if none"
javax.annotation.processing.AbstractProcessor.getSupportedSourceVersion(),SourceVersion,the latest source version supported by this processor
javax.annotation.processing.AbstractProcessor.init(ProcessingEnvironment),void,
"javax.annotation.processing.AbstractProcessor.process(Set&lt;?,RoundEnvironment)",abstractboolean,whether or not the set of annotation types are claimed by this processor
"javax.annotation.processing.AbstractProcessor.getCompletions(Element,AnnotationMirror,ExecutableElement,String)",Iterable&lt;? extends Completion&gt;,suggested completions to the annotation
javax.annotation.processing.AbstractProcessor.isInitialized(),boolean,"true if this object has been initialized, false otherwise."
"javax.annotation.processing.Completions.of(String,String)",Completion,a completion of the provided value and message
javax.annotation.processing.Completions.of(String),Completion,a completion of the value and an empty message
javax.crypto.Cipher.getInstance(String),Cipher,a cipher that implements the requested transformation.
"javax.crypto.Cipher.getInstance(String,String)",Cipher,a cipher that implements the requested transformation.
"javax.crypto.Cipher.getInstance(String,Provider)",Cipher,a cipher that implements the requested transformation.
javax.crypto.Cipher.getProvider(),Provider,the provider of this Cipher object
javax.crypto.Cipher.getAlgorithm(),String,the algorithm name of this Cipher object.
javax.crypto.Cipher.getBlockSize(),int,"the block size (in bytes), or 0 if the underlying algorithm is not a block cipher"
javax.crypto.Cipher.getOutputSize(int),int,the required output buffer size (in bytes)
javax.crypto.Cipher.getIV(),byte[],"the initialization vector in a new buffer, or null if the underlying algorithm does not use an IV, or if the IV has not yet been set."
javax.crypto.Cipher.getParameters(),AlgorithmParameters,"the parameters used with this cipher, or null if this cipher does not use any parameters."
javax.crypto.Cipher.getExemptionMechanism(),ExemptionMechanism,"the exemption mechanism object used with this cipher, or null if this cipher does not use any exemption mechanism."
"javax.crypto.Cipher.init(int,Key)",void,
"javax.crypto.Cipher.init(int,Key,SecureRandom)",void,
"javax.crypto.Cipher.init(int,Key,AlgorithmParameterSpec)",void,
"javax.crypto.Cipher.init(int,Key,AlgorithmParameterSpec,SecureRandom)",void,
"javax.crypto.Cipher.init(int,Key,AlgorithmParameters)",void,
"javax.crypto.Cipher.init(int,Key,AlgorithmParameters,SecureRandom)",void,
"javax.crypto.Cipher.init(int,Certificate)",void,
"javax.crypto.Cipher.init(int,Certificate,SecureRandom)",void,
javax.crypto.Cipher.update(byte[]),byte[],"the new buffer with the result, or null if the underlying cipher is a block cipher and the input data is too short to result in a new block."
"javax.crypto.Cipher.update(byte[],int,int)",byte[],"the new buffer with the result, or null if the underlying cipher is a block cipher and the input data is too short to result in a new block."
"javax.crypto.Cipher.update(byte[],int,int,byte[])",int,the number of bytes stored in output
"javax.crypto.Cipher.update(byte[],int,int,byte[],int)",int,the number of bytes stored in output
"javax.crypto.Cipher.update(ByteBuffer,ByteBuffer)",int,the number of bytes stored in output
javax.crypto.Cipher.doFinal(),byte[],the new buffer with the result
"javax.crypto.Cipher.doFinal(byte[],int)",int,the number of bytes stored in output
javax.crypto.Cipher.doFinal(byte[]),byte[],the new buffer with the result
"javax.crypto.Cipher.doFinal(byte[],int,int)",byte[],the new buffer with the result
"javax.crypto.Cipher.doFinal(byte[],int,int,byte[])",int,the number of bytes stored in output
"javax.crypto.Cipher.doFinal(byte[],int,int,byte[],int)",int,the number of bytes stored in output
"javax.crypto.Cipher.doFinal(ByteBuffer,ByteBuffer)",int,the number of bytes stored in output
javax.crypto.Cipher.wrap(Key),byte[],the wrapped key.
"javax.crypto.Cipher.unwrap(byte[],String,int)",Key,the unwrapped key.
javax.crypto.Cipher.getMaxAllowedKeyLength(String),int,the maximum key length in bits or Integer.MAX_VALUE.
javax.crypto.Cipher.getMaxAllowedParameterSpec(String),AlgorithmParameterSpec,an AlgorithmParameterSpec which holds the maximum value or null.
javax.crypto.Cipher.updateAAD(byte[]),void,
"javax.crypto.Cipher.updateAAD(byte[],int,int)",void,
javax.crypto.Cipher.updateAAD(ByteBuffer),void,
javax.crypto.CipherInputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached."
javax.crypto.CipherInputStream.read(byte[]),int,"the total number of bytes read into the buffer, or -1 is there is no more data because the end of the stream has been reached."
"javax.crypto.CipherInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
javax.crypto.CipherInputStream.skip(long),long,the actual number of bytes skipped.
javax.crypto.CipherInputStream.available(),int,the number of bytes that can be read from this input stream without blocking.
javax.crypto.CipherInputStream.close(),void,
javax.crypto.CipherInputStream.markSupported(),boolean,"false, since this class does not support the mark and reset methods."
javax.crypto.CipherOutputStream.write(int),void,
javax.crypto.CipherOutputStream.write(byte[]),void,
"javax.crypto.CipherOutputStream.write(byte[],int,int)",void,
javax.crypto.CipherOutputStream.flush(),void,
javax.crypto.CipherOutputStream.close(),void,
javax.crypto.CipherSpi.engineSetMode(String),abstractvoid,
javax.crypto.CipherSpi.engineSetPadding(String),abstractvoid,
javax.crypto.CipherSpi.engineGetBlockSize(),abstractint,"the block size (in bytes), or 0 if the underlying algorithm is not a block cipher"
javax.crypto.CipherSpi.engineGetOutputSize(int),abstractint,the required output buffer size (in bytes)
javax.crypto.CipherSpi.engineGetIV(),abstractbyte[],"the initialization vector in a new buffer, or null if the underlying algorithm does not use an IV, or if the IV has not yet been set."
javax.crypto.CipherSpi.engineGetParameters(),abstractAlgorithmParameters,"the parameters used with this cipher, or null if this cipher does not use any parameters."
"javax.crypto.CipherSpi.engineInit(int,Key,SecureRandom)",abstractvoid,
"javax.crypto.CipherSpi.engineInit(int,Key,AlgorithmParameterSpec,SecureRandom)",abstractvoid,
"javax.crypto.CipherSpi.engineInit(int,Key,AlgorithmParameters,SecureRandom)",abstractvoid,
"javax.crypto.CipherSpi.engineUpdate(byte[],int,int)",abstractbyte[],"the new buffer with the result, or null if the underlying cipher is a block cipher and the input data is too short to result in a new block."
"javax.crypto.CipherSpi.engineUpdate(byte[],int,int,byte[],int)",abstractint,the number of bytes stored in output
"javax.crypto.CipherSpi.engineUpdate(ByteBuffer,ByteBuffer)",int,the number of bytes stored in output
"javax.crypto.CipherSpi.engineDoFinal(byte[],int,int)",abstractbyte[],the new buffer with the result
"javax.crypto.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)",abstractint,the number of bytes stored in output
"javax.crypto.CipherSpi.engineDoFinal(ByteBuffer,ByteBuffer)",int,the number of bytes stored in output
javax.crypto.CipherSpi.engineWrap(Key),byte[],the wrapped key.
"javax.crypto.CipherSpi.engineUnwrap(byte[],String,int)",Key,the unwrapped key.
javax.crypto.CipherSpi.engineGetKeySize(Key),int,the key size of the given key object.
"javax.crypto.CipherSpi.engineUpdateAAD(byte[],int,int)",void,
javax.crypto.CipherSpi.engineUpdateAAD(ByteBuffer),void,
javax.crypto.EncryptedPrivateKeyInfo.getAlgName(),String,the encryption algorithm name.
javax.crypto.EncryptedPrivateKeyInfo.getAlgParameters(),AlgorithmParameters,the algorithm parameters.
javax.crypto.EncryptedPrivateKeyInfo.getEncryptedData(),byte[],the encrypted data. Returns a new array each time this method is called.
javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(Cipher),PKCS8EncodedKeySpec,the PKCS8EncodedKeySpec object.
javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(Key),PKCS8EncodedKeySpec,the PKCS8EncodedKeySpec object.
"javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(Key,String)",PKCS8EncodedKeySpec,the PKCS8EncodedKeySpec object.
"javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(Key,Provider)",PKCS8EncodedKeySpec,the PKCS8EncodedKeySpec object.
javax.crypto.EncryptedPrivateKeyInfo.getEncoded(),byte[],the ASN.1 encoding. Returns a new array each time this method is called.
javax.crypto.ExemptionMechanism.getName(),String,the exemption mechanism name of this ExemptionMechanism object.
javax.crypto.ExemptionMechanism.getInstance(String),ExemptionMechanism,the new ExemptionMechanism object.
"javax.crypto.ExemptionMechanism.getInstance(String,String)",ExemptionMechanism,the new ExemptionMechanism object.
"javax.crypto.ExemptionMechanism.getInstance(String,Provider)",ExemptionMechanism,the new ExemptionMechanism object.
javax.crypto.ExemptionMechanism.getProvider(),Provider,the provider of this ExemptionMechanism object.
javax.crypto.ExemptionMechanism.isCryptoAllowed(Key),boolean,whether the result blob of the same key has been generated successfully by this exemption mechanism; false if key is null.
javax.crypto.ExemptionMechanism.getOutputSize(int),int,the required output buffer size (in bytes)
javax.crypto.ExemptionMechanism.init(Key),void,
"javax.crypto.ExemptionMechanism.init(Key,AlgorithmParameterSpec)",void,
"javax.crypto.ExemptionMechanism.init(Key,AlgorithmParameters)",void,
javax.crypto.ExemptionMechanism.genExemptionBlob(),byte[],the new buffer with the result key blob.
javax.crypto.ExemptionMechanism.genExemptionBlob(byte[]),int,the number of bytes stored in output
"javax.crypto.ExemptionMechanism.genExemptionBlob(byte[],int)",int,the number of bytes stored in output
javax.crypto.ExemptionMechanism.finalize(),voidize(),
javax.crypto.ExemptionMechanismSpi.engineGetOutputSize(int),abstractint,the required output buffer size (in bytes)
javax.crypto.ExemptionMechanismSpi.engineInit(Key),abstractvoid,
"javax.crypto.ExemptionMechanismSpi.engineInit(Key,AlgorithmParameterSpec)",abstractvoid,
"javax.crypto.ExemptionMechanismSpi.engineInit(Key,AlgorithmParameters)",abstractvoid,
javax.crypto.ExemptionMechanismSpi.engineGenExemptionBlob(),abstractbyte[],the new buffer with the result key blob.
"javax.crypto.ExemptionMechanismSpi.engineGenExemptionBlob(byte[],int)",abstractint,the number of bytes stored in output
javax.crypto.KeyAgreement.getAlgorithm(),String,the algorithm name of this KeyAgreement object.
javax.crypto.KeyAgreement.getInstance(String),KeyAgreement,the new KeyAgreement object.
"javax.crypto.KeyAgreement.getInstance(String,String)",KeyAgreement,the new KeyAgreement object.
"javax.crypto.KeyAgreement.getInstance(String,Provider)",KeyAgreement,the new KeyAgreement object.
javax.crypto.KeyAgreement.getProvider(),Provider,the provider of this KeyAgreement object
javax.crypto.KeyAgreement.init(Key),void,
"javax.crypto.KeyAgreement.init(Key,SecureRandom)",void,
"javax.crypto.KeyAgreement.init(Key,AlgorithmParameterSpec)",void,
"javax.crypto.KeyAgreement.init(Key,AlgorithmParameterSpec,SecureRandom)",void,
"javax.crypto.KeyAgreement.doPhase(Key,boolean)",Key,"the (intermediate) key resulting from this phase, or null if this phase does not yield a key"
javax.crypto.KeyAgreement.generateSecret(),byte[],the new buffer with the shared secret
"javax.crypto.KeyAgreement.generateSecret(byte[],int)",int,the number of bytes placed into sharedSecret
javax.crypto.KeyAgreement.generateSecret(String),SecretKey,the shared secret key
"javax.crypto.KeyAgreementSpi.engineInit(Key,SecureRandom)",abstractvoid,
"javax.crypto.KeyAgreementSpi.engineInit(Key,AlgorithmParameterSpec,SecureRandom)",abstractvoid,
"javax.crypto.KeyAgreementSpi.engineDoPhase(Key,boolean)",abstractKey,"the (intermediate) key resulting from this phase, or null if this phase does not yield a key"
javax.crypto.KeyAgreementSpi.engineGenerateSecret(),abstractbyte[],the new buffer with the shared secret
"javax.crypto.KeyAgreementSpi.engineGenerateSecret(byte[],int)",abstractint,the number of bytes placed into sharedSecret
javax.crypto.KeyAgreementSpi.engineGenerateSecret(String),abstractSecretKey,the shared secret key
javax.crypto.KeyGenerator.getAlgorithm(),String,the algorithm name of this KeyGenerator object.
javax.crypto.KeyGenerator.getInstance(String),KeyGenerator,the new KeyGenerator object.
"javax.crypto.KeyGenerator.getInstance(String,String)",KeyGenerator,the new KeyGenerator object.
"javax.crypto.KeyGenerator.getInstance(String,Provider)",KeyGenerator,the new KeyGenerator object.
javax.crypto.KeyGenerator.getProvider(),Provider,the provider of this KeyGenerator object
javax.crypto.KeyGenerator.init(SecureRandom),void,
javax.crypto.KeyGenerator.init(AlgorithmParameterSpec),void,
"javax.crypto.KeyGenerator.init(AlgorithmParameterSpec,SecureRandom)",void,
javax.crypto.KeyGenerator.init(int),void,
"javax.crypto.KeyGenerator.init(int,SecureRandom)",void,
javax.crypto.KeyGenerator.generateKey(),SecretKey,the new key
javax.crypto.KeyGeneratorSpi.engineInit(SecureRandom),abstractvoid,
"javax.crypto.KeyGeneratorSpi.engineInit(AlgorithmParameterSpec,SecureRandom)",abstractvoid,
"javax.crypto.KeyGeneratorSpi.engineInit(int,SecureRandom)",abstractvoid,
javax.crypto.KeyGeneratorSpi.engineGenerateKey(),abstractSecretKey,the new key
javax.crypto.Mac.getAlgorithm(),String,the algorithm name of this Mac object.
javax.crypto.Mac.getInstance(String),Mac,the new Mac object.
"javax.crypto.Mac.getInstance(String,String)",Mac,the new Mac object.
"javax.crypto.Mac.getInstance(String,Provider)",Mac,the new Mac object.
javax.crypto.Mac.getProvider(),Provider,the provider of this Mac object.
javax.crypto.Mac.getMacLength(),int,the MAC length in bytes.
javax.crypto.Mac.init(Key),void,
"javax.crypto.Mac.init(Key,AlgorithmParameterSpec)",void,
javax.crypto.Mac.update(byte),void,
javax.crypto.Mac.update(byte[]),void,
"javax.crypto.Mac.update(byte[],int,int)",void,
javax.crypto.Mac.update(ByteBuffer),void,
javax.crypto.Mac.doFinal(),byte[],the MAC result.
"javax.crypto.Mac.doFinal(byte[],int)",void,
javax.crypto.Mac.doFinal(byte[]),byte[],the MAC result.
javax.crypto.Mac.reset(),void,
javax.crypto.Mac.clone(),Object,a clone if the provider implementation is cloneable.
javax.crypto.MacSpi.engineGetMacLength(),abstractint,the MAC length in bytes.
"javax.crypto.MacSpi.engineInit(Key,AlgorithmParameterSpec)",abstractvoid,
javax.crypto.MacSpi.engineUpdate(byte),abstractvoid,
"javax.crypto.MacSpi.engineUpdate(byte[],int,int)",abstractvoid,
javax.crypto.MacSpi.engineUpdate(ByteBuffer),void,
javax.crypto.MacSpi.engineDoFinal(),abstractbyte[],the MAC result.
javax.crypto.MacSpi.engineReset(),abstractvoid,
javax.crypto.MacSpi.clone(),Object,a clone if the implementation is cloneable.
javax.crypto.SealedObject.getAlgorithm(),String,the algorithm that was used to seal this object.
javax.crypto.SealedObject.getObject(Key),Object,the original object.
javax.crypto.SealedObject.getObject(Cipher),Object,the original object.
"javax.crypto.SealedObject.getObject(Key,String)",Object,the original object.
javax.crypto.SecretKeyFactory.getInstance(String),SecretKeyFactory,the new SecretKeyFactory object.
"javax.crypto.SecretKeyFactory.getInstance(String,String)",SecretKeyFactory,the new SecretKeyFactory object.
"javax.crypto.SecretKeyFactory.getInstance(String,Provider)",SecretKeyFactory,the new SecretKeyFactory object.
javax.crypto.SecretKeyFactory.getProvider(),Provider,the provider of this SecretKeyFactory object
javax.crypto.SecretKeyFactory.getAlgorithm(),String,the algorithm name of this SecretKeyFactory object.
javax.crypto.SecretKeyFactory.generateSecret(KeySpec),SecretKey,the secret key
"javax.crypto.SecretKeyFactory.getKeySpec(SecretKey,Class&lt;?&gt;)",KeySpec,the underlying key specification (key material) in the requested format
javax.crypto.SecretKeyFactory.translateKey(SecretKey),SecretKey,the translated key
javax.crypto.SecretKeyFactorySpi.engineGenerateSecret(KeySpec),abstractSecretKey,the secret key
"javax.crypto.SecretKeyFactorySpi.engineGetKeySpec(SecretKey,Class&lt;?&gt;)",abstractKeySpec,the underlying key specification (key material) in the requested format
javax.crypto.SecretKeyFactorySpi.engineTranslateKey(SecretKey),abstractSecretKey,the translated key
javax.crypto.spec.DESedeKeySpec.getKey(),byte[],the DES-EDE key. Returns a new array each time this method is called.
"javax.crypto.spec.DESedeKeySpec.isParityAdjusted(byte[],int)",boolean,"true if the given DES-EDE key is parity-adjusted, false otherwise"
javax.crypto.spec.DESKeySpec.getKey(),byte[],the DES key material. Returns a new array each time this method is called.
"javax.crypto.spec.DESKeySpec.isParityAdjusted(byte[],int)",boolean,"true if the given DES key material is parity-adjusted, false otherwise."
"javax.crypto.spec.DESKeySpec.isWeak(byte[],int)",boolean,"true if the given DES key material is weak or semi-weak, false otherwise."
javax.crypto.spec.DHGenParameterSpec.getPrimeSize(),int,the size in bits of the prime modulus
javax.crypto.spec.DHGenParameterSpec.getExponentSize(),int,the size in bits of the random exponent (private value)
javax.crypto.spec.DHParameterSpec.getP(),BigInteger,the prime modulus p
javax.crypto.spec.DHParameterSpec.getG(),BigInteger,the base generator g
javax.crypto.spec.DHParameterSpec.getL(),int,"the size in bits, l, of the random exponent (private value), or 0 if this size has not been set"
javax.crypto.spec.DHPrivateKeySpec.getX(),BigInteger,the private value x
javax.crypto.spec.DHPrivateKeySpec.getP(),BigInteger,the prime modulus p
javax.crypto.spec.DHPrivateKeySpec.getG(),BigInteger,the base generator g
javax.crypto.spec.DHPublicKeySpec.getY(),BigInteger,the public value y
javax.crypto.spec.DHPublicKeySpec.getP(),BigInteger,the prime modulus p
javax.crypto.spec.DHPublicKeySpec.getG(),BigInteger,the base generator g
javax.crypto.spec.GCMParameterSpec.getTLen(),int,the authentication tag length (in bits)
javax.crypto.spec.GCMParameterSpec.getIV(),byte[],the IV. Creates a new array each time this method is called.
javax.crypto.spec.IvParameterSpec.getIV(),byte[],the initialization vector (IV). Returns a new array each time this method is called.
javax.crypto.spec.OAEPParameterSpec.getDigestAlgorithm(),String,the message digest algorithm name.
javax.crypto.spec.OAEPParameterSpec.getMGFAlgorithm(),String,the mask generation function algorithm name.
javax.crypto.spec.OAEPParameterSpec.getMGFParameters(),AlgorithmParameterSpec,the parameters for the mask generation function.
javax.crypto.spec.OAEPParameterSpec.getPSource(),PSource,the source of encoding input P.
javax.crypto.spec.PBEKeySpec.clearPassword(),void,
javax.crypto.spec.PBEKeySpec.getPassword(),char[],the password.
javax.crypto.spec.PBEKeySpec.getSalt(),byte[],the salt.
javax.crypto.spec.PBEKeySpec.getIterationCount(),int,the iteration count.
javax.crypto.spec.PBEKeySpec.getKeyLength(),int,the to-be-derived key length.
javax.crypto.spec.PBEParameterSpec.getSalt(),byte[],the salt. Returns a new array each time this method is called.
javax.crypto.spec.PBEParameterSpec.getIterationCount(),int,the iteration count
javax.crypto.spec.PBEParameterSpec.getParameterSpec(),AlgorithmParameterSpec,"the parameter specification, or null if none was set."
javax.crypto.spec.PSource.getAlgorithm(),String,the PSource algorithm name.
javax.crypto.spec.PSource.PSpecified.getValue(),byte[],the value of encoding input P. A new array is returned each time this method is called.
javax.crypto.spec.RC2ParameterSpec.getEffectiveKeyBits(),int,the effective key size in bits.
javax.crypto.spec.RC2ParameterSpec.getIV(),byte[],the IV or null if this parameter set does not contain an IV. Returns a new array each time this method is called.
javax.crypto.spec.RC2ParameterSpec.equals(Object),boolean,"true if the objects are considered equal, false if obj is null or otherwise."
javax.crypto.spec.RC2ParameterSpec.hashCode(),int,a hash code value for this object.
javax.crypto.spec.RC5ParameterSpec.getVersion(),int,the version.
javax.crypto.spec.RC5ParameterSpec.getRounds(),int,the number of rounds.
javax.crypto.spec.RC5ParameterSpec.getWordSize(),int,the word size in bits.
javax.crypto.spec.RC5ParameterSpec.getIV(),byte[],the IV or null if this parameter set does not contain an IV. Returns a new array each time this method is called.
javax.crypto.spec.RC5ParameterSpec.equals(Object),boolean,"true if the objects are considered equal, false if obj is null or otherwise."
javax.crypto.spec.RC5ParameterSpec.hashCode(),int,a hash code value for this object.
javax.crypto.spec.SecretKeySpec.getAlgorithm(),String,the secret key algorithm.
javax.crypto.spec.SecretKeySpec.getFormat(),String,"the string ""RAW""."
javax.crypto.spec.SecretKeySpec.getEncoded(),byte[],the key material. Returns a new array each time this method is called.
javax.crypto.spec.SecretKeySpec.hashCode(),int,a hash code value for this object.
javax.crypto.spec.SecretKeySpec.equals(Object),boolean,"true if the objects are considered equal, false if obj is null or otherwise."
javax.imageio.IIOImage.getRenderedImage(),RenderedImage,"a RenderedImage, or null."
javax.imageio.IIOImage.setRenderedImage(RenderedImage),void,
javax.imageio.IIOImage.hasRaster(),boolean,true if a Raster is available.
javax.imageio.IIOImage.getRaster(),Raster,"a Raster, or null."
javax.imageio.IIOImage.setRaster(Raster),void,
javax.imageio.IIOImage.getNumThumbnails(),int,"the number of thumbnails, as an int."
javax.imageio.IIOImage.getThumbnail(int),BufferedImage,"a thumbnail image, as a BufferedImage."
javax.imageio.IIOImage.getThumbnails(),List&lt;? extends BufferedImage&gt;,"the current List of BufferedImage thumbnails, or null."
javax.imageio.IIOImage.setThumbnails(List&lt;?),void,
javax.imageio.IIOImage.getMetadata(),IIOMetadata,"an IIOMetadata object, or null."
javax.imageio.IIOImage.setMetadata(IIOMetadata),void,
javax.imageio.IIOParam.setSourceRegion(Rectangle),void,
javax.imageio.IIOParam.getSourceRegion(),Rectangle,"the source region of interest as a Rectangle, or null."
"javax.imageio.IIOParam.setSourceSubsampling(int,int,int,int)",void,
javax.imageio.IIOParam.getSourceXSubsampling(),int,the source subsampling X period.
javax.imageio.IIOParam.getSourceYSubsampling(),int,the source subsampling Y period.
javax.imageio.IIOParam.getSubsamplingXOffset(),int,the source subsampling grid X offset.
javax.imageio.IIOParam.getSubsamplingYOffset(),int,the source subsampling grid Y offset.
javax.imageio.IIOParam.setSourceBands(int[]),void,
javax.imageio.IIOParam.getSourceBands(),int[],"the set of source bands to be used, or null."
javax.imageio.IIOParam.setDestinationType(ImageTypeSpecifier),void,
javax.imageio.IIOParam.getDestinationType(),ImageTypeSpecifier,"an ImageTypeSpecifier describing the destination type, or null."
javax.imageio.IIOParam.setDestinationOffset(Point),void,
javax.imageio.IIOParam.getDestinationOffset(),Point,the destination offset as a Point.
javax.imageio.IIOParam.setController(IIOParamController),void,
javax.imageio.IIOParam.getController(),IIOParamController,"the currently installed IIOParamController, or null."
javax.imageio.IIOParam.getDefaultController(),IIOParamController,"the default IIOParamController, or null."
javax.imageio.IIOParam.hasController(),boolean,true if a controller is installed.
javax.imageio.IIOParam.activateController(),boolean,true if the controller completed normally.
javax.imageio.ImageIO.scanForPlugins(),void,
javax.imageio.ImageIO.setUseCache(boolean),void,
javax.imageio.ImageIO.getUseCache(),boolean,true if a disk-based cache may be used for ImageInputStreams and ImageOutputStreams.
javax.imageio.ImageIO.setCacheDirectory(File),void,
javax.imageio.ImageIO.getCacheDirectory(),File,"a File indicating the directory where cache files will be created, or null to indicate the system-dependent default temporary-file directory."
javax.imageio.ImageIO.createImageInputStream(Object),ImageInputStream,"an ImageInputStream, or null."
javax.imageio.ImageIO.createImageOutputStream(Object),ImageOutputStream,"an ImageOutputStream, or null."
javax.imageio.ImageIO.getReaderFormatNames(),String[],an array of Strings.
javax.imageio.ImageIO.getReaderMIMETypes(),String[],an array of Strings.
javax.imageio.ImageIO.getReaderFileSuffixes(),String[],an array of Strings.
javax.imageio.ImageIO.getImageReaders(Object),Iterator&lt;ImageReader&gt;,an Iterator containing ImageReaders.
javax.imageio.ImageIO.getImageReadersByFormatName(String),Iterator&lt;ImageReader&gt;,an Iterator containing ImageReaders.
javax.imageio.ImageIO.getImageReadersBySuffix(String),Iterator&lt;ImageReader&gt;,an Iterator containing ImageReaders.
javax.imageio.ImageIO.getImageReadersByMIMEType(String),Iterator&lt;ImageReader&gt;,an Iterator containing ImageReaders.
javax.imageio.ImageIO.getWriterFormatNames(),String[],an array of Strings.
javax.imageio.ImageIO.getWriterMIMETypes(),String[],an array of Strings.
javax.imageio.ImageIO.getWriterFileSuffixes(),String[],an array of Strings.
javax.imageio.ImageIO.getImageWritersByFormatName(String),Iterator&lt;ImageWriter&gt;,an Iterator containing ImageWriters.
javax.imageio.ImageIO.getImageWritersBySuffix(String),Iterator&lt;ImageWriter&gt;,an Iterator containing ImageWriters.
javax.imageio.ImageIO.getImageWritersByMIMEType(String),Iterator&lt;ImageWriter&gt;,an Iterator containing ImageWriters.
javax.imageio.ImageIO.getImageWriter(ImageReader),ImageWriter,"an ImageWriter, or null."
javax.imageio.ImageIO.getImageReader(ImageWriter),ImageReader,"an ImageReader, or null."
"javax.imageio.ImageIO.getImageWriters(ImageTypeSpecifier,String)",Iterator&lt;ImageWriter&gt;,an Iterator containing ImageWriters.
"javax.imageio.ImageIO.getImageTranscoders(ImageReader,ImageWriter)",Iterator&lt;ImageTranscoder&gt;,an Iterator containing ImageTranscoders.
javax.imageio.ImageIO.read(File),BufferedImage,"a BufferedImage containing the decoded contents of the input, or null."
javax.imageio.ImageIO.read(InputStream),BufferedImage,"a BufferedImage containing the decoded contents of the input, or null."
javax.imageio.ImageIO.read(URL),BufferedImage,"a BufferedImage containing the decoded contents of the input, or null."
javax.imageio.ImageIO.read(ImageInputStream),BufferedImage,"a BufferedImage containing the decoded contents of the input, or null."
"javax.imageio.ImageIO.write(RenderedImage,String,ImageOutputStream)",boolean,false if no appropriate writer is found.
"javax.imageio.ImageIO.write(RenderedImage,String,File)",boolean,false if no appropriate writer is found.
"javax.imageio.ImageIO.write(RenderedImage,String,OutputStream)",boolean,false if no appropriate writer is found.
javax.imageio.ImageReader.getFormatName(),String,"the format name, as a String."
javax.imageio.ImageReader.getOriginatingProvider(),ImageReaderSpi,"an ImageReaderSpi, or null."
"javax.imageio.ImageReader.setInput(Object,boolean,boolean)",void,
"javax.imageio.ImageReader.setInput(Object,boolean)",void,
javax.imageio.ImageReader.setInput(Object),void,
javax.imageio.ImageReader.getInput(),Object,"the Object that will be used for future decoding, or null."
javax.imageio.ImageReader.isSeekForwardOnly(),boolean,true if the input source is seek forward only.
javax.imageio.ImageReader.isIgnoringMetadata(),boolean,true if the metadata may be ignored.
javax.imageio.ImageReader.getMinIndex(),int,the minimum legal index for reading.
javax.imageio.ImageReader.getAvailableLocales(),Locale[],"an array of Locales that may be used as arguments to setLocale, or null."
javax.imageio.ImageReader.setLocale(Locale),void,
javax.imageio.ImageReader.getLocale(),Locale,"the current Locale, or null."
javax.imageio.ImageReader.getNumImages(boolean),abstractint,"the number of images, as an int, or -1 if allowSearch is false and a search would be required."
javax.imageio.ImageReader.getWidth(int),abstractint,"the width of the image, as an int."
javax.imageio.ImageReader.getHeight(int),abstractint,"the height of the image, as an int."
javax.imageio.ImageReader.isRandomAccessEasy(int),boolean,true if reading a region of interest of the given image is likely to be efficient.
javax.imageio.ImageReader.getAspectRatio(int),float,a float indicating the aspect ratio of the given image.
javax.imageio.ImageReader.getRawImageType(int),ImageTypeSpecifier,an ImageTypeSpecifier.
javax.imageio.ImageReader.getImageTypes(int),abstractIterator&lt;ImageTypeSpecifier&gt;,an Iterator containing at least one ImageTypeSpecifier representing suggested image types for decoding the current given image.
javax.imageio.ImageReader.getDefaultReadParam(),ImageReadParam,an ImageReadParam object which may be used to control the decoding process using a set of default settings.
javax.imageio.ImageReader.getStreamMetadata(),abstractIIOMetadata,"an IIOMetadata object, or null."
"javax.imageio.ImageReader.getStreamMetadata(String,Set&lt;String&gt;)",IIOMetadata,"an IIOMetadata object, or null."
javax.imageio.ImageReader.getImageMetadata(int),abstractIIOMetadata,"an IIOMetadata object, or null."
"javax.imageio.ImageReader.getImageMetadata(int,String,Set&lt;String&gt;)",IIOMetadata,"an IIOMetadata object, or null."
javax.imageio.ImageReader.read(int),BufferedImage,the desired portion of the image as a BufferedImage.
"javax.imageio.ImageReader.read(int,ImageReadParam)",abstractBufferedImage,the desired portion of the image as a BufferedImage.
"javax.imageio.ImageReader.readAll(int,ImageReadParam)",IIOImage,"an IIOImage containing the desired portion of the image, a set of thumbnails, and associated image metadata."
javax.imageio.ImageReader.readAll(Iterator&lt;?),Iterator&lt;IIOImage&gt;,an Iterator representing the contents of the input source as IIOImages.
javax.imageio.ImageReader.canReadRaster(),boolean,true if this plug-in supports reading raw Rasters.
"javax.imageio.ImageReader.readRaster(int,ImageReadParam)",Raster,the desired portion of the image as a Raster.
javax.imageio.ImageReader.isImageTiled(int),boolean,true if the image is tiled.
javax.imageio.ImageReader.getTileWidth(int),int,the width of a tile.
javax.imageio.ImageReader.getTileHeight(int),int,the height of a tile.
javax.imageio.ImageReader.getTileGridXOffset(int),int,the X offset of the tile grid.
javax.imageio.ImageReader.getTileGridYOffset(int),int,the Y offset of the tile grid.
"javax.imageio.ImageReader.readTile(int,int,int)",BufferedImage,the tile as a BufferedImage.
"javax.imageio.ImageReader.readTileRaster(int,int,int)",Raster,the tile as a Raster.
"javax.imageio.ImageReader.readAsRenderedImage(int,ImageReadParam)",RenderedImage,a RenderedImage object providing a view of the image.
javax.imageio.ImageReader.readerSupportsThumbnails(),boolean,true if thumbnails are supported.
javax.imageio.ImageReader.hasThumbnails(int),boolean,true if the given image has thumbnails.
javax.imageio.ImageReader.getNumThumbnails(int),int,the number of thumbnails associated with the given image.
"javax.imageio.ImageReader.getThumbnailWidth(int,int)",int,the width of the desired thumbnail as an int.
"javax.imageio.ImageReader.getThumbnailHeight(int,int)",int,the height of the desired thumbnail as an int.
"javax.imageio.ImageReader.readThumbnail(int,int)",BufferedImage,the desired thumbnail as a BufferedImage.
javax.imageio.ImageReader.abort(),void,
javax.imageio.ImageReader.abortRequested(),boolean,true if the current read operation should be aborted.
javax.imageio.ImageReader.clearAbortRequest(),void,
javax.imageio.ImageReader.addIIOReadWarningListener(IIOReadWarningListener),void,
javax.imageio.ImageReader.removeIIOReadWarningListener(IIOReadWarningListener),void,
javax.imageio.ImageReader.removeAllIIOReadWarningListeners(),void,
javax.imageio.ImageReader.addIIOReadProgressListener(IIOReadProgressListener),void,
javax.imageio.ImageReader.removeIIOReadProgressListener(IIOReadProgressListener),void,
javax.imageio.ImageReader.removeAllIIOReadProgressListeners(),void,
javax.imageio.ImageReader.addIIOReadUpdateListener(IIOReadUpdateListener),void,
javax.imageio.ImageReader.removeIIOReadUpdateListener(IIOReadUpdateListener),void,
javax.imageio.ImageReader.removeAllIIOReadUpdateListeners(),void,
javax.imageio.ImageReader.processSequenceStarted(int),void,
javax.imageio.ImageReader.processSequenceComplete(),void,
javax.imageio.ImageReader.processImageStarted(int),void,
javax.imageio.ImageReader.processImageProgress(float),void,
javax.imageio.ImageReader.processImageComplete(),void,
"javax.imageio.ImageReader.processThumbnailStarted(int,int)",void,
javax.imageio.ImageReader.processThumbnailProgress(float),void,
javax.imageio.ImageReader.processThumbnailComplete(),void,
javax.imageio.ImageReader.processReadAborted(),void,
"javax.imageio.ImageReader.processPassStarted(BufferedImage,int,int,int,int,int,int,int,int[])",void,
"javax.imageio.ImageReader.processImageUpdate(BufferedImage,int,int,int,int,int,int,int[])",void,
javax.imageio.ImageReader.processPassComplete(BufferedImage),void,
"javax.imageio.ImageReader.processThumbnailPassStarted(BufferedImage,int,int,int,int,int,int,int,int[])",void,
"javax.imageio.ImageReader.processThumbnailUpdate(BufferedImage,int,int,int,int,int,int,int[])",void,
javax.imageio.ImageReader.processThumbnailPassComplete(BufferedImage),void,
javax.imageio.ImageReader.processWarningOccurred(String),void,
"javax.imageio.ImageReader.processWarningOccurred(String,String)",void,
javax.imageio.ImageReader.reset(),void,
javax.imageio.ImageReader.dispose(),void,
"javax.imageio.ImageReader.getSourceRegion(ImageReadParam,int,int)",Rectangle,the source region as a Rectangle.
"javax.imageio.ImageReader.computeRegions(ImageReadParam,int,int,BufferedImage,Rectangle,Rectangle)",void,
"javax.imageio.ImageReader.checkReadParamBandSettings(ImageReadParam,int,int)",void,
"javax.imageio.ImageReader.getDestination(ImageReadParam,Iterator&lt;ImageTypeSpecifier&gt;,int,int)",BufferedImage,the BufferedImage to which decoded pixel data should be written.
javax.imageio.ImageReadParam.setDestinationType(ImageTypeSpecifier),void,
javax.imageio.ImageReadParam.setDestination(BufferedImage),void,
javax.imageio.ImageReadParam.getDestination(),BufferedImage,the BufferedImage to be written to.
javax.imageio.ImageReadParam.setDestinationBands(int[]),void,
javax.imageio.ImageReadParam.getDestinationBands(),int[],"the indices of the destination bands to be used, or null."
javax.imageio.ImageReadParam.canSetSourceRenderSize(),boolean,true if setting source rendering size is supported.
javax.imageio.ImageReadParam.setSourceRenderSize(Dimension),void,
javax.imageio.ImageReadParam.getSourceRenderSize(),Dimension,the rendered width and height of the source image as a Dimension.
"javax.imageio.ImageReadParam.setSourceProgressivePasses(int,int)",void,
javax.imageio.ImageReadParam.getSourceMinProgressivePass(),int,the index of the first pass that will be decoded.
javax.imageio.ImageReadParam.getSourceMaxProgressivePass(),int,"the index of the last pass to be read, or Integer.MAX_VALUE."
javax.imageio.ImageReadParam.getSourceNumProgressivePasses(),int,the number of the passes that will be decoded.
"javax.imageio.ImageTypeSpecifier.createPacked(ColorSpace,int,int,int,int,int,boolean)",ImageTypeSpecifier,an ImageTypeSpecifier with the desired characteristics.
"javax.imageio.ImageTypeSpecifier.createInterleaved(ColorSpace,int[],int,boolean,boolean)",ImageTypeSpecifier,an ImageTypeSpecifier with the desired characteristics.
"javax.imageio.ImageTypeSpecifier.createBanded(ColorSpace,int[],int[],int,boolean,boolean)",ImageTypeSpecifier,an ImageTypeSpecifier with the desired characteristics.
"javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean)",ImageTypeSpecifier,an ImageTypeSpecifier with the desired characteristics.
"javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean,boolean)",ImageTypeSpecifier,an ImageTypeSpecifier with the desired characteristics.
"javax.imageio.ImageTypeSpecifier.createIndexed(byte[],byte[],byte[],byte[],int,int)",ImageTypeSpecifier,an ImageTypeSpecifier with the desired characteristics.
javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int),ImageTypeSpecifier,an ImageTypeSpecifier with the desired characteristics.
javax.imageio.ImageTypeSpecifier.createFromRenderedImage(RenderedImage),ImageTypeSpecifier,an ImageTypeSpecifier with the desired characteristics.
javax.imageio.ImageTypeSpecifier.getBufferedImageType(),int,an int representing a BufferedImage type.
javax.imageio.ImageTypeSpecifier.getNumComponents(),int,the number of components in the image.
javax.imageio.ImageTypeSpecifier.getNumBands(),int,the number of bands in the image.
javax.imageio.ImageTypeSpecifier.getBitsPerBand(int),int,an int specifying a number of bits.
javax.imageio.ImageTypeSpecifier.getSampleModel(),SampleModel,a SampleModel with arbitrary dimensions.
"javax.imageio.ImageTypeSpecifier.getSampleModel(int,int)",SampleModel,a SampleModel with the given dimensions.
javax.imageio.ImageTypeSpecifier.getColorModel(),ColorModel,a ColorModel.
"javax.imageio.ImageTypeSpecifier.createBufferedImage(int,int)",BufferedImage,a new BufferedImage
javax.imageio.ImageTypeSpecifier.equals(Object),boolean,true if the given object is an equivalent ImageTypeSpecifier.
javax.imageio.ImageTypeSpecifier.hashCode(),int,a hash code for this ImageTypeSpecifier
javax.imageio.ImageWriteParam.getLocale(),Locale,"the current Locale, or null."
javax.imageio.ImageWriteParam.canWriteTiles(),boolean,true if the writer supports tiling.
javax.imageio.ImageWriteParam.canOffsetTiles(),boolean,true if the writer supports non-zero tile offsets.
javax.imageio.ImageWriteParam.setTilingMode(int),void,
javax.imageio.ImageWriteParam.getTilingMode(),int,the current tiling mode.
javax.imageio.ImageWriteParam.getPreferredTileSizes(),Dimension[],"an array of Dimensions with an even length of at least two, or null."
"javax.imageio.ImageWriteParam.setTiling(int,int,int,int)",void,
javax.imageio.ImageWriteParam.unsetTiling(),void,
javax.imageio.ImageWriteParam.getTileWidth(),int,the tile width to be used for encoding.
javax.imageio.ImageWriteParam.getTileHeight(),int,the tile height to be used for encoding.
javax.imageio.ImageWriteParam.getTileGridXOffset(),int,the tile grid X offset to be used for encoding.
javax.imageio.ImageWriteParam.getTileGridYOffset(),int,the tile grid Y offset to be used for encoding.
javax.imageio.ImageWriteParam.canWriteProgressive(),boolean,true if the writer supports progressive encoding.
javax.imageio.ImageWriteParam.setProgressiveMode(int),void,
javax.imageio.ImageWriteParam.getProgressiveMode(),int,the current mode for progressive encoding.
javax.imageio.ImageWriteParam.canWriteCompressed(),boolean,true if the writer supports compression.
javax.imageio.ImageWriteParam.setCompressionMode(int),void,
javax.imageio.ImageWriteParam.getCompressionMode(),int,the current compression mode.
javax.imageio.ImageWriteParam.getCompressionTypes(),String[],"an array of Strings containing the (non-localized) names of available compression types, or null."
javax.imageio.ImageWriteParam.setCompressionType(String),void,
javax.imageio.ImageWriteParam.getCompressionType(),String,"the current compression type as a String, or null if no type is set."
javax.imageio.ImageWriteParam.unsetCompression(),void,
javax.imageio.ImageWriteParam.getLocalizedCompressionTypeName(),String,a String containing a localized version of the name of the current compression type.
javax.imageio.ImageWriteParam.isCompressionLossless(),boolean,true if the current compression type is lossless.
javax.imageio.ImageWriteParam.setCompressionQuality(float),void,
javax.imageio.ImageWriteParam.getCompressionQuality(),float,the current compression quality setting.
javax.imageio.ImageWriteParam.getBitRate(float),float,"an estimate of the compressed bit rate, or -1.0F if no estimate is available."
javax.imageio.ImageWriteParam.getCompressionQualityDescriptions(),String[],an array of Strings containing localized descriptions of the compression quality levels.
javax.imageio.ImageWriteParam.getCompressionQualityValues(),float[],an array of floats indicating the boundaries between the compression quality levels as described by the Strings from getCompressionQualityDescriptions.
javax.imageio.ImageWriter.getOriginatingProvider(),ImageWriterSpi,"an ImageWriterSpi, or null."
javax.imageio.ImageWriter.setOutput(Object),void,
javax.imageio.ImageWriter.getOutput(),Object,"the Object that was specified using setOutput, or null."
javax.imageio.ImageWriter.getAvailableLocales(),Locale[],"an array of Locales that may be used as arguments to setLocale, or null."
javax.imageio.ImageWriter.setLocale(Locale),void,
javax.imageio.ImageWriter.getLocale(),Locale,"the current Locale, or null."
javax.imageio.ImageWriter.getDefaultWriteParam(),ImageWriteParam,a new ImageWriteParam object containing default values.
javax.imageio.ImageWriter.getDefaultStreamMetadata(ImageWriteParam),abstractIIOMetadata,an IIOMetadata object.
"javax.imageio.ImageWriter.getDefaultImageMetadata(ImageTypeSpecifier,ImageWriteParam)",abstractIIOMetadata,an IIOMetadata object.
"javax.imageio.ImageWriter.convertStreamMetadata(IIOMetadata,ImageWriteParam)",abstractIIOMetadata,"an IIOMetadata object, or null if the plug-in does not provide metadata encoding capabilities."
"javax.imageio.ImageWriter.convertImageMetadata(IIOMetadata,ImageTypeSpecifier,ImageWriteParam)",abstractIIOMetadata,"an IIOMetadata object, or null if the plug-in does not provide metadata encoding capabilities."
"javax.imageio.ImageWriter.getNumThumbnailsSupported(ImageTypeSpecifier,ImageWriteParam,IIOMetadata,IIOMetadata)",int,"the number of thumbnails that may be written given the supplied parameters, or -1 if insufficient information is available."
"javax.imageio.ImageWriter.getPreferredThumbnailSizes(ImageTypeSpecifier,ImageWriteParam,IIOMetadata,IIOMetadata)",Dimension[],"an array of Dimensions with an even length of at least two, or null."
javax.imageio.ImageWriter.canWriteRasters(),boolean,true if Raster sources are supported.
"javax.imageio.ImageWriter.write(IIOMetadata,IIOImage,ImageWriteParam)",abstractvoid,
javax.imageio.ImageWriter.write(IIOImage),void,
javax.imageio.ImageWriter.write(RenderedImage),void,
javax.imageio.ImageWriter.canWriteSequence(),boolean,true if images may be appended sequentially.
javax.imageio.ImageWriter.prepareWriteSequence(IIOMetadata),void,
"javax.imageio.ImageWriter.writeToSequence(IIOImage,ImageWriteParam)",void,
javax.imageio.ImageWriter.endWriteSequence(),void,
javax.imageio.ImageWriter.canReplaceStreamMetadata(),boolean,true if replacement of stream metadata is allowed.
javax.imageio.ImageWriter.replaceStreamMetadata(IIOMetadata),void,
javax.imageio.ImageWriter.canReplaceImageMetadata(int),boolean,true if the image metadata of the given image can be replaced.
"javax.imageio.ImageWriter.replaceImageMetadata(int,IIOMetadata)",void,
javax.imageio.ImageWriter.canInsertImage(int),boolean,true if an image may be inserted at the given index.
"javax.imageio.ImageWriter.writeInsert(int,IIOImage,ImageWriteParam)",void,
javax.imageio.ImageWriter.canRemoveImage(int),boolean,true if it is possible to remove the given image.
javax.imageio.ImageWriter.removeImage(int),void,
javax.imageio.ImageWriter.canWriteEmpty(),boolean,true if the writing of complete image stream with contents to be defined later is supported.
"javax.imageio.ImageWriter.prepareWriteEmpty(IIOMetadata,ImageTypeSpecifier,int,int,IIOMetadata,List&lt;?,ImageWriteParam)",void,
javax.imageio.ImageWriter.endWriteEmpty(),void,
javax.imageio.ImageWriter.canInsertEmpty(int),boolean,true if an empty image may be inserted at the given index.
"javax.imageio.ImageWriter.prepareInsertEmpty(int,ImageTypeSpecifier,int,int,IIOMetadata,List&lt;?,ImageWriteParam)",void,
javax.imageio.ImageWriter.endInsertEmpty(),void,
javax.imageio.ImageWriter.canReplacePixels(int),boolean,true if the pixels of the given image can be replaced.
"javax.imageio.ImageWriter.prepareReplacePixels(int,Rectangle)",void,
"javax.imageio.ImageWriter.replacePixels(RenderedImage,ImageWriteParam)",void,
"javax.imageio.ImageWriter.replacePixels(Raster,ImageWriteParam)",void,
javax.imageio.ImageWriter.endReplacePixels(),void,
javax.imageio.ImageWriter.abort(),void,
javax.imageio.ImageWriter.abortRequested(),boolean,true if the current write operation should be aborted.
javax.imageio.ImageWriter.clearAbortRequest(),void,
javax.imageio.ImageWriter.addIIOWriteWarningListener(IIOWriteWarningListener),void,
javax.imageio.ImageWriter.removeIIOWriteWarningListener(IIOWriteWarningListener),void,
javax.imageio.ImageWriter.removeAllIIOWriteWarningListeners(),void,
javax.imageio.ImageWriter.addIIOWriteProgressListener(IIOWriteProgressListener),void,
javax.imageio.ImageWriter.removeIIOWriteProgressListener(IIOWriteProgressListener),void,
javax.imageio.ImageWriter.removeAllIIOWriteProgressListeners(),void,
javax.imageio.ImageWriter.processImageStarted(int),void,
javax.imageio.ImageWriter.processImageProgress(float),void,
javax.imageio.ImageWriter.processImageComplete(),void,
"javax.imageio.ImageWriter.processThumbnailStarted(int,int)",void,
javax.imageio.ImageWriter.processThumbnailProgress(float),void,
javax.imageio.ImageWriter.processThumbnailComplete(),void,
javax.imageio.ImageWriter.processWriteAborted(),void,
"javax.imageio.ImageWriter.processWarningOccurred(int,String)",void,
"javax.imageio.ImageWriter.processWarningOccurred(int,String,String)",void,
javax.imageio.ImageWriter.reset(),void,
javax.imageio.ImageWriter.dispose(),void,
javax.imageio.metadata.IIOMetadata.isStandardMetadataFormatSupported(),boolean,true if the standard metadata format is supported.
javax.imageio.metadata.IIOMetadata.isReadOnly(),abstractboolean,true if this IIOMetadata object cannot be modified.
javax.imageio.metadata.IIOMetadata.getNativeMetadataFormatName(),String,"the name of the native format, or null."
javax.imageio.metadata.IIOMetadata.getExtraMetadataFormatNames(),String[],"an array of Strings with length at least 1, or null."
javax.imageio.metadata.IIOMetadata.getMetadataFormatNames(),String[],an array of Strings.
javax.imageio.metadata.IIOMetadata.getMetadataFormat(String),IIOMetadataFormat,an IIOMetadataFormat object.
javax.imageio.metadata.IIOMetadata.getAsTree(String),abstractNode,an XML DOM Node object forming the root of a tree.
"javax.imageio.metadata.IIOMetadata.mergeTree(String,Node)",abstractvoid,
javax.imageio.metadata.IIOMetadata.getStandardChromaNode(),IIOMetadataNode,"an IIOMetadataNode, or null."
javax.imageio.metadata.IIOMetadata.getStandardCompressionNode(),IIOMetadataNode,"an IIOMetadataNode, or null."
javax.imageio.metadata.IIOMetadata.getStandardDataNode(),IIOMetadataNode,"an IIOMetadataNode, or null."
javax.imageio.metadata.IIOMetadata.getStandardDimensionNode(),IIOMetadataNode,"an IIOMetadataNode, or null."
javax.imageio.metadata.IIOMetadata.getStandardDocumentNode(),IIOMetadataNode,"an IIOMetadataNode, or null."
javax.imageio.metadata.IIOMetadata.getStandardTextNode(),IIOMetadataNode,"an IIOMetadataNode, or null."
javax.imageio.metadata.IIOMetadata.getStandardTileNode(),IIOMetadataNode,"an IIOMetadataNode, or null."
javax.imageio.metadata.IIOMetadata.getStandardTransparencyNode(),IIOMetadataNode,"an IIOMetadataNode, or null."
javax.imageio.metadata.IIOMetadata.getStandardTree(),IIOMetadataNode,an IIOMetadataNode representing the root of a metadata tree in the javax_imageio_1.0 format.
"javax.imageio.metadata.IIOMetadata.setFromTree(String,Node)",void,
javax.imageio.metadata.IIOMetadata.reset(),abstractvoid,
javax.imageio.metadata.IIOMetadata.setController(IIOMetadataController),void,
javax.imageio.metadata.IIOMetadata.getController(),IIOMetadataController,"the currently installed IIOMetadataController, or null."
javax.imageio.metadata.IIOMetadata.getDefaultController(),IIOMetadataController,"the default IIOMetadataController, or null."
javax.imageio.metadata.IIOMetadata.hasController(),boolean,true if a controller is installed.
javax.imageio.metadata.IIOMetadata.activateController(),boolean,true if the controller completed normally.
javax.imageio.metadata.IIOMetadataFormatImpl.setResourceBaseName(String),void,
javax.imageio.metadata.IIOMetadataFormatImpl.getResourceBaseName(),String,a String containing the base name.
"javax.imageio.metadata.IIOMetadataFormatImpl.addElement(String,String,int)",void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addElement(String,String,int,int)",void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addChildElement(String,String)",void,
javax.imageio.metadata.IIOMetadataFormatImpl.removeElement(String),void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String)",void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String,List&lt;String&gt;)",void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String,String,String,boolean,boolean)",void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,int,int)",void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addBooleanAttribute(String,String,boolean,boolean)",void,
"javax.imageio.metadata.IIOMetadataFormatImpl.removeAttribute(String,String)",void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class&lt;T&gt;,boolean,T)",&lt;T&gt;void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class&lt;T&gt;,boolean,T,List&lt;?)",&lt;T&gt;void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class&lt;T&gt;,T,Comparable&lt;?,Comparable&lt;?,boolean,boolean)",&lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt;void,
"javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class&lt;?&gt;,int,int)",void,
javax.imageio.metadata.IIOMetadataFormatImpl.removeObjectValue(String),void,
javax.imageio.metadata.IIOMetadataFormatImpl.getRootName(),String,a String.
"javax.imageio.metadata.IIOMetadataFormatImpl.canNodeAppear(String,ImageTypeSpecifier)",abstractboolean,true if the node is meaningful for images of the given type.
javax.imageio.metadata.IIOMetadataFormatImpl.getElementMinChildren(String),int,an int.
javax.imageio.metadata.IIOMetadataFormatImpl.getElementMaxChildren(String),int,an int.
"javax.imageio.metadata.IIOMetadataFormatImpl.getElementDescription(String,Locale)",String,the element description.
javax.imageio.metadata.IIOMetadataFormatImpl.getChildPolicy(String),int,one of the CHILD_POLICY_* constants.
javax.imageio.metadata.IIOMetadataFormatImpl.getChildNames(String),String[],"an array of Strings, or null."
javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeNames(String),String[],an array of Strings.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeValueType(String,String)",int,one of the VALUE_* constants.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDataType(String,String)",int,one of the DATATYPE_* constants.
"javax.imageio.metadata.IIOMetadataFormatImpl.isAttributeRequired(String,String)",boolean,true if the attribute must be present.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDefaultValue(String,String)",String,"a String containing the default value, or null."
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeEnumerations(String,String)",String[],an array of Strings.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeMinValue(String,String)",String,a String containing the smallest legal value for the attribute.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeMaxValue(String,String)",String,a String containing the largest legal value for the attribute.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeListMinLength(String,String)",int,the smallest legal number of list items for the attribute.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeListMaxLength(String,String)",int,the largest legal number of list items for the attribute.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDescription(String,String,Locale)",String,the attribute description.
javax.imageio.metadata.IIOMetadataFormatImpl.getObjectValueType(String),int,one of the VALUE_* constants.
javax.imageio.metadata.IIOMetadataFormatImpl.getObjectClass(String),Class&lt;?&gt;,a Class object.
javax.imageio.metadata.IIOMetadataFormatImpl.getObjectDefaultValue(String),Object,an Object.
javax.imageio.metadata.IIOMetadataFormatImpl.getObjectEnumerations(String),Object[],an array of Objects.
javax.imageio.metadata.IIOMetadataFormatImpl.getObjectMinValue(String),Comparable&lt;?&gt;,the smallest legal value for the attribute.
javax.imageio.metadata.IIOMetadataFormatImpl.getObjectMaxValue(String),Comparable&lt;?&gt;,the smallest legal value for the attribute.
javax.imageio.metadata.IIOMetadataFormatImpl.getObjectArrayMinLength(String),int,the smallest valid array length for the Object reference.
javax.imageio.metadata.IIOMetadataFormatImpl.getObjectArrayMaxLength(String),int,the largest valid array length for the Object reference.
javax.imageio.metadata.IIOMetadataFormatImpl.getStandardFormatInstance(),IIOMetadataFormat,a predefined IIOMetadataFormat instance.
javax.imageio.metadata.IIOMetadataNode.getNodeName(),String,"the node name, as a String."
javax.imageio.metadata.IIOMetadataNode.getNodeValue(),String,"the node value, as a String."
javax.imageio.metadata.IIOMetadataNode.setNodeValue(String),void,
javax.imageio.metadata.IIOMetadataNode.getNodeType(),short,the short value ELEMENT_NODE.
javax.imageio.metadata.IIOMetadataNode.getParentNode(),Node,"the parent, as a Node."
javax.imageio.metadata.IIOMetadataNode.getChildNodes(),NodeList,the children as a NodeList
javax.imageio.metadata.IIOMetadataNode.getFirstChild(),Node,"the first child, as a Node, or null"
javax.imageio.metadata.IIOMetadataNode.getLastChild(),Node,"the last child, as a Node, or null."
javax.imageio.metadata.IIOMetadataNode.getPreviousSibling(),Node,"the previous sibling, as a Node, or null."
javax.imageio.metadata.IIOMetadataNode.getNextSibling(),Node,"the next sibling, as a Node, or null."
javax.imageio.metadata.IIOMetadataNode.getAttributes(),NamedNodeMap,a NamedNodeMap containing the attributes of this node.
javax.imageio.metadata.IIOMetadataNode.getOwnerDocument(),Document,null.
"javax.imageio.metadata.IIOMetadataNode.insertBefore(Node,Node)",Node,the node being inserted.
"javax.imageio.metadata.IIOMetadataNode.replaceChild(Node,Node)",Node,the node replaced.
javax.imageio.metadata.IIOMetadataNode.removeChild(Node),Node,the node removed.
javax.imageio.metadata.IIOMetadataNode.appendChild(Node),Node,the node added.
javax.imageio.metadata.IIOMetadataNode.hasChildNodes(),boolean,true if this node has children.
javax.imageio.metadata.IIOMetadataNode.cloneNode(boolean),Node,the duplicate node.
javax.imageio.metadata.IIOMetadataNode.normalize(),void,
"javax.imageio.metadata.IIOMetadataNode.isSupported(String,String)",boolean,false.
javax.imageio.metadata.IIOMetadataNode.getNamespaceURI(),String,
javax.imageio.metadata.IIOMetadataNode.getPrefix(),String,null.
javax.imageio.metadata.IIOMetadataNode.setPrefix(String),void,
javax.imageio.metadata.IIOMetadataNode.getLocalName(),String,"the node name, as a String."
javax.imageio.metadata.IIOMetadataNode.getTagName(),String,"the node name, as a String"
javax.imageio.metadata.IIOMetadataNode.getAttribute(String),String,"The Attr value as a string, or the empty string if that attribute does not have a specified or default value."
"javax.imageio.metadata.IIOMetadataNode.getAttributeNS(String,String)",String,"The Attr value as a string, or the empty string if that attribute does not have a specified or default value."
"javax.imageio.metadata.IIOMetadataNode.setAttribute(String,String)",void,
"javax.imageio.metadata.IIOMetadataNode.setAttributeNS(String,String,String)",void,
javax.imageio.metadata.IIOMetadataNode.removeAttribute(String),void,
"javax.imageio.metadata.IIOMetadataNode.removeAttributeNS(String,String)",void,
javax.imageio.metadata.IIOMetadataNode.getAttributeNode(String),Attr,The Attr node with the specified name ( nodeName) or null if there is no such attribute.
"javax.imageio.metadata.IIOMetadataNode.getAttributeNodeNS(String,String)",Attr,The Attr node with the specified attribute local name and namespace URI or null if there is no such attribute.
javax.imageio.metadata.IIOMetadataNode.setAttributeNode(Attr),Attr,"If the newAttr attribute replaces an existing attribute, the replaced Attr node is returned, otherwise null is returned."
javax.imageio.metadata.IIOMetadataNode.setAttributeNodeNS(Attr),Attr,"If the newAttr attribute replaces an existing attribute with the same local name and namespace URI, the replaced Attr node is returned, otherwise null is returned."
javax.imageio.metadata.IIOMetadataNode.removeAttributeNode(Attr),Attr,The Attr node that was removed.
javax.imageio.metadata.IIOMetadataNode.getElementsByTagName(String),NodeList,A list of matching Element nodes.
"javax.imageio.metadata.IIOMetadataNode.getElementsByTagNameNS(String,String)",NodeList,A new NodeList object containing all the matched Elements.
javax.imageio.metadata.IIOMetadataNode.hasAttributes(),boolean,"Returns true if this node has any attributes, false otherwise."
javax.imageio.metadata.IIOMetadataNode.hasAttribute(String),boolean,"true if an attribute with the given name is specified on this element or has a default value, false otherwise."
"javax.imageio.metadata.IIOMetadataNode.hasAttributeNS(String,String)",boolean,"true if an attribute with the given local name and namespace URI is specified or has a default value on this element, false otherwise."
javax.imageio.metadata.IIOMetadataNode.getLength(),int,
javax.imageio.metadata.IIOMetadataNode.item(int),Node,"The node at the indexth position in the NodeList, or null if that is not a valid index."
javax.imageio.metadata.IIOMetadataNode.getUserObject(),Object,the user Object.
javax.imageio.metadata.IIOMetadataNode.setUserObject(Object),void,
"javax.imageio.metadata.IIOMetadataNode.setIdAttribute(String,boolean)",void,
"javax.imageio.metadata.IIOMetadataNode.setIdAttributeNS(String,String,boolean)",void,
"javax.imageio.metadata.IIOMetadataNode.setIdAttributeNode(Attr,boolean)",void,
javax.imageio.metadata.IIOMetadataNode.getSchemaTypeInfo(),TypeInfo,
"javax.imageio.metadata.IIOMetadataNode.setUserData(String,Object,UserDataHandler)",Object,"Returns the DOMUserData previously associated to the given key on this node, or null if there was none."
javax.imageio.metadata.IIOMetadataNode.getUserData(String),Object,"Returns the DOMUserData associated to the given key on this node, or null if there was none."
"javax.imageio.metadata.IIOMetadataNode.getFeature(String,String)",Object,"Returns an object which implements the specialized APIs of the specified feature and version, if any, or null if there is no object which implements interfaces associated with that feature. If the DOMObject returned by this method implements the Node interface, it must delegate to the primary core Node and not return results inconsistent with the primary core Node such as attributes, childNodes, etc."
javax.imageio.metadata.IIOMetadataNode.isSameNode(Node),boolean,"Returns true if the nodes are the same, false otherwise."
javax.imageio.metadata.IIOMetadataNode.isEqualNode(Node),boolean,"Returns true if the nodes are equal, false otherwise."
javax.imageio.metadata.IIOMetadataNode.lookupNamespaceURI(String),String,Returns the associated namespace URI or null if none is found.
javax.imageio.metadata.IIOMetadataNode.isDefaultNamespace(String),boolean,"Returns true if the specified namespaceURI is the default namespace, false otherwise."
javax.imageio.metadata.IIOMetadataNode.lookupPrefix(String),String,"Returns an associated namespace prefix if found or null if none is found. If more than one prefix are associated to the namespace prefix, the returned namespace prefix is implementation dependent."
javax.imageio.metadata.IIOMetadataNode.getTextContent(),String,
javax.imageio.metadata.IIOMetadataNode.setTextContent(String),void,
javax.imageio.metadata.IIOMetadataNode.compareDocumentPosition(Node),short,Returns how the node is positioned relatively to the reference node.
javax.imageio.metadata.IIOMetadataNode.getBaseURI(),String,
javax.imageio.plugins.bmp.BMPImageWriteParam.setTopDown(boolean),void,
javax.imageio.plugins.bmp.BMPImageWriteParam.isTopDown(),boolean,whether the data are written in top-down order.
javax.imageio.plugins.jpeg.JPEGHuffmanTable.getLengths(),short[],a short array where array[k-1] is equal to the number of values in the table of length k.
javax.imageio.plugins.jpeg.JPEGHuffmanTable.getValues(),short[],a short array of values.
javax.imageio.plugins.jpeg.JPEGHuffmanTable.toString(),String,a String representing this Huffman table.
javax.imageio.plugins.jpeg.JPEGImageReadParam.areTablesSet(),boolean,true if tables are present.
"javax.imageio.plugins.jpeg.JPEGImageReadParam.setDecodeTables(JPEGQTable[],JPEGHuffmanTable[],JPEGHuffmanTable[])",void,
javax.imageio.plugins.jpeg.JPEGImageReadParam.unsetDecodeTables(),void,
javax.imageio.plugins.jpeg.JPEGImageReadParam.getQTables(),JPEGQTable[],"an array of JPEGQTable objects, or null."
javax.imageio.plugins.jpeg.JPEGImageReadParam.getDCHuffmanTables(),JPEGHuffmanTable[],"an array of JPEGHuffmanTable objects, or null."
javax.imageio.plugins.jpeg.JPEGImageReadParam.getACHuffmanTables(),JPEGHuffmanTable[],"an array of JPEGHuffmanTable objects, or null."
javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetCompression(),void,
javax.imageio.plugins.jpeg.JPEGImageWriteParam.isCompressionLossless(),boolean,false.
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getCompressionQualityDescriptions(),String[],an array of Strings containing localized descriptions of the compression quality levels.
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getCompressionQualityValues(),float[],an array of floats indicating the boundaries between the compression quality levels as described by the Strings from getCompressionQualityDescriptions.
javax.imageio.plugins.jpeg.JPEGImageWriteParam.areTablesSet(),boolean,true if tables are present.
"javax.imageio.plugins.jpeg.JPEGImageWriteParam.setEncodeTables(JPEGQTable[],JPEGHuffmanTable[],JPEGHuffmanTable[])",void,
javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetEncodeTables(),void,
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getQTables(),JPEGQTable[],"an array of JPEGQTable objects, or null."
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getDCHuffmanTables(),JPEGHuffmanTable[],"an array of JPEGHuffmanTable objects, or null."
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getACHuffmanTables(),JPEGHuffmanTable[],"an array of JPEGHuffmanTable objects, or null."
javax.imageio.plugins.jpeg.JPEGImageWriteParam.setOptimizeHuffmanTables(boolean),void,
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getOptimizeHuffmanTables(),boolean,true if the writer will generate optimized Huffman tables.
javax.imageio.plugins.jpeg.JPEGQTable.getTable(),int[],A copy of the current quantization table.
"javax.imageio.plugins.jpeg.JPEGQTable.getScaledInstance(float,boolean)",JPEGQTable,a new quantization table that is a linear multiple of the current table.
javax.imageio.plugins.jpeg.JPEGQTable.toString(),String,a String representing this quantization table.
javax.imageio.spi.IIORegistry.getDefaultInstance(),IIORegistry,the default registry for the current ThreadGroup.
javax.imageio.spi.IIORegistry.registerApplicationClasspathSpis(),void,
"javax.imageio.spi.IIOServiceProvider.onRegistration(ServiceRegistry,Class&lt;?&gt;)",void,
"javax.imageio.spi.IIOServiceProvider.onDeregistration(ServiceRegistry,Class&lt;?&gt;)",void,
javax.imageio.spi.IIOServiceProvider.getVendorName(),String,a non-null String containing the name of the vendor.
javax.imageio.spi.IIOServiceProvider.getVersion(),String,a non-null String containing the version of this service provider.
javax.imageio.spi.IIOServiceProvider.getDescription(Locale),abstractString,a String containing a description of this service provider.
javax.imageio.spi.ImageInputStreamSpi.getInputClass(),Class&lt;?&gt;,a Class variable.
javax.imageio.spi.ImageInputStreamSpi.canUseCacheFile(),boolean,true if a cache file can be used by the input streams created by this service provider.
javax.imageio.spi.ImageInputStreamSpi.needsCacheFile(),boolean,true if a cache file is needed by the input streams created by this service provider.
"javax.imageio.spi.ImageInputStreamSpi.createInputStreamInstance(Object,boolean,File)",abstractImageInputStream,an ImageInputStream instance.
javax.imageio.spi.ImageInputStreamSpi.createInputStreamInstance(Object),ImageInputStream,an ImageInputStream instance.
javax.imageio.spi.ImageOutputStreamSpi.getOutputClass(),Class&lt;?&gt;,a Class variable.
javax.imageio.spi.ImageOutputStreamSpi.canUseCacheFile(),boolean,true if a cache file can be used by the output streams created by this service provider.
javax.imageio.spi.ImageOutputStreamSpi.needsCacheFile(),boolean,true if a cache file is needed by the output streams created by this service provider.
"javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(Object,boolean,File)",abstractImageOutputStream,an ImageOutputStream instance.
javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(Object),ImageOutputStream,an ImageOutputStream instance.
javax.imageio.spi.ImageReaderSpi.getInputTypes(),Class[],a non-null array of Classobjects of length at least 1.
javax.imageio.spi.ImageReaderSpi.canDecodeInput(Object),abstractboolean,true if it is likely that this stream can be decoded.
javax.imageio.spi.ImageReaderSpi.createReaderInstance(),ImageReader,an ImageReader instance.
javax.imageio.spi.ImageReaderSpi.createReaderInstance(Object),abstractImageReader,an ImageReader instance.
javax.imageio.spi.ImageReaderSpi.isOwnReader(ImageReader),boolean,true if reader is recognized.
javax.imageio.spi.ImageReaderSpi.getImageWriterSpiNames(),String[],"an array of Strings of length at least 1 containing names of ImageWriterSpi, or null."
javax.imageio.spi.ImageReaderWriterSpi.getFormatNames(),String[],a non-null array of Strings or length at least 1 containing informal format names associated with this reader or writer.
javax.imageio.spi.ImageReaderWriterSpi.getFileSuffixes(),String[],"an array of Strings or length at least 1 containing common file suffixes associated with this reader or writer, or null."
javax.imageio.spi.ImageReaderWriterSpi.getMIMETypes(),String[],"an array of Strings or length at least 1 containing MIME types associated with this reader or writer, or null."
javax.imageio.spi.ImageReaderWriterSpi.getPluginClassName(),String,"the class name, as a non-nullString."
javax.imageio.spi.ImageReaderWriterSpi.isStandardStreamMetadataFormatSupported(),boolean,true if the standard format is supported for stream metadata.
javax.imageio.spi.ImageReaderWriterSpi.getNativeStreamMetadataFormatName(),String,"the name of the native stream metadata format, or null."
javax.imageio.spi.ImageReaderWriterSpi.getExtraStreamMetadataFormatNames(),String[],"an array of Strings, or null."
javax.imageio.spi.ImageReaderWriterSpi.isStandardImageMetadataFormatSupported(),boolean,true if the standard format is supported for image metadata.
javax.imageio.spi.ImageReaderWriterSpi.getNativeImageMetadataFormatName(),String,"the name of the native image metadata format, or null."
javax.imageio.spi.ImageReaderWriterSpi.getExtraImageMetadataFormatNames(),String[],"an array of Strings, or null."
javax.imageio.spi.ImageReaderWriterSpi.getStreamMetadataFormat(String),IIOMetadataFormat,an IIOMetadataFormat object.
javax.imageio.spi.ImageReaderWriterSpi.getImageMetadataFormat(String),IIOMetadataFormat,an IIOMetadataFormat object.
javax.imageio.spi.ImageTranscoderSpi.getReaderServiceProviderName(),abstractString,a String containing the fully-qualified class name of the ImageReaderSpi implementation class.
javax.imageio.spi.ImageTranscoderSpi.getWriterServiceProviderName(),abstractString,a String containing the fully-qualified class name of the ImageWriterSpi implementation class.
javax.imageio.spi.ImageTranscoderSpi.createTranscoderInstance(),abstractImageTranscoder,an ImageTranscoder instance.
javax.imageio.spi.ImageWriterSpi.isFormatLossless(),boolean,true if the format preserves full pixel accuracy.
javax.imageio.spi.ImageWriterSpi.getOutputTypes(),Class[],a non-null array of Classobjects of length at least 1.
javax.imageio.spi.ImageWriterSpi.canEncodeImage(ImageTypeSpecifier),abstractboolean,true if this writer is likely to be able to encode images with the given layout.
javax.imageio.spi.ImageWriterSpi.canEncodeImage(RenderedImage),boolean,true if this writer is likely to be able to encode this image.
javax.imageio.spi.ImageWriterSpi.createWriterInstance(),ImageWriter,an ImageWriter instance.
javax.imageio.spi.ImageWriterSpi.createWriterInstance(Object),abstractImageWriter,an ImageWriter instance.
javax.imageio.spi.ImageWriterSpi.isOwnWriter(ImageWriter),boolean,true if writer is recognized
javax.imageio.spi.ImageWriterSpi.getImageReaderSpiNames(),String[],"an array of Strings of length at least 1 containing names of ImageReaderSpis, or null."
"javax.imageio.spi.ServiceRegistry.lookupProviders(Class&lt;T&gt;,ClassLoader)",&lt;T&gt;Iterator&lt;T&gt;,"An Iterator that yields provider objects for the given service, in some arbitrary order. The iterator will throw an Error if a provider-configuration file violates the specified format or if a provider class cannot be found and instantiated."
javax.imageio.spi.ServiceRegistry.lookupProviders(Class&lt;T&gt;),&lt;T&gt;Iterator&lt;T&gt;,"An Iterator that yields provider objects for the given service, in some arbitrary order. The iterator will throw an Error if a provider-configuration file violates the specified format or if a provider class cannot be found and instantiated."
javax.imageio.spi.ServiceRegistry.getCategories(),Iterator&lt;Class&lt;?&gt;&gt;,an Iterator containing Classobjects.
"javax.imageio.spi.ServiceRegistry.registerServiceProvider(T,Class&lt;T&gt;)",&lt;T&gt;boolean,true if no provider of the same class was previously registered in the same category category.
javax.imageio.spi.ServiceRegistry.registerServiceProvider(Object),void,
javax.imageio.spi.ServiceRegistry.registerServiceProviders(Iterator&lt;?&gt;),void,
"javax.imageio.spi.ServiceRegistry.deregisterServiceProvider(T,Class&lt;T&gt;)",&lt;T&gt;boolean,"true if the provider was previously registered in the same category category, false otherwise."
javax.imageio.spi.ServiceRegistry.deregisterServiceProvider(Object),void,
javax.imageio.spi.ServiceRegistry.contains(Object),boolean,true if the given provider has been registered.
"javax.imageio.spi.ServiceRegistry.getServiceProviders(Class&lt;T&gt;,boolean)",&lt;T&gt;Iterator&lt;T&gt;,"an Iterator containing service provider objects from the given category, possibly in order."
"javax.imageio.spi.ServiceRegistry.getServiceProviders(Class&lt;T&gt;,ServiceRegistry.Filter,boolean)",&lt;T&gt;Iterator&lt;T&gt;,"an Iterator containing service provider objects from the given category, possibly in order."
javax.imageio.spi.ServiceRegistry.getServiceProviderByClass(Class&lt;T&gt;),&lt;T&gt;T,"a currently registered service provider object with the desired Classtype, or null is none is present."
"javax.imageio.spi.ServiceRegistry.setOrdering(Class&lt;T&gt;,T,T)",&lt;T&gt;boolean,true if a previously unset ordering was established.
"javax.imageio.spi.ServiceRegistry.unsetOrdering(Class&lt;T&gt;,T,T)",&lt;T&gt;boolean,true if a previously set ordering was disestablished.
javax.imageio.spi.ServiceRegistry.deregisterAll(Class&lt;?&gt;),void,
javax.imageio.spi.ServiceRegistry.deregisterAll(),void,
javax.imageio.spi.ServiceRegistry.finalize(),"voidize()
              throws Throwable",
javax.imageio.stream.FileCacheImageInputStream.read(),int,"the value of the next byte in the stream, or -1 if EOF is reached."
"javax.imageio.stream.FileCacheImageInputStream.read(byte[],int,int)",int,"the number of bytes actually read, or -1 to indicate EOF."
javax.imageio.stream.FileCacheImageInputStream.isCached(),boolean,true.
javax.imageio.stream.FileCacheImageInputStream.isCachedFile(),boolean,true.
javax.imageio.stream.FileCacheImageInputStream.isCachedMemory(),boolean,false.
javax.imageio.stream.FileCacheImageInputStream.close(),void,
javax.imageio.stream.FileCacheImageInputStream.finalize(),"voidize()
                 throws Throwable",
javax.imageio.stream.FileCacheImageOutputStream.read(),int,"the value of the next byte in the stream, or -1 if EOF is reached."
"javax.imageio.stream.FileCacheImageOutputStream.read(byte[],int,int)",int,"the number of bytes actually read, or -1 to indicate EOF."
javax.imageio.stream.FileCacheImageOutputStream.write(int),void,
"javax.imageio.stream.FileCacheImageOutputStream.write(byte[],int,int)",void,
javax.imageio.stream.FileCacheImageOutputStream.length(),long,-1L to indicate unknown length.
javax.imageio.stream.FileCacheImageOutputStream.seek(long),void,
javax.imageio.stream.FileCacheImageOutputStream.isCached(),boolean,true.
javax.imageio.stream.FileCacheImageOutputStream.isCachedFile(),boolean,true.
javax.imageio.stream.FileCacheImageOutputStream.isCachedMemory(),boolean,false.
javax.imageio.stream.FileCacheImageOutputStream.close(),void,
javax.imageio.stream.FileCacheImageOutputStream.flushBefore(long),void,
javax.imageio.stream.FileImageInputStream.read(),int,"the value of the next byte in the stream, or -1 if EOF is reached."
"javax.imageio.stream.FileImageInputStream.read(byte[],int,int)",int,"the number of bytes actually read, or -1 to indicate EOF."
javax.imageio.stream.FileImageInputStream.length(),long,"the file length as a long, or -1."
javax.imageio.stream.FileImageInputStream.seek(long),void,
javax.imageio.stream.FileImageInputStream.close(),void,
javax.imageio.stream.FileImageInputStream.finalize(),"voidize()
                 throws Throwable",
javax.imageio.stream.FileImageOutputStream.read(),int,"the value of the next byte in the stream, or -1 if EOF is reached."
"javax.imageio.stream.FileImageOutputStream.read(byte[],int,int)",int,"the number of bytes actually read, or -1 to indicate EOF."
javax.imageio.stream.FileImageOutputStream.write(int),void,
"javax.imageio.stream.FileImageOutputStream.write(byte[],int,int)",void,
javax.imageio.stream.FileImageOutputStream.length(),long,-1L to indicate unknown length.
javax.imageio.stream.FileImageOutputStream.seek(long),void,
javax.imageio.stream.FileImageOutputStream.close(),void,
javax.imageio.stream.FileImageOutputStream.finalize(),"voidize()
                 throws Throwable",
javax.imageio.stream.IIOByteBuffer.getData(),byte[],a byte array reference.
javax.imageio.stream.IIOByteBuffer.setData(byte[]),void,
javax.imageio.stream.IIOByteBuffer.getOffset(),int,an int offset.
javax.imageio.stream.IIOByteBuffer.setOffset(int),void,
javax.imageio.stream.IIOByteBuffer.getLength(),int,an int length.
javax.imageio.stream.IIOByteBuffer.setLength(int),void,
javax.imageio.stream.ImageInputStreamImpl.checkClosed(),void,
javax.imageio.stream.ImageInputStreamImpl.setByteOrder(ByteOrder),void,
javax.imageio.stream.ImageInputStreamImpl.getByteOrder(),ByteOrder,"one of ByteOrder.BIG_ENDIAN or ByteOrder.LITTLE_ENDIAN, indicating which byte order is being used."
javax.imageio.stream.ImageInputStreamImpl.read(),abstractint,"the value of the next byte in the stream, or -1 if EOF is reached."
javax.imageio.stream.ImageInputStreamImpl.read(byte[]),int,"the number of bytes actually read, or -1 to indicate EOF."
"javax.imageio.stream.ImageInputStreamImpl.read(byte[],int,int)",abstractint,"the number of bytes actually read, or -1 to indicate EOF."
"javax.imageio.stream.ImageInputStreamImpl.readBytes(IIOByteBuffer,int)",void,
javax.imageio.stream.ImageInputStreamImpl.readBoolean(),boolean,a boolean value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readByte(),byte,a signed byte value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readUnsignedByte(),int,an unsigned byte value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readShort(),short,a signed short value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readUnsignedShort(),int,"an unsigned short value from the stream, as an int."
javax.imageio.stream.ImageInputStreamImpl.readChar(),char,an unsigned char value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readInt(),int,a signed int value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readUnsignedInt(),long,"an unsigned int value from the stream, as a long."
javax.imageio.stream.ImageInputStreamImpl.readLong(),long,a signed long value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readFloat(),float,a float value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readDouble(),double,a double value from the stream.
javax.imageio.stream.ImageInputStreamImpl.readLine(),String,a String containing a line of text from the stream.
javax.imageio.stream.ImageInputStreamImpl.readUTF(),String,a String read from the stream.
"javax.imageio.stream.ImageInputStreamImpl.readFully(byte[],int,int)",void,
javax.imageio.stream.ImageInputStreamImpl.readFully(byte[]),void,
"javax.imageio.stream.ImageInputStreamImpl.readFully(short[],int,int)",void,
"javax.imageio.stream.ImageInputStreamImpl.readFully(char[],int,int)",void,
"javax.imageio.stream.ImageInputStreamImpl.readFully(int[],int,int)",void,
"javax.imageio.stream.ImageInputStreamImpl.readFully(long[],int,int)",void,
"javax.imageio.stream.ImageInputStreamImpl.readFully(float[],int,int)",void,
"javax.imageio.stream.ImageInputStreamImpl.readFully(double[],int,int)",void,
javax.imageio.stream.ImageInputStreamImpl.getStreamPosition(),long,a long containing the position of the stream.
javax.imageio.stream.ImageInputStreamImpl.getBitOffset(),int,"an int containing the bit offset between 0 and 7, inclusive."
javax.imageio.stream.ImageInputStreamImpl.setBitOffset(int),void,
javax.imageio.stream.ImageInputStreamImpl.readBit(),int,an int containing the value 0 or 1.
javax.imageio.stream.ImageInputStreamImpl.readBits(int),long,"the bitstring, as a long with the last bit read stored in the least significant bit."
javax.imageio.stream.ImageInputStreamImpl.length(),long,-1L to indicate unknown length.
javax.imageio.stream.ImageInputStreamImpl.skipBytes(int),int,an int representing the number of bytes skipped.
javax.imageio.stream.ImageInputStreamImpl.skipBytes(long),long,a long representing the number of bytes skipped.
javax.imageio.stream.ImageInputStreamImpl.seek(long),void,
javax.imageio.stream.ImageInputStreamImpl.mark(),void,
javax.imageio.stream.ImageInputStreamImpl.reset(),void,
javax.imageio.stream.ImageInputStreamImpl.flushBefore(long),void,
javax.imageio.stream.ImageInputStreamImpl.flush(),void,
javax.imageio.stream.ImageInputStreamImpl.getFlushedPosition(),long,"the earliest legal position for seeking, as a long."
javax.imageio.stream.ImageInputStreamImpl.isCached(),boolean,true if this ImageInputStream caches data.
javax.imageio.stream.ImageInputStreamImpl.isCachedMemory(),boolean,true if this ImageInputStream caches data in main memory.
javax.imageio.stream.ImageInputStreamImpl.isCachedFile(),boolean,true if this ImageInputStream caches data in a temporary file.
javax.imageio.stream.ImageInputStreamImpl.close(),void,
javax.imageio.stream.ImageInputStreamImpl.finalize(),"voidize()
                 throws Throwable",
javax.imageio.stream.ImageOutputStreamImpl.write(int),abstractvoid,
javax.imageio.stream.ImageOutputStreamImpl.write(byte[]),void,
"javax.imageio.stream.ImageOutputStreamImpl.write(byte[],int,int)",abstractvoid,
javax.imageio.stream.ImageOutputStreamImpl.writeBoolean(boolean),void,
javax.imageio.stream.ImageOutputStreamImpl.writeByte(int),void,
javax.imageio.stream.ImageOutputStreamImpl.writeShort(int),void,
javax.imageio.stream.ImageOutputStreamImpl.writeChar(int),void,
javax.imageio.stream.ImageOutputStreamImpl.writeInt(int),void,
javax.imageio.stream.ImageOutputStreamImpl.writeLong(long),void,
javax.imageio.stream.ImageOutputStreamImpl.writeFloat(float),void,
javax.imageio.stream.ImageOutputStreamImpl.writeDouble(double),void,
javax.imageio.stream.ImageOutputStreamImpl.writeBytes(String),void,
javax.imageio.stream.ImageOutputStreamImpl.writeChars(String),void,
javax.imageio.stream.ImageOutputStreamImpl.writeUTF(String),void,
"javax.imageio.stream.ImageOutputStreamImpl.writeShorts(short[],int,int)",void,
"javax.imageio.stream.ImageOutputStreamImpl.writeChars(char[],int,int)",void,
"javax.imageio.stream.ImageOutputStreamImpl.writeInts(int[],int,int)",void,
"javax.imageio.stream.ImageOutputStreamImpl.writeLongs(long[],int,int)",void,
"javax.imageio.stream.ImageOutputStreamImpl.writeFloats(float[],int,int)",void,
"javax.imageio.stream.ImageOutputStreamImpl.writeDoubles(double[],int,int)",void,
javax.imageio.stream.ImageOutputStreamImpl.writeBit(int),void,
"javax.imageio.stream.ImageOutputStreamImpl.writeBits(long,int)",void,
javax.imageio.stream.ImageOutputStreamImpl.flushBits(),void,
javax.imageio.stream.MemoryCacheImageInputStream.read(),int,"the value of the next byte in the stream, or -1 if EOF is reached."
"javax.imageio.stream.MemoryCacheImageInputStream.read(byte[],int,int)",int,"the number of bytes actually read, or -1 to indicate EOF."
javax.imageio.stream.MemoryCacheImageInputStream.flushBefore(long),void,
javax.imageio.stream.MemoryCacheImageInputStream.isCached(),boolean,true.
javax.imageio.stream.MemoryCacheImageInputStream.isCachedFile(),boolean,false.
javax.imageio.stream.MemoryCacheImageInputStream.isCachedMemory(),boolean,true.
javax.imageio.stream.MemoryCacheImageInputStream.close(),void,
javax.imageio.stream.MemoryCacheImageInputStream.finalize(),"voidize()
                 throws Throwable",
javax.imageio.stream.MemoryCacheImageOutputStream.read(),int,"the value of the next byte in the stream, or -1 if EOF is reached."
"javax.imageio.stream.MemoryCacheImageOutputStream.read(byte[],int,int)",int,"the number of bytes actually read, or -1 to indicate EOF."
javax.imageio.stream.MemoryCacheImageOutputStream.write(int),void,
"javax.imageio.stream.MemoryCacheImageOutputStream.write(byte[],int,int)",void,
javax.imageio.stream.MemoryCacheImageOutputStream.length(),long,-1L to indicate unknown length.
javax.imageio.stream.MemoryCacheImageOutputStream.isCached(),boolean,true.
javax.imageio.stream.MemoryCacheImageOutputStream.isCachedFile(),boolean,false.
javax.imageio.stream.MemoryCacheImageOutputStream.isCachedMemory(),boolean,true.
javax.imageio.stream.MemoryCacheImageOutputStream.close(),void,
javax.imageio.stream.MemoryCacheImageOutputStream.flushBefore(long),void,
"javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(AnnotationValue,P)",R,a visitor-specified result
javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(AnnotationValue),R,a visitor-specified result
"javax.lang.model.util.AbstractAnnotationValueVisitor6.visitUnknown(AnnotationValue,P)",R,the result of the visit
"javax.lang.model.util.AbstractElementVisitor6.visit(Element,P)",R,a visitor-specified result
javax.lang.model.util.AbstractElementVisitor6.visit(Element),R,a visitor-specified result
"javax.lang.model.util.AbstractElementVisitor6.visitUnknown(Element,P)",R,a visitor-specified result
"javax.lang.model.util.AbstractTypeVisitor6.visit(TypeMirror,P)",R,a visitor-specified result
javax.lang.model.util.AbstractTypeVisitor6.visit(TypeMirror),R,a visitor-specified result
"javax.lang.model.util.AbstractTypeVisitor6.visitUnion(UnionType,P)",R,the result of visitUnknown
"javax.lang.model.util.AbstractTypeVisitor6.visitIntersection(IntersectionType,P)",R,the result of visitUnknown
"javax.lang.model.util.AbstractTypeVisitor6.visitUnknown(TypeMirror,P)",R,a visitor-specified result
"javax.lang.model.util.AbstractTypeVisitor7.visitUnion(UnionType,P)",abstractR,the result of the visit as defined by a subclass
"javax.lang.model.util.AbstractTypeVisitor8.visitIntersection(IntersectionType,P)",abstractR,the result of the visit as defined by a subclass
javax.lang.model.util.ElementFilter.fieldsIn(Iterable&lt;?),List&lt;VariableElement&gt;,a list of fields in elements
javax.lang.model.util.ElementFilter.fieldsIn(Set&lt;?),Set&lt;VariableElement&gt;,a set of fields in elements
javax.lang.model.util.ElementFilter.constructorsIn(Iterable&lt;?),List&lt;ExecutableElement&gt;,a list of constructors in elements
javax.lang.model.util.ElementFilter.constructorsIn(Set&lt;?),Set&lt;ExecutableElement&gt;,a set of constructors in elements
javax.lang.model.util.ElementFilter.methodsIn(Iterable&lt;?),List&lt;ExecutableElement&gt;,a list of methods in elements
javax.lang.model.util.ElementFilter.methodsIn(Set&lt;?),Set&lt;ExecutableElement&gt;,a set of methods in elements
javax.lang.model.util.ElementFilter.typesIn(Iterable&lt;?),List&lt;TypeElement&gt;,a list of types in elements
javax.lang.model.util.ElementFilter.typesIn(Set&lt;?),Set&lt;TypeElement&gt;,a set of types in elements
javax.lang.model.util.ElementFilter.packagesIn(Iterable&lt;?),List&lt;PackageElement&gt;,a list of packages in elements
javax.lang.model.util.ElementFilter.packagesIn(Set&lt;?),Set&lt;PackageElement&gt;,a set of packages in elements
"javax.lang.model.util.ElementKindVisitor6.visitPackage(PackageElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitType(TypeElement,P)",R,the result of the kind-specific visit method
"javax.lang.model.util.ElementKindVisitor6.visitTypeAsAnnotationType(TypeElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitTypeAsClass(TypeElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitTypeAsEnum(TypeElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitTypeAsInterface(TypeElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitVariable(VariableElement,P)",R,the result of the kind-specific visit method
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsEnumConstant(VariableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsExceptionParameter(VariableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsField(VariableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsLocalVariable(VariableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsParameter(VariableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsResourceVariable(VariableElement,P)",R,the result of visitUnknown
"javax.lang.model.util.ElementKindVisitor6.visitExecutable(ExecutableElement,P)",R,the result of the kind-specific visit method
"javax.lang.model.util.ElementKindVisitor6.visitExecutableAsConstructor(ExecutableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitExecutableAsInstanceInit(ExecutableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitExecutableAsMethod(ExecutableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitExecutableAsStaticInit(ExecutableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor6.visitTypeParameter(TypeParameterElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementKindVisitor7.visitVariableAsResourceVariable(VariableElement,P)",R,the result of defaultAction
"javax.lang.model.util.ElementScanner6.scan(Iterable&lt;?,P)",R,the scan of the last element or DEFAULT_VALUE if no elements
"javax.lang.model.util.ElementScanner6.scan(Element,P)",R,the result of visiting e.
javax.lang.model.util.ElementScanner6.scan(Element),R,the result of scanning e.
"javax.lang.model.util.ElementScanner6.visitPackage(PackageElement,P)",R,the result of scanning
"javax.lang.model.util.ElementScanner6.visitType(TypeElement,P)",R,the result of scanning
"javax.lang.model.util.ElementScanner6.visitVariable(VariableElement,P)",R,the result of scanning
"javax.lang.model.util.ElementScanner6.visitExecutable(ExecutableElement,P)",R,the result of scanning
"javax.lang.model.util.ElementScanner6.visitTypeParameter(TypeParameterElement,P)",R,the result of scanning
"javax.lang.model.util.ElementScanner7.visitVariable(VariableElement,P)",R,the result of scanning
"javax.lang.model.util.SimpleAnnotationValueVisitor6.defaultAction(Object,P)",R,DEFAULT_VALUE unless overridden
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitBoolean(boolean,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitByte(byte,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitChar(char,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitDouble(double,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitFloat(float,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitInt(int,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitLong(long,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitShort(short,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitString(String,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitType(TypeMirror,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitEnumConstant(VariableElement,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitAnnotation(AnnotationMirror,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitArray(List&lt;?,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleElementVisitor6.defaultAction(Element,P)",R,DEFAULT_VALUE unless overridden
"javax.lang.model.util.SimpleElementVisitor6.visitPackage(PackageElement,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleElementVisitor6.visitType(TypeElement,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleElementVisitor6.visitVariable(VariableElement,P)",R,the result of defaultAction or visitUnknown
"javax.lang.model.util.SimpleElementVisitor6.visitExecutable(ExecutableElement,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleElementVisitor6.visitTypeParameter(TypeParameterElement,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleElementVisitor7.visitVariable(VariableElement,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.defaultAction(TypeMirror,P)",R,DEFAULT_VALUE unless overridden
"javax.lang.model.util.SimpleTypeVisitor6.visitPrimitive(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.visitNull(NullType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.visitArray(ArrayType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.visitDeclared(DeclaredType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.visitError(ErrorType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.visitTypeVariable(TypeVariable,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.visitWildcard(WildcardType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.visitExecutable(ExecutableType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor6.visitNoType(NoType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor7.visitUnion(UnionType,P)",R,the result of defaultAction
"javax.lang.model.util.SimpleTypeVisitor8.visitIntersection(IntersectionType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitPrimitive(PrimitiveType,P)",R,the result of the kind-specific visit method
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsBoolean(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsByte(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsShort(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsInt(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsLong(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsChar(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsFloat(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsDouble(PrimitiveType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitNoType(NoType,P)",R,the result of the kind-specific visit method
"javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsVoid(NoType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsPackage(NoType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsNone(NoType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor7.visitUnion(UnionType,P)",R,the result of defaultAction
"javax.lang.model.util.TypeKindVisitor8.visitIntersection(IntersectionType,P)",R,the result of defaultAction
javax.management.Attribute.getName(),String,the name of the attribute.
javax.management.Attribute.getValue(),Object,the value of the attribute.
javax.management.Attribute.equals(Object),boolean,"True if the two Attribute objects are equal, otherwise false."
javax.management.Attribute.hashCode(),int,a hash code value for this attribute.
javax.management.Attribute.toString(),String,a string representation of the object.
javax.management.AttributeChangeNotification.getAttributeName(),String,A String containing the name of the attribute.
javax.management.AttributeChangeNotification.getAttributeType(),String,A String containing the type of the attribute.
javax.management.AttributeChangeNotification.getOldValue(),Object,An Object containing the old value of the attribute.
javax.management.AttributeChangeNotification.getNewValue(),Object,An Object containing the new value of the attribute.
javax.management.AttributeChangeNotificationFilter.isNotificationEnabled(Notification),boolean,"true if the notification has to be sent to the listener, false otherwise."
javax.management.AttributeChangeNotificationFilter.enableAttribute(String),void,
javax.management.AttributeChangeNotificationFilter.disableAttribute(String),void,
javax.management.AttributeChangeNotificationFilter.disableAllAttributes(),void,
javax.management.AttributeChangeNotificationFilter.getEnabledAttributes(),Vector&lt;String&gt;,The list containing all the enabled attribute names.
javax.management.AttributeList.asList(),List&lt;Attribute&gt;,"a List&lt;Attribute&gt; whose contents reflect the contents of this AttributeList. If this method has ever been called on a given AttributeList instance, a subsequent attempt to add an object to that instance which is not an Attribute will fail with a IllegalArgumentException. For compatibility reasons, an AttributeList on which this method has never been called does allow objects other than Attributes to be added."
javax.management.AttributeList.add(Attribute),void,
"javax.management.AttributeList.add(int,Attribute)",void,
"javax.management.AttributeList.set(int,Attribute)",void,
javax.management.AttributeList.addAll(AttributeList),boolean,true if this list changed as a result of the call.
"javax.management.AttributeList.addAll(int,AttributeList)",boolean,true if this list changed as a result of the call.
javax.management.AttributeList.add(Object),boolean,true (as specified by Collection.add(E))
"javax.management.AttributeList.add(int,Object)",void,
javax.management.AttributeList.addAll(Collection&lt;?&gt;),boolean,true if this list changed as a result of the call
"javax.management.AttributeList.addAll(int,Collection&lt;?&gt;)",boolean,true if this list changed as a result of the call
"javax.management.AttributeList.set(int,Object)",Object,the element previously at the specified position
javax.management.AttributeValueExp.getAttributeName(),String,the attribute name.
javax.management.AttributeValueExp.apply(ObjectName),ValueExp,The ValueExp.
javax.management.AttributeValueExp.toString(),String,a string representation of the object.
javax.management.AttributeValueExp.setMBeanServer(MBeanServer),void,
javax.management.AttributeValueExp.getAttribute(ObjectName),Object,"the value of the attribute, or null if it could not be obtained."
javax.management.DefaultLoaderRepository.loadClass(String),Class&lt;?&gt;,the loaded class.
"javax.management.DefaultLoaderRepository.loadClassWithout(ClassLoader,String)",Class&lt;?&gt;,the loaded class.
javax.management.ImmutableDescriptor.union(Descriptor...),ImmutableDescriptor,an ImmutableDescriptor that is the union of the given descriptors. The returned object may be identical to one of the input descriptors if it is an ImmutableDescriptor that contains all of the required fields.
javax.management.ImmutableDescriptor.getFieldValue(String),Object,"the corresponding value, or null if the field is not present."
javax.management.ImmutableDescriptor.getFields(),String[],"String array of fields in the format fieldName=fieldValueIf the value of a field is not a String, then the toString() method will be called on it and the returned value, enclosed in parentheses, used as the value for the field in the returned array. If the value of a field is null, then the value of the field in the returned array will be empty. If the descriptor is empty, you will get an empty array."
javax.management.ImmutableDescriptor.getFieldValues(String...),Object[],"Object array of field values. If the list of fieldNames is empty, you will get an empty array."
javax.management.ImmutableDescriptor.getFieldNames(),String[],"String array of field names. If the descriptor is empty, you will get an empty array."
javax.management.ImmutableDescriptor.equals(Object),boolean,
javax.management.ImmutableDescriptor.hashCode(),int,
javax.management.ImmutableDescriptor.toString(),String,a string representation of the object.
javax.management.ImmutableDescriptor.isValid(),boolean,true if the values are legal.
javax.management.ImmutableDescriptor.clone(),Descriptor,a clone of this instance.
"javax.management.ImmutableDescriptor.setFields(String[],Object[])",void,
"javax.management.ImmutableDescriptor.setField(String,Object)",void,
javax.management.ImmutableDescriptor.removeField(String),void,
"javax.management.JMX.newMBeanProxy(MBeanServerConnection,ObjectName,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.management.JMX.newMBeanProxy(MBeanServerConnection,ObjectName,Class&lt;T&gt;,boolean)",&lt;T&gt;T,the new proxy instance.
"javax.management.JMX.newMXBeanProxy(MBeanServerConnection,ObjectName,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.management.JMX.newMXBeanProxy(MBeanServerConnection,ObjectName,Class&lt;T&gt;,boolean)",&lt;T&gt;T,the new proxy instance.
javax.management.JMX.isMXBeanInterface(Class&lt;?&gt;),boolean,true if interfaceClass is a compliant MXBean interface
javax.management.MBeanAttributeInfo.clone(),Object,a clone of this instance.
javax.management.MBeanAttributeInfo.getType(),String,the class name.
javax.management.MBeanAttributeInfo.isReadable(),boolean,"True if the attribute can be read, false otherwise."
javax.management.MBeanAttributeInfo.isWritable(),boolean,"True if the attribute can be written to, false otherwise."
javax.management.MBeanAttributeInfo.isIs(),boolean,"true if this attribute has an ""is"" getter."
javax.management.MBeanAttributeInfo.toString(),String,a string representation of the object.
javax.management.MBeanAttributeInfo.equals(Object),boolean,"true if and only if o is an MBeanAttributeInfo such that its MBeanFeatureInfo.getName(), getType(), MBeanFeatureInfo.getDescription(), isReadable(), isWritable(), and isIs() values are equal (not necessarily identical) to those of this MBeanAttributeInfo."
javax.management.MBeanAttributeInfo.hashCode(),int,
javax.management.MBeanConstructorInfo.clone(),Object,a clone of this instance.
javax.management.MBeanConstructorInfo.getSignature(),MBeanParameterInfo[],An array of MBeanParameterInfo objects.
javax.management.MBeanConstructorInfo.toString(),String,a string representation of the object.
javax.management.MBeanConstructorInfo.equals(Object),boolean,"true if and only if o is an MBeanConstructorInfo such that its MBeanFeatureInfo.getName(), MBeanFeatureInfo.getDescription(), getSignature(), and MBeanFeatureInfo.getDescriptor() values are equal (not necessarily identical) to those of this MBeanConstructorInfo. Two signature arrays are equal if their elements are pairwise equal."
javax.management.MBeanConstructorInfo.hashCode(),int,
javax.management.MBeanFeatureInfo.getName(),String,the name of the feature.
javax.management.MBeanFeatureInfo.getDescription(),String,the human-readable description of the feature.
javax.management.MBeanFeatureInfo.getDescriptor(),Descriptor,a descriptor that is either immutable or a copy of the original.
javax.management.MBeanFeatureInfo.equals(Object),boolean,"true if and only if o is an MBeanFeatureInfo such that its getName(), getDescription(), and getDescriptor() values are equal (not necessarily identical) to those of this MBeanFeatureInfo."
javax.management.MBeanFeatureInfo.hashCode(),int,
javax.management.MBeanInfo.clone(),Object,a clone of this instance.
javax.management.MBeanInfo.getClassName(),String,the class name.
javax.management.MBeanInfo.getDescription(),String,the description.
javax.management.MBeanInfo.getAttributes(),MBeanAttributeInfo[],An array of MBeanAttributeInfo objects.
javax.management.MBeanInfo.getOperations(),MBeanOperationInfo[],An array of MBeanOperationInfo objects.
javax.management.MBeanInfo.getConstructors(),MBeanConstructorInfo[],An array of MBeanConstructorInfo objects.
javax.management.MBeanInfo.getNotifications(),MBeanNotificationInfo[],An array of MBeanNotificationInfo objects.
javax.management.MBeanInfo.getDescriptor(),Descriptor,a descriptor that is either immutable or a copy of the original.
javax.management.MBeanInfo.toString(),String,a string representation of the object.
javax.management.MBeanInfo.equals(Object),boolean,true if and only if o is an MBeanInfo that is equal to this one according to the rules above.
javax.management.MBeanInfo.hashCode(),int,
javax.management.MBeanNotificationInfo.clone(),Object,a clone of this instance.
javax.management.MBeanNotificationInfo.getNotifTypes(),String[],the array of strings. Changing the returned array has no effect on this MBeanNotificationInfo.
javax.management.MBeanNotificationInfo.toString(),String,a string representation of the object.
javax.management.MBeanNotificationInfo.equals(Object),boolean,"true if and only if o is an MBeanNotificationInfo such that its MBeanFeatureInfo.getName(), MBeanFeatureInfo.getDescription(), MBeanFeatureInfo.getDescriptor(), and getNotifTypes() values are equal (not necessarily identical) to those of this MBeanNotificationInfo. Two notification type arrays are equal if their corresponding elements are equal. They are not equal if they have the same elements but in a different order."
javax.management.MBeanNotificationInfo.hashCode(),int,
javax.management.MBeanOperationInfo.clone(),Object,a clone of this instance.
javax.management.MBeanOperationInfo.getReturnType(),String,the return type.
javax.management.MBeanOperationInfo.getSignature(),MBeanParameterInfo[],An array of MBeanParameterInfo objects.
javax.management.MBeanOperationInfo.getImpact(),int,the impact code.
javax.management.MBeanOperationInfo.toString(),String,a string representation of the object.
javax.management.MBeanOperationInfo.equals(Object),boolean,"true if and only if o is an MBeanOperationInfo such that its MBeanFeatureInfo.getName(), getReturnType(), MBeanFeatureInfo.getDescription(), getImpact(), MBeanFeatureInfo.getDescriptor() and getSignature() values are equal (not necessarily identical) to those of this MBeanConstructorInfo. Two signature arrays are equal if their elements are pairwise equal."
javax.management.MBeanOperationInfo.hashCode(),int,
javax.management.MBeanParameterInfo.clone(),Object,a clone of this instance.
javax.management.MBeanParameterInfo.getType(),String,the type string.
javax.management.MBeanParameterInfo.toString(),String,a string representation of the object.
javax.management.MBeanParameterInfo.equals(Object),boolean,"true if and only if o is an MBeanParameterInfo such that its MBeanFeatureInfo.getName(), getType(), MBeanFeatureInfo.getDescriptor(), and MBeanFeatureInfo.getDescription() values are equal (not necessarily identical) to those of this MBeanParameterInfo."
javax.management.MBeanParameterInfo.hashCode(),int,
javax.management.MBeanPermission.getActions(),String,the canonical string representation of the actions.
javax.management.MBeanPermission.hashCode(),int,a hash code value for this object.
javax.management.MBeanPermission.implies(Permission),boolean,
javax.management.MBeanPermission.equals(Object),boolean,"true if obj is an MBeanPermission, and has the same name and actions as this MBeanPermission object."
javax.management.MBeanServerBuilder.newMBeanServerDelegate(),MBeanServerDelegate,A new MBeanServerDelegate.
"javax.management.MBeanServerBuilder.newMBeanServer(String,MBeanServer,MBeanServerDelegate)",MBeanServer,A new private implementation of an MBeanServer.
javax.management.MBeanServerDelegate.getMBeanServerId(),String,the identity.
javax.management.MBeanServerDelegate.getSpecificationName(),String,the specification name.
javax.management.MBeanServerDelegate.getSpecificationVersion(),String,the specification version.
javax.management.MBeanServerDelegate.getSpecificationVendor(),String,the specification vendor.
javax.management.MBeanServerDelegate.getImplementationName(),String,the implementation name.
javax.management.MBeanServerDelegate.getImplementationVersion(),String,the implementation version.
javax.management.MBeanServerDelegate.getImplementationVendor(),String,the implementation vendor.
javax.management.MBeanServerDelegate.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
"javax.management.MBeanServerDelegate.addNotificationListener(NotificationListener,NotificationFilter,Object)",void,
"javax.management.MBeanServerDelegate.removeNotificationListener(NotificationListener,NotificationFilter,Object)",void,
javax.management.MBeanServerDelegate.removeNotificationListener(NotificationListener),void,
javax.management.MBeanServerDelegate.sendNotification(Notification),void,
javax.management.MBeanServerFactory.releaseMBeanServer(MBeanServer),void,
javax.management.MBeanServerFactory.createMBeanServer(),MBeanServer,the newly created MBeanServer.
javax.management.MBeanServerFactory.createMBeanServer(String),MBeanServer,the newly created MBeanServer.
javax.management.MBeanServerFactory.newMBeanServer(),MBeanServer,the newly created MBeanServer.
javax.management.MBeanServerFactory.newMBeanServer(String),MBeanServer,the newly created MBeanServer.
javax.management.MBeanServerFactory.findMBeanServer(String),ArrayList&lt;MBeanServer&gt;,A list of MBeanServer objects.
javax.management.MBeanServerFactory.getClassLoaderRepository(MBeanServer),ClassLoaderRepository,The Class Loader Repository used by the given MBeanServer.
javax.management.MBeanServerInvocationHandler.getMBeanServerConnection(),MBeanServerConnection,the MBean server connection.
javax.management.MBeanServerInvocationHandler.getObjectName(),ObjectName,the object name.
javax.management.MBeanServerInvocationHandler.isMXBean(),boolean,whether the proxy is for an MXBean.
"javax.management.MBeanServerInvocationHandler.newProxyInstance(MBeanServerConnection,ObjectName,Class&lt;T&gt;,boolean)",&lt;T&gt;T,the new proxy instance.
"javax.management.MBeanServerInvocationHandler.invoke(Object,Method,Object[])",Object,"the value to return from the method invocation on the proxy instance. If the declared return type of the interface method is a primitive type, then the value returned by this method must be an instance of the corresponding primitive wrapper class; otherwise, it must be a type assignable to the declared return type. If the value returned by this method is null and the interface method's return type is primitive, then a NullPointerException will be thrown by the method invocation on the proxy instance. If the value returned by this method is otherwise not compatible with the interface method's declared return type as described above, a ClassCastException will be thrown by the method invocation on the proxy instance."
javax.management.MBeanServerNotification.getMBeanName(),ObjectName,the object name of the MBean that caused the notification.
javax.management.MBeanServerNotification.toString(),String,A String representation of this notification.
javax.management.MBeanServerPermission.hashCode(),int,a hash code value for this object.
javax.management.MBeanServerPermission.implies(Permission),boolean,
javax.management.MBeanServerPermission.equals(Object),boolean,true if the objects are equal.
javax.management.MBeanServerPermission.newPermissionCollection(),PermissionCollection,a new PermissionCollection object suitable for storing BasicPermissions.
javax.management.Notification.setSource(Object),void,
javax.management.Notification.getSequenceNumber(),long,The notification sequence number within the source object. It's a serial number identifying a particular instance of notification in the context of the notification source. The notification model does not assume that notifications will be received in the same order that they are sent. The sequence number helps listeners to sort received notifications.
javax.management.Notification.setSequenceNumber(long),void,
javax.management.Notification.getType(),String,The notification type. It's a string expressed in a dot notation similar to Java properties. It is recommended that the notification type should follow the reverse-domain-name convention used by Java package names. An example of a notification type is com.example.alarm.router.
javax.management.Notification.getTimeStamp(),long,The notification timestamp.
javax.management.Notification.setTimeStamp(long),void,
javax.management.Notification.getMessage(),String,The message string of this notification object.
javax.management.Notification.getUserData(),Object,The user data object. It is used for whatever data the notification source wishes to communicate to its consumers.
javax.management.Notification.setUserData(Object),void,
javax.management.Notification.toString(),String,A String representation of this notification.
"javax.management.NotificationBroadcasterSupport.addNotificationListener(NotificationListener,NotificationFilter,Object)",void,
javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener),void,
"javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener,NotificationFilter,Object)",void,
javax.management.NotificationBroadcasterSupport.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
javax.management.NotificationBroadcasterSupport.sendNotification(Notification),void,
"javax.management.NotificationBroadcasterSupport.handleNotification(NotificationListener,Notification,Object)",void,
javax.management.NotificationFilterSupport.isNotificationEnabled(Notification),boolean,"true if the notification should be sent to the listener, false otherwise."
javax.management.NotificationFilterSupport.enableType(String),void,
javax.management.NotificationFilterSupport.disableType(String),void,
javax.management.NotificationFilterSupport.disableAllTypes(),void,
javax.management.NotificationFilterSupport.getEnabledTypes(),Vector&lt;String&gt;,The list containing all the enabled notification types.
javax.management.ObjectInstance.equals(Object),boolean,"True if the two object instances are equal, otherwise false."
javax.management.ObjectInstance.hashCode(),int,
javax.management.ObjectInstance.getObjectName(),ObjectName,the object name.
javax.management.ObjectInstance.getClassName(),String,the class name.
javax.management.ObjectInstance.toString(),String,a string representation of the object.
javax.management.ObjectName.getInstance(String),ObjectName,an ObjectName corresponding to the given String.
"javax.management.ObjectName.getInstance(String,String,String)",ObjectName,"an ObjectName corresponding to the given domain, key, and value."
"javax.management.ObjectName.getInstance(String,Hashtable&lt;String,String&gt;)",ObjectName,an ObjectName corresponding to the given domain and key mappings.
javax.management.ObjectName.getInstance(ObjectName),ObjectName,"an instance of ObjectName or a subclass that is known to have the same semantics. If name respects the semantics of ObjectName, then the returned object is equal (though not necessarily identical) to name."
javax.management.ObjectName.isPattern(),boolean,"True if the name is a pattern, otherwise false."
javax.management.ObjectName.isDomainPattern(),boolean,"True if the name is a domain pattern, otherwise false."
javax.management.ObjectName.isPropertyPattern(),boolean,"True if the name is a property pattern, otherwise false."
javax.management.ObjectName.isPropertyListPattern(),boolean,"True if the name is a property list pattern, otherwise false."
javax.management.ObjectName.isPropertyValuePattern(),boolean,"True if the name is a property value pattern, otherwise false."
javax.management.ObjectName.isPropertyValuePattern(String),boolean,"True if the value associated with the given key property is a pattern, otherwise false."
javax.management.ObjectName.getCanonicalName(),String,
javax.management.ObjectName.getDomain(),String,The domain.
javax.management.ObjectName.getKeyProperty(String),String,"The value of the property, or null if there is no such property in this ObjectName."
javax.management.ObjectName.getKeyPropertyList(),"Hashtable&lt;String,String&gt;",The table of key properties.
javax.management.ObjectName.getKeyPropertyListString(),String,The key property list string. This string is independent of whether the ObjectName is a pattern.
javax.management.ObjectName.getCanonicalKeyPropertyListString(),String,The canonical key property list string. This string is independent of whether the ObjectName is a pattern.
javax.management.ObjectName.toString(),String,a string representation of this object name.
javax.management.ObjectName.equals(Object),boolean,True if object is an ObjectName whose canonical form is equal to that of this ObjectName.
javax.management.ObjectName.hashCode(),int,a hash code value for this object.
javax.management.ObjectName.quote(String),String,
javax.management.ObjectName.unquote(String),String,the unquoted String.
javax.management.ObjectName.apply(ObjectName),boolean,True if name matches this ObjectName.
javax.management.ObjectName.setMBeanServer(MBeanServer),void,
javax.management.ObjectName.compareTo(ObjectName),int,
"javax.management.Query.and(QueryExp,QueryExp)",QueryExp,The conjunction of the two arguments. The returned object will be serialized as an instance of the non-public class javax.management.AndQueryExp.
"javax.management.Query.or(QueryExp,QueryExp)",QueryExp,The disjunction of the two arguments. The returned object will be serialized as an instance of the non-public class javax.management.OrQueryExp.
"javax.management.Query.gt(ValueExp,ValueExp)",QueryExp,"A ""greater than"" constraint on the arguments. The returned object will be serialized as an instance of the non-public class javax.management.BinaryRelQueryExp with a relOp equal to GT."
"javax.management.Query.geq(ValueExp,ValueExp)",QueryExp,"A ""greater than or equal to"" constraint on the arguments. The returned object will be serialized as an instance of the non-public class javax.management.BinaryRelQueryExp with a relOp equal to GE."
"javax.management.Query.leq(ValueExp,ValueExp)",QueryExp,"A ""less than or equal to"" constraint on the arguments. The returned object will be serialized as an instance of the non-public class javax.management.BinaryRelQueryExp with a relOp equal to LE."
"javax.management.Query.lt(ValueExp,ValueExp)",QueryExp,"A ""less than"" constraint on the arguments. The returned object will be serialized as an instance of the non-public class javax.management.BinaryRelQueryExp with a relOp equal to LT."
"javax.management.Query.eq(ValueExp,ValueExp)",QueryExp,"A ""equal to"" constraint on the arguments. The returned object will be serialized as an instance of the non-public class javax.management.BinaryRelQueryExp with a relOp equal to EQ."
"javax.management.Query.between(ValueExp,ValueExp,ValueExp)",QueryExp,The constraint that v1 lies between v2 and v3. The returned object will be serialized as an instance of the non-public class javax.management.BetweenQueryExp.
"javax.management.Query.match(AttributeValueExp,StringValueExp)",QueryExp,A query expression that represents the matching constraint on the string argument. The returned object will be serialized as an instance of the non-public class javax.management.MatchQueryExp.
javax.management.Query.attr(String),AttributeValueExp,An attribute expression for the attribute named name.
"javax.management.Query.attr(String,String)",AttributeValueExp,An attribute expression for the attribute named name. The returned object will be serialized as an instance of the non-public class javax.management.QualifiedAttributeValueExp.
javax.management.Query.classattr(),AttributeValueExp,A class attribute expression. The returned object will be serialized as an instance of the non-public class javax.management.ClassAttributeValueExp.
javax.management.Query.not(QueryExp),QueryExp,A negated constraint. The returned object will be serialized as an instance of the non-public class javax.management.NotQueryExp.
"javax.management.Query.in(ValueExp,ValueExp[])",QueryExp,A QueryExp that represents the constraint. The returned object will be serialized as an instance of the non-public class javax.management.InQueryExp.
javax.management.Query.value(String),StringValueExp,A ValueExp object containing the string argument.
javax.management.Query.value(Number),ValueExp,A ValueExp object containing the argument. The returned object will be serialized as an instance of the non-public class javax.management.NumericValueExp.
javax.management.Query.value(int),ValueExp,A ValueExp object containing the argument. The returned object will be serialized as an instance of the non-public class javax.management.NumericValueExp.
javax.management.Query.value(long),ValueExp,A ValueExp object containing the argument. The returned object will be serialized as an instance of the non-public class javax.management.NumericValueExp.
javax.management.Query.value(float),ValueExp,A ValueExp object containing the argument. The returned object will be serialized as an instance of the non-public class javax.management.NumericValueExp.
javax.management.Query.value(double),ValueExp,A ValueExp object containing the argument. The returned object will be serialized as an instance of the non-public class javax.management.NumericValueExp.
javax.management.Query.value(boolean),ValueExp,A ValueExp object containing the argument. The returned object will be serialized as an instance of the non-public class javax.management.BooleanValueExp.
"javax.management.Query.plus(ValueExp,ValueExp)",ValueExp,A ValueExp representing the sum or concatenation of the two arguments. The returned object will be serialized as an instance of the non-public class javax.management.BinaryOpValueExp with an op equal to PLUS.
"javax.management.Query.times(ValueExp,ValueExp)",ValueExp,A ValueExp representing the product. The returned object will be serialized as an instance of the non-public class javax.management.BinaryOpValueExp with an op equal to TIMES.
"javax.management.Query.minus(ValueExp,ValueExp)",ValueExp,A ValueExp representing the difference between two arguments. The returned object will be serialized as an instance of the non-public class javax.management.BinaryOpValueExp with an op equal to MINUS.
"javax.management.Query.div(ValueExp,ValueExp)",ValueExp,A ValueExp representing the quotient of two arguments. The returned object will be serialized as an instance of the non-public class javax.management.BinaryOpValueExp with an op equal to DIV.
"javax.management.Query.initialSubString(AttributeValueExp,StringValueExp)",QueryExp,The constraint that a matches s. The returned object will be serialized as an instance of the non-public class javax.management.MatchQueryExp.
"javax.management.Query.anySubString(AttributeValueExp,StringValueExp)",QueryExp,The constraint that a matches s. The returned object will be serialized as an instance of the non-public class javax.management.MatchQueryExp.
"javax.management.Query.finalSubString(AttributeValueExp,StringValueExp)","QueryExpSubString(AttributeValueExpa,
                                      StringValueExps)",The constraint that a matches s. The returned object will be serialized as an instance of the non-public class javax.management.MatchQueryExp.
javax.management.Query.isInstanceOf(StringValueExp),QueryExp,a query expression that represents an inheritance constraint on an MBean class. The returned object will be serialized as an instance of the non-public class javax.management.InstanceOfQueryExp.
javax.management.QueryEval.setMBeanServer(MBeanServer),void,
javax.management.QueryEval.getMBeanServer(),MBeanServer,the MBean server.
javax.management.StandardEmitterMBean.removeNotificationListener(NotificationListener),void,
"javax.management.StandardEmitterMBean.removeNotificationListener(NotificationListener,NotificationFilter,Object)",void,
"javax.management.StandardEmitterMBean.addNotificationListener(NotificationListener,NotificationFilter,Object)",void,
javax.management.StandardEmitterMBean.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
javax.management.StandardEmitterMBean.sendNotification(Notification),void,
javax.management.StandardMBean.setImplementation(Object),void,
javax.management.StandardMBean.getImplementation(),Object,The implementation of this Standard MBean (or MXBean).
javax.management.StandardMBean.getMBeanInterface(),Class&lt;?&gt;,The management interface of this Standard MBean (or MXBean).
javax.management.StandardMBean.getImplementationClass(),Class&lt;?&gt;,The class of the implementation of this Standard MBean (or MXBean).
javax.management.StandardMBean.getAttribute(String),Object,The value of the attribute retrieved.
javax.management.StandardMBean.setAttribute(Attribute),void,
javax.management.StandardMBean.getAttributes(String[]),AttributeList,The list of attributes retrieved.
javax.management.StandardMBean.setAttributes(AttributeList),AttributeList,"The list of attributes that were set, with their new values."
"javax.management.StandardMBean.invoke(String,Object[],String[])",Object,"The object returned by the action, which represents the result of invoking the action on the MBean specified."
javax.management.StandardMBean.getMBeanInfo(),MBeanInfo,"The cached MBeanInfo for that MBean, if not null, or a newly built MBeanInfo if none was cached."
javax.management.StandardMBean.getClassName(MBeanInfo),String,the class name for the new MBeanInfo.
javax.management.StandardMBean.getDescription(MBeanInfo),String,the description for the new MBeanInfo.
javax.management.StandardMBean.getDescription(MBeanFeatureInfo),String,the description for the given MBeanFeatureInfo.
javax.management.StandardMBean.getDescription(MBeanAttributeInfo),String,the description for the given MBeanAttributeInfo.
javax.management.StandardMBean.getDescription(MBeanConstructorInfo),String,the description for the given MBeanConstructorInfo.
"javax.management.StandardMBean.getDescription(MBeanConstructorInfo,MBeanParameterInfo,int)",String,the description for the given MBeanParameterInfo.
"javax.management.StandardMBean.getParameterName(MBeanConstructorInfo,MBeanParameterInfo,int)",String,the name for the given MBeanParameterInfo.
javax.management.StandardMBean.getDescription(MBeanOperationInfo),String,the description for the given MBeanOperationInfo.
javax.management.StandardMBean.getImpact(MBeanOperationInfo),int,the impact flag for the given MBeanOperationInfo.
"javax.management.StandardMBean.getParameterName(MBeanOperationInfo,MBeanParameterInfo,int)",String,the name to use for the given MBeanParameterInfo.
"javax.management.StandardMBean.getDescription(MBeanOperationInfo,MBeanParameterInfo,int)",String,the description for the given MBeanParameterInfo.
"javax.management.StandardMBean.getConstructors(MBeanConstructorInfo[],Object)",MBeanConstructorInfo[],the MBeanConstructorInfo[] for the new MBeanInfo.
javax.management.StandardMBean.getCachedMBeanInfo(),MBeanInfo,"The cached MBeanInfo, or null if no MBeanInfo is cached."
javax.management.StandardMBean.cacheMBeanInfo(MBeanInfo),void,
"javax.management.StandardMBean.preRegister(MBeanServer,ObjectName)",ObjectName,"The name under which the MBean is to be registered. This value must not be null. If the name parameter is not null, it will usually but not necessarily be the returned value."
javax.management.StandardMBean.postRegister(Boolean),void,
javax.management.StandardMBean.preDeregister(),void,
javax.management.StandardMBean.postDeregister(),void,
javax.management.StringValueExp.getValue(),String,the string.
javax.management.StringValueExp.toString(),String,a string representation of the object.
javax.management.StringValueExp.setMBeanServer(MBeanServer),void,
javax.management.StringValueExp.apply(ObjectName),ValueExp,The ValueExp.
javax.management.loading.DefaultLoaderRepository.loadClass(String),Class&lt;?&gt;,the loaded class.
"javax.management.loading.DefaultLoaderRepository.loadClassWithout(ClassLoader,String)",Class&lt;?&gt;,the loaded class.
javax.management.loading.MLet.addURL(URL),void,
javax.management.loading.MLet.addURL(String),void,
javax.management.loading.MLet.getURLs(),URL[],the search path of URLs for loading classes and resources.
javax.management.loading.MLet.getMBeansFromURL(URL),Set&lt;Object&gt;,"A set containing one entry per MLET tag in the m-let text file loaded. Each entry specifies either the ObjectInstance for the created MBean, or a throwable object (that is, an error or an exception) if the MBean could not be created."
javax.management.loading.MLet.getMBeansFromURL(String),Set&lt;Object&gt;,"A set containing one entry per MLET tag in the m-let text file loaded. Each entry specifies either the ObjectInstance for the created MBean, or a throwable object (that is, an error or an exception) if the MBean could not be created."
javax.management.loading.MLet.getLibraryDirectory(),String,The current directory used by the library loader.
javax.management.loading.MLet.setLibraryDirectory(String),void,
"javax.management.loading.MLet.preRegister(MBeanServer,ObjectName)",ObjectName,The name of the m-let registered.
javax.management.loading.MLet.postRegister(Boolean),void,
javax.management.loading.MLet.preDeregister(),void,
javax.management.loading.MLet.postDeregister(),void,
javax.management.loading.MLet.writeExternal(ObjectOutput),void,
javax.management.loading.MLet.readExternal(ObjectInput),void,
"javax.management.loading.MLet.loadClass(String,ClassLoaderRepository)",Class&lt;?&gt;,The resulting Class object.
javax.management.loading.MLet.findClass(String),Class&lt;?&gt;,The resulting Class object.
javax.management.loading.MLet.findLibrary(String),String,
"javax.management.loading.MLet.check(String,URL,String,MLetContent)",URL,the codebase to use for the loaded MBean. The returned value should not be null.
javax.management.loading.MLetContent.getAttributes(),"Map&lt;String,String&gt;",A map of the attributes of the MLET tag and their values.
javax.management.loading.MLetContent.getDocumentBase(),URL,The MLet text file's base URL.
javax.management.loading.MLetContent.getCodeBase(),URL,The code base URL.
javax.management.loading.MLetContent.getJarFiles(),String,A comma-separated list of .jar file names.
javax.management.loading.MLetContent.getCode(),String,The value of the CODE attribute of the MLET tag.
javax.management.loading.MLetContent.getSerializedObject(),String,The value of the OBJECT attribute of the MLET tag.
javax.management.loading.MLetContent.getName(),String,The value of the NAME attribute of the MLET tag.
javax.management.loading.MLetContent.getVersion(),String,The value of the VERSION attribute of the MLET tag.
javax.management.loading.MLetContent.getParameterTypes(),List&lt;String&gt;,the list of types.
javax.management.loading.MLetContent.getParameterValues(),List&lt;String&gt;,the list of values.
javax.management.modelmbean.DescriptorSupport.getFieldValue(String),Object,"the corresponding value, or null if the field is not present."
"javax.management.modelmbean.DescriptorSupport.setField(String,Object)",void,
javax.management.modelmbean.DescriptorSupport.getFields(),String[],"String array of fields in the format fieldName=fieldValueIf the value of a field is not a String, then the toString() method will be called on it and the returned value, enclosed in parentheses, used as the value for the field in the returned array. If the value of a field is null, then the value of the field in the returned array will be empty. If the descriptor is empty, you will get an empty array."
javax.management.modelmbean.DescriptorSupport.getFieldNames(),String[],"String array of field names. If the descriptor is empty, you will get an empty array."
javax.management.modelmbean.DescriptorSupport.getFieldValues(String...),Object[],"Object array of field values. If the list of fieldNames is empty, you will get an empty array."
"javax.management.modelmbean.DescriptorSupport.setFields(String[],Object[])",void,
javax.management.modelmbean.DescriptorSupport.clone(),Object,a clone of this instance.
javax.management.modelmbean.DescriptorSupport.removeField(String),void,
javax.management.modelmbean.DescriptorSupport.equals(Object),boolean,
javax.management.modelmbean.DescriptorSupport.hashCode(),int,
javax.management.modelmbean.DescriptorSupport.isValid(),boolean,
javax.management.modelmbean.DescriptorSupport.toXMLString(),String,the XML string.
javax.management.modelmbean.DescriptorSupport.toString(),String,a string representation of the object.
javax.management.modelmbean.ModelMBeanAttributeInfo.getDescriptor(),Descriptor,Descriptor associated with the ModelMBeanAttributeInfo object.
javax.management.modelmbean.ModelMBeanAttributeInfo.setDescriptor(Descriptor),void,
javax.management.modelmbean.ModelMBeanAttributeInfo.clone(),Object,a clone of this instance.
javax.management.modelmbean.ModelMBeanAttributeInfo.toString(),String,a string representation of the object.
javax.management.modelmbean.ModelMBeanConstructorInfo.clone(),Object,a clone of this instance.
javax.management.modelmbean.ModelMBeanConstructorInfo.getDescriptor(),Descriptor,Descriptor associated with the ModelMBeanConstructorInfo object.
javax.management.modelmbean.ModelMBeanConstructorInfo.setDescriptor(Descriptor),void,
javax.management.modelmbean.ModelMBeanConstructorInfo.toString(),String,a string representation of the object.
javax.management.modelmbean.ModelMBeanInfoSupport.clone(),Object,a shallow clone of this instance.
javax.management.modelmbean.ModelMBeanInfoSupport.getDescriptors(String),Descriptor[],Descriptor array containing all descriptors for the ModelMBean if type inDescriptorType.
javax.management.modelmbean.ModelMBeanInfoSupport.setDescriptors(Descriptor[]),void,
javax.management.modelmbean.ModelMBeanInfoSupport.getDescriptor(String),Descriptor,"Descriptor containing a descriptor for the ModelMBean with the same name. If no descriptor is found, null is returned."
"javax.management.modelmbean.ModelMBeanInfoSupport.getDescriptor(String,String)",Descriptor,"Descriptor containing the descriptor for the ModelMBean with the same name and descriptorType. If no descriptor is found, null is returned."
"javax.management.modelmbean.ModelMBeanInfoSupport.setDescriptor(Descriptor,String)",void,
javax.management.modelmbean.ModelMBeanInfoSupport.getAttribute(String),ModelMBeanAttributeInfo,"the attribute info for the named attribute, or null if there is none."
javax.management.modelmbean.ModelMBeanInfoSupport.getOperation(String),ModelMBeanOperationInfo,"the operation info for the named operation, or null if there is none."
javax.management.modelmbean.ModelMBeanInfoSupport.getConstructor(String),ModelMBeanConstructorInfo,"the constructor info for the named constructor, or null if there is none."
javax.management.modelmbean.ModelMBeanInfoSupport.getNotification(String),ModelMBeanNotificationInfo,"the info for the named notification, or null if there is none."
javax.management.modelmbean.ModelMBeanInfoSupport.getDescriptor(),Descriptor,a descriptor that is either immutable or a copy of the original.
javax.management.modelmbean.ModelMBeanInfoSupport.getMBeanDescriptor(),Descriptor,the MBean descriptor.
javax.management.modelmbean.ModelMBeanInfoSupport.setMBeanDescriptor(Descriptor),void,
javax.management.modelmbean.ModelMBeanNotificationInfo.clone(),Object,a clone of this instance.
javax.management.modelmbean.ModelMBeanNotificationInfo.getDescriptor(),Descriptor,Descriptor associated with the ModelMBeanNotificationInfo object.
javax.management.modelmbean.ModelMBeanNotificationInfo.setDescriptor(Descriptor),void,
javax.management.modelmbean.ModelMBeanNotificationInfo.toString(),String,a string describing this object.
javax.management.modelmbean.ModelMBeanOperationInfo.clone(),Object,a clone of this instance.
javax.management.modelmbean.ModelMBeanOperationInfo.getDescriptor(),Descriptor,Descriptor associated with the ModelMBeanOperationInfo object.
javax.management.modelmbean.ModelMBeanOperationInfo.setDescriptor(Descriptor),void,
javax.management.modelmbean.ModelMBeanOperationInfo.toString(),String,a string representation of the object.
javax.management.modelmbean.RequiredModelMBean.setModelMBeanInfo(ModelMBeanInfo),void,
"javax.management.modelmbean.RequiredModelMBean.setManagedResource(Object,String)",void,
javax.management.modelmbean.RequiredModelMBean.load(),void,
javax.management.modelmbean.RequiredModelMBean.store(),void,
javax.management.modelmbean.RequiredModelMBean.getMBeanInfo(),MBeanInfo,"An instance of ModelMBeanInfo allowing retrieval all attributes, operations, and Notifications of this MBean."
"javax.management.modelmbean.RequiredModelMBean.invoke(String,Object[],String[])",Object,
javax.management.modelmbean.RequiredModelMBean.getAttribute(String),Object,
javax.management.modelmbean.RequiredModelMBean.getAttributes(String[]),AttributeList,The array of the retrieved attributes.
javax.management.modelmbean.RequiredModelMBean.setAttribute(Attribute),void,
javax.management.modelmbean.RequiredModelMBean.setAttributes(AttributeList),AttributeList,"The array of attributes that were set, with their new values in Attribute instances."
"javax.management.modelmbean.RequiredModelMBean.addNotificationListener(NotificationListener,NotificationFilter,Object)",void,
javax.management.modelmbean.RequiredModelMBean.removeNotificationListener(NotificationListener),void,
"javax.management.modelmbean.RequiredModelMBean.removeNotificationListener(NotificationListener,NotificationFilter,Object)",void,
javax.management.modelmbean.RequiredModelMBean.sendNotification(Notification),void,
javax.management.modelmbean.RequiredModelMBean.sendNotification(String),void,
javax.management.modelmbean.RequiredModelMBean.getNotificationInfo(),MBeanNotificationInfo[],
"javax.management.modelmbean.RequiredModelMBean.addAttributeChangeNotificationListener(NotificationListener,String,Object)",void,
"javax.management.modelmbean.RequiredModelMBean.removeAttributeChangeNotificationListener(NotificationListener,String)",void,
javax.management.modelmbean.RequiredModelMBean.sendAttributeChangeNotification(AttributeChangeNotification),void,
"javax.management.modelmbean.RequiredModelMBean.sendAttributeChangeNotification(Attribute,Attribute)",void,
javax.management.modelmbean.RequiredModelMBean.getClassLoaderRepository(),ClassLoaderRepository,the Class Loader Repository.
"javax.management.modelmbean.RequiredModelMBean.preRegister(MBeanServer,ObjectName)",ObjectName,"The name under which the MBean is to be registered. This value must not be null. If the name parameter is not null, it will usually but not necessarily be the returned value."
javax.management.modelmbean.RequiredModelMBean.postRegister(Boolean),void,
javax.management.modelmbean.RequiredModelMBean.preDeregister(),void,
javax.management.modelmbean.RequiredModelMBean.postDeregister(),void,
javax.management.monitor.CounterMonitor.start(),void,
javax.management.monitor.CounterMonitor.stop(),void,
javax.management.monitor.CounterMonitor.getDerivedGauge(ObjectName),Number,The derived gauge of the specified object.
javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp(ObjectName),long,The derived gauge timestamp of the specified object.
javax.management.monitor.CounterMonitor.getThreshold(ObjectName),Number,The threshold value of the specified object.
javax.management.monitor.CounterMonitor.getInitThreshold(),Number,The initial threshold.
javax.management.monitor.CounterMonitor.setInitThreshold(Number),void,
javax.management.monitor.CounterMonitor.getDerivedGauge(),Number,The derived gauge.
javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp(),long,The derived gauge timestamp.
javax.management.monitor.CounterMonitor.getThreshold(),Number,The threshold value.
javax.management.monitor.CounterMonitor.setThreshold(Number),void,
javax.management.monitor.CounterMonitor.getOffset(),Number,The offset value.
javax.management.monitor.CounterMonitor.setOffset(Number),void,
javax.management.monitor.CounterMonitor.getModulus(),Number,The modulus value.
javax.management.monitor.CounterMonitor.setModulus(Number),void,
javax.management.monitor.CounterMonitor.getNotify(),boolean,"true if the counter monitor notifies when exceeding the threshold, false otherwise."
javax.management.monitor.CounterMonitor.setNotify(boolean),void,
javax.management.monitor.CounterMonitor.getDifferenceMode(),boolean,"true if the difference mode is used, false otherwise."
javax.management.monitor.CounterMonitor.setDifferenceMode(boolean),void,
javax.management.monitor.CounterMonitor.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
javax.management.monitor.GaugeMonitor.start(),void,
javax.management.monitor.GaugeMonitor.stop(),void,
javax.management.monitor.GaugeMonitor.getDerivedGauge(ObjectName),Number,The derived gauge of the specified object.
javax.management.monitor.GaugeMonitor.getDerivedGaugeTimeStamp(ObjectName),long,The derived gauge timestamp of the specified object.
javax.management.monitor.GaugeMonitor.getDerivedGauge(),Number,The derived gauge.
javax.management.monitor.GaugeMonitor.getDerivedGaugeTimeStamp(),long,The derived gauge timestamp.
javax.management.monitor.GaugeMonitor.getHighThreshold(),Number,The high threshold value.
javax.management.monitor.GaugeMonitor.getLowThreshold(),Number,The low threshold value.
"javax.management.monitor.GaugeMonitor.setThresholds(Number,Number)",void,
javax.management.monitor.GaugeMonitor.getNotifyHigh(),boolean,"true if the gauge monitor notifies when exceeding the high threshold, false otherwise."
javax.management.monitor.GaugeMonitor.setNotifyHigh(boolean),void,
javax.management.monitor.GaugeMonitor.getNotifyLow(),boolean,"true if the gauge monitor notifies when exceeding the low threshold, false otherwise."
javax.management.monitor.GaugeMonitor.setNotifyLow(boolean),void,
javax.management.monitor.GaugeMonitor.getDifferenceMode(),boolean,"true if the difference mode is used, false otherwise."
javax.management.monitor.GaugeMonitor.setDifferenceMode(boolean),void,
javax.management.monitor.GaugeMonitor.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
"javax.management.monitor.Monitor.preRegister(MBeanServer,ObjectName)",ObjectName,The name of the monitor MBean registered.
javax.management.monitor.Monitor.postRegister(Boolean),void,
javax.management.monitor.Monitor.preDeregister(),void,
javax.management.monitor.Monitor.postDeregister(),void,
javax.management.monitor.Monitor.start(),abstractvoid,
javax.management.monitor.Monitor.stop(),abstractvoid,
javax.management.monitor.Monitor.getObservedObject(),ObjectName,The object being observed.
javax.management.monitor.Monitor.setObservedObject(ObjectName),void,
javax.management.monitor.Monitor.addObservedObject(ObjectName),void,
javax.management.monitor.Monitor.removeObservedObject(ObjectName),void,
javax.management.monitor.Monitor.containsObservedObject(ObjectName),boolean,"true if the specified object is present, false otherwise."
javax.management.monitor.Monitor.getObservedObjects(),ObjectName[],The objects being observed.
javax.management.monitor.Monitor.getObservedAttribute(),String,The attribute being observed.
javax.management.monitor.Monitor.setObservedAttribute(String),void,
javax.management.monitor.Monitor.getGranularityPeriod(),long,The granularity period value.
javax.management.monitor.Monitor.setGranularityPeriod(long),void,
javax.management.monitor.Monitor.isActive(),boolean,"true if the monitor MBean is active, false otherwise."
javax.management.monitor.MonitorNotification.getObservedObject(),ObjectName,The observed object.
javax.management.monitor.MonitorNotification.getObservedAttribute(),String,The observed attribute.
javax.management.monitor.MonitorNotification.getDerivedGauge(),Object,The derived gauge.
javax.management.monitor.MonitorNotification.getTrigger(),Object,The trigger.
javax.management.monitor.StringMonitor.start(),void,
javax.management.monitor.StringMonitor.stop(),void,
javax.management.monitor.StringMonitor.getDerivedGauge(ObjectName),String,The derived gauge of the specified object.
javax.management.monitor.StringMonitor.getDerivedGaugeTimeStamp(ObjectName),long,The derived gauge timestamp of the specified object.
javax.management.monitor.StringMonitor.getDerivedGauge(),String,The derived gauge.
javax.management.monitor.StringMonitor.getDerivedGaugeTimeStamp(),long,The derived gauge timestamp.
javax.management.monitor.StringMonitor.getStringToCompare(),String,The string value.
javax.management.monitor.StringMonitor.setStringToCompare(String),void,
javax.management.monitor.StringMonitor.getNotifyMatch(),boolean,"true if the string monitor notifies when matching the string to compare, false otherwise."
javax.management.monitor.StringMonitor.setNotifyMatch(boolean),void,
javax.management.monitor.StringMonitor.getNotifyDiffer(),boolean,"true if the string monitor notifies when differing from the string to compare, false otherwise."
javax.management.monitor.StringMonitor.setNotifyDiffer(boolean),void,
javax.management.monitor.StringMonitor.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
javax.management.openmbean.ArrayType.getDimension(),int,the dimension.
javax.management.openmbean.ArrayType.getElementOpenType(),OpenType&lt;?&gt;,the element type.
javax.management.openmbean.ArrayType.isPrimitiveArray(),boolean,true if this is a primitive array type.
javax.management.openmbean.ArrayType.isValue(Object),boolean,
javax.management.openmbean.ArrayType.equals(Object),boolean,true if the specified object is equal to this ArrayType instance.
javax.management.openmbean.ArrayType.hashCode(),int,the hash code value for this ArrayType instance
javax.management.openmbean.ArrayType.toString(),String,a string representation of this ArrayType instance
javax.management.openmbean.ArrayType.getArrayType(OpenType&lt;E&gt;),&lt;E&gt;ArrayType&lt;E[]&gt;,
javax.management.openmbean.ArrayType.getPrimitiveArrayType(Class&lt;T&gt;),&lt;T&gt;ArrayType&lt;T&gt;,
javax.management.openmbean.CompositeDataInvocationHandler.getCompositeData(),CompositeData,the CompositeData that this handler is backed by. This is never null.
"javax.management.openmbean.CompositeDataInvocationHandler.invoke(Object,Method,Object[])",Object,"the value to return from the method invocation on the proxy instance. If the declared return type of the interface method is a primitive type, then the value returned by this method must be an instance of the corresponding primitive wrapper class; otherwise, it must be a type assignable to the declared return type. If the value returned by this method is null and the interface method's return type is primitive, then a NullPointerException will be thrown by the method invocation on the proxy instance. If the value returned by this method is otherwise not compatible with the interface method's declared return type as described above, a ClassCastException will be thrown by the method invocation on the proxy instance."
javax.management.openmbean.CompositeDataSupport.getCompositeType(),CompositeType,the type of this CompositeData.
javax.management.openmbean.CompositeDataSupport.get(String),Object,the value associated with this key.
javax.management.openmbean.CompositeDataSupport.getAll(String[]),Object[],the values corresponding to the keys.
javax.management.openmbean.CompositeDataSupport.containsKey(String),boolean,true if this CompositeData contains the key.
javax.management.openmbean.CompositeDataSupport.containsValue(Object),boolean,true if this CompositeData contains the value.
javax.management.openmbean.CompositeDataSupport.values(),Collection&lt;?&gt;,the values.
javax.management.openmbean.CompositeDataSupport.equals(Object),boolean,
javax.management.openmbean.CompositeDataSupport.hashCode(),int,the hash code value for this CompositeDataSupport instance
javax.management.openmbean.CompositeDataSupport.toString(),String,a string representation of this CompositeDataSupport instance
javax.management.openmbean.CompositeType.containsKey(String),boolean,true if an item of this name is present.
javax.management.openmbean.CompositeType.getDescription(String),String,the description.
javax.management.openmbean.CompositeType.getType(String),OpenType&lt;?&gt;,the type.
javax.management.openmbean.CompositeType.keySet(),Set&lt;String&gt;,a Set of String.
javax.management.openmbean.CompositeType.isValue(Object),boolean,
javax.management.openmbean.CompositeType.equals(Object),boolean,
javax.management.openmbean.CompositeType.hashCode(),int,the hash code value for this CompositeType instance
javax.management.openmbean.CompositeType.toString(),String,a string representation of this CompositeType instance
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getOpenType(),OpenType&lt;?&gt;,the open type.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getDefaultValue(),Object,the default value.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getLegalValues(),Set&lt;?&gt;,the set of legal values.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getMinValue(),Comparable&lt;?&gt;,the minimum value.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getMaxValue(),Comparable&lt;?&gt;,the maximum value.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasDefaultValue(),boolean,true if there is a default value.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasLegalValues(),boolean,true if there is a set of legal values.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasMinValue(),boolean,true if there is a minimum value.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasMaxValue(),boolean,true if there is a maximum value.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.isValue(Object),boolean,"true if obj is a valid value for the parameter described by this OpenMBeanAttributeInfoSupport instance, false otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.equals(Object),boolean,
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hashCode(),int,the hash code value for this OpenMBeanAttributeInfoSupport instance
javax.management.openmbean.OpenMBeanAttributeInfoSupport.toString(),String,a string representation of this OpenMBeanAttributeInfoSupport instance.
javax.management.openmbean.OpenMBeanConstructorInfoSupport.equals(Object),boolean,
javax.management.openmbean.OpenMBeanConstructorInfoSupport.hashCode(),int,the hash code value for this OpenMBeanConstructorInfoSupport instance
javax.management.openmbean.OpenMBeanConstructorInfoSupport.toString(),String,a string representation of this OpenMBeanConstructorInfoSupport instance
javax.management.openmbean.OpenMBeanInfoSupport.equals(Object),boolean,
javax.management.openmbean.OpenMBeanInfoSupport.hashCode(),int,the hash code value for this OpenMBeanInfoSupport instance
javax.management.openmbean.OpenMBeanInfoSupport.toString(),String,a string representation of this OpenMBeanInfoSupport instance
javax.management.openmbean.OpenMBeanOperationInfoSupport.getReturnOpenType(),OpenType&lt;?&gt;,the return type.
javax.management.openmbean.OpenMBeanOperationInfoSupport.equals(Object),boolean,
javax.management.openmbean.OpenMBeanOperationInfoSupport.hashCode(),int,the hash code value for this OpenMBeanOperationInfoSupport instance
javax.management.openmbean.OpenMBeanOperationInfoSupport.toString(),String,a string representation of this OpenMBeanOperationInfoSupport instance
javax.management.openmbean.OpenMBeanParameterInfoSupport.getOpenType(),OpenType&lt;?&gt;,the open type.
javax.management.openmbean.OpenMBeanParameterInfoSupport.getDefaultValue(),Object,the default value.
javax.management.openmbean.OpenMBeanParameterInfoSupport.getLegalValues(),Set&lt;?&gt;,the set of legal values.
javax.management.openmbean.OpenMBeanParameterInfoSupport.getMinValue(),Comparable&lt;?&gt;,the minimum value.
javax.management.openmbean.OpenMBeanParameterInfoSupport.getMaxValue(),Comparable&lt;?&gt;,the maximum value.
javax.management.openmbean.OpenMBeanParameterInfoSupport.hasDefaultValue(),boolean,true if there is a default value.
javax.management.openmbean.OpenMBeanParameterInfoSupport.hasLegalValues(),boolean,true if there is a set of legal values.
javax.management.openmbean.OpenMBeanParameterInfoSupport.hasMinValue(),boolean,true if there is a minimum value.
javax.management.openmbean.OpenMBeanParameterInfoSupport.hasMaxValue(),boolean,true if there is a maximum value.
javax.management.openmbean.OpenMBeanParameterInfoSupport.isValue(Object),boolean,"true if obj is a valid value for the parameter described by this OpenMBeanParameterInfo instance, false otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.equals(Object),boolean,
javax.management.openmbean.OpenMBeanParameterInfoSupport.hashCode(),int,the hash code value for this OpenMBeanParameterInfoSupport instance
javax.management.openmbean.OpenMBeanParameterInfoSupport.toString(),String,a string representation of this OpenMBeanParameterInfoSupport instance.
javax.management.openmbean.OpenType.getClassName(),String,the class name.
javax.management.openmbean.OpenType.getTypeName(),String,the type name.
javax.management.openmbean.OpenType.getDescription(),String,the description.
javax.management.openmbean.OpenType.isArray(),boolean,true if this is an array type.
javax.management.openmbean.OpenType.isValue(Object),abstractboolean,"true if obj is a value for this open type, false otherwise."
javax.management.openmbean.OpenType.equals(Object),abstractboolean,true if this object and obj are equal.
javax.management.openmbean.OpenType.hashCode(),abstractint,
javax.management.openmbean.OpenType.toString(),abstractString,the string representation.
javax.management.openmbean.SimpleType.isValue(Object),boolean,true if obj is a value for this SimpleType instance.
javax.management.openmbean.SimpleType.equals(Object),boolean,true if the specified object is equal to this SimpleType instance.
javax.management.openmbean.SimpleType.hashCode(),int,the hash code value for this SimpleType instance
javax.management.openmbean.SimpleType.toString(),String,a string representation of this SimpleType instance
javax.management.openmbean.SimpleType.readResolve(),Object,the replacement object.
javax.management.openmbean.TabularDataSupport.getTabularType(),TabularType,the tabular type.
javax.management.openmbean.TabularDataSupport.calculateIndex(CompositeData),Object[],the index that the specified value would have in this TabularData instance.
javax.management.openmbean.TabularDataSupport.containsKey(Object),boolean,true if this TabularData indexes a row value with the specified key.
javax.management.openmbean.TabularDataSupport.containsKey(Object[]),boolean,true if this TabularData indexes a row value with the specified key.
javax.management.openmbean.TabularDataSupport.containsValue(CompositeData),boolean,true if this TabularData instance contains the specified row value.
javax.management.openmbean.TabularDataSupport.containsValue(Object),boolean,true if this TabularData instance contains the specified row value.
javax.management.openmbean.TabularDataSupport.get(Object),Object,"the value to which the specified key is mapped, or null if this map contains no mapping for the key"
javax.management.openmbean.TabularDataSupport.get(Object[]),CompositeData,the value corresponding to key.
"javax.management.openmbean.TabularDataSupport.put(Object,Object)",Object,the value which is put
javax.management.openmbean.TabularDataSupport.put(CompositeData),void,
javax.management.openmbean.TabularDataSupport.remove(Object),Object,"previous value associated with specified key, or null if there was no mapping for key."
javax.management.openmbean.TabularDataSupport.remove(Object[]),CompositeData,"previous value associated with specified key, or null if there was no mapping for key."
"javax.management.openmbean.TabularDataSupport.putAll(Map&lt;?,?&gt;)",void,
javax.management.openmbean.TabularDataSupport.putAll(CompositeData[]),void,
javax.management.openmbean.TabularDataSupport.clear(),void,
javax.management.openmbean.TabularDataSupport.size(),int,the number of rows in this TabularDataSupport instance.
javax.management.openmbean.TabularDataSupport.isEmpty(),boolean,true if this TabularDataSupport instance contains no rows.
javax.management.openmbean.TabularDataSupport.keySet(),Set&lt;Object&gt;,a set view (Set&lt;List&lt;?&gt;&gt;) of the keys used to index the rows of this TabularDataSupport instance.
javax.management.openmbean.TabularDataSupport.values(),Collection&lt;Object&gt;,a collection view (Collection&lt;CompositeData&gt;) of the values contained in this TabularDataSupport instance.
javax.management.openmbean.TabularDataSupport.entrySet(),"Set&lt;Map.Entry&lt;Object,Object&gt;&gt;","a collection view (Set&lt;Map.Entry&lt;List&lt;?&gt;,CompositeData&gt;&gt;) of the mappings contained in this map."
javax.management.openmbean.TabularDataSupport.clone(),Object,a clone of this instance.
javax.management.openmbean.TabularDataSupport.equals(Object),boolean,
javax.management.openmbean.TabularDataSupport.hashCode(),int,the hash code value for this TabularDataSupport instance
javax.management.openmbean.TabularDataSupport.toString(),String,a string representation of this TabularDataSupport instance
javax.management.openmbean.TabularType.getRowType(),CompositeType,the type of each row.
javax.management.openmbean.TabularType.getIndexNames(),List&lt;String&gt;,a List of String representing the names of the index items.
javax.management.openmbean.TabularType.isValue(Object),boolean,"true if obj is a value for this tabular type, false otherwise."
javax.management.openmbean.TabularType.equals(Object),boolean,
javax.management.openmbean.TabularType.hashCode(),int,the hash code value for this TabularType instance
javax.management.openmbean.TabularType.toString(),String,a string representation of this TabularType instance
javax.management.relation.MBeanServerNotificationFilter.disableAllObjectNames(),void,
javax.management.relation.MBeanServerNotificationFilter.disableObjectName(ObjectName),void,
javax.management.relation.MBeanServerNotificationFilter.enableAllObjectNames(),void,
javax.management.relation.MBeanServerNotificationFilter.enableObjectName(ObjectName),void,
javax.management.relation.MBeanServerNotificationFilter.getEnabledObjectNames(),Vector&lt;ObjectName&gt;,"Vector of ObjectNames: - null means all ObjectNames are implicitly selected, except the ObjectNames explicitly deselected - empty means all ObjectNames are deselected, i.e. no ObjectName selected."
javax.management.relation.MBeanServerNotificationFilter.getDisabledObjectNames(),Vector&lt;ObjectName&gt;,"Vector of ObjectNames: - null means all ObjectNames are implicitly deselected, except the ObjectNames explicitly selected - empty means all ObjectNames are selected, i.e. no ObjectName deselected."
javax.management.relation.MBeanServerNotificationFilter.isNotificationEnabled(Notification),boolean,"true if the notification has to be sent to the listener, false otherwise."
javax.management.relation.RelationNotification.getRelationId(),String,the relation id.
javax.management.relation.RelationNotification.getRelationTypeName(),String,the relation type name.
javax.management.relation.RelationNotification.getObjectName(),ObjectName,"the ObjectName if the relation is an MBean, otherwise null."
javax.management.relation.RelationNotification.getMBeansToUnregister(),List&lt;ObjectName&gt;,a List of ObjectName.
javax.management.relation.RelationNotification.getRoleName(),String,the name of the updated role.
javax.management.relation.RelationNotification.getOldRoleValue(),List&lt;ObjectName&gt;,the old value of the updated role.
javax.management.relation.RelationNotification.getNewRoleValue(),List&lt;ObjectName&gt;,the new value of the updated role.
javax.management.relation.RelationService.isActive(),void,
"javax.management.relation.RelationService.preRegister(MBeanServer,ObjectName)",ObjectName,"The name under which the MBean is to be registered. This value must not be null. If the name parameter is not null, it will usually but not necessarily be the returned value."
javax.management.relation.RelationService.postRegister(Boolean),void,
javax.management.relation.RelationService.preDeregister(),void,
javax.management.relation.RelationService.postDeregister(),void,
javax.management.relation.RelationService.getPurgeFlag(),boolean,true if purges are automatic.
javax.management.relation.RelationService.setPurgeFlag(boolean),void,
"javax.management.relation.RelationService.createRelationType(String,RoleInfo[])",void,
javax.management.relation.RelationService.addRelationType(RelationType),void,
javax.management.relation.RelationService.getAllRelationTypeNames(),List&lt;String&gt;,ArrayList of relation type names (Strings)
javax.management.relation.RelationService.getRoleInfos(String),List&lt;RoleInfo&gt;,ArrayList of RoleInfo.
"javax.management.relation.RelationService.getRoleInfo(String,String)",RoleInfo,RoleInfo object.
javax.management.relation.RelationService.removeRelationType(String),void,
"javax.management.relation.RelationService.createRelation(String,String,RoleList)",void,
javax.management.relation.RelationService.addRelation(ObjectName),void,
javax.management.relation.RelationService.isRelationMBean(String),ObjectName,"ObjectName of the corresponding relation MBean, or null if the relation is not an MBean."
javax.management.relation.RelationService.isRelation(ObjectName),String,relation id (String) or null (if the ObjectName is not a relation handled by the Relation Service)
javax.management.relation.RelationService.hasRelation(String),Boolean,"boolean: true if there is a relation, false else"
javax.management.relation.RelationService.getAllRelationIds(),List&lt;String&gt;,ArrayList of String
"javax.management.relation.RelationService.checkRoleReading(String,String)",Integer,an Integer wrapping an integer corresponding to possible problems represented as constants in RoleUnresolved: - 0 if role can be read - integer corresponding to RoleStatus.NO_ROLE_WITH_NAME - integer corresponding to RoleStatus.ROLE_NOT_READABLE
"javax.management.relation.RelationService.checkRoleWriting(Role,String,Boolean)",Integer,an Integer wrapping an integer corresponding to possible problems represented as constants in RoleUnresolved: - 0 if role can be set - integer corresponding to RoleStatus.NO_ROLE_WITH_NAME - integer for RoleStatus.ROLE_NOT_WRITABLE - integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE - integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE - integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS - integer for RoleStatus.REF_MBEAN_NOT_REGISTERED
javax.management.relation.RelationService.sendRelationCreationNotification(String),void,
"javax.management.relation.RelationService.sendRoleUpdateNotification(String,Role,List&lt;ObjectName&gt;)",void,
"javax.management.relation.RelationService.sendRelationRemovalNotification(String,List&lt;ObjectName&gt;)",void,
"javax.management.relation.RelationService.updateRoleMap(String,Role,List&lt;ObjectName&gt;)",void,
javax.management.relation.RelationService.removeRelation(String),void,
javax.management.relation.RelationService.purgeRelations(),void,
"javax.management.relation.RelationService.findReferencingRelations(ObjectName,String,String)","Map&lt;String,List&lt;String&gt;&gt;","an HashMap, where the keys are the relation ids of the relations where the MBean is referenced, and the value is, for each key, an ArrayList of role names (as an MBean can be referenced in several roles in the same relation)."
"javax.management.relation.RelationService.findAssociatedMBeans(ObjectName,String,String)","Map&lt;ObjectName,List&lt;String&gt;&gt;","an HashMap, where the keys are the ObjectNames of the MBeans associated to given MBean, and the value is, for each key, an ArrayList of the relation ids of the relations where the key MBean is associated to given one (as they can be associated in several different relations)."
javax.management.relation.RelationService.findRelationsOfType(String),List&lt;String&gt;,an ArrayList of relation ids.
"javax.management.relation.RelationService.getRole(String,String)",List&lt;ObjectName&gt;,the ArrayList of ObjectName objects being the role value
"javax.management.relation.RelationService.getRoles(String,String[])",RoleResult,"a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not retrieved)."
javax.management.relation.RelationService.getAllRoles(String),RoleResult,"a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not readable)."
"javax.management.relation.RelationService.getRoleCardinality(String,String)",Integer,the number of currently referenced MBeans in that role
"javax.management.relation.RelationService.setRole(String,Role)",void,
"javax.management.relation.RelationService.setRoles(String,RoleList)",RoleResult,"a RoleResult object, including a RoleList (for roles successfully set) and a RoleUnresolvedList (for roles not set)."
javax.management.relation.RelationService.getReferencedMBeans(String),"Map&lt;ObjectName,List&lt;String&gt;&gt;",a HashMap mapping: ObjectName -&gt; ArrayList of String (role names)
javax.management.relation.RelationService.getRelationTypeName(String),String,the name of the associated relation type.
"javax.management.relation.RelationService.handleNotification(Notification,Object)",void,
javax.management.relation.RelationService.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
javax.management.relation.RelationSupport.getRole(String),List&lt;ObjectName&gt;,the ArrayList of ObjectName objects being the role value
javax.management.relation.RelationSupport.getRoles(String[]),RoleResult,"a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not retrieved)."
javax.management.relation.RelationSupport.getAllRoles(),RoleResult,"a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not readable)."
javax.management.relation.RelationSupport.retrieveAllRoles(),RoleList,a RoleList
javax.management.relation.RelationSupport.getRoleCardinality(String),Integer,the number of currently referenced MBeans in that role
javax.management.relation.RelationSupport.setRole(Role),void,
javax.management.relation.RelationSupport.setRoles(RoleList),RoleResult,"a RoleResult object, including a RoleList (for roles successfully set) and a RoleUnresolvedList (for roles not set)."
"javax.management.relation.RelationSupport.handleMBeanUnregistration(ObjectName,String)",void,
javax.management.relation.RelationSupport.getReferencedMBeans(),"Map&lt;ObjectName,List&lt;String&gt;&gt;",a HashMap mapping: ObjectName -&gt; ArrayList of String (role names)
javax.management.relation.RelationSupport.getRelationTypeName(),String,the name of the relation type.
javax.management.relation.RelationSupport.getRelationServiceName(),ObjectName,the ObjectName of the Relation Service.
javax.management.relation.RelationSupport.getRelationId(),String,the relation id.
"javax.management.relation.RelationSupport.preRegister(MBeanServer,ObjectName)",ObjectName,"The name under which the MBean is to be registered. This value must not be null. If the name parameter is not null, it will usually but not necessarily be the returned value."
javax.management.relation.RelationSupport.postRegister(Boolean),void,
javax.management.relation.RelationSupport.preDeregister(),void,
javax.management.relation.RelationSupport.postDeregister(),void,
javax.management.relation.RelationSupport.isInRelationService(),Boolean,a Boolean equal to Boolean.TRUE if the object is still handled by the Relation Service and Boolean.FALSE otherwise.
javax.management.relation.RelationSupport.setRelationServiceManagementFlag(Boolean),void,
javax.management.relation.RelationTypeSupport.getRelationTypeName(),String,the relation type name.
javax.management.relation.RelationTypeSupport.getRoleInfos(),List&lt;RoleInfo&gt;,an ArrayList of RoleInfo.
javax.management.relation.RelationTypeSupport.getRoleInfo(String),RoleInfo,RoleInfo object providing role definition does not exist
javax.management.relation.RelationTypeSupport.addRoleInfo(RoleInfo),void,
javax.management.relation.Role.getRoleName(),String,the role name.
javax.management.relation.Role.getRoleValue(),List&lt;ObjectName&gt;,ArrayList of ObjectName objects for referenced MBeans.
javax.management.relation.Role.setRoleName(String),void,
javax.management.relation.Role.setRoleValue(List&lt;ObjectName&gt;),void,
javax.management.relation.Role.toString(),String,the description of the role.
javax.management.relation.Role.clone(),Object,a Role that is an independent copy of the current Role object.
javax.management.relation.Role.roleValueToString(List&lt;ObjectName&gt;),String,A String consisting of the ObjectNames separated by newlines ().
javax.management.relation.RoleInfo.getName(),String,the name of the role.
javax.management.relation.RoleInfo.isReadable(),boolean,true if the role is readable.
javax.management.relation.RoleInfo.isWritable(),boolean,true if the role is writable.
javax.management.relation.RoleInfo.getDescription(),String,the description of the role.
javax.management.relation.RoleInfo.getMinDegree(),int,the minimum degree.
javax.management.relation.RoleInfo.getMaxDegree(),int,the maximum degree.
javax.management.relation.RoleInfo.getRefMBeanClassName(),String,the name of the referenced type.
javax.management.relation.RoleInfo.checkMinDegree(int),boolean,"true if greater than or equal to minimum degree, false otherwise."
javax.management.relation.RoleInfo.checkMaxDegree(int),boolean,"true if lower than or equal to maximum degree, false otherwise."
javax.management.relation.RoleInfo.toString(),String,a description of the role info.
javax.management.relation.RoleList.asList(),List&lt;Role&gt;,"a List&lt;Role&gt; whose contents reflect the contents of this RoleList. If this method has ever been called on a given RoleList instance, a subsequent attempt to add an object to that instance which is not a Role will fail with an IllegalArgumentException. For compatibility reasons, a RoleList on which this method has never been called does allow objects other than Roles to be added."
javax.management.relation.RoleList.add(Role),void,
"javax.management.relation.RoleList.add(int,Role)",void,
"javax.management.relation.RoleList.set(int,Role)",void,
javax.management.relation.RoleList.addAll(RoleList),boolean,true if this list changed as a result of the call.
"javax.management.relation.RoleList.addAll(int,RoleList)",boolean,true if this list changed as a result of the call.
javax.management.relation.RoleList.add(Object),boolean,true (as specified by Collection.add(E))
"javax.management.relation.RoleList.add(int,Object)",void,
javax.management.relation.RoleList.addAll(Collection&lt;?&gt;),boolean,true if this list changed as a result of the call
"javax.management.relation.RoleList.addAll(int,Collection&lt;?&gt;)",boolean,true if this list changed as a result of the call
"javax.management.relation.RoleList.set(int,Object)",Object,the element previously at the specified position
javax.management.relation.RoleResult.getRoles(),RoleList,a RoleList
javax.management.relation.RoleResult.getRolesUnresolved(),RoleUnresolvedList,a RoleUnresolvedList.
javax.management.relation.RoleResult.setRoles(RoleList),void,
javax.management.relation.RoleResult.setRolesUnresolved(RoleUnresolvedList),void,
javax.management.relation.RoleStatus.isRoleStatus(int),boolean,true if this value is a known role status.
javax.management.relation.RoleUnresolved.getRoleName(),String,the role name.
javax.management.relation.RoleUnresolved.getRoleValue(),List&lt;ObjectName&gt;,"an ArrayList of ObjectName objects, the one provided to be set in given role. Null if the unresolved role is returned for a read access."
javax.management.relation.RoleUnresolved.getProblemType(),int,"an integer corresponding to a problem, those being described as static final members of current class."
javax.management.relation.RoleUnresolved.setRoleName(String),void,
javax.management.relation.RoleUnresolved.setRoleValue(List&lt;ObjectName&gt;),void,
javax.management.relation.RoleUnresolved.setProblemType(int),void,
javax.management.relation.RoleUnresolved.clone(),Object,an independent clone.
javax.management.relation.RoleUnresolved.toString(),String,a description of this RoleUnresolved object.
javax.management.relation.RoleUnresolvedList.asList(),List&lt;RoleUnresolved&gt;,"a List&lt;RoleUnresolved&gt; whose contents reflect the contents of this RoleUnresolvedList. If this method has ever been called on a given RoleUnresolvedList instance, a subsequent attempt to add an object to that instance which is not a RoleUnresolved will fail with an IllegalArgumentException. For compatibility reasons, a RoleUnresolvedList on which this method has never been called does allow objects other than RoleUnresolveds to be added."
javax.management.relation.RoleUnresolvedList.add(RoleUnresolved),void,
"javax.management.relation.RoleUnresolvedList.add(int,RoleUnresolved)",void,
"javax.management.relation.RoleUnresolvedList.set(int,RoleUnresolved)",void,
javax.management.relation.RoleUnresolvedList.addAll(RoleUnresolvedList),boolean,true if this list changed as a result of the call.
"javax.management.relation.RoleUnresolvedList.addAll(int,RoleUnresolvedList)",boolean,true if this list changed as a result of the call.
javax.management.relation.RoleUnresolvedList.add(Object),boolean,true (as specified by Collection.add(E))
"javax.management.relation.RoleUnresolvedList.add(int,Object)",void,
javax.management.relation.RoleUnresolvedList.addAll(Collection&lt;?&gt;),boolean,true if this list changed as a result of the call
"javax.management.relation.RoleUnresolvedList.addAll(int,Collection&lt;?&gt;)",boolean,true if this list changed as a result of the call
"javax.management.relation.RoleUnresolvedList.set(int,Object)",Object,the element previously at the specified position
javax.management.remote.JMXConnectionNotification.getConnectionId(),String,the connection ID.
javax.management.remote.JMXConnectorFactory.connect(JMXServiceURL),JMXConnector,a JMXConnector whose connect method has been called.
"javax.management.remote.JMXConnectorFactory.connect(JMXServiceURL,Map&lt;String,?&gt;)",JMXConnector,a JMXConnector representing the newly-made connection. Each successful call to this method produces a different object.
"javax.management.remote.JMXConnectorFactory.newJMXConnector(JMXServiceURL,Map&lt;String,?&gt;)",JMXConnector,a JMXConnector representing the new connector client. Each successful call to this method produces a different object.
javax.management.remote.JMXConnectorServer.getMBeanServer(),MBeanServer,"the MBean server that this connector server is attached to, or null if it is not yet attached to an MBean server."
javax.management.remote.JMXConnectorServer.setMBeanServerForwarder(MBeanServerForwarder),void,
javax.management.remote.JMXConnectorServer.getConnectionIds(),String[],"a new string array containing the list of IDs. If there are no currently-open connections, this array will be empty."
"javax.management.remote.JMXConnectorServer.toJMXConnector(Map&lt;String,?&gt;)",JMXConnector,a client stub that can be used to make a new connection to this connector server.
javax.management.remote.JMXConnectorServer.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
"javax.management.remote.JMXConnectorServer.connectionOpened(String,String,Object)",void,
"javax.management.remote.JMXConnectorServer.connectionClosed(String,String,Object)",void,
"javax.management.remote.JMXConnectorServer.connectionFailed(String,String,Object)",void,
"javax.management.remote.JMXConnectorServer.preRegister(MBeanServer,ObjectName)",ObjectName,The name under which the MBean is to be registered.
javax.management.remote.JMXConnectorServer.postRegister(Boolean),void,
javax.management.remote.JMXConnectorServer.preDeregister(),void,
javax.management.remote.JMXConnectorServer.postDeregister(),void,
"javax.management.remote.JMXConnectorServerFactory.newJMXConnectorServer(JMXServiceURL,Map&lt;String,?&gt;,MBeanServer)",JMXConnectorServer,a JMXConnectorServer representing the new connector server. Each successful call to this method produces a different object.
javax.management.remote.JMXPrincipal.getName(),String,the name of this JMXPrincipal.
javax.management.remote.JMXPrincipal.toString(),String,a string representation of this JMXPrincipal.
javax.management.remote.JMXPrincipal.equals(Object),boolean,true if the specified Object is equal to this JMXPrincipal.
javax.management.remote.JMXPrincipal.hashCode(),int,a hash code for this JMXPrincipal.
javax.management.remote.JMXServiceURL.getProtocol(),String,the protocol part of the Service URL. This is never null.
javax.management.remote.JMXServiceURL.getHost(),String,the host part of the Service URL. This is never null.
javax.management.remote.JMXServiceURL.getPort(),int,"the port of the Service URL, or 0 if none."
javax.management.remote.JMXServiceURL.getURLPath(),String,the URL Path part of the Service URL. This is never null.
javax.management.remote.JMXServiceURL.toString(),String,the string representation of this Service URL.
javax.management.remote.JMXServiceURL.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.management.remote.JMXServiceURL.hashCode(),int,
javax.management.remote.NotificationResult.getEarliestSequenceNumber(),long,the sequence number of the earliest notification still in the buffer.
javax.management.remote.NotificationResult.getNextSequenceNumber(),long,the sequence number of the next notification available for querying.
javax.management.remote.NotificationResult.getTargetedNotifications(),TargetedNotification[],"the notifications resulting from the query, and the listeners they correspond to. This array can be empty."
javax.management.remote.NotificationResult.toString(),String,a string representation of the object.
javax.management.remote.TargetedNotification.getNotification(),Notification,The notification.
javax.management.remote.TargetedNotification.getListenerID(),Integer,The listener ID.
javax.management.remote.TargetedNotification.toString(),String,a String representation of this Targeted Notification.
javax.management.remote.rmi.RMIConnectionImpl.getConnectionId(),String,the connection ID
javax.management.remote.rmi.RMIConnectionImpl.close(),void,
javax.management.remote.rmi.RMIConnectionImpl.unreferenced(),void,
"javax.management.remote.rmi.RMIConnectionImpl.createMBean(String,ObjectName,Subject)",ObjectInstance,"An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n).getClassName()."
"javax.management.remote.rmi.RMIConnectionImpl.createMBean(String,ObjectName,ObjectName,Subject)",ObjectInstance,"An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n).getClassName()."
"javax.management.remote.rmi.RMIConnectionImpl.createMBean(String,ObjectName,MarshalledObject,String[],Subject)",ObjectInstance,"An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n).getClassName()."
"javax.management.remote.rmi.RMIConnectionImpl.createMBean(String,ObjectName,ObjectName,MarshalledObject,String[],Subject)",ObjectInstance,"An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n).getClassName()."
"javax.management.remote.rmi.RMIConnectionImpl.unregisterMBean(ObjectName,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl.getObjectInstance(ObjectName,Subject)",ObjectInstance,The ObjectInstance associated with the MBean specified by name. The contained ObjectName is name and the contained class name is getMBeanInfo(name).getClassName().
"javax.management.remote.rmi.RMIConnectionImpl.queryMBeans(ObjectName,MarshalledObject,Subject)",Set&lt;ObjectInstance&gt;,A set containing the ObjectInstance objects for the selected MBeans. If no MBean satisfies the query an empty list is returned.
"javax.management.remote.rmi.RMIConnectionImpl.queryNames(ObjectName,MarshalledObject,Subject)",Set&lt;ObjectName&gt;,"A set containing the ObjectNames for the MBeans selected. If no MBean satisfies the query, an empty list is returned."
"javax.management.remote.rmi.RMIConnectionImpl.isRegistered(ObjectName,Subject)",boolean,"True if the MBean is already registered in the MBean server, false otherwise."
javax.management.remote.rmi.RMIConnectionImpl.getMBeanCount(Subject),Integer,the number of MBeans registered.
"javax.management.remote.rmi.RMIConnectionImpl.getAttribute(ObjectName,String,Subject)",Object,The value of the retrieved attribute.
"javax.management.remote.rmi.RMIConnectionImpl.getAttributes(ObjectName,String[],Subject)",AttributeList,The list of the retrieved attributes.
"javax.management.remote.rmi.RMIConnectionImpl.setAttribute(ObjectName,MarshalledObject,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl.setAttributes(ObjectName,MarshalledObject,Subject)",AttributeList,"The list of attributes that were set, with their new values."
"javax.management.remote.rmi.RMIConnectionImpl.invoke(ObjectName,String,MarshalledObject,String[],Subject)",Object,"The object returned by the operation, which represents the result of invoking the operation on the MBean specified."
javax.management.remote.rmi.RMIConnectionImpl.getDefaultDomain(Subject),String,the default domain.
javax.management.remote.rmi.RMIConnectionImpl.getDomains(Subject),String[],the list of domains.
"javax.management.remote.rmi.RMIConnectionImpl.getMBeanInfo(ObjectName,Subject)",MBeanInfo,An instance of MBeanInfo allowing the retrieval of all attributes and operations of this MBean.
"javax.management.remote.rmi.RMIConnectionImpl.isInstanceOf(ObjectName,String,Subject)",boolean,"true if the MBean specified is an instance of the specified class according to the rules above, false otherwise."
"javax.management.remote.rmi.RMIConnectionImpl.addNotificationListeners(ObjectName[],MarshalledObject[],Subject[])",Integer[],an array of listenerIDs identifying the local listeners. This array has the same number of elements as the parameters.
"javax.management.remote.rmi.RMIConnectionImpl.addNotificationListener(ObjectName,ObjectName,MarshalledObject,MarshalledObject,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl.removeNotificationListeners(ObjectName,Integer[],Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl.removeNotificationListener(ObjectName,ObjectName,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl.removeNotificationListener(ObjectName,ObjectName,MarshalledObject,MarshalledObject,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl.fetchNotifications(long,int,long)",NotificationResult,A NotificationResult.
javax.management.remote.rmi.RMIConnectionImpl.toString(),String,a String representation of this object.
"javax.management.remote.rmi.RMIConnectionImpl_Stub.addNotificationListener(ObjectName,ObjectName,MarshalledObject,MarshalledObject,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl_Stub.addNotificationListeners(ObjectName[],MarshalledObject[],Subject[])",Integer[],an array of listenerIDs identifying the local listeners. This array has the same number of elements as the parameters.
javax.management.remote.rmi.RMIConnectionImpl_Stub.close(),void,
"javax.management.remote.rmi.RMIConnectionImpl_Stub.createMBean(String,ObjectName,MarshalledObject,String[],Subject)",ObjectInstance,"An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n).getClassName()."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.createMBean(String,ObjectName,ObjectName,MarshalledObject,String[],Subject)",ObjectInstance,"An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n).getClassName()."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.createMBean(String,ObjectName,ObjectName,Subject)",ObjectInstance,"An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n).getClassName()."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.createMBean(String,ObjectName,Subject)",ObjectInstance,"An ObjectInstance, containing the ObjectName and the Java class name of the newly instantiated MBean. If the contained ObjectName is n, the contained Java class name is getMBeanInfo(n).getClassName()."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.fetchNotifications(long,int,long)",NotificationResult,A NotificationResult.
"javax.management.remote.rmi.RMIConnectionImpl_Stub.getAttribute(ObjectName,String,Subject)",Object,The value of the retrieved attribute.
"javax.management.remote.rmi.RMIConnectionImpl_Stub.getAttributes(ObjectName,String[],Subject)",AttributeList,The list of the retrieved attributes.
javax.management.remote.rmi.RMIConnectionImpl_Stub.getConnectionId(),String,the connection ID
javax.management.remote.rmi.RMIConnectionImpl_Stub.getDefaultDomain(Subject),String,the default domain.
javax.management.remote.rmi.RMIConnectionImpl_Stub.getDomains(Subject),String[],the list of domains.
javax.management.remote.rmi.RMIConnectionImpl_Stub.getMBeanCount(Subject),Integer,the number of MBeans registered.
"javax.management.remote.rmi.RMIConnectionImpl_Stub.getMBeanInfo(ObjectName,Subject)",MBeanInfo,An instance of MBeanInfo allowing the retrieval of all attributes and operations of this MBean.
"javax.management.remote.rmi.RMIConnectionImpl_Stub.getObjectInstance(ObjectName,Subject)",ObjectInstance,The ObjectInstance associated with the MBean specified by name. The contained ObjectName is name and the contained class name is getMBeanInfo(name).getClassName().
"javax.management.remote.rmi.RMIConnectionImpl_Stub.invoke(ObjectName,String,MarshalledObject,String[],Subject)",Object,"The object returned by the operation, which represents the result of invoking the operation on the MBean specified."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.isInstanceOf(ObjectName,String,Subject)",boolean,"true if the MBean specified is an instance of the specified class according to the rules above, false otherwise."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.isRegistered(ObjectName,Subject)",boolean,"True if the MBean is already registered in the MBean server, false otherwise."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.queryMBeans(ObjectName,MarshalledObject,Subject)",Set,A set containing the ObjectInstance objects for the selected MBeans. If no MBean satisfies the query an empty list is returned.
"javax.management.remote.rmi.RMIConnectionImpl_Stub.queryNames(ObjectName,MarshalledObject,Subject)",Set,"A set containing the ObjectNames for the MBeans selected. If no MBean satisfies the query, an empty list is returned."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.removeNotificationListener(ObjectName,ObjectName,MarshalledObject,MarshalledObject,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl_Stub.removeNotificationListener(ObjectName,ObjectName,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl_Stub.removeNotificationListeners(ObjectName,Integer[],Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl_Stub.setAttribute(ObjectName,MarshalledObject,Subject)",void,
"javax.management.remote.rmi.RMIConnectionImpl_Stub.setAttributes(ObjectName,MarshalledObject,Subject)",AttributeList,"The list of attributes that were set, with their new values."
"javax.management.remote.rmi.RMIConnectionImpl_Stub.unregisterMBean(ObjectName,Subject)",void,
javax.management.remote.rmi.RMIConnector.toString(),String,a String representation of this object.
javax.management.remote.rmi.RMIConnector.getAddress(),JMXServiceURL,"the address of this connector, or null if it does not have one."
javax.management.remote.rmi.RMIConnector.connect(),void,
"javax.management.remote.rmi.RMIConnector.connect(Map&lt;String,?&gt;)",void,
javax.management.remote.rmi.RMIConnector.getConnectionId(),String,the unique ID of this connection. This is the same as the ID that the connector server includes in its JMXConnectionNotifications. The package description describes the conventions for connection IDs.
javax.management.remote.rmi.RMIConnector.getMBeanServerConnection(),MBeanServerConnection,an object that implements the MBeanServerConnection interface by forwarding its methods to the remote MBean server.
javax.management.remote.rmi.RMIConnector.getMBeanServerConnection(Subject),MBeanServerConnection,an object that implements the MBeanServerConnection interface by forwarding its methods to the remote MBean server on behalf of a given delegation subject.
"javax.management.remote.rmi.RMIConnector.addConnectionNotificationListener(NotificationListener,NotificationFilter,Object)",void,
javax.management.remote.rmi.RMIConnector.removeConnectionNotificationListener(NotificationListener),void,
"javax.management.remote.rmi.RMIConnector.removeConnectionNotificationListener(NotificationListener,NotificationFilter,Object)",void,
javax.management.remote.rmi.RMIConnector.close(),void,
"javax.management.remote.rmi.RMIConnectorServer.toJMXConnector(Map&lt;String,?&gt;)",JMXConnector,a client stub that can be used to make a new connection to this connector server.
javax.management.remote.rmi.RMIConnectorServer.start(),void,
javax.management.remote.rmi.RMIConnectorServer.stop(),void,
javax.management.remote.rmi.RMIConnectorServer.isActive(),boolean,true if the connector server is active.
javax.management.remote.rmi.RMIConnectorServer.getAddress(),JMXServiceURL,"the address of this connector server, or null if it does not have one."
javax.management.remote.rmi.RMIConnectorServer.getAttributes(),"Map&lt;String,?&gt;","a read-only map containing the attributes for this connector server. Attributes whose values are not serializable are omitted from this map. If there are no serializable attributes, the returned map is empty."
javax.management.remote.rmi.RMIConnectorServer.setMBeanServerForwarder(MBeanServerForwarder),void,
"javax.management.remote.rmi.RMIConnectorServer.connectionOpened(String,String,Object)",void,
"javax.management.remote.rmi.RMIConnectorServer.connectionClosed(String,String,Object)",void,
"javax.management.remote.rmi.RMIConnectorServer.connectionFailed(String,String,Object)",void,
javax.management.remote.rmi.RMIIIOPServerImpl.export(),void,
javax.management.remote.rmi.RMIIIOPServerImpl.getProtocol(),String,the protocol string for this object.
javax.management.remote.rmi.RMIIIOPServerImpl.toStub(),Remote,an IIOP stub.
"javax.management.remote.rmi.RMIIIOPServerImpl.makeClient(String,Subject)",RMIConnection,the newly-created RMIConnection.
javax.management.remote.rmi.RMIIIOPServerImpl.closeClient(RMIConnection),void,
javax.management.remote.rmi.RMIIIOPServerImpl.closeServer(),void,
javax.management.remote.rmi.RMIJRMPServerImpl.export(),void,
javax.management.remote.rmi.RMIJRMPServerImpl.getProtocol(),String,the protocol string for this object.
javax.management.remote.rmi.RMIJRMPServerImpl.toStub(),Remote,a serializable stub.
"javax.management.remote.rmi.RMIJRMPServerImpl.makeClient(String,Subject)",RMIConnection,the newly-created RMIConnection.
javax.management.remote.rmi.RMIJRMPServerImpl.closeClient(RMIConnection),void,
javax.management.remote.rmi.RMIJRMPServerImpl.closeServer(),void,
javax.management.remote.rmi.RMIServerImpl.export(),abstractvoid,
javax.management.remote.rmi.RMIServerImpl.toStub(),abstractRemote,a remotable stub.
javax.management.remote.rmi.RMIServerImpl.setDefaultClassLoader(ClassLoader),void,
javax.management.remote.rmi.RMIServerImpl.getDefaultClassLoader(),ClassLoader,the default ClassLoader used by this connector server.
javax.management.remote.rmi.RMIServerImpl.setMBeanServer(MBeanServer),void,
javax.management.remote.rmi.RMIServerImpl.getMBeanServer(),MBeanServer,the MBeanServer to which this connector is attached.
javax.management.remote.rmi.RMIServerImpl.getVersion(),String,a string with the format described here.
javax.management.remote.rmi.RMIServerImpl.newClient(Object),RMIConnection,"the newly-created RMIConnection. This is usually the object created by makeClient, though an implementation may choose to wrap that object in another object implementing RMIConnection."
"javax.management.remote.rmi.RMIServerImpl.makeClient(String,Subject)",abstractRMIConnection,the newly-created RMIConnection.
javax.management.remote.rmi.RMIServerImpl.closeClient(RMIConnection),abstractvoid,
javax.management.remote.rmi.RMIServerImpl.getProtocol(),abstractString,the protocol string for this object.
javax.management.remote.rmi.RMIServerImpl.clientClosed(RMIConnection),void,
javax.management.remote.rmi.RMIServerImpl.close(),void,
javax.management.remote.rmi.RMIServerImpl.closeServer(),abstractvoid,
javax.management.remote.rmi.RMIServerImpl_Stub.getVersion(),String,a string with the format described here.
javax.management.remote.rmi.RMIServerImpl_Stub.newClient(Object),RMIConnection,the newly-created connection object.
"javax.management.timer.Timer.preRegister(MBeanServer,ObjectName)",ObjectName,The name of the timer MBean registered.
javax.management.timer.Timer.postRegister(Boolean),void,
javax.management.timer.Timer.preDeregister(),void,
javax.management.timer.Timer.postDeregister(),void,
javax.management.timer.Timer.getNotificationInfo(),MBeanNotificationInfo[],the array of possible notifications.
javax.management.timer.Timer.start(),void,
javax.management.timer.Timer.stop(),void,
"javax.management.timer.Timer.addNotification(String,String,Object,Date,long,long,boolean)",Integer,The identifier of the new created timer notification.
"javax.management.timer.Timer.addNotification(String,String,Object,Date,long,long)",Integer,The identifier of the new created timer notification.
"javax.management.timer.Timer.addNotification(String,String,Object,Date,long)",Integer,The identifier of the new created timer notification.
"javax.management.timer.Timer.addNotification(String,String,Object,Date)",Integer,The identifier of the new created timer notification.
javax.management.timer.Timer.removeNotification(Integer),void,
javax.management.timer.Timer.removeNotifications(String),void,
javax.management.timer.Timer.removeAllNotifications(),void,
javax.management.timer.Timer.getNbNotifications(),int,The number of timer notifications.
javax.management.timer.Timer.getAllNotificationIDs(),Vector&lt;Integer&gt;,A vector of Integer objects containing all the timer notification identifiers. The vector is empty if there is no timer notification registered for this timer MBean.
javax.management.timer.Timer.getNotificationIDs(String),Vector&lt;Integer&gt;,A vector of Integer objects containing all the identifiers of timer notifications with the specified type. The vector is empty if there is no timer notifications registered for this timer MBean with the specified type.
javax.management.timer.Timer.getNotificationType(Integer),String,The timer notification type or null if the identifier is not mapped to any timer notification registered for this timer MBean.
javax.management.timer.Timer.getNotificationMessage(Integer),String,The timer notification detailed message or null if the identifier is not mapped to any timer notification registered for this timer MBean.
javax.management.timer.Timer.getNotificationUserData(Integer),Object,The timer notification user data object or null if the identifier is not mapped to any timer notification registered for this timer MBean.
javax.management.timer.Timer.getDate(Integer),Date,A copy of the date or null if the identifier is not mapped to any timer notification registered for this timer MBean.
javax.management.timer.Timer.getPeriod(Integer),Long,A copy of the period or null if the identifier is not mapped to any timer notification registered for this timer MBean.
javax.management.timer.Timer.getNbOccurences(Integer),Long,A copy of the remaining number of occurrences or null if the identifier is not mapped to any timer notification registered for this timer MBean.
javax.management.timer.Timer.getFixedRate(Integer),Boolean,A copy of the flag indicating whether a periodic notification is executed at fixed-delay or at fixed-rate.
javax.management.timer.Timer.getSendPastNotifications(),boolean,The past notifications sending on/off flag value.
javax.management.timer.Timer.setSendPastNotifications(boolean),void,
javax.management.timer.Timer.isActive(),boolean,"true if the timer MBean is active, false otherwise."
javax.management.timer.Timer.isEmpty(),boolean,"true if the list of timer notifications is empty, false otherwise."
javax.management.timer.TimerNotification.getNotificationID(),Integer,The identifier.
javax.naming.BinaryRefAddr.getContent(),Object,The non-null buffer containing this address's contents.
javax.naming.BinaryRefAddr.equals(Object),boolean,true if the object is equal; false otherwise.
javax.naming.BinaryRefAddr.hashCode(),int,The hash code of this address as an int.
javax.naming.BinaryRefAddr.toString(),String,The non-null string representation of this address.
javax.naming.Binding.getClassName(),String,A possibly null string containing class name of object bound.
javax.naming.Binding.getObject(),Object,The object bound; null if this binding does not contain an object.
javax.naming.Binding.setObject(Object),void,
javax.naming.Binding.toString(),String,The non-null string representation of this binding.
javax.naming.CompositeName.toString(),String,A non-null string representation of this composite name.
javax.naming.CompositeName.equals(Object),boolean,"true if obj is equal to this composite name, false otherwise."
javax.naming.CompositeName.hashCode(),int,An int representing the hash code of this name.
javax.naming.CompositeName.compareTo(Object),int,"a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object."
javax.naming.CompositeName.clone(),Object,A non-null copy of this composite name.
javax.naming.CompositeName.size(),int,The nonnegative number of components in this composite name.
javax.naming.CompositeName.isEmpty(),boolean,"true if this composite name is empty, false otherwise."
javax.naming.CompositeName.getAll(),Enumeration&lt;String&gt;,A non-null enumeration of the components of this composite name. Each element of the enumeration is of class String.
javax.naming.CompositeName.get(int),String,The non-null component at index posn.
javax.naming.CompositeName.getPrefix(int),Name,"A composite name consisting of the components at indexes in the range [0,posn)."
javax.naming.CompositeName.getSuffix(int),Name,"A composite name consisting of the components at indexes in the range [posn,size()). If posn is equal to size(), an empty composite name is returned."
javax.naming.CompositeName.startsWith(Name),boolean,"true if n is a CompositeName and is a prefix of this composite name, false otherwise."
javax.naming.CompositeName.endsWith(Name),boolean,"true if n is a CompositeName and is a suffix of this composite name, false otherwise."
javax.naming.CompositeName.addAll(Name),Name,"The updated CompositeName, not a new one. Cannot be null."
"javax.naming.CompositeName.addAll(int,Name)",Name,"The updated CompositeName, not a new one. Cannot be null."
javax.naming.CompositeName.add(String),Name,"The updated CompositeName, not a new one. Cannot be null."
"javax.naming.CompositeName.add(int,String)",Name,"The updated CompositeName, not a new one. Cannot be null."
javax.naming.CompositeName.remove(int),Object,The component removed (a String).
javax.naming.CompoundName.toString(),String,A non-null string representation of this compound name.
javax.naming.CompoundName.equals(Object),boolean,"true if obj is equal to this compound name, false otherwise."
javax.naming.CompoundName.hashCode(),int,An int representing the hash code of this name.
javax.naming.CompoundName.clone(),Object,A non-null copy of this compound name.
javax.naming.CompoundName.compareTo(Object),int,"a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object."
javax.naming.CompoundName.size(),int,The nonnegative number of components in this compound name.
javax.naming.CompoundName.isEmpty(),boolean,"true if this compound name is empty, false otherwise."
javax.naming.CompoundName.getAll(),Enumeration&lt;String&gt;,A non-null enumeration of the components of this compound name. Each element of the enumeration is of class String.
javax.naming.CompoundName.get(int),String,The component at index posn.
javax.naming.CompoundName.getPrefix(int),Name,"A compound name consisting of the components at indexes in the range [0,posn)."
javax.naming.CompoundName.getSuffix(int),Name,"A compound name consisting of the components at indexes in the range [posn,size()). If posn is equal to size(), an empty compound name is returned."
javax.naming.CompoundName.startsWith(Name),boolean,"true if n is a CompoundName and is a prefix of this compound name, false otherwise."
javax.naming.CompoundName.endsWith(Name),boolean,"true if n is a CompoundName and is a suffix of this compound name, false otherwise."
javax.naming.CompoundName.addAll(Name),Name,"The updated CompoundName, not a new one. Cannot be null."
"javax.naming.CompoundName.addAll(int,Name)",Name,"The updated CompoundName, not a new one. Cannot be null."
javax.naming.CompoundName.add(String),Name,"The updated CompoundName, not a new one. Cannot be null."
"javax.naming.CompoundName.add(int,String)",Name,"The updated CompoundName, not a new one. Cannot be null."
javax.naming.CompoundName.remove(int),Object,The component removed (a String).
"javax.naming.InitialContext.init(Hashtable&lt;?,?&gt;)",void,
javax.naming.InitialContext.doLookup(Name),&lt;T&gt;T,the object bound to name
javax.naming.InitialContext.doLookup(String),&lt;T&gt;T,the object bound to name
javax.naming.InitialContext.getDefaultInitCtx(),Context,The non-null cached initial context.
javax.naming.InitialContext.getURLOrDefaultInitCtx(String),Context,A URL context for name or the cached initial context. The result cannot be null.
javax.naming.InitialContext.getURLOrDefaultInitCtx(Name),Context,A URL context for name or the cached initial context. The result cannot be null.
javax.naming.InitialContext.lookup(String),Object,the object bound to name
javax.naming.InitialContext.lookup(Name),Object,the object bound to name
"javax.naming.InitialContext.bind(String,Object)",void,
"javax.naming.InitialContext.bind(Name,Object)",void,
"javax.naming.InitialContext.rebind(String,Object)",void,
"javax.naming.InitialContext.rebind(Name,Object)",void,
javax.naming.InitialContext.unbind(String),void,
javax.naming.InitialContext.unbind(Name),void,
"javax.naming.InitialContext.rename(String,String)",void,
"javax.naming.InitialContext.rename(Name,Name)",void,
javax.naming.InitialContext.list(String),NamingEnumeration&lt;NameClassPair&gt;,an enumeration of the names and class names of the bindings in this context. Each element of the enumeration is of type NameClassPair.
javax.naming.InitialContext.list(Name),NamingEnumeration&lt;NameClassPair&gt;,an enumeration of the names and class names of the bindings in this context. Each element of the enumeration is of type NameClassPair.
javax.naming.InitialContext.listBindings(String),NamingEnumeration&lt;Binding&gt;,an enumeration of the bindings in this context. Each element of the enumeration is of type Binding.
javax.naming.InitialContext.listBindings(Name),NamingEnumeration&lt;Binding&gt;,an enumeration of the bindings in this context. Each element of the enumeration is of type Binding.
javax.naming.InitialContext.destroySubcontext(String),void,
javax.naming.InitialContext.destroySubcontext(Name),void,
javax.naming.InitialContext.createSubcontext(String),Context,the newly created context
javax.naming.InitialContext.createSubcontext(Name),Context,the newly created context
javax.naming.InitialContext.lookupLink(String),Object,"the object bound to name, not following the terminal link (if any)"
javax.naming.InitialContext.lookupLink(Name),Object,"the object bound to name, not following the terminal link (if any)."
javax.naming.InitialContext.getNameParser(String),NameParser,a name parser that can parse compound names into their atomic components
javax.naming.InitialContext.getNameParser(Name),NameParser,a name parser that can parse compound names into their atomic components
"javax.naming.InitialContext.composeName(String,String)",String,the composition of prefix and name
"javax.naming.InitialContext.composeName(Name,Name)",Name,the composition of prefix and name
"javax.naming.InitialContext.addToEnvironment(String,Object)",Object,"the previous value of the property, or null if the property was not in the environment before"
javax.naming.InitialContext.removeFromEnvironment(String),Object,"the previous value of the property, or null if the property was not in the environment"
javax.naming.InitialContext.getEnvironment(),"Hashtable&lt;?,?&gt;",the environment of this context; never null
javax.naming.InitialContext.close(),void,
javax.naming.InitialContext.getNameInNamespace(),String,this context's name in its own namespace; never null
javax.naming.LinkRef.getLinkName(),String,The non-null name of this link.
javax.naming.NameClassPair.getClassName(),String,The possibly null class name of object bound. It is null if the object bound is null.
javax.naming.NameClassPair.getName(),String,The non-null name of this binding.
javax.naming.NameClassPair.setName(String),void,
javax.naming.NameClassPair.setClassName(String),void,
javax.naming.NameClassPair.isRelative(),boolean,true if the name of this binding is relative to the target context; false if the name of this binding is a URL string.
javax.naming.NameClassPair.setRelative(boolean),void,
javax.naming.NameClassPair.getNameInNamespace(),String,The full name of this binding.
javax.naming.NameClassPair.setNameInNamespace(String),void,
javax.naming.NameClassPair.toString(),String,The string representation of this name/class pair.
javax.naming.RefAddr.getType(),String,The non-null address type of this address.
javax.naming.RefAddr.getContent(),abstractObject,The possibly null address contents.
javax.naming.RefAddr.equals(Object),boolean,
javax.naming.RefAddr.hashCode(),int,The hash code of this address as an int.
javax.naming.RefAddr.toString(),String,The non-null string representation of this address.
javax.naming.Reference.getClassName(),String,"The non-null fully-qualified class name of the object. (e.g. ""java.lang.String"")"
javax.naming.Reference.getFactoryClassName(),String,"The possibly null fully-qualified class name of the factory. (e.g. ""java.lang.String"")"
javax.naming.Reference.getFactoryClassLocation(),String,The possibly null string containing the location for loading in the factory's class.
javax.naming.Reference.get(String),RefAddr,The address in this reference with address type 'addrType; null if no such address exist.
javax.naming.Reference.get(int),RefAddr,"The address at the 0-based index posn. It must be in the range [0,getAddressCount())."
javax.naming.Reference.getAll(),Enumeration&lt;RefAddr&gt;,"An non-null enumeration of the addresses (RefAddr) in this reference. If this reference has zero addresses, an enumeration with zero elements is returned."
javax.naming.Reference.size(),int,The nonnegative number of addresses in this reference.
javax.naming.Reference.add(RefAddr),void,
"javax.naming.Reference.add(int,RefAddr)",void,
javax.naming.Reference.remove(int),Object,The address removed.
javax.naming.Reference.clear(),void,
javax.naming.Reference.equals(Object),boolean,true if obj is equal to this reference; false otherwise.
javax.naming.Reference.hashCode(),int,A hash code of this reference as an int.
javax.naming.Reference.toString(),String,The non-null string representation of this reference.
javax.naming.Reference.clone(),Object,a clone of this instance.
javax.naming.StringRefAddr.getContent(),Object,The possibly null address contents.
javax.naming.directory.BasicAttribute.clone(),Object,a clone of this instance.
javax.naming.directory.BasicAttribute.equals(Object),boolean,true if obj is equal to this attribute; false otherwise.
javax.naming.directory.BasicAttribute.hashCode(),int,an int representing the hash code of this attribute.
javax.naming.directory.BasicAttribute.toString(),String,The non-null string representation of this attribute.
javax.naming.directory.BasicAttribute.getAll(),NamingEnumeration&lt;?&gt;,"A non-null enumeration of the attribute's values. Each element of the enumeration is a possibly null Object. The object's class is the class of the attribute value. The element is null if the attribute's value is null. If the attribute has zero values, an empty enumeration is returned."
javax.naming.directory.BasicAttribute.get(),Object,A possibly null object representing one of the attribute's value. It is null if the attribute's value is null.
javax.naming.directory.BasicAttribute.size(),int,The nonnegative number of values in this attribute.
javax.naming.directory.BasicAttribute.getID(),String,The id of this attribute. It cannot be null.
javax.naming.directory.BasicAttribute.contains(Object),boolean,true if attrVal is one of this attribute's values; false otherwise.
javax.naming.directory.BasicAttribute.add(Object),boolean,true if a value was added; false otherwise.
javax.naming.directory.BasicAttribute.remove(Object),boolean,true if the value was removed; false otherwise.
javax.naming.directory.BasicAttribute.clear(),void,
javax.naming.directory.BasicAttribute.isOrdered(),boolean,true if this attribute's values are ordered; false otherwise.
javax.naming.directory.BasicAttribute.get(int),Object,The possibly null attribute value at index ix; null if the attribute value is null.
javax.naming.directory.BasicAttribute.remove(int),Object,The possibly null attribute value at index ix that was removed; null if the attribute value is null.
"javax.naming.directory.BasicAttribute.add(int,Object)",void,
"javax.naming.directory.BasicAttribute.set(int,Object)",Object,The possibly null attribute value at index ix that was replaced. Null if the attribute value was null.
javax.naming.directory.BasicAttribute.getAttributeSyntaxDefinition(),DirContext,The attribute's syntax definition. Null if the implementation supports schemas but this particular attribute does not have any schema information.
javax.naming.directory.BasicAttribute.getAttributeDefinition(),DirContext,This attribute's schema definition. Null if the implementation supports schemas but this particular attribute does not have any schema information.
javax.naming.directory.BasicAttributes.clone(),Object,a clone of this instance.
javax.naming.directory.BasicAttributes.isCaseIgnored(),boolean,true if case is ignored; false otherwise.
javax.naming.directory.BasicAttributes.size(),int,The nonnegative number of attributes in this attribute set.
javax.naming.directory.BasicAttributes.get(String),Attribute,The attribute identified by attrID; null if not found.
javax.naming.directory.BasicAttributes.getAll(),NamingEnumeration&lt;Attribute&gt;,"A non-null enumeration of the attributes in this attribute set. Each element of the enumeration is of class Attribute. If attribute set has zero attributes, an empty enumeration is returned."
javax.naming.directory.BasicAttributes.getIDs(),NamingEnumeration&lt;String&gt;,"A non-null enumeration of the attributes' ids in this attribute set. Each element of the enumeration is of class String. If attribute set has zero attributes, an empty enumeration is returned."
"javax.naming.directory.BasicAttributes.put(String,Object)",Attribute,The Attribute with attrID that was previous in this attribute set; null if no such attribute existed.
javax.naming.directory.BasicAttributes.put(Attribute),Attribute,The Attribute with the same ID as attr that was previous in this attribute set; null if no such attribute existed.
javax.naming.directory.BasicAttributes.remove(String),Attribute,The Attribute with the same ID as attrID that was previous in the attribute set; null if no such attribute existed.
javax.naming.directory.BasicAttributes.toString(),String,A non-null string listing the contents of this attribute set.
javax.naming.directory.BasicAttributes.equals(Object),boolean,true If obj is equal to this BasicAttributes.
javax.naming.directory.BasicAttributes.hashCode(),int,an int representing the hash code of this BasicAttributes instance.
javax.naming.directory.InitialDirContext.getAttributes(String),Attributes,the set of attributes associated with name
"javax.naming.directory.InitialDirContext.getAttributes(String,String[])",Attributes,the requested attributes; never null
javax.naming.directory.InitialDirContext.getAttributes(Name),Attributes,the set of attributes associated with name. Returns an empty attribute set if name has no attributes; never null.
"javax.naming.directory.InitialDirContext.getAttributes(Name,String[])",Attributes,the requested attributes; never null
"javax.naming.directory.InitialDirContext.modifyAttributes(String,int,Attributes)",void,
"javax.naming.directory.InitialDirContext.modifyAttributes(Name,int,Attributes)",void,
"javax.naming.directory.InitialDirContext.modifyAttributes(String,ModificationItem[])",void,
"javax.naming.directory.InitialDirContext.modifyAttributes(Name,ModificationItem[])",void,
"javax.naming.directory.InitialDirContext.bind(String,Object,Attributes)",void,
"javax.naming.directory.InitialDirContext.bind(Name,Object,Attributes)",void,
"javax.naming.directory.InitialDirContext.rebind(String,Object,Attributes)",void,
"javax.naming.directory.InitialDirContext.rebind(Name,Object,Attributes)",void,
"javax.naming.directory.InitialDirContext.createSubcontext(String,Attributes)",DirContext,the newly created context
"javax.naming.directory.InitialDirContext.createSubcontext(Name,Attributes)",DirContext,the newly created context
javax.naming.directory.InitialDirContext.getSchema(String),DirContext,the schema associated with the context; never null
javax.naming.directory.InitialDirContext.getSchema(Name),DirContext,the schema associated with the context; never null
javax.naming.directory.InitialDirContext.getSchemaClassDefinition(String),DirContext,the DirContext containing the named object's class definitions; never null
javax.naming.directory.InitialDirContext.getSchemaClassDefinition(Name),DirContext,the DirContext containing the named object's class definitions; never null
"javax.naming.directory.InitialDirContext.search(String,Attributes)",NamingEnumeration&lt;SearchResult&gt;,an enumeration of SearchResult objects
"javax.naming.directory.InitialDirContext.search(Name,Attributes)",NamingEnumeration&lt;SearchResult&gt;,an enumeration of SearchResult objects
"javax.naming.directory.InitialDirContext.search(String,Attributes,String[])",NamingEnumeration&lt;SearchResult&gt;,a non-null enumeration of SearchResult objects
"javax.naming.directory.InitialDirContext.search(Name,Attributes,String[])",NamingEnumeration&lt;SearchResult&gt;,"a non-null enumeration of SearchResult objects. Each SearchResult contains the attributes identified by attributesToReturn and the name of the corresponding object, named relative to the context named by name."
"javax.naming.directory.InitialDirContext.search(String,String,SearchControls)",NamingEnumeration&lt;SearchResult&gt;,an enumeration of SearchResults for the objects that satisfy the filter.
"javax.naming.directory.InitialDirContext.search(Name,String,SearchControls)",NamingEnumeration&lt;SearchResult&gt;,an enumeration of SearchResults of the objects that satisfy the filter; never null
"javax.naming.directory.InitialDirContext.search(String,String,Object[],SearchControls)",NamingEnumeration&lt;SearchResult&gt;,an enumeration of SearchResults of the objects that satisfy the filter; never null
"javax.naming.directory.InitialDirContext.search(Name,String,Object[],SearchControls)",NamingEnumeration&lt;SearchResult&gt;,an enumeration of SearchResults of the objects that satisfy the filter; never null
javax.naming.directory.ModificationItem.getModificationOp(),int,The modification code. It is one of: DirContext.ADD_ATTRIBUTE DirContext.REPLACE_ATTRIBUTE DirContext.REMOVE_ATTRIBUTE
javax.naming.directory.ModificationItem.getAttribute(),Attribute,The non-null attribute to use for the modification.
javax.naming.directory.ModificationItem.toString(),String,The non-null string representation of this modification item.
javax.naming.directory.SearchControls.getSearchScope(),int,The search scope of this SearchControls.
javax.naming.directory.SearchControls.getTimeLimit(),int,The time limit of these SearchControls in milliseconds.
javax.naming.directory.SearchControls.getDerefLinkFlag(),boolean,true if links will be dereferenced; false otherwise.
javax.naming.directory.SearchControls.getReturningObjFlag(),boolean,true if objects will be returned; false otherwise.
javax.naming.directory.SearchControls.getCountLimit(),long,The maximum number of entries that will be returned.
javax.naming.directory.SearchControls.getReturningAttributes(),String[],An array of attribute ids identifying the attributes that will be returned. Can be null.
javax.naming.directory.SearchControls.setSearchScope(int),void,
javax.naming.directory.SearchControls.setTimeLimit(int),void,
javax.naming.directory.SearchControls.setDerefLinkFlag(boolean),void,
javax.naming.directory.SearchControls.setReturningObjFlag(boolean),void,
javax.naming.directory.SearchControls.setCountLimit(long),void,
javax.naming.directory.SearchControls.setReturningAttributes(String[]),void,
javax.naming.directory.SearchResult.getAttributes(),Attributes,The non-null attributes in this search result. Can be empty.
javax.naming.directory.SearchResult.setAttributes(Attributes),void,
javax.naming.directory.SearchResult.toString(),String,The string representation of this SearchResult. Cannot be null.
javax.naming.event.NamingEvent.getType(),int,The type of this event.
javax.naming.event.NamingEvent.getEventContext(),EventContext,The non-null context that fired this event.
javax.naming.event.NamingEvent.getOldBinding(),Binding,The possibly null binding of the object before the change.
javax.naming.event.NamingEvent.getNewBinding(),Binding,The possibly null binding of the object after the change.
javax.naming.event.NamingEvent.getChangeInfo(),Object,The possibly null change information of this event.
javax.naming.event.NamingEvent.dispatch(NamingListener),void,
javax.naming.event.NamingExceptionEvent.getException(),NamingException,The exception that was thrown.
javax.naming.event.NamingExceptionEvent.getEventContext(),EventContext,The non-null EventContext that fired this event.
javax.naming.event.NamingExceptionEvent.dispatch(NamingListener),void,
javax.naming.ldap.BasicControl.getID(),String,The non-null object identifier string.
javax.naming.ldap.BasicControl.isCritical(),boolean,true if the control is critical; false otherwise.
javax.naming.ldap.BasicControl.getEncodedValue(),byte[],A possibly null byte array representing the control's ASN.1 BER encoded value. It is not cloned - any changes to the returned value will affect the contents of the control.
javax.naming.ldap.ControlFactory.getControlInstance(Control),abstractControl,A possibly null Control.
"javax.naming.ldap.ControlFactory.getControlInstance(Control,Context,Hashtable&lt;?,?&gt;)",Control,
javax.naming.ldap.InitialLdapContext.extendedOperation(ExtendedRequest),ExtendedResponse,The possibly null response of the operation. null means the operation did not generate any response.
javax.naming.ldap.InitialLdapContext.newInstance(Control[]),LdapContext,A non-null LdapContext instance.
javax.naming.ldap.InitialLdapContext.reconnect(Control[]),void,
javax.naming.ldap.InitialLdapContext.getConnectControls(),Control[],A possibly-null array of controls. null means no connect controls have been set for this context.
javax.naming.ldap.InitialLdapContext.setRequestControls(Control[]),void,
javax.naming.ldap.InitialLdapContext.getRequestControls(),Control[],A possibly-null array of controls. null means no request controls have been set for this context.
javax.naming.ldap.InitialLdapContext.getResponseControls(),Control[],"A possibly null array of controls. If null, the previous method invoked on this context did not produce any controls."
javax.naming.ldap.LdapName.size(),int,The non-negative number of components in this LDAP name.
javax.naming.ldap.LdapName.isEmpty(),boolean,"true if this LDAP name is empty, false otherwise."
javax.naming.ldap.LdapName.getAll(),Enumeration&lt;String&gt;,A non-null enumeration of the components of this LDAP name. Each element of the enumeration is of class String.
javax.naming.ldap.LdapName.get(int),String,The non-null component at index posn.
javax.naming.ldap.LdapName.getRdn(int),Rdn,The non-null RDN at index posn.
javax.naming.ldap.LdapName.getPrefix(int),Name,"An instance of LdapName consisting of the components at indexes in the range [0,posn). If posn is zero, an empty LDAP name is returned."
javax.naming.ldap.LdapName.getSuffix(int),Name,"An instance of LdapName consisting of the components at indexes in the range [posn,size()). If posn is equal to size(), an empty LDAP name is returned."
javax.naming.ldap.LdapName.startsWith(Name),boolean,"true if n is a prefix of this LDAP name, false otherwise."
javax.naming.ldap.LdapName.startsWith(List&lt;Rdn&gt;),boolean,"true if rdns form a prefix of this LDAP name, false otherwise."
javax.naming.ldap.LdapName.endsWith(Name),boolean,"true if n is a suffix of this name, false otherwise."
javax.naming.ldap.LdapName.endsWith(List&lt;Rdn&gt;),boolean,"true if rdns form a suffix of this LDAP name, false otherwise."
javax.naming.ldap.LdapName.addAll(Name),Name,The updated name (not a new instance).
javax.naming.ldap.LdapName.addAll(List&lt;Rdn&gt;),Name,The updated name (not a new instance).
"javax.naming.ldap.LdapName.addAll(int,Name)",Name,The updated name (not a new instance).
"javax.naming.ldap.LdapName.addAll(int,List&lt;Rdn&gt;)",Name,The updated name (not a new instance).
javax.naming.ldap.LdapName.add(String),Name,"The updated LdapName, not a new instance. Cannot be null."
javax.naming.ldap.LdapName.add(Rdn),Name,"The updated LdapName, not a new instance. Cannot be null."
"javax.naming.ldap.LdapName.add(int,String)",Name,"The updated LdapName, not a new instance. Cannot be null."
"javax.naming.ldap.LdapName.add(int,Rdn)",Name,"The updated LdapName, not a new instance. Cannot be null."
javax.naming.ldap.LdapName.remove(int),Object,The component removed (a String).
javax.naming.ldap.LdapName.getRdns(),List&lt;Rdn&gt;,The name as a list of RDNs which are instances of the class Rdn.
javax.naming.ldap.LdapName.clone(),Object,A copy of the this LDAP name.
javax.naming.ldap.LdapName.toString(),String,The string representation of the LdapName.
javax.naming.ldap.LdapName.equals(Object),boolean,"true if obj is equal to this LDAP name, false otherwise."
javax.naming.ldap.LdapName.compareTo(Object),int,"A negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given obj."
javax.naming.ldap.LdapName.hashCode(),int,An int representing the hash code of this name.
javax.naming.ldap.PagedResultsResponseControl.getResultSize(),int,"The number of entries in the search result, or zero if unknown."
javax.naming.ldap.PagedResultsResponseControl.getCookie(),byte[],A possibly null server-generated cookie. It is not cloned - any changes to the cookie will update the control's state and thus are not recommended.
javax.naming.ldap.Rdn.getValue(),Object,The non-null attribute value.
javax.naming.ldap.Rdn.getType(),String,The non-null attribute type.
javax.naming.ldap.Rdn.toString(),String,The string representation of the Rdn.
javax.naming.ldap.Rdn.compareTo(Object),int,"A negative integer, zero, or a positive integer as this Rdn is less than, equal to, or greater than the given Object."
javax.naming.ldap.Rdn.equals(Object),boolean,
javax.naming.ldap.Rdn.hashCode(),int,An int representing the hash code of this Rdn.
javax.naming.ldap.Rdn.toAttributes(),Attributes,The non-null attributes containing the type/value mappings of this Rdn.
javax.naming.ldap.Rdn.size(),int,The non-negative number of type/value pairs in this Rdn.
javax.naming.ldap.Rdn.escapeValue(Object),String,Escaped string value.
javax.naming.ldap.Rdn.unescapeValue(String),Object,Unescaped value.
javax.naming.ldap.SortKey.getAttributeID(),String,The non-null Attribute ID of the sort key.
javax.naming.ldap.SortKey.isAscending(),boolean,"true if the sort order is ascending, false if descending."
javax.naming.ldap.SortKey.getMatchingRuleID(),String,The possibly null matching rule ID. If null then the ordering matching rule defined for the sort key attribute is used.
javax.naming.ldap.SortResponseControl.isSorted(),boolean,true if the search results have been sorted.
javax.naming.ldap.SortResponseControl.getResultCode(),int,The result code. A zero value indicates success.
javax.naming.ldap.SortResponseControl.getAttributeID(),String,The possibly null ID of the bad attribute.
javax.naming.ldap.SortResponseControl.getException(),NamingException,A NamingException or null if the result code indicates success.
javax.naming.ldap.StartTlsRequest.getID(),String,"The object identifier string, ""1.3.6.1.4.1.1466.20037""."
javax.naming.ldap.StartTlsRequest.getEncodedValue(),byte[],The null value.
"javax.naming.ldap.StartTlsRequest.createExtendedResponse(String,byte[],int,int)",ExtendedResponse,The StartTLS extended response object.
javax.naming.ldap.StartTlsResponse.getID(),String,"The object identifier string, ""1.3.6.1.4.1.1466.20037""."
javax.naming.ldap.StartTlsResponse.getEncodedValue(),byte[],The null value.
javax.naming.ldap.StartTlsResponse.setEnabledCipherSuites(String[]),abstractvoid,
javax.naming.ldap.StartTlsResponse.setHostnameVerifier(HostnameVerifier),abstractvoid,
javax.naming.ldap.StartTlsResponse.negotiate(),abstractSSLSession,The negotiated SSL session
javax.naming.ldap.StartTlsResponse.negotiate(SSLSocketFactory),abstractSSLSession,The negotiated SSL session
javax.naming.ldap.StartTlsResponse.close(),abstractvoid,
javax.naming.ldap.UnsolicitedNotificationEvent.getNotification(),UnsolicitedNotification,The non-null unsolicited notification that caused this event to be fired.
javax.naming.ldap.UnsolicitedNotificationEvent.dispatch(UnsolicitedNotificationListener),void,
javax.naming.spi.DirectoryManager.getContinuationDirContext(CannotProceedException),DirContext,A non-null DirContext object for continuing the operation.
"javax.naming.spi.DirectoryManager.getObjectInstance(Object,Name,Context,Hashtable&lt;?,?&gt;,Attributes)",Object,
"javax.naming.spi.DirectoryManager.getStateToBind(Object,Name,Context,Hashtable&lt;?,?&gt;,Attributes)",DirStateFactory.Result,
javax.naming.spi.DirStateFactory.Result.getObject(),Object,The possibly null object to be bound.
javax.naming.spi.DirStateFactory.Result.getAttributes(),Attributes,The possibly null attributes to be bound.
javax.naming.spi.NamingManager.setObjectFactoryBuilder(ObjectFactoryBuilder),void,
"javax.naming.spi.NamingManager.getObjectInstance(Object,Name,Context,Hashtable&lt;?,?&gt;)",Object,
"javax.naming.spi.NamingManager.getURLContext(String,Hashtable&lt;?,?&gt;)",Context,
"javax.naming.spi.NamingManager.getInitialContext(Hashtable&lt;?,?&gt;)",Context,A non-null initial context.
javax.naming.spi.NamingManager.setInitialContextFactoryBuilder(InitialContextFactoryBuilder),void,
javax.naming.spi.NamingManager.hasInitialContextFactoryBuilder(),boolean,true if an initial context factory builder has been set; false otherwise.
javax.naming.spi.NamingManager.getContinuationContext(CannotProceedException),Context,A non-null Context object for continuing the operation.
"javax.naming.spi.NamingManager.getStateToBind(Object,Name,Context,Hashtable&lt;?,?&gt;)",Object,The non-null object representing obj's state for binding. It could be the object (obj) itself.
javax.naming.spi.ResolveResult.getRemainingName(),Name,The remaining unresolved portion of the name. Cannot be null but empty OK.
javax.naming.spi.ResolveResult.getResolvedObj(),Object,The Object to which resolution was successful. Cannot be null.
javax.naming.spi.ResolveResult.setRemainingName(Name),void,
javax.naming.spi.ResolveResult.appendRemainingName(Name),void,
javax.naming.spi.ResolveResult.appendRemainingComponent(String),void,
javax.naming.spi.ResolveResult.setResolvedObj(Object),void,
javax.net.ServerSocketFactory.getDefault(),ServerSocketFactory,the ServerSocketFactory
javax.net.ServerSocketFactory.createServerSocket(),ServerSocket,the unbound socket
javax.net.ServerSocketFactory.createServerSocket(int),abstractServerSocket,the ServerSocket
"javax.net.ServerSocketFactory.createServerSocket(int,int)",abstractServerSocket,the ServerSocket
"javax.net.ServerSocketFactory.createServerSocket(int,int,InetAddress)",abstractServerSocket,the ServerSocket
javax.net.SocketFactory.getDefault(),SocketFactory,the default SocketFactory
javax.net.SocketFactory.createSocket(),Socket,the unconnected socket
"javax.net.SocketFactory.createSocket(String,int)",abstractSocket,the Socket
"javax.net.SocketFactory.createSocket(String,int,InetAddress,int)",abstractSocket,the Socket
"javax.net.SocketFactory.createSocket(InetAddress,int)",abstractSocket,the Socket
"javax.net.SocketFactory.createSocket(InetAddress,int,InetAddress,int)",abstractSocket,the Socket
javax.net.ssl.CertPathTrustManagerParameters.getParameters(),CertPathParameters,a clone of the CertPathParameters encapsulated by this class.
javax.net.ssl.ExtendedSSLSession.getLocalSupportedSignatureAlgorithms(),abstractString[],"An array of supported signature algorithms, in descending order of preference. The return value is an empty array if no signature algorithm is supported."
javax.net.ssl.ExtendedSSLSession.getPeerSupportedSignatureAlgorithms(),abstractString[],"An array of supported signature algorithms, in descending order of preference. The return value is an empty array if the peer has not sent the supported signature algorithms."
javax.net.ssl.ExtendedSSLSession.getRequestedServerNames(),List&lt;SNIServerName&gt;,a non-null immutable list of SNIServerNames of the requested server name indications. The returned list may be empty if no server name indications were requested.
javax.net.ssl.HandshakeCompletedEvent.getSession(),SSLSession,the SSLSession for this handshake
javax.net.ssl.HandshakeCompletedEvent.getCipherSuite(),String,the name of the cipher suite negotiated during this session.
javax.net.ssl.HandshakeCompletedEvent.getLocalCertificates(),Certificate[],"an ordered array of certificates, with the local certificate first followed by any certificate authorities. If no certificates were sent, then null is returned."
javax.net.ssl.HandshakeCompletedEvent.getPeerCertificates(),Certificate[],"an ordered array of the peer certificates, with the peer's own certificate first followed by any certificate authorities."
javax.net.ssl.HandshakeCompletedEvent.getPeerCertificateChain(),X509Certificate[],"an ordered array of peer X.509 certificates, with the peer's own certificate first followed by any certificate authorities. (The certificates are in the original JSSE X509Certificate format)."
javax.net.ssl.HandshakeCompletedEvent.getPeerPrincipal(),Principal,"the peer's principal. Returns an X500Principal of the end-entity certiticate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites."
javax.net.ssl.HandshakeCompletedEvent.getLocalPrincipal(),Principal,"the principal sent to the peer. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned."
javax.net.ssl.HandshakeCompletedEvent.getSocket(),SSLSocket,the socket on which the connection was made.
javax.net.ssl.HttpsURLConnection.getCipherSuite(),abstractString,the cipher suite
javax.net.ssl.HttpsURLConnection.getLocalCertificates(),abstractCertificate[],"an ordered array of certificates, with the client's own certificate first followed by any certificate authorities. If no certificates were sent, then null is returned."
javax.net.ssl.HttpsURLConnection.getServerCertificates(),abstractCertificate[],"an ordered array of server certificates, with the peer's own certificate first followed by any certificate authorities."
javax.net.ssl.HttpsURLConnection.getPeerPrincipal(),Principal,"the server's principal. Returns an X500Principal of the end-entity certiticate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites."
javax.net.ssl.HttpsURLConnection.getLocalPrincipal(),Principal,"the principal sent to the server. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned."
javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(HostnameVerifier),void,
javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier(),HostnameVerifier,the default host name verifier
javax.net.ssl.HttpsURLConnection.setHostnameVerifier(HostnameVerifier),void,
javax.net.ssl.HttpsURLConnection.getHostnameVerifier(),HostnameVerifier,the host name verifier
javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(SSLSocketFactory),void,
javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory(),SSLSocketFactory,the default SSLSocketFactory
javax.net.ssl.HttpsURLConnection.setSSLSocketFactory(SSLSocketFactory),void,
javax.net.ssl.HttpsURLConnection.getSSLSocketFactory(),SSLSocketFactory,the SSLSocketFactory
javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm(),String,"the default algorithm name as specified by the ssl.KeyManagerFactory.algorithm security property, or an implementation-specific default if no such property exists."
javax.net.ssl.KeyManagerFactory.getAlgorithm(),String,the algorithm name of this KeyManagerFactory object.
javax.net.ssl.KeyManagerFactory.getInstance(String),KeyManagerFactory,the new KeyManagerFactory object.
"javax.net.ssl.KeyManagerFactory.getInstance(String,String)",KeyManagerFactory,the new KeyManagerFactory object.
"javax.net.ssl.KeyManagerFactory.getInstance(String,Provider)",KeyManagerFactory,the new KeyManagerFactory object.
javax.net.ssl.KeyManagerFactory.getProvider(),Provider,the provider of this KeyManagerFactory object
"javax.net.ssl.KeyManagerFactory.init(KeyStore,char[])",void,
javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters),void,
javax.net.ssl.KeyManagerFactory.getKeyManagers(),KeyManager[],the key managers
"javax.net.ssl.KeyManagerFactorySpi.engineInit(KeyStore,char[])",abstractvoid,
javax.net.ssl.KeyManagerFactorySpi.engineInit(ManagerFactoryParameters),abstractvoid,
javax.net.ssl.KeyManagerFactorySpi.engineGetKeyManagers(),abstractKeyManager[],the key managers
javax.net.ssl.KeyStoreBuilderParameters.getParameters(),List&lt;KeyStore.Builder&gt;,the unmodifiable List of the KeyStore.Builders encapsulated by this object.
javax.net.ssl.SNIHostName.getAsciiName(),String,the StandardCharsets.US_ASCII-compliant hostname of this SNIHostName object
javax.net.ssl.SNIHostName.equals(Object),boolean,"true if, and only if, the other is considered equal to this instance"
javax.net.ssl.SNIHostName.hashCode(),int,a hash code value for this SNIHostName.
javax.net.ssl.SNIHostName.toString(),String,a string representation of the object.
javax.net.ssl.SNIHostName.createSNIMatcher(String),SNIMatcher,a SNIMatcher object for SNIHostNames
javax.net.ssl.SNIMatcher.getType(),int,the server name type of this SNIMatcher object.
javax.net.ssl.SNIMatcher.matches(SNIServerName),abstractboolean,"true if, and only if, the matcher matches the given serverName"
javax.net.ssl.SNIServerName.getType(),int,the name type of this server name
javax.net.ssl.SNIServerName.getEncoded(),byte[],a copy of the encoded server name value of this server name
javax.net.ssl.SNIServerName.equals(Object),boolean,"true if, and only if, other is of the same class of this object, and has the same name type and encoded value as this server name."
javax.net.ssl.SNIServerName.hashCode(),int,a hash code value for this server name.
javax.net.ssl.SNIServerName.toString(),String,a string representation of this server name
javax.net.ssl.SSLContext.getDefault(),SSLContext,the default SSL context
javax.net.ssl.SSLContext.setDefault(SSLContext),void,
javax.net.ssl.SSLContext.getInstance(String),SSLContext,the new SSLContext object.
"javax.net.ssl.SSLContext.getInstance(String,String)",SSLContext,the new SSLContext object.
"javax.net.ssl.SSLContext.getInstance(String,Provider)",SSLContext,the new SSLContext object.
javax.net.ssl.SSLContext.getProtocol(),String,the protocol name of this SSLContext object.
javax.net.ssl.SSLContext.getProvider(),Provider,the provider of this SSLContext object
"javax.net.ssl.SSLContext.init(KeyManager[],TrustManager[],SecureRandom)",void,
javax.net.ssl.SSLContext.getSocketFactory(),SSLSocketFactory,the SocketFactory object
javax.net.ssl.SSLContext.getServerSocketFactory(),SSLServerSocketFactory,the ServerSocketFactory object
javax.net.ssl.SSLContext.createSSLEngine(),SSLEngine,the SSLEngine object
"javax.net.ssl.SSLContext.createSSLEngine(String,int)",SSLEngine,the new SSLEngine object
javax.net.ssl.SSLContext.getServerSessionContext(),SSLSessionContext,server session context bound to this SSL context
javax.net.ssl.SSLContext.getClientSessionContext(),SSLSessionContext,client session context bound to this SSL context
javax.net.ssl.SSLContext.getDefaultSSLParameters(),SSLParameters,a copy of the SSLParameters object with the default settings
javax.net.ssl.SSLContext.getSupportedSSLParameters(),SSLParameters,a copy of the SSLParameters object with the supported settings
"javax.net.ssl.SSLContextSpi.engineInit(KeyManager[],TrustManager[],SecureRandom)",abstractvoid,
javax.net.ssl.SSLContextSpi.engineGetSocketFactory(),abstractSSLSocketFactory,the SocketFactory object
javax.net.ssl.SSLContextSpi.engineGetServerSocketFactory(),abstractSSLServerSocketFactory,the ServerSocketFactory object
javax.net.ssl.SSLContextSpi.engineCreateSSLEngine(),abstractSSLEngine,the SSLEngine Object
"javax.net.ssl.SSLContextSpi.engineCreateSSLEngine(String,int)",abstractSSLEngine,the SSLEngine Object
javax.net.ssl.SSLContextSpi.engineGetServerSessionContext(),abstractSSLSessionContext,the SSLSessionContext object
javax.net.ssl.SSLContextSpi.engineGetClientSessionContext(),abstractSSLSessionContext,the SSLSessionContext object
javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters(),SSLParameters,a copy of the SSLParameters object with the default settings
javax.net.ssl.SSLContextSpi.engineGetSupportedSSLParameters(),SSLParameters,a copy of the SSLParameters object with the maximum supported settings
javax.net.ssl.SSLEngine.getPeerHost(),String,"the host name of the peer, or null if nothing is available."
javax.net.ssl.SSLEngine.getPeerPort(),int,"the port number of the peer, or -1 if nothing is available."
"javax.net.ssl.SSLEngine.wrap(ByteBuffer,ByteBuffer)",SSLEngineResult,an SSLEngineResult describing the result of this operation.
"javax.net.ssl.SSLEngine.wrap(ByteBuffer[],ByteBuffer)",SSLEngineResult,an SSLEngineResult describing the result of this operation.
"javax.net.ssl.SSLEngine.wrap(ByteBuffer[],int,int,ByteBuffer)",abstractSSLEngineResult,an SSLEngineResult describing the result of this operation.
"javax.net.ssl.SSLEngine.unwrap(ByteBuffer,ByteBuffer)",SSLEngineResult,an SSLEngineResult describing the result of this operation.
"javax.net.ssl.SSLEngine.unwrap(ByteBuffer,ByteBuffer[])",SSLEngineResult,an SSLEngineResult describing the result of this operation.
"javax.net.ssl.SSLEngine.unwrap(ByteBuffer,ByteBuffer[],int,int)",abstractSSLEngineResult,an SSLEngineResult describing the result of this operation.
javax.net.ssl.SSLEngine.getDelegatedTask(),abstractRunnable,"a delegated Runnable task, or null if none are available."
javax.net.ssl.SSLEngine.closeInbound(),abstractvoid,
javax.net.ssl.SSLEngine.isInboundDone(),abstractboolean,"true if the SSLEngine will not consume anymore network data (and by implication, will not produce any more application data.)"
javax.net.ssl.SSLEngine.closeOutbound(),abstractvoid,
javax.net.ssl.SSLEngine.isOutboundDone(),abstractboolean,true if the SSLEngine will not produce any more network data
javax.net.ssl.SSLEngine.getSupportedCipherSuites(),abstractString[],an array of cipher suite names
javax.net.ssl.SSLEngine.getEnabledCipherSuites(),abstractString[],an array of cipher suite names
javax.net.ssl.SSLEngine.setEnabledCipherSuites(String[]),abstractvoid,
javax.net.ssl.SSLEngine.getSupportedProtocols(),abstractString[],an array of protocols supported
javax.net.ssl.SSLEngine.getEnabledProtocols(),abstractString[],an array of protocols
javax.net.ssl.SSLEngine.setEnabledProtocols(String[]),abstractvoid,
javax.net.ssl.SSLEngine.getSession(),abstractSSLSession,the SSLSession for this SSLEngine
javax.net.ssl.SSLEngine.getHandshakeSession(),SSLSession,"null if this instance is not currently handshaking, or if the current handshake has not progressed far enough to create a basic SSLSession. Otherwise, this method returns the SSLSession currently being negotiated."
javax.net.ssl.SSLEngine.beginHandshake(),abstractvoid,
javax.net.ssl.SSLEngine.getHandshakeStatus(),abstractSSLEngineResult.HandshakeStatus,the current SSLEngineResult.HandshakeStatus.
javax.net.ssl.SSLEngine.setUseClientMode(boolean),abstractvoid,
javax.net.ssl.SSLEngine.getUseClientMode(),abstractboolean,"true if the engine should do handshaking in ""client"" mode"
javax.net.ssl.SSLEngine.setNeedClientAuth(boolean),abstractvoid,
javax.net.ssl.SSLEngine.getNeedClientAuth(),abstractboolean,"true if client authentication is required, or false if no client authentication is desired."
javax.net.ssl.SSLEngine.setWantClientAuth(boolean),abstractvoid,
javax.net.ssl.SSLEngine.getWantClientAuth(),abstractboolean,"true if client authentication is requested, or false if no client authentication is desired."
javax.net.ssl.SSLEngine.setEnableSessionCreation(boolean),abstractvoid,
javax.net.ssl.SSLEngine.getEnableSessionCreation(),abstractboolean,true indicates that sessions may be created; this is the default. false indicates that an existing session must be resumed
javax.net.ssl.SSLEngine.getSSLParameters(),SSLParameters,the SSLParameters in effect for this SSLEngine.
javax.net.ssl.SSLEngine.setSSLParameters(SSLParameters),void,
javax.net.ssl.SSLEngine.getApplicationProtocol(),String,"null if it has not yet been determined if application protocols might be used for this connection, an empty String if application protocols values will not be used, or a non-empty application protocol String if a value was successfully negotiated."
javax.net.ssl.SSLEngine.getHandshakeApplicationProtocol(),String,"null if it has not yet been determined if application protocols might be used for this handshake, an empty String if application protocols values will not be used, or a non-empty application protocol String if a value was successfully negotiated."
"javax.net.ssl.SSLEngine.setHandshakeApplicationProtocolSelector(BiFunction&lt;SSLEngine,List&lt;String&gt;,String&gt;)",void,
javax.net.ssl.SSLEngine.getHandshakeApplicationProtocolSelector(),"BiFunction&lt;SSLEngine,List&lt;String&gt;,String&gt;","the callback function, or null if none has been set."
javax.net.ssl.SSLEngineResult.getStatus(),SSLEngineResult.Status,the return value
javax.net.ssl.SSLEngineResult.getHandshakeStatus(),SSLEngineResult.HandshakeStatus,the handshake status
javax.net.ssl.SSLEngineResult.bytesConsumed(),int,the number of bytes consumed.
javax.net.ssl.SSLEngineResult.bytesProduced(),int,the number of bytes produced
javax.net.ssl.SSLEngineResult.toString(),String,a string representation of the object.
javax.net.ssl.SSLParameters.getCipherSuites(),String[],a copy of the array of ciphersuites or null if none have been set.
javax.net.ssl.SSLParameters.setCipherSuites(String[]),void,
javax.net.ssl.SSLParameters.getProtocols(),String[],a copy of the array of protocols or null if none have been set.
javax.net.ssl.SSLParameters.setProtocols(String[]),void,
javax.net.ssl.SSLParameters.getWantClientAuth(),boolean,whether client authentication should be requested.
javax.net.ssl.SSLParameters.setWantClientAuth(boolean),void,
javax.net.ssl.SSLParameters.getNeedClientAuth(),boolean,whether client authentication should be required.
javax.net.ssl.SSLParameters.setNeedClientAuth(boolean),void,
javax.net.ssl.SSLParameters.getAlgorithmConstraints(),AlgorithmConstraints,"the cryptographic algorithm constraints, or null if the constraints have not been set"
javax.net.ssl.SSLParameters.setAlgorithmConstraints(AlgorithmConstraints),void,
javax.net.ssl.SSLParameters.getEndpointIdentificationAlgorithm(),String,"the endpoint identification algorithm, or null if none has been set."
javax.net.ssl.SSLParameters.setEndpointIdentificationAlgorithm(String),void,
javax.net.ssl.SSLParameters.setServerNames(List&lt;SNIServerName&gt;),void,
javax.net.ssl.SSLParameters.getServerNames(),List&lt;SNIServerName&gt;,null or an immutable list of non-null SNIServerNames
javax.net.ssl.SSLParameters.setSNIMatchers(Collection&lt;SNIMatcher&gt;),void,
javax.net.ssl.SSLParameters.getSNIMatchers(),Collection&lt;SNIMatcher&gt;,null or an immutable collection of non-null SNIMatchers
javax.net.ssl.SSLParameters.setUseCipherSuitesOrder(boolean),void,
javax.net.ssl.SSLParameters.getUseCipherSuitesOrder(),boolean,whether local cipher suites order in #getCipherSuites should be honored during SSL/TLS handshaking.
javax.net.ssl.SSLParameters.getApplicationProtocols(),String[],"a non-null, possibly zero-length array of application protocol Strings. The array is ordered based on protocol preference, with protocols[0] being the most preferred."
javax.net.ssl.SSLParameters.setApplicationProtocols(String[]),void,
javax.net.ssl.SSLServerSocket.getEnabledCipherSuites(),abstractString[],an array of cipher suites enabled
javax.net.ssl.SSLServerSocket.setEnabledCipherSuites(String[]),abstractvoid,
javax.net.ssl.SSLServerSocket.getSupportedCipherSuites(),abstractString[],an array of cipher suite names
javax.net.ssl.SSLServerSocket.getSupportedProtocols(),abstractString[],an array of protocol names supported
javax.net.ssl.SSLServerSocket.getEnabledProtocols(),abstractString[],an array of protocol names
javax.net.ssl.SSLServerSocket.setEnabledProtocols(String[]),abstractvoid,
javax.net.ssl.SSLServerSocket.setNeedClientAuth(boolean),abstractvoid,
javax.net.ssl.SSLServerSocket.getNeedClientAuth(),abstractboolean,"true if client authentication is required, or false if no client authentication is desired."
javax.net.ssl.SSLServerSocket.setWantClientAuth(boolean),abstractvoid,
javax.net.ssl.SSLServerSocket.getWantClientAuth(),abstractboolean,"true if client authentication is requested, or false if no client authentication is desired."
javax.net.ssl.SSLServerSocket.setUseClientMode(boolean),abstractvoid,
javax.net.ssl.SSLServerSocket.getUseClientMode(),abstractboolean,true if the connection should use SSL client mode.
javax.net.ssl.SSLServerSocket.setEnableSessionCreation(boolean),abstractvoid,
javax.net.ssl.SSLServerSocket.getEnableSessionCreation(),abstractboolean,true indicates that sessions may be created; this is the default. false indicates that an existing session must be resumed
javax.net.ssl.SSLServerSocket.getSSLParameters(),SSLParameters,the SSLParameters in effect for newly accepted connections
javax.net.ssl.SSLServerSocket.setSSLParameters(SSLParameters),void,
javax.net.ssl.SSLServerSocketFactory.getDefault(),ServerSocketFactory,the default ServerSocketFactory
javax.net.ssl.SSLServerSocketFactory.getDefaultCipherSuites(),abstractString[],array of the cipher suites enabled by default
javax.net.ssl.SSLServerSocketFactory.getSupportedCipherSuites(),abstractString[],an array of cipher suite names
javax.net.ssl.SSLSessionBindingEvent.getName(),String,the name to which the object is being bound or unbound
javax.net.ssl.SSLSessionBindingEvent.getSession(),SSLSession,the SSLSession
javax.net.ssl.SSLSocket.getSupportedCipherSuites(),abstractString[],an array of cipher suite names
javax.net.ssl.SSLSocket.getEnabledCipherSuites(),abstractString[],an array of cipher suite names
javax.net.ssl.SSLSocket.setEnabledCipherSuites(String[]),abstractvoid,
javax.net.ssl.SSLSocket.getSupportedProtocols(),abstractString[],an array of protocols supported
javax.net.ssl.SSLSocket.getEnabledProtocols(),abstractString[],an array of protocols
javax.net.ssl.SSLSocket.setEnabledProtocols(String[]),abstractvoid,
javax.net.ssl.SSLSocket.getSession(),abstractSSLSession,the SSLSession
javax.net.ssl.SSLSocket.getHandshakeSession(),SSLSession,"null if this instance is not currently handshaking, or if the current handshake has not progressed far enough to create a basic SSLSession. Otherwise, this method returns the SSLSession currently being negotiated."
javax.net.ssl.SSLSocket.addHandshakeCompletedListener(HandshakeCompletedListener),abstractvoid,
javax.net.ssl.SSLSocket.removeHandshakeCompletedListener(HandshakeCompletedListener),abstractvoid,
javax.net.ssl.SSLSocket.startHandshake(),abstractvoid,
javax.net.ssl.SSLSocket.setUseClientMode(boolean),abstractvoid,
javax.net.ssl.SSLSocket.getUseClientMode(),abstractboolean,"true if the socket should do handshaking in ""client"" mode"
javax.net.ssl.SSLSocket.setNeedClientAuth(boolean),abstractvoid,
javax.net.ssl.SSLSocket.getNeedClientAuth(),abstractboolean,"true if client authentication is required, or false if no client authentication is desired."
javax.net.ssl.SSLSocket.setWantClientAuth(boolean),abstractvoid,
javax.net.ssl.SSLSocket.getWantClientAuth(),abstractboolean,"true if client authentication is requested, or false if no client authentication is desired."
javax.net.ssl.SSLSocket.setEnableSessionCreation(boolean),abstractvoid,
javax.net.ssl.SSLSocket.getEnableSessionCreation(),abstractboolean,true indicates that sessions may be created; this is the default. false indicates that an existing session must be resumed
javax.net.ssl.SSLSocket.getSSLParameters(),SSLParameters,the SSLParameters in effect for this SSLSocket.
javax.net.ssl.SSLSocket.setSSLParameters(SSLParameters),void,
javax.net.ssl.SSLSocket.getApplicationProtocol(),String,"null if it has not yet been determined if application protocols might be used for this connection, an empty String if application protocols values will not be used, or a non-empty application protocol String if a value was successfully negotiated."
javax.net.ssl.SSLSocket.getHandshakeApplicationProtocol(),String,"null if it has not yet been determined if application protocols might be used for this handshake, an empty String if application protocols values will not be used, or a non-empty application protocol String if a value was successfully negotiated."
"javax.net.ssl.SSLSocket.setHandshakeApplicationProtocolSelector(BiFunction&lt;SSLSocket,List&lt;String&gt;,String&gt;)",void,
javax.net.ssl.SSLSocket.getHandshakeApplicationProtocolSelector(),"BiFunction&lt;SSLSocket,List&lt;String&gt;,String&gt;","the callback function, or null if none has been set."
javax.net.ssl.SSLSocketFactory.getDefault(),SocketFactory,the default SocketFactory
javax.net.ssl.SSLSocketFactory.getDefaultCipherSuites(),abstractString[],array of the cipher suites enabled by default
javax.net.ssl.SSLSocketFactory.getSupportedCipherSuites(),abstractString[],an array of cipher suite names
"javax.net.ssl.SSLSocketFactory.createSocket(Socket,String,int,boolean)",abstractSocket,a socket connected to the specified host and port
"javax.net.ssl.SSLSocketFactory.createSocket(Socket,InputStream,boolean)",Socket,the Socket compliant with the socket options established for this factory
javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm(),String,"the default algorithm name as specified by the ssl.TrustManagerFactory.algorithm security property, or an implementation-specific default if no such property exists."
javax.net.ssl.TrustManagerFactory.getAlgorithm(),String,the algorithm name of this TrustManagerFactory object
javax.net.ssl.TrustManagerFactory.getInstance(String),TrustManagerFactory,the new TrustManagerFactory object.
"javax.net.ssl.TrustManagerFactory.getInstance(String,String)",TrustManagerFactory,the new TrustManagerFactory object
"javax.net.ssl.TrustManagerFactory.getInstance(String,Provider)",TrustManagerFactory,the new TrustManagerFactory object.
javax.net.ssl.TrustManagerFactory.getProvider(),Provider,the provider of this TrustManagerFactory object
javax.net.ssl.TrustManagerFactory.init(KeyStore),void,
javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters),void,
javax.net.ssl.TrustManagerFactory.getTrustManagers(),TrustManager[],the trust managers
javax.net.ssl.TrustManagerFactorySpi.engineInit(KeyStore),abstractvoid,
javax.net.ssl.TrustManagerFactorySpi.engineInit(ManagerFactoryParameters),abstractvoid,
javax.net.ssl.TrustManagerFactorySpi.engineGetTrustManagers(),abstractTrustManager[],the trust managers
"javax.net.ssl.X509ExtendedKeyManager.chooseEngineClientAlias(String[],Principal[],SSLEngine)",String,"the alias name for the desired key, or null if there are no matches."
"javax.net.ssl.X509ExtendedKeyManager.chooseEngineServerAlias(String,Principal[],SSLEngine)",String,"the alias name for the desired key, or null if there are no matches."
"javax.net.ssl.X509ExtendedTrustManager.checkClientTrusted(X509Certificate[],String,Socket)",abstractvoid,
"javax.net.ssl.X509ExtendedTrustManager.checkServerTrusted(X509Certificate[],String,Socket)",abstractvoid,
"javax.net.ssl.X509ExtendedTrustManager.checkClientTrusted(X509Certificate[],String,SSLEngine)",abstractvoid,
"javax.net.ssl.X509ExtendedTrustManager.checkServerTrusted(X509Certificate[],String,SSLEngine)",abstractvoid,
javax.print.DocFlavor.getMimeType(),String,the mime type
javax.print.DocFlavor.getMediaType(),String,the media type
javax.print.DocFlavor.getMediaSubtype(),String,the media sub-type
javax.print.DocFlavor.getParameter(String),String,"String representing a mime parameter, or null if that parameter is not in the mime type string."
javax.print.DocFlavor.getRepresentationClassName(),String,the name of the representation class.
javax.print.DocFlavor.toString(),String,"MIME type string based on the canonical form. Each parameter value is enclosed in quotes. A ""class="" parameter is appended to the MIME type string to indicate the representation class name."
javax.print.DocFlavor.hashCode(),int,a hash code value for this object.
javax.print.DocFlavor.equals(Object),boolean,"True if this doc flavor object equals obj, false otherwise."
"javax.print.PrintServiceLookup.lookupPrintServices(DocFlavor,AttributeSet)",PrintService[],"array of matching PrintService objects representing print services that support the specified flavor attributes. If no services match, the array is zero-length."
"javax.print.PrintServiceLookup.lookupMultiDocPrintServices(DocFlavor[],AttributeSet)",MultiDocPrintService[],"array of matching MultiDocPrintService objects. If no services match, the array is zero-length."
javax.print.PrintServiceLookup.lookupDefaultPrintService(),PrintService,the default PrintService.
javax.print.PrintServiceLookup.registerServiceProvider(PrintServiceLookup),boolean,true if the new lookup service is newly registered; false otherwise.
javax.print.PrintServiceLookup.registerService(PrintService),boolean,true if the service is newly registered; false otherwise.
"javax.print.PrintServiceLookup.getPrintServices(DocFlavor,AttributeSet)",abstractPrintService[],"array of matching PrintServices. If no services match, the array is zero-length."
javax.print.PrintServiceLookup.getPrintServices(),abstractPrintService[],"array of all PrintServices known to this lookup service class. If none are found, the array is zero-length."
"javax.print.PrintServiceLookup.getMultiDocPrintServices(DocFlavor[],AttributeSet)",abstractMultiDocPrintService[],"array of matching PrintServices. If no services match, the array is zero-length."
javax.print.PrintServiceLookup.getDefaultPrintService(),abstractPrintService,"the default PrintService for this lookup service. If there is no default, returns null."
"javax.print.ServiceUI.printDialog(GraphicsConfiguration,int,int,PrintService[],PrintService,DocFlavor,PrintRequestAttributeSet)",PrintService,"print service selected by the user, or null if the user cancelled the dialog."
"javax.print.ServiceUIFactory.getUI(int,String)",abstractObject,the UI role or null if the requested UI role is not available from this factory
javax.print.ServiceUIFactory.getUIClassNamesForRole(int),abstractString[],"the UI types supported by this class for the specified role, null if no UIs are available for the role."
javax.print.SimpleDoc.getDocFlavor(),DocFlavor,Doc flavor.
javax.print.SimpleDoc.getAttributes(),DocAttributeSet,"Unmodifiable set of printing attributes for this doc, or null to obtain all attribute values from the job's attribute set."
javax.print.SimpleDoc.getPrintData(),Object,Print data representation object.
javax.print.SimpleDoc.getReaderForText(),Reader,
javax.print.SimpleDoc.getStreamForBytes(),InputStream,
javax.print.StreamPrintService.getOutputStream(),OutputStream,the stream to which this service will send formatted print data.
javax.print.StreamPrintService.getOutputFormat(),abstractString,mime type identifying the output format.
javax.print.StreamPrintService.dispose(),void,
javax.print.StreamPrintService.isDisposed(),boolean,if this StreamPrintService has been disposed
"javax.print.StreamPrintServiceFactory.lookupStreamPrintServiceFactories(DocFlavor,String)",StreamPrintServiceFactory[],"- matching factories for stream print service instance, empty if no suitable factories could be located."
javax.print.StreamPrintServiceFactory.getOutputFormat(),abstractString,the output format described as a mime type.
javax.print.StreamPrintServiceFactory.getSupportedDocFlavors(),abstractDocFlavor[],array of supported doc flavors.
javax.print.StreamPrintServiceFactory.getPrintService(OutputStream),abstractStreamPrintService,a PrintService which will generate the format specified by the DocFlavor supported by this Factory.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(AttributeSet),AttributeSet,Unmodifiable view of attributeSet.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(DocAttributeSet),DocAttributeSet,Unmodifiable view of attributeSet.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(PrintRequestAttributeSet),PrintRequestAttributeSet,Unmodifiable view of attributeSet.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(PrintJobAttributeSet),PrintJobAttributeSet,Unmodifiable view of attributeSet.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(PrintServiceAttributeSet),PrintServiceAttributeSet,Unmodifiable view of attributeSet.
javax.print.attribute.AttributeSetUtilities.synchronizedView(AttributeSet),AttributeSet,Synchronized view of attributeSet.
javax.print.attribute.AttributeSetUtilities.synchronizedView(DocAttributeSet),DocAttributeSet,Synchronized view of attributeSet.
javax.print.attribute.AttributeSetUtilities.synchronizedView(PrintRequestAttributeSet),PrintRequestAttributeSet,Synchronized view of attributeSet.
javax.print.attribute.AttributeSetUtilities.synchronizedView(PrintJobAttributeSet),PrintJobAttributeSet,Synchronized view of attributeSet.
javax.print.attribute.AttributeSetUtilities.synchronizedView(PrintServiceAttributeSet),PrintServiceAttributeSet,Synchronized view of attributeSet.
"javax.print.attribute.AttributeSetUtilities.verifyAttributeCategory(Object,Class&lt;?&gt;)",Class&lt;?&gt;,"If object is a Class that implements interfaceName, object is returned downcast to type Class; otherwise an exception is thrown."
"javax.print.attribute.AttributeSetUtilities.verifyAttributeValue(Object,Class&lt;?&gt;)",Attribute,"If object is an instance of interfaceName, object is returned downcast to type Attribute; otherwise an exception is thrown."
"javax.print.attribute.AttributeSetUtilities.verifyCategoryForValue(Class&lt;?&gt;,Attribute)",void,
javax.print.attribute.DateTimeSyntax.getValue(),Date,the Date.
javax.print.attribute.DateTimeSyntax.equals(Object),boolean,
javax.print.attribute.DateTimeSyntax.hashCode(),int,a hash code value for this object.
javax.print.attribute.DateTimeSyntax.toString(),String,a string representation of the object.
javax.print.attribute.EnumSyntax.getValue(),int,the value
javax.print.attribute.EnumSyntax.clone(),Object,a clone of this instance.
javax.print.attribute.EnumSyntax.hashCode(),int,a hash code value for this object.
javax.print.attribute.EnumSyntax.toString(),String,a string representation of the object.
javax.print.attribute.EnumSyntax.readResolve(),Object,"The enumeration singleton value stored at index i-L in the enumeration value table returned by getEnumValueTable(), where i is this enumeration value's integer value and L is the value returned by getOffset()."
javax.print.attribute.EnumSyntax.getStringTable(),String[],the string table
javax.print.attribute.EnumSyntax.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.EnumSyntax.getOffset(),int,the offset of the lowest enumeration value.
javax.print.attribute.HashAttributeSet.get(Class&lt;?&gt;),Attribute,"The attribute value in the given attribute category contained in this attribute set, or null if this attribute set does not contain any attribute value in the given attribute category."
javax.print.attribute.HashAttributeSet.add(Attribute),boolean,"true if this attribute set changed as a result of the call, i.e., the given attribute value was not already a member of this attribute set."
javax.print.attribute.HashAttributeSet.remove(Class&lt;?&gt;),boolean,"true if this attribute set changed as a result of the call, i.e., the given attribute category had been a member of this attribute set."
javax.print.attribute.HashAttributeSet.remove(Attribute),boolean,"true if this attribute set changed as a result of the call, i.e., the given attribute value had been a member of this attribute set."
javax.print.attribute.HashAttributeSet.containsKey(Class&lt;?&gt;),boolean,true if this attribute set contains an attribute value for the specified category.
javax.print.attribute.HashAttributeSet.containsValue(Attribute),boolean,true if this attribute set contains the given attribute value.
javax.print.attribute.HashAttributeSet.addAll(AttributeSet),boolean,true if this attribute set changed as a result of the call.
javax.print.attribute.HashAttributeSet.size(),int,The number of attributes in this attribute set.
javax.print.attribute.HashAttributeSet.toArray(),Attribute[],"the Attributes contained in this set as an array, zero length if the AttributeSet is empty."
javax.print.attribute.HashAttributeSet.clear(),void,
javax.print.attribute.HashAttributeSet.isEmpty(),boolean,true if this attribute set contains no attributes.
javax.print.attribute.HashAttributeSet.equals(Object),boolean,true if the specified object is equal to this attribute set.
javax.print.attribute.HashAttributeSet.hashCode(),int,The hash code value for this attribute set.
javax.print.attribute.IntegerSyntax.getValue(),int,the integer value
javax.print.attribute.IntegerSyntax.equals(Object),boolean,
javax.print.attribute.IntegerSyntax.hashCode(),int,a hash code value for this object.
javax.print.attribute.IntegerSyntax.toString(),String,a string representation of the object.
javax.print.attribute.ResolutionSyntax.getResolution(int),int[],A two-element array with the cross feed direction resolution at index 0 and the feed direction resolution at index 1.
javax.print.attribute.ResolutionSyntax.getCrossFeedResolution(int),int,Cross feed direction resolution.
javax.print.attribute.ResolutionSyntax.getFeedResolution(int),int,Feed direction resolution.
"javax.print.attribute.ResolutionSyntax.toString(int,String)",String,String version of this resolution attribute.
javax.print.attribute.ResolutionSyntax.lessThanOrEquals(ResolutionSyntax),boolean,
javax.print.attribute.ResolutionSyntax.equals(Object),boolean,
javax.print.attribute.ResolutionSyntax.hashCode(),int,a hash code value for this object.
javax.print.attribute.ResolutionSyntax.toString(),String,a string representation of the object.
javax.print.attribute.ResolutionSyntax.getCrossFeedResolutionDphi(),int,Cross feed direction resolution.
javax.print.attribute.ResolutionSyntax.getFeedResolutionDphi(),int,Feed direction resolution.
javax.print.attribute.SetOfIntegerSyntax.getMembers(),int[][],This set-of-integer attribute's members in canonical array form.
javax.print.attribute.SetOfIntegerSyntax.contains(int),boolean,"True if this set-of-integer attribute contains the value x, false otherwise."
javax.print.attribute.SetOfIntegerSyntax.contains(IntegerSyntax),boolean,"True if this set-of-integer attribute contains theAttribute's value, false otherwise."
javax.print.attribute.SetOfIntegerSyntax.next(int),int,"The smallest integer in this set-of-integer attribute that is greater than x, or -1 if no integer in this set-of-integer attribute is greater than x."
javax.print.attribute.SetOfIntegerSyntax.equals(Object),boolean,
javax.print.attribute.SetOfIntegerSyntax.hashCode(),int,a hash code value for this object.
javax.print.attribute.SetOfIntegerSyntax.toString(),String,a string representation of the object.
javax.print.attribute.Size2DSyntax.getSize(int),float[],A two-element array with the X dimension at index 0 and the Y dimension at index 1.
javax.print.attribute.Size2DSyntax.getX(int),float,X dimension.
javax.print.attribute.Size2DSyntax.getY(int),float,Y dimension.
"javax.print.attribute.Size2DSyntax.toString(int,String)",String,String version of this two-dimensional size attribute.
javax.print.attribute.Size2DSyntax.equals(Object),boolean,
javax.print.attribute.Size2DSyntax.hashCode(),int,a hash code value for this object.
javax.print.attribute.Size2DSyntax.toString(),String,a string representation of the object.
javax.print.attribute.Size2DSyntax.getXMicrometers(),int,X dimension (µm).
javax.print.attribute.Size2DSyntax.getYMicrometers(),int,Y dimension (µm).
javax.print.attribute.TextSyntax.getValue(),String,the text string.
javax.print.attribute.TextSyntax.getLocale(),Locale,the locale
javax.print.attribute.TextSyntax.hashCode(),int,A hashcode value for this object.
javax.print.attribute.TextSyntax.equals(Object),boolean,
javax.print.attribute.TextSyntax.toString(),String,A String identifying this object.
javax.print.attribute.URISyntax.getURI(),URI,the URI.
javax.print.attribute.URISyntax.hashCode(),int,A hashcode value for this object.
javax.print.attribute.URISyntax.equals(Object),boolean,
javax.print.attribute.URISyntax.toString(),String,A String identifying this object.
javax.print.attribute.standard.Chromaticity.getStringTable(),String[],the string table
javax.print.attribute.standard.Chromaticity.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.Chromaticity.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Chromaticity.getName(),String,Attribute category name.
javax.print.attribute.standard.ColorSupported.getStringTable(),String[],the string table
javax.print.attribute.standard.ColorSupported.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.ColorSupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.ColorSupported.getName(),String,Attribute category name.
javax.print.attribute.standard.Compression.getStringTable(),String[],the string table
javax.print.attribute.standard.Compression.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.Compression.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Compression.getName(),String,Attribute category name.
javax.print.attribute.standard.Copies.equals(Object),boolean,
javax.print.attribute.standard.Copies.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Copies.getName(),String,Attribute category name.
javax.print.attribute.standard.CopiesSupported.equals(Object),boolean,
javax.print.attribute.standard.CopiesSupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.CopiesSupported.getName(),String,Attribute category name.
javax.print.attribute.standard.DateTimeAtCompleted.equals(Object),boolean,
javax.print.attribute.standard.DateTimeAtCompleted.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.DateTimeAtCompleted.getName(),String,Attribute category name.
javax.print.attribute.standard.DateTimeAtCreation.equals(Object),boolean,
javax.print.attribute.standard.DateTimeAtCreation.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.DateTimeAtCreation.getName(),String,Attribute category name.
javax.print.attribute.standard.DateTimeAtProcessing.equals(Object),boolean,
javax.print.attribute.standard.DateTimeAtProcessing.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.DateTimeAtProcessing.getName(),String,Attribute category name.
javax.print.attribute.standard.Destination.equals(Object),boolean,
javax.print.attribute.standard.Destination.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Destination.getName(),String,Attribute category name.
javax.print.attribute.standard.DialogTypeSelection.getStringTable(),String[],the string table
javax.print.attribute.standard.DialogTypeSelection.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.DialogTypeSelection.getCategory(),Class,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.DialogTypeSelection.getName(),String,Attribute category name.
javax.print.attribute.standard.DocumentName.equals(Object),boolean,
javax.print.attribute.standard.DocumentName.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.DocumentName.getName(),String,Attribute category name.
javax.print.attribute.standard.Fidelity.getStringTable(),String[],the string table
javax.print.attribute.standard.Fidelity.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.Fidelity.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Fidelity.getName(),String,Attribute category name.
javax.print.attribute.standard.Finishings.getStringTable(),String[],the string table
javax.print.attribute.standard.Finishings.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.Finishings.getOffset(),int,the offset of the lowest enumeration value.
javax.print.attribute.standard.Finishings.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Finishings.getName(),String,Attribute category name.
javax.print.attribute.standard.JobHoldUntil.equals(Object),boolean,
javax.print.attribute.standard.JobHoldUntil.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobHoldUntil.getName(),String,Attribute category name.
javax.print.attribute.standard.JobImpressions.equals(Object),boolean,
javax.print.attribute.standard.JobImpressions.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobImpressions.getName(),String,Attribute category name.
javax.print.attribute.standard.JobImpressionsCompleted.equals(Object),boolean,
javax.print.attribute.standard.JobImpressionsCompleted.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobImpressionsCompleted.getName(),String,Attribute category name.
javax.print.attribute.standard.JobImpressionsSupported.equals(Object),boolean,
javax.print.attribute.standard.JobImpressionsSupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobImpressionsSupported.getName(),String,Attribute category name.
javax.print.attribute.standard.JobKOctets.equals(Object),boolean,
javax.print.attribute.standard.JobKOctets.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobKOctets.getName(),String,Attribute category name.
javax.print.attribute.standard.JobKOctetsProcessed.equals(Object),boolean,
javax.print.attribute.standard.JobKOctetsProcessed.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobKOctetsProcessed.getName(),String,Attribute category name.
javax.print.attribute.standard.JobKOctetsSupported.equals(Object),boolean,
javax.print.attribute.standard.JobKOctetsSupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobKOctetsSupported.getName(),String,Attribute category name.
javax.print.attribute.standard.JobMediaSheets.equals(Object),boolean,
javax.print.attribute.standard.JobMediaSheets.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobMediaSheets.getName(),String,Attribute category name.
javax.print.attribute.standard.JobMediaSheetsCompleted.equals(Object),boolean,
javax.print.attribute.standard.JobMediaSheetsCompleted.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobMediaSheetsCompleted.getName(),String,Attribute category name.
javax.print.attribute.standard.JobMediaSheetsSupported.equals(Object),boolean,
javax.print.attribute.standard.JobMediaSheetsSupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobMediaSheetsSupported.getName(),String,Attribute category name.
javax.print.attribute.standard.JobMessageFromOperator.equals(Object),boolean,
javax.print.attribute.standard.JobMessageFromOperator.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobMessageFromOperator.getName(),String,Attribute category name.
javax.print.attribute.standard.JobName.equals(Object),boolean,
javax.print.attribute.standard.JobName.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobName.getName(),String,Attribute category name.
javax.print.attribute.standard.JobOriginatingUserName.equals(Object),boolean,
javax.print.attribute.standard.JobOriginatingUserName.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobOriginatingUserName.getName(),String,Attribute category name.
javax.print.attribute.standard.JobPriority.equals(Object),boolean,
javax.print.attribute.standard.JobPriority.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobPriority.getName(),String,Attribute category name.
javax.print.attribute.standard.JobPrioritySupported.equals(Object),boolean,
javax.print.attribute.standard.JobPrioritySupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobPrioritySupported.getName(),String,Attribute category name.
javax.print.attribute.standard.JobSheets.getStringTable(),String[],the string table
javax.print.attribute.standard.JobSheets.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.JobSheets.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobSheets.getName(),String,Attribute category name.
javax.print.attribute.standard.JobState.getStringTable(),String[],the string table
javax.print.attribute.standard.JobState.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.JobState.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobState.getName(),String,Attribute category name.
javax.print.attribute.standard.JobStateReason.getStringTable(),String[],the string table
javax.print.attribute.standard.JobStateReason.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.JobStateReason.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobStateReason.getName(),String,Attribute category name.
javax.print.attribute.standard.JobStateReasons.add(JobStateReason),boolean,true if this job state reasons attribute did not already contain the specified element.
javax.print.attribute.standard.JobStateReasons.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.JobStateReasons.getName(),String,Attribute category name.
javax.print.attribute.standard.Media.equals(Object),boolean,
javax.print.attribute.standard.Media.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Media.getName(),String,Attribute category name.
javax.print.attribute.standard.MediaName.getStringTable(),String[],the String table.
javax.print.attribute.standard.MediaName.getEnumValueTable(),EnumSyntax[],the enumeration value table.
javax.print.attribute.standard.MediaPrintableArea.getPrintableArea(int),float[],"printable area as array of x, y, w, h in the specified units."
javax.print.attribute.standard.MediaPrintableArea.getX(int),float,x location of the origin of the printable area in the specified units.
javax.print.attribute.standard.MediaPrintableArea.getY(int),float,y location of the origin of the printable area in the specified units.
javax.print.attribute.standard.MediaPrintableArea.getWidth(int),float,width of the printable area in the specified units.
javax.print.attribute.standard.MediaPrintableArea.getHeight(int),float,height of the printable area in the specified units.
javax.print.attribute.standard.MediaPrintableArea.equals(Object),boolean,
javax.print.attribute.standard.MediaPrintableArea.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.MediaPrintableArea.getName(),String,Attribute category name.
"javax.print.attribute.standard.MediaPrintableArea.toString(int,String)",String,String version of this two-dimensional size attribute.
javax.print.attribute.standard.MediaPrintableArea.toString(),String,a string representation of the object.
javax.print.attribute.standard.MediaPrintableArea.hashCode(),int,a hash code value for this object.
javax.print.attribute.standard.MediaSize.getMediaSizeName(),MediaSizeName,"the name for this media size, or null if no name was associated with this size (an anonymous size)."
javax.print.attribute.standard.MediaSize.getMediaSizeForName(MediaSizeName),MediaSize,"size of the media, or null if this media is not associated with any size."
"javax.print.attribute.standard.MediaSize.findMedia(float,float,int)",MediaSizeName,"MediaSizeName matching these dimensions, or null."
javax.print.attribute.standard.MediaSize.equals(Object),boolean,
javax.print.attribute.standard.MediaSize.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.MediaSize.getName(),String,Attribute category name.
javax.print.attribute.standard.MediaSizeName.getStringTable(),String[],the string table
javax.print.attribute.standard.MediaSizeName.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.MediaTray.getStringTable(),String[],the string table
javax.print.attribute.standard.MediaTray.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.MultipleDocumentHandling.getStringTable(),String[],the string table
javax.print.attribute.standard.MultipleDocumentHandling.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.MultipleDocumentHandling.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.MultipleDocumentHandling.getName(),String,Attribute category name.
javax.print.attribute.standard.NumberOfDocuments.equals(Object),boolean,
javax.print.attribute.standard.NumberOfDocuments.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.NumberOfDocuments.getName(),String,Attribute category name.
javax.print.attribute.standard.NumberOfInterveningJobs.equals(Object),boolean,
javax.print.attribute.standard.NumberOfInterveningJobs.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.NumberOfInterveningJobs.getName(),String,Attribute category name.
javax.print.attribute.standard.NumberUp.equals(Object),boolean,
javax.print.attribute.standard.NumberUp.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.NumberUp.getName(),String,Attribute category name.
javax.print.attribute.standard.NumberUpSupported.equals(Object),boolean,
javax.print.attribute.standard.NumberUpSupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.NumberUpSupported.getName(),String,Attribute category name.
javax.print.attribute.standard.OrientationRequested.getStringTable(),String[],the string table
javax.print.attribute.standard.OrientationRequested.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.OrientationRequested.getOffset(),int,the offset of the lowest enumeration value.
javax.print.attribute.standard.OrientationRequested.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.OrientationRequested.getName(),String,Attribute category name.
javax.print.attribute.standard.OutputDeviceAssigned.equals(Object),boolean,
javax.print.attribute.standard.OutputDeviceAssigned.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.OutputDeviceAssigned.getName(),String,Attribute category name.
javax.print.attribute.standard.PageRanges.equals(Object),boolean,
javax.print.attribute.standard.PageRanges.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PageRanges.getName(),String,Attribute category name.
javax.print.attribute.standard.PagesPerMinute.equals(Object),boolean,
javax.print.attribute.standard.PagesPerMinute.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PagesPerMinute.getName(),String,Attribute category name.
javax.print.attribute.standard.PagesPerMinuteColor.equals(Object),boolean,
javax.print.attribute.standard.PagesPerMinuteColor.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PagesPerMinuteColor.getName(),String,Attribute category name.
javax.print.attribute.standard.PDLOverrideSupported.getStringTable(),String[],the string table
javax.print.attribute.standard.PDLOverrideSupported.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.PDLOverrideSupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PDLOverrideSupported.getName(),String,Attribute category name.
javax.print.attribute.standard.PresentationDirection.getStringTable(),String[],the string table
javax.print.attribute.standard.PresentationDirection.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.PresentationDirection.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PresentationDirection.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterInfo.equals(Object),boolean,
javax.print.attribute.standard.PrinterInfo.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterInfo.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterIsAcceptingJobs.getStringTable(),String[],the string table
javax.print.attribute.standard.PrinterIsAcceptingJobs.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.PrinterIsAcceptingJobs.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterIsAcceptingJobs.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterLocation.equals(Object),boolean,
javax.print.attribute.standard.PrinterLocation.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterLocation.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterMakeAndModel.equals(Object),boolean,
javax.print.attribute.standard.PrinterMakeAndModel.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterMakeAndModel.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterMessageFromOperator.equals(Object),boolean,
javax.print.attribute.standard.PrinterMessageFromOperator.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterMessageFromOperator.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterMoreInfo.equals(Object),boolean,
javax.print.attribute.standard.PrinterMoreInfo.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterMoreInfo.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterMoreInfoManufacturer.equals(Object),boolean,
javax.print.attribute.standard.PrinterMoreInfoManufacturer.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterMoreInfoManufacturer.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterName.equals(Object),boolean,
javax.print.attribute.standard.PrinterName.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterName.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterResolution.equals(Object),boolean,
javax.print.attribute.standard.PrinterResolution.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterResolution.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterState.getStringTable(),String[],the string table
javax.print.attribute.standard.PrinterState.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.PrinterState.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterState.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterStateReason.getStringTable(),String[],the string table
javax.print.attribute.standard.PrinterStateReason.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.PrinterStateReason.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterStateReason.getName(),String,Attribute category name.
"javax.print.attribute.standard.PrinterStateReasons.put(PrinterStateReason,Severity)",Severity,"Previous severity associated with the given printer state reason, or null if the given printer state reason was not present."
javax.print.attribute.standard.PrinterStateReasons.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterStateReasons.getName(),String,Attribute category name.
javax.print.attribute.standard.PrinterStateReasons.printerStateReasonSet(Severity),Set&lt;PrinterStateReason&gt;,Set view of the individual PrinterStateReason attributes at the given Severity level.
javax.print.attribute.standard.PrinterURI.equals(Object),boolean,
javax.print.attribute.standard.PrinterURI.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrinterURI.getName(),String,Attribute category name.
javax.print.attribute.standard.PrintQuality.getStringTable(),String[],the string table
javax.print.attribute.standard.PrintQuality.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.PrintQuality.getOffset(),int,the offset of the lowest enumeration value.
javax.print.attribute.standard.PrintQuality.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.PrintQuality.getName(),String,Attribute category name.
javax.print.attribute.standard.QueuedJobCount.equals(Object),boolean,
javax.print.attribute.standard.QueuedJobCount.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.QueuedJobCount.getName(),String,Attribute category name.
javax.print.attribute.standard.ReferenceUriSchemesSupported.getStringTable(),String[],the string table
javax.print.attribute.standard.ReferenceUriSchemesSupported.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.ReferenceUriSchemesSupported.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.ReferenceUriSchemesSupported.getName(),String,Attribute category name.
javax.print.attribute.standard.RequestingUserName.equals(Object),boolean,
javax.print.attribute.standard.RequestingUserName.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.RequestingUserName.getName(),String,Attribute category name.
javax.print.attribute.standard.Severity.getStringTable(),String[],the string table
javax.print.attribute.standard.Severity.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.Severity.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Severity.getName(),String,Attribute category name.
javax.print.attribute.standard.SheetCollate.getStringTable(),String[],the string table
javax.print.attribute.standard.SheetCollate.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.SheetCollate.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.SheetCollate.getName(),String,Attribute category name.
javax.print.attribute.standard.Sides.getStringTable(),String[],the string table
javax.print.attribute.standard.Sides.getEnumValueTable(),EnumSyntax[],the value table
javax.print.attribute.standard.Sides.getCategory(),Class&lt;? extends Attribute&gt;,"Printing attribute class (category), an instance of class java.lang.Class."
javax.print.attribute.standard.Sides.getName(),String,Attribute category name.
javax.print.event.PrintEvent.toString(),String,a message describing the event
javax.print.event.PrintJobAdapter.printDataTransferCompleted(PrintJobEvent),void,
javax.print.event.PrintJobAdapter.printJobCompleted(PrintJobEvent),void,
javax.print.event.PrintJobAdapter.printJobFailed(PrintJobEvent),void,
javax.print.event.PrintJobAdapter.printJobCanceled(PrintJobEvent),void,
javax.print.event.PrintJobAdapter.printJobNoMoreEvents(PrintJobEvent),void,
javax.print.event.PrintJobAdapter.printJobRequiresAttention(PrintJobEvent),void,
javax.print.event.PrintJobAttributeEvent.getPrintJob(),DocPrintJob,Print Job object.
javax.print.event.PrintJobAttributeEvent.getAttributes(),PrintJobAttributeSet,Attributes containing the new values for the print job attributes that changed. The returned set may not be modifiable.
javax.print.event.PrintJobEvent.getPrintEventType(),int,reason int.
javax.print.event.PrintJobEvent.getPrintJob(),DocPrintJob,the DocPrintJob object that represents the print job that reports the events encapsulated by this PrintJobEvent.
javax.print.event.PrintServiceAttributeEvent.getPrintService(),PrintService,Print Service object.
javax.print.event.PrintServiceAttributeEvent.getAttributes(),PrintServiceAttributeSet,Attributes containing the new values for the service attributes that changed. The returned set may be unmodifiable.
javax.rmi.PortableRemoteObject.exportObject(Remote),void,
javax.rmi.PortableRemoteObject.toStub(Remote),Remote,the most derived stub for the object.
javax.rmi.PortableRemoteObject.unexportObject(Remote),void,
"javax.rmi.PortableRemoteObject.narrow(Object,Class)",Object,an object which can be cast to the desired type.
"javax.rmi.PortableRemoteObject.connect(Remote,Remote)",void,
javax.rmi.CORBA.Stub.hashCode(),int,the hash code value.
javax.rmi.CORBA.Stub.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.rmi.CORBA.Stub.toString(),String,a string representation of this stub.
javax.rmi.CORBA.Stub.connect(ORB),void,
javax.rmi.CORBA.Util.mapSystemException(SystemException),RemoteException,the mapped exception.
"javax.rmi.CORBA.Util.writeAny(OutputStream,Object)",void,
javax.rmi.CORBA.Util.readAny(InputStream),Object,the object read from the stream.
"javax.rmi.CORBA.Util.writeRemoteObject(OutputStream,Object)",void,
"javax.rmi.CORBA.Util.writeAbstractObject(OutputStream,Object)",void,
"javax.rmi.CORBA.Util.registerTarget(Tie,Remote)",void,
javax.rmi.CORBA.Util.unexportObject(Remote),void,
javax.rmi.CORBA.Util.getTie(Remote),Tie,the tie or null if no tie is registered for the given target.
javax.rmi.CORBA.Util.createValueHandler(),ValueHandler,a class which implements the ValueHandler interface.
javax.rmi.CORBA.Util.getCodebase(Class),String,"a space-separated list of URLs, or null."
"javax.rmi.CORBA.Util.loadClass(String,String,ClassLoader)",Class,
javax.rmi.CORBA.Util.isLocal(Stub),boolean,The _is_local() method returns true if the servant incarnating the object is located in the same process as the stub and they both share the same ORB instance. The _is_local() method returns false otherwise. The default behavior of _is_local() is to return false.
javax.rmi.CORBA.Util.wrapException(Throwable),RemoteException,the wrapped exception.
"javax.rmi.CORBA.Util.copyObjects(Object[],ORB)",Object[],the copied or connected objects.
"javax.rmi.CORBA.Util.copyObject(Object,ORB)",Object,the copy or connected object.
"javax.rmi.ssl.SslRMIClientSocketFactory.createSocket(String,int)",Socket,a socket connected to the specified host and port.
javax.rmi.ssl.SslRMIClientSocketFactory.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.rmi.ssl.SslRMIClientSocketFactory.hashCode(),int,a hash code value for this SslRMIClientSocketFactory.
javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledCipherSuites(),String[],"an array of cipher suites enabled, or null"
javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledProtocols(),String[],"an array of protocol versions enabled, or null"
javax.rmi.ssl.SslRMIServerSocketFactory.getNeedClientAuth(),boolean,true if client authentication is required
javax.rmi.ssl.SslRMIServerSocketFactory.createServerSocket(int),ServerSocket,the server socket on the specified port
javax.rmi.ssl.SslRMIServerSocketFactory.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.rmi.ssl.SslRMIServerSocketFactory.hashCode(),int,a hash code value for this SslRMIServerSocketFactory.
javax.script.AbstractScriptEngine.setContext(ScriptContext),void,
javax.script.AbstractScriptEngine.getContext(),ScriptContext,The value of the protected context field.
javax.script.AbstractScriptEngine.getBindings(int),Bindings,The corresponding Bindings.
"javax.script.AbstractScriptEngine.setBindings(Bindings,int)",void,
"javax.script.AbstractScriptEngine.put(String,Object)",void,
javax.script.AbstractScriptEngine.get(String),Object,The value for the specified key.
"javax.script.AbstractScriptEngine.eval(Reader,Bindings)",Object,"The return value from eval(Reader, ScriptContext)"
"javax.script.AbstractScriptEngine.eval(String,Bindings)",Object,"The return value from eval(String, ScriptContext)"
javax.script.AbstractScriptEngine.eval(Reader),Object,"The return value from eval(Reader, ScriptContext)"
javax.script.AbstractScriptEngine.eval(String),Object,"The return value from eval(String, ScriptContext)"
javax.script.AbstractScriptEngine.getScriptContext(Bindings),ScriptContext,
javax.script.CompiledScript.eval(ScriptContext),abstractObject,"The value returned by the script execution, if any. Should return null if no value is returned by the script execution."
javax.script.CompiledScript.eval(Bindings),Object,The return value from the script execution
javax.script.CompiledScript.eval(),Object,The return value from the script execution
javax.script.CompiledScript.getEngine(),abstractScriptEngine,The ScriptEngine that created this CompiledScript
javax.script.ScriptEngineManager.setBindings(Bindings),void,
javax.script.ScriptEngineManager.getBindings(),Bindings,The globalScope field.
"javax.script.ScriptEngineManager.put(String,Object)",void,
javax.script.ScriptEngineManager.get(String),Object,The value for the specified key.
javax.script.ScriptEngineManager.getEngineByName(String),ScriptEngine,A ScriptEngine created by the factory located in the search. Returns null if no such factory was found. The ScriptEngineManager sets its own globalScopeBindings as the GLOBAL_SCOPE Bindings of the newly created ScriptEngine.
javax.script.ScriptEngineManager.getEngineByExtension(String),ScriptEngine,The engine to handle scripts with this extension. Returns null if not found.
javax.script.ScriptEngineManager.getEngineByMimeType(String),ScriptEngine,The engine to handle scripts with this mime type. Returns null if not found.
javax.script.ScriptEngineManager.getEngineFactories(),List&lt;ScriptEngineFactory&gt;,List of all discovered ScriptEngineFactorys.
"javax.script.ScriptEngineManager.registerEngineName(String,ScriptEngineFactory)",void,
"javax.script.ScriptEngineManager.registerEngineMimeType(String,ScriptEngineFactory)",void,
"javax.script.ScriptEngineManager.registerEngineExtension(String,ScriptEngineFactory)",void,
"javax.script.SimpleBindings.put(String,Object)",Object,Previous value for the specified key. Returns null if key was previously unset.
"javax.script.SimpleBindings.putAll(Map&lt;?,?)",void,
javax.script.SimpleBindings.clear(),void,
javax.script.SimpleBindings.containsKey(Object),boolean,true if this map contains a mapping for the specified key.
javax.script.SimpleBindings.containsValue(Object),boolean,true if this map maps one or more keys to the specified value
javax.script.SimpleBindings.entrySet(),"Set&lt;Map.Entry&lt;String,Object&gt;&gt;",a set view of the mappings contained in this map
javax.script.SimpleBindings.get(Object),Object,"the value to which this map maps the specified key, or null if the map contains no mapping for this key."
javax.script.SimpleBindings.isEmpty(),boolean,true if this map contains no key-value mappings
javax.script.SimpleBindings.keySet(),Set&lt;String&gt;,a set view of the keys contained in this map
javax.script.SimpleBindings.remove(Object),Object,"previous value associated with specified key, or null if there was no mapping for key."
javax.script.SimpleBindings.size(),int,the number of key-value mappings in this map
javax.script.SimpleBindings.values(),Collection&lt;Object&gt;,a collection view of the values contained in this map
"javax.script.SimpleScriptContext.setBindings(Bindings,int)",void,
javax.script.SimpleScriptContext.getAttribute(String),Object,The value of the attribute in the lowest scope for which an attribute with the given name is defined. Returns null if no attribute with the name exists in any scope.
"javax.script.SimpleScriptContext.getAttribute(String,int)",Object,The value of the attribute. Returns null is the name does not exist in the given scope.
"javax.script.SimpleScriptContext.removeAttribute(String,int)",Object,The removed value.
"javax.script.SimpleScriptContext.setAttribute(String,Object,int)",void,
javax.script.SimpleScriptContext.getWriter(),Writer,The Writer.
javax.script.SimpleScriptContext.getReader(),Reader,The Reader.
javax.script.SimpleScriptContext.setReader(Reader),void,
javax.script.SimpleScriptContext.setWriter(Writer),void,
javax.script.SimpleScriptContext.getErrorWriter(),Writer,The Writer
javax.script.SimpleScriptContext.setErrorWriter(Writer),void,
javax.script.SimpleScriptContext.getAttributesScope(String),int,The lowest scope. Returns -1 if no attribute with the given name is defined in any scope.
javax.script.SimpleScriptContext.getBindings(int),Bindings,The value of either the engineScope or globalScope field.
javax.script.SimpleScriptContext.getScopes(),List&lt;Integer&gt;,list of scope values
javax.security.auth.Policy.getPolicy(),Policy,the installed Policy. The return value cannot be null.
javax.security.auth.Policy.setPolicy(Policy),void,
"javax.security.auth.Policy.getPermissions(Subject,CodeSource)",abstractPermissionCollection,the Collection of Permissions granted to all the Subject and code specified in the provided subject and cs parameters.
javax.security.auth.Policy.refresh(),abstractvoid,
javax.security.auth.PrivateCredentialPermission.getCredentialClass(),String,the Class name of the Credential associated with this PrivateCredentialPermission.
javax.security.auth.PrivateCredentialPermission.getPrincipals(),String[][],the Principal class and names associated with this PrivateCredentialPermission.
javax.security.auth.PrivateCredentialPermission.implies(Permission),boolean,
javax.security.auth.PrivateCredentialPermission.equals(Object),boolean,"true if obj is a PrivateCredentialPermission, has the same credential class as this object, and has the same Principals as this object."
javax.security.auth.PrivateCredentialPermission.hashCode(),int,a hash code value for this object.
javax.security.auth.PrivateCredentialPermission.getActions(),String,"the actions (always returns ""read"")."
javax.security.auth.PrivateCredentialPermission.newPermissionCollection(),PermissionCollection,null in all cases.
javax.security.auth.Subject.setReadOnly(),void,
javax.security.auth.Subject.isReadOnly(),boolean,"true if this Subject is read-only, false otherwise."
javax.security.auth.Subject.getSubject(AccessControlContext),Subject,"the Subject associated with the provided AccessControlContext, or null if no Subject is associated with the provided AccessControlContext."
"javax.security.auth.Subject.doAs(Subject,PrivilegedAction&lt;T&gt;)",&lt;T&gt;T,the value returned by the PrivilegedAction's run method.
"javax.security.auth.Subject.doAs(Subject,PrivilegedExceptionAction&lt;T&gt;)",&lt;T&gt;T,the value returned by the PrivilegedExceptionAction's run method.
"javax.security.auth.Subject.doAsPrivileged(Subject,PrivilegedAction&lt;T&gt;,AccessControlContext)",&lt;T&gt;T,the value returned by the PrivilegedAction's run method.
"javax.security.auth.Subject.doAsPrivileged(Subject,PrivilegedExceptionAction&lt;T&gt;,AccessControlContext)",&lt;T&gt;T,the value returned by the PrivilegedExceptionAction's run method.
javax.security.auth.Subject.getPrincipals(),Set&lt;Principal&gt;,The Set of Principals associated with this Subject.
javax.security.auth.Subject.getPrincipals(Class&lt;T&gt;),&lt;T extends Principal&gt;Set&lt;T&gt;,a Set of Principals that are instances of the specified Class.
javax.security.auth.Subject.getPublicCredentials(),Set&lt;Object&gt;,A Set of public credentials held by this Subject.
javax.security.auth.Subject.getPrivateCredentials(),Set&lt;Object&gt;,A Set of private credentials held by this Subject.
javax.security.auth.Subject.getPublicCredentials(Class&lt;T&gt;),&lt;T&gt;Set&lt;T&gt;,a Set of public credentials that are instances of the specified Class.
javax.security.auth.Subject.getPrivateCredentials(Class&lt;T&gt;),&lt;T&gt;Set&lt;T&gt;,a Set of private credentials that are instances of the specified Class.
javax.security.auth.Subject.equals(Object),boolean,true if the specified Object is equal to this Subject.
javax.security.auth.Subject.toString(),String,the String representation of this Subject.
javax.security.auth.Subject.hashCode(),int,a hashcode for this Subject.
javax.security.auth.SubjectDomainCombiner.getSubject(),Subject,"the Subject associated with this SubjectDomainCombiner, or null if no Subject is associated with this SubjectDomainCombiner."
"javax.security.auth.SubjectDomainCombiner.combine(ProtectionDomain[],ProtectionDomain[])",ProtectionDomain[],"a new array consisting of the updated ProtectionDomains, or null."
javax.security.auth.callback.ChoiceCallback.getPrompt(),String,the prompt.
javax.security.auth.callback.ChoiceCallback.getChoices(),String[],the list of choices.
javax.security.auth.callback.ChoiceCallback.getDefaultChoice(),int,"the defaultChoice, represented as an index into the choices list."
javax.security.auth.callback.ChoiceCallback.allowMultipleSelections(),boolean,whether multiple selections are allowed.
javax.security.auth.callback.ChoiceCallback.setSelectedIndex(int),void,
javax.security.auth.callback.ChoiceCallback.setSelectedIndexes(int[]),void,
javax.security.auth.callback.ChoiceCallback.getSelectedIndexes(),int[],"the selected choices, represented as indexes into the choices list."
javax.security.auth.callback.ConfirmationCallback.getPrompt(),String,"the prompt, or null if this ConfirmationCallback was instantiated without a prompt."
javax.security.auth.callback.ConfirmationCallback.getMessageType(),int,"the message type (INFORMATION, WARNING or ERROR)."
javax.security.auth.callback.ConfirmationCallback.getOptionType(),int,"the option type (YES_NO_OPTION, YES_NO_CANCEL_OPTION or OK_CANCEL_OPTION), or UNSPECIFIED_OPTION if this ConfirmationCallback was instantiated with options instead of an optionType."
javax.security.auth.callback.ConfirmationCallback.getOptions(),String[],"the list of confirmation options, or null if this ConfirmationCallback was instantiated with an optionType instead of options."
javax.security.auth.callback.ConfirmationCallback.getDefaultOption(),int,"the default option, represented as YES, NO, OK or CANCEL if an optionType was specified to the constructor of this ConfirmationCallback. Otherwise, this method returns the default option as an index into the options array specified to the constructor of this ConfirmationCallback."
javax.security.auth.callback.ConfirmationCallback.setSelectedIndex(int),void,
javax.security.auth.callback.ConfirmationCallback.getSelectedIndex(),int,"the selected confirmation option represented as YES, NO, OK or CANCEL if an optionType was specified to the constructor of this ConfirmationCallback. Otherwise, this method returns the selected confirmation option as an index into the options array specified to the constructor of this ConfirmationCallback."
javax.security.auth.callback.LanguageCallback.setLocale(Locale),void,
javax.security.auth.callback.LanguageCallback.getLocale(),Locale,"the retrieved Locale, or null if no Locale could be retrieved."
javax.security.auth.callback.NameCallback.getPrompt(),String,the prompt.
javax.security.auth.callback.NameCallback.getDefaultName(),String,"the default name, or null if this NameCallback was not instantiated with a defaultName."
javax.security.auth.callback.NameCallback.setName(String),void,
javax.security.auth.callback.NameCallback.getName(),String,the retrieved name (which may be null)
javax.security.auth.callback.PasswordCallback.getPrompt(),String,the prompt.
javax.security.auth.callback.PasswordCallback.isEchoOn(),boolean,the whether the password should be displayed as it is being typed.
javax.security.auth.callback.PasswordCallback.setPassword(char[]),void,
javax.security.auth.callback.PasswordCallback.getPassword(),char[],"the retrieved password, which may be null."
javax.security.auth.callback.PasswordCallback.clearPassword(),void,
javax.security.auth.callback.TextInputCallback.getPrompt(),String,the prompt.
javax.security.auth.callback.TextInputCallback.getDefaultText(),String,"the default text, or null if this TextInputCallback was not instantiated with defaultText."
javax.security.auth.callback.TextInputCallback.setText(String),void,
javax.security.auth.callback.TextInputCallback.getText(),String,"the retrieved text, which may be null."
javax.security.auth.callback.TextOutputCallback.getMessageType(),int,"the message type (INFORMATION, WARNING or ERROR)."
javax.security.auth.callback.TextOutputCallback.getMessage(),String,the message to be displayed.
javax.security.auth.kerberos.DelegationPermission.implies(Permission),boolean,"true if the specified permission is implied by this object, false if not."
javax.security.auth.kerberos.DelegationPermission.equals(Object),boolean,"true if obj is a DelegationPermission, and has the same subordinate and service principal as this. DelegationPermission object."
javax.security.auth.kerberos.DelegationPermission.hashCode(),int,a hash code value for this object.
javax.security.auth.kerberos.DelegationPermission.newPermissionCollection(),PermissionCollection,a new PermissionCollection object suitable for storing DelegationPermissions.
javax.security.auth.kerberos.KerberosKey.getPrincipal(),KerberosPrincipal,the principal this key belongs to.
javax.security.auth.kerberos.KerberosKey.getVersionNumber(),int,the key version number.
javax.security.auth.kerberos.KerberosKey.getKeyType(),int,the key type.
javax.security.auth.kerberos.KerberosKey.getAlgorithm(),String,the name of the algorithm associated with this key.
javax.security.auth.kerberos.KerberosKey.getFormat(),String,"the String ""RAW"""
javax.security.auth.kerberos.KerberosKey.getEncoded(),byte[],the key material
javax.security.auth.kerberos.KerberosKey.destroy(),void,
javax.security.auth.kerberos.KerberosKey.isDestroyed(),boolean,"true if this Object has been destroyed, false otherwise."
javax.security.auth.kerberos.KerberosKey.toString(),String,a string representation of the object.
javax.security.auth.kerberos.KerberosKey.hashCode(),int,a hashCode() for the KerberosKey
javax.security.auth.kerberos.KerberosKey.equals(Object),boolean,"true if the specified object is equal to this KerberosKey, false otherwise. NOTE: Returns false if either of the KerberosKey objects has been destroyed."
javax.security.auth.kerberos.KerberosPrincipal.getRealm(),String,the realm component of this Kerberos principal.
javax.security.auth.kerberos.KerberosPrincipal.hashCode(),int,a hashCode() for the KerberosPrincipal
javax.security.auth.kerberos.KerberosPrincipal.equals(Object),boolean,"true if the Object passed in represents the same principal as this one, false otherwise."
javax.security.auth.kerberos.KerberosPrincipal.getName(),String,the principal name.
javax.security.auth.kerberos.KerberosPrincipal.getNameType(),int,the name type.
javax.security.auth.kerberos.KerberosPrincipal.toString(),String,a string representation of the object.
javax.security.auth.kerberos.KerberosTicket.getClient(),KerberosPrincipal,the client principal.
javax.security.auth.kerberos.KerberosTicket.getServer(),KerberosPrincipal,the service principal.
javax.security.auth.kerberos.KerberosTicket.getSessionKey(),SecretKey,the session key.
javax.security.auth.kerberos.KerberosTicket.getSessionKeyType(),int,the key type of the session key associated with this ticket.
javax.security.auth.kerberos.KerberosTicket.isForwardable(),boolean,"true if this ticket is forwardable, false if not."
javax.security.auth.kerberos.KerberosTicket.isForwarded(),boolean,"true if this ticket had been forwarded or was issued based on authentication involving a forwarded ticket-granting ticket, false otherwise."
javax.security.auth.kerberos.KerberosTicket.isProxiable(),boolean,"true if this ticket is proxiable, false if not."
javax.security.auth.kerberos.KerberosTicket.isProxy(),boolean,"true if this ticket is a proxy-ticket, false if not."
javax.security.auth.kerberos.KerberosTicket.isPostdated(),boolean,"true if this ticket is post-dated, false if not."
javax.security.auth.kerberos.KerberosTicket.isRenewable(),boolean,"true if this ticket is renewable, false if not."
javax.security.auth.kerberos.KerberosTicket.isInitial(),boolean,"true if this ticket was issued using the Kerberos AS-Exchange protocol, false if not."
javax.security.auth.kerberos.KerberosTicket.getFlags(),boolean[],the flags associated with this ticket.
javax.security.auth.kerberos.KerberosTicket.getAuthTime(),Date,the time that the client was authenticated or null if not set.
javax.security.auth.kerberos.KerberosTicket.getStartTime(),Date,the start time for this ticket's validity period or null if not set.
javax.security.auth.kerberos.KerberosTicket.getEndTime(),Date,the expiration time for this ticket's validity period.
javax.security.auth.kerberos.KerberosTicket.getRenewTill(),Date,the latest expiration time for this ticket.
javax.security.auth.kerberos.KerberosTicket.getClientAddresses(),InetAddress[],"ths list of addresses or null, if the field was not provided."
javax.security.auth.kerberos.KerberosTicket.getEncoded(),byte[],an ASN.1 encoding of the entire ticket.
javax.security.auth.kerberos.KerberosTicket.isCurrent(),boolean,"true if this Object is currently current, false otherwise."
javax.security.auth.kerberos.KerberosTicket.refresh(),void,
javax.security.auth.kerberos.KerberosTicket.destroy(),void,
javax.security.auth.kerberos.KerberosTicket.isDestroyed(),boolean,"true if this Object has been destroyed, false otherwise."
javax.security.auth.kerberos.KerberosTicket.toString(),String,a string representation of the object.
javax.security.auth.kerberos.KerberosTicket.hashCode(),int,a hashCode() for the KerberosTicket
javax.security.auth.kerberos.KerberosTicket.equals(Object),boolean,"true if the specified object is equal to this KerberosTicket, false otherwise. NOTE: Returns false if either of the KerberosTicket objects has been destroyed."
javax.security.auth.kerberos.KeyTab.getInstance(File),KeyTab,the keytab instance
javax.security.auth.kerberos.KeyTab.getUnboundInstance(File),KeyTab,the keytab instance
"javax.security.auth.kerberos.KeyTab.getInstance(KerberosPrincipal,File)",KeyTab,the keytab instance
javax.security.auth.kerberos.KeyTab.getInstance(),KeyTab,the default keytab instance.
javax.security.auth.kerberos.KeyTab.getUnboundInstance(),KeyTab,the default keytab instance
javax.security.auth.kerberos.KeyTab.getInstance(KerberosPrincipal),KeyTab,the default keytab instance
javax.security.auth.kerberos.KeyTab.getKeys(KerberosPrincipal),KerberosKey[],"the keys (never null, may be empty)"
javax.security.auth.kerberos.KeyTab.exists(),boolean,true if the keytab file exists; false otherwise.
javax.security.auth.kerberos.KeyTab.toString(),String,a string representation of the object.
javax.security.auth.kerberos.KeyTab.hashCode(),int,a hashCode() for the KeyTab
javax.security.auth.kerberos.KeyTab.equals(Object),boolean,true if the specified object is equal to this KeyTab
javax.security.auth.kerberos.KeyTab.getPrincipal(),KerberosPrincipal,the service principal
javax.security.auth.kerberos.KeyTab.isBound(),boolean,if the keytab is bound to a principal
javax.security.auth.kerberos.ServicePermission.implies(Permission),boolean,"true if the specified permission is implied by this object, false if not."
javax.security.auth.kerberos.ServicePermission.equals(Object),boolean,"true if obj is a ServicePermission, and has the same service principal, and actions as this ServicePermission object."
javax.security.auth.kerberos.ServicePermission.hashCode(),int,a hash code value for this object.
javax.security.auth.kerberos.ServicePermission.getActions(),String,the actions of this Permission.
javax.security.auth.kerberos.ServicePermission.newPermissionCollection(),PermissionCollection,a new PermissionCollection object suitable for storing ServicePermissions.
javax.security.auth.login.AppConfigurationEntry.getLoginModuleName(),String,the class name of the configured LoginModule as a String.
javax.security.auth.login.AppConfigurationEntry.getControlFlag(),AppConfigurationEntry.LoginModuleControlFlag,"the controlFlag (either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL) for this LoginModule."
javax.security.auth.login.AppConfigurationEntry.getOptions(),"Map&lt;String,?&gt;",the options configured for this LoginModule as an unmodifiable Map.
javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag.toString(),String,a String representation of this controlFlag.
javax.security.auth.login.Configuration.getConfiguration(),Configuration,"the login Configuration. If a Configuration object was set via the Configuration.setConfiguration method, then that object is returned. Otherwise, a default Configuration object is returned."
javax.security.auth.login.Configuration.setConfiguration(Configuration),void,
"javax.security.auth.login.Configuration.getInstance(String,Configuration.Parameters)",Configuration,the new Configuration object.
"javax.security.auth.login.Configuration.getInstance(String,Configuration.Parameters,String)",Configuration,the new Configuration object.
"javax.security.auth.login.Configuration.getInstance(String,Configuration.Parameters,Provider)",Configuration,the new Configuration object.
javax.security.auth.login.Configuration.getProvider(),Provider,"the Provider of this Configuration, or null."
javax.security.auth.login.Configuration.getType(),String,"the type of this Configuration, or null."
javax.security.auth.login.Configuration.getParameters(),Configuration.Parameters,"Configuration parameters, or null."
javax.security.auth.login.Configuration.getAppConfigurationEntry(String),abstractAppConfigurationEntry[],"an array of AppConfigurationEntries for the specified name from this Configuration, or null if there are no entries for the specified name"
javax.security.auth.login.Configuration.refresh(),void,
javax.security.auth.login.ConfigurationSpi.engineGetAppConfigurationEntry(String),abstractAppConfigurationEntry[],"an array of AppConfigurationEntries for the specified name, or null if there are no entries."
javax.security.auth.login.ConfigurationSpi.engineRefresh(),void,
javax.security.auth.login.LoginContext.login(),void,
javax.security.auth.login.LoginContext.logout(),void,
javax.security.auth.login.LoginContext.getSubject(),Subject,"the authenticated Subject. If the caller specified a Subject to this LoginContext's constructor, this method returns the caller-specified Subject. If a Subject was not specified and authentication succeeds, this method returns the Subject instantiated and used for authentication by this LoginContext. If a Subject was not specified, and authentication fails or has not been attempted, this method returns null."
javax.security.auth.x500.X500Principal.getName(),String,the distinguished name of this X500Principal
javax.security.auth.x500.X500Principal.getName(String),String,
"javax.security.auth.x500.X500Principal.getName(String,Map&lt;String,String&gt;)",String,a string representation of this X500Principal using the specified format
javax.security.auth.x500.X500Principal.getEncoded(),byte[],a byte array containing the distinguished name in ASN.1 DER encoded form
javax.security.auth.x500.X500Principal.toString(),String,a string representation of this X500Principal
javax.security.auth.x500.X500Principal.equals(Object),boolean,"true if the specified Object is equal to this X500Principal, false otherwise"
javax.security.auth.x500.X500Principal.hashCode(),int,a hash code for this X500Principal
javax.security.auth.x500.X500PrivateCredential.getCertificate(),X509Certificate,the X509Certificate
javax.security.auth.x500.X500PrivateCredential.getPrivateKey(),PrivateKey,the PrivateKey
javax.security.auth.x500.X500PrivateCredential.getAlias(),String,the KeyStore alias
javax.security.auth.x500.X500PrivateCredential.destroy(),void,
javax.security.auth.x500.X500PrivateCredential.isDestroyed(),boolean,true if X509Certificate and the PrivateKey are null
javax.security.cert.Certificate.equals(Object),boolean,"true if the encoded forms of the two certificates match, false otherwise."
javax.security.cert.Certificate.hashCode(),int,the hashcode value.
javax.security.cert.Certificate.getEncoded(),abstractbyte[],encoded form of this certificate
javax.security.cert.Certificate.verify(PublicKey),abstractvoid,
"javax.security.cert.Certificate.verify(PublicKey,String)",abstractvoid,
javax.security.cert.Certificate.toString(),abstractString,a string representation of this certificate.
javax.security.cert.Certificate.getPublicKey(),abstractPublicKey,the public key.
javax.security.cert.X509Certificate.getInstance(InputStream),X509Certificate,an X509Certificate object initialized with the data from the input stream.
javax.security.cert.X509Certificate.getInstance(byte[]),X509Certificate,an X509Certificate object initialized with the data from certData.
javax.security.cert.X509Certificate.checkValidity(),abstractvoid,
javax.security.cert.X509Certificate.checkValidity(Date),abstractvoid,
javax.security.cert.X509Certificate.getVersion(),abstractint,"the version number from the ASN.1 encoding, i.e. 0, 1 or 2."
javax.security.cert.X509Certificate.getSerialNumber(),abstractBigInteger,the serial number.
javax.security.cert.X509Certificate.getIssuerDN(),abstractPrincipal,a Principal whose name is the issuer distinguished name.
javax.security.cert.X509Certificate.getSubjectDN(),abstractPrincipal,a Principal whose name is the subject name.
javax.security.cert.X509Certificate.getNotBefore(),abstractDate,the start date of the validity period.
javax.security.cert.X509Certificate.getNotAfter(),abstractDate,the end date of the validity period.
javax.security.cert.X509Certificate.getSigAlgName(),abstractString,the signature algorithm name.
javax.security.cert.X509Certificate.getSigAlgOID(),abstractString,the signature algorithm OID string.
javax.security.cert.X509Certificate.getSigAlgParams(),abstractbyte[],"the DER-encoded signature algorithm parameters, or null if no parameters are present."
javax.security.sasl.AuthorizeCallback.getAuthenticationID(),String,The authentication id to check.
javax.security.sasl.AuthorizeCallback.getAuthorizationID(),String,The authentication id to check.
javax.security.sasl.AuthorizeCallback.isAuthorized(),boolean,true if authorization is allowed; false otherwise
javax.security.sasl.AuthorizeCallback.setAuthorized(boolean),void,
javax.security.sasl.AuthorizeCallback.getAuthorizedID(),String,The id of the authorized user. null means the authorization failed.
javax.security.sasl.AuthorizeCallback.setAuthorizedID(String),void,
"javax.security.sasl.Sasl.createSaslClient(String[],String,String,String,Map&lt;String,?&gt;,CallbackHandler)",SaslClient,"A possibly null SaslClient created using the parameters supplied. If null, cannot find a SaslClientFactory that will produce one."
"javax.security.sasl.Sasl.createSaslServer(String,String,String,Map&lt;String,?&gt;,CallbackHandler)",SaslServer,"A possibly null SaslServer created using the parameters supplied. If null, cannot find a SaslServerFactory that will produce one."
javax.security.sasl.Sasl.getSaslClientFactories(),Enumeration&lt;SaslClientFactory&gt;,A non-null enumeration of known factories for producing SaslClient.
javax.security.sasl.Sasl.getSaslServerFactories(),Enumeration&lt;SaslServerFactory&gt;,A non-null enumeration of known factories for producing SaslServer.
javax.sound.midi.Instrument.getPatch(),Patch,this instrument's patch
"javax.sound.midi.MetaMessage.setMessage(int,byte[],int)",void,
javax.sound.midi.MetaMessage.getType(),int,an integer representing the MetaMessage type
javax.sound.midi.MetaMessage.getData(),byte[],array containing the meta message data.
javax.sound.midi.MetaMessage.clone(),Object,a clone of this instance
javax.sound.midi.MidiDevice.Info.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise
javax.sound.midi.MidiDevice.Info.hashCode(),int,a hash code value for this object.
javax.sound.midi.MidiDevice.Info.getName(),String,a string containing the device's name
javax.sound.midi.MidiDevice.Info.getVendor(),String,device the vendor's name
javax.sound.midi.MidiDevice.Info.getDescription(),String,a description of the device
javax.sound.midi.MidiDevice.Info.getVersion(),String,textual version information for the device.
javax.sound.midi.MidiDevice.Info.toString(),String,a description of the info object
javax.sound.midi.MidiEvent.getMessage(),MidiMessage,the MIDI message
javax.sound.midi.MidiEvent.setTick(long),void,
javax.sound.midi.MidiEvent.getTick(),long,"the time-stamp for the event, in MIDI ticks"
javax.sound.midi.MidiFileFormat.getType(),int,"the file's type (0, 1, or 2)"
javax.sound.midi.MidiFileFormat.getDivisionType(),float,the division type (PPQ or one of the SMPTE types)
javax.sound.midi.MidiFileFormat.getResolution(),int,the number of ticks per beat (PPQ) or per frame (SMPTE)
javax.sound.midi.MidiFileFormat.getByteLength(),int,"the number of bytes in the file, or UNKNOWN_LENGTH if not known"
javax.sound.midi.MidiFileFormat.getMicrosecondLength(),long,"the file's duration in microseconds, or UNKNOWN_LENGTH if not known"
javax.sound.midi.MidiFileFormat.properties(),"Map&lt;String,Object&gt;","a Map&lt;String,Object&gt; object containing all properties. If no properties are recognized, an empty map is returned."
javax.sound.midi.MidiFileFormat.getProperty(String),Object,"the value of the property with the specified key, or null if the property does not exist."
"javax.sound.midi.MidiMessage.setMessage(byte[],int)",void,
javax.sound.midi.MidiMessage.getMessage(),byte[],the byte array containing the complete MidiMessage data
javax.sound.midi.MidiMessage.getStatus(),int,the integer representation of this event's status byte
javax.sound.midi.MidiMessage.getLength(),int,the length of the message in bytes
javax.sound.midi.MidiMessage.clone(),abstractObject,a clone of this instance.
javax.sound.midi.MidiSystem.getMidiDeviceInfo(),MidiDevice.Info[],"an array of MidiDevice.Info objects, one for each installed MIDI device. If no such devices are installed, an array of length 0 is returned."
javax.sound.midi.MidiSystem.getMidiDevice(MidiDevice.Info),MidiDevice,the requested device
javax.sound.midi.MidiSystem.getReceiver(),Receiver,the default MIDI receiver
javax.sound.midi.MidiSystem.getTransmitter(),Transmitter,the default MIDI transmitter
javax.sound.midi.MidiSystem.getSynthesizer(),Synthesizer,the default synthesizer
javax.sound.midi.MidiSystem.getSequencer(),Sequencer,"the default sequencer, connected to a default Receiver"
javax.sound.midi.MidiSystem.getSequencer(boolean),Sequencer,the default sequencer
javax.sound.midi.MidiSystem.getSoundbank(InputStream),Soundbank,the sound bank
javax.sound.midi.MidiSystem.getSoundbank(URL),Soundbank,the sound bank
javax.sound.midi.MidiSystem.getSoundbank(File),Soundbank,the sound bank
javax.sound.midi.MidiSystem.getMidiFileFormat(InputStream),MidiFileFormat,an MidiFileFormat object describing the MIDI file format
javax.sound.midi.MidiSystem.getMidiFileFormat(URL),MidiFileFormat,a MidiFileFormat object describing the MIDI file format
javax.sound.midi.MidiSystem.getMidiFileFormat(File),MidiFileFormat,a MidiFileFormat object describing the MIDI file format
javax.sound.midi.MidiSystem.getSequence(InputStream),Sequence,a Sequence object based on the MIDI file data contained in the input stream
javax.sound.midi.MidiSystem.getSequence(URL),Sequence,a Sequence object based on the MIDI file data pointed to by the URL
javax.sound.midi.MidiSystem.getSequence(File),Sequence,a Sequence object based on the MIDI file data pointed to by the File
javax.sound.midi.MidiSystem.getMidiFileTypes(),int[],"array of unique file types. If no file types are supported, an array of length 0 is returned."
javax.sound.midi.MidiSystem.isFileTypeSupported(int),boolean,"true if the file type is supported, otherwise false"
javax.sound.midi.MidiSystem.getMidiFileTypes(Sequence),int[],"the set of unique supported file types. If no file types are supported, returns an array of length 0."
"javax.sound.midi.MidiSystem.isFileTypeSupported(int,Sequence)",boolean,"true if the file type is supported for this sequence, otherwise false"
"javax.sound.midi.MidiSystem.write(Sequence,int,OutputStream)",int,the number of bytes written to the output stream
"javax.sound.midi.MidiSystem.write(Sequence,int,File)",int,the number of bytes written to the file
javax.sound.midi.Patch.getBank(),int,"the bank number, whose range is from 0 to 16383"
javax.sound.midi.Patch.getProgram(),int,"the instrument's program number, whose range is from 0 to 127"
javax.sound.midi.Sequence.getDivisionType(),float,the division type (PPQ or one of the SMPTE types)
javax.sound.midi.Sequence.getResolution(),int,the number of ticks per beat (PPQ) or per frame (SMPTE)
javax.sound.midi.Sequence.createTrack(),Track,the newly created track
javax.sound.midi.Sequence.deleteTrack(Track),boolean,"true if the track existed in the track and was removed, otherwise false."
javax.sound.midi.Sequence.getTracks(),Track[],the array of tracks
javax.sound.midi.Sequence.getMicrosecondLength(),long,this sequence's duration in microseconds.
javax.sound.midi.Sequence.getTickLength(),long,this sequence's length in ticks
javax.sound.midi.Sequence.getPatchList(),Patch[],an array of Patch objects used in this sequence
javax.sound.midi.Sequencer.SyncMode.equals(Object),boolean,"true if this object is the same as the obj argument, false otherwise"
javax.sound.midi.Sequencer.SyncMode.hashCode(),int,a hash code value for this object.
javax.sound.midi.Sequencer.SyncMode.toString(),String,the name of this synchronization mode
javax.sound.midi.ShortMessage.setMessage(int),void,
"javax.sound.midi.ShortMessage.setMessage(int,int,int)",void,
"javax.sound.midi.ShortMessage.setMessage(int,int,int,int)",void,
javax.sound.midi.ShortMessage.getChannel(),int,MIDI channel associated with the message.
javax.sound.midi.ShortMessage.getCommand(),int,the MIDI command associated with this event
javax.sound.midi.ShortMessage.getData1(),int,the value of the data1 field
javax.sound.midi.ShortMessage.getData2(),int,the value of the data2 field
javax.sound.midi.ShortMessage.clone(),Object,a clone of this instance.
javax.sound.midi.ShortMessage.getDataLength(int),int,"data length in bytes (0, 1, or 2)"
javax.sound.midi.SoundbankResource.getSoundbank(),Soundbank,the sound bank in which this SoundbankResource is stored
javax.sound.midi.SoundbankResource.getName(),String,the instrument's name
javax.sound.midi.SoundbankResource.getDataClass(),Class&lt;?&gt;,"the class used to represent the sample's data, or null if the data is not accessible"
javax.sound.midi.SoundbankResource.getData(),abstractObject,an object containing the sampled audio data
"javax.sound.midi.SysexMessage.setMessage(byte[],int)",void,
"javax.sound.midi.SysexMessage.setMessage(int,byte[],int)",void,
javax.sound.midi.SysexMessage.getData(),byte[],array containing the system exclusive message data.
javax.sound.midi.SysexMessage.clone(),Object,a clone of this instance
javax.sound.midi.Track.add(MidiEvent),boolean,"true if the event did not already exist in the track and was added, otherwise false"
javax.sound.midi.Track.remove(MidiEvent),boolean,"true if the event existed in the track and was removed, otherwise false"
javax.sound.midi.Track.get(int),MidiEvent,the event at the specified index
javax.sound.midi.Track.size(),int,the size of the track's event vector
javax.sound.midi.Track.ticks(),long,"the duration, in ticks"
javax.sound.midi.spi.MidiDeviceProvider.isDeviceSupported(MidiDevice.Info),boolean,"true if the specified device is supported, otherwise false"
javax.sound.midi.spi.MidiDeviceProvider.getDeviceInfo(),abstractMidiDevice.Info[],set of device info objects
javax.sound.midi.spi.MidiDeviceProvider.getDevice(MidiDevice.Info),abstractMidiDevice,device instance
javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(InputStream),abstractMidiFileFormat,a MidiFileFormat object describing the MIDI file format
javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(URL),abstractMidiFileFormat,a MidiFileFormat object describing the MIDI file format
javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(File),abstractMidiFileFormat,a MidiFileFormat object describing the MIDI file format
javax.sound.midi.spi.MidiFileReader.getSequence(InputStream),abstractSequence,a Sequence object based on the MIDI file data contained in the input stream.
javax.sound.midi.spi.MidiFileReader.getSequence(URL),abstractSequence,a Sequence object based on the MIDI file data pointed to by the URL
javax.sound.midi.spi.MidiFileReader.getSequence(File),abstractSequence,a Sequence object based on the MIDI file data pointed to by the File
javax.sound.midi.spi.MidiFileWriter.getMidiFileTypes(),abstractint[],"array of file types. If no file types are supported, an array of length 0 is returned."
javax.sound.midi.spi.MidiFileWriter.getMidiFileTypes(Sequence),abstractint[],"array of file types. If no file types are supported, returns an array of length 0."
javax.sound.midi.spi.MidiFileWriter.isFileTypeSupported(int),boolean,"true if the file type is supported, otherwise false"
"javax.sound.midi.spi.MidiFileWriter.isFileTypeSupported(int,Sequence)",boolean,"true if the file type is supported for this sequence, otherwise false"
"javax.sound.midi.spi.MidiFileWriter.write(Sequence,int,OutputStream)",abstractint,the number of bytes written to the output stream
"javax.sound.midi.spi.MidiFileWriter.write(Sequence,int,File)",abstractint,the number of bytes written to the file
javax.sound.midi.spi.SoundbankReader.getSoundbank(URL),abstractSoundbank,soundbank object
javax.sound.midi.spi.SoundbankReader.getSoundbank(InputStream),abstractSoundbank,soundbank object
javax.sound.midi.spi.SoundbankReader.getSoundbank(File),abstractSoundbank,soundbank object
javax.sound.sampled.AudioFileFormat.getType(),AudioFileFormat.Type,the audio file type
javax.sound.sampled.AudioFileFormat.getByteLength(),int,the audio file length in bytes
javax.sound.sampled.AudioFileFormat.getFormat(),AudioFormat,the audio data format
javax.sound.sampled.AudioFileFormat.getFrameLength(),int,the number of sample frames of audio data in the file
javax.sound.sampled.AudioFileFormat.properties(),"Map&lt;String,Object&gt;","a Map&lt;String,Object&gt; object containing all properties. If no properties are recognized, an empty map is returned."
javax.sound.sampled.AudioFileFormat.getProperty(String),Object,"the value of the property with the specified key, or null if the property does not exist."
javax.sound.sampled.AudioFileFormat.toString(),String,the file format as a string
javax.sound.sampled.AudioFileFormat.Type.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.sound.sampled.AudioFileFormat.Type.hashCode(),int,a hash code value for this object.
javax.sound.sampled.AudioFileFormat.Type.toString(),String,the file type's name
javax.sound.sampled.AudioFileFormat.Type.getExtension(),String,file type extension
javax.sound.sampled.AudioFormat.getEncoding(),AudioFormat.Encoding,the encoding type
javax.sound.sampled.AudioFormat.getSampleRate(),float,"the number of samples per second, or AudioSystem.NOT_SPECIFIED"
javax.sound.sampled.AudioFormat.getSampleSizeInBits(),int,"the number of bits in each sample, or AudioSystem.NOT_SPECIFIED"
javax.sound.sampled.AudioFormat.getChannels(),int,"The number of channels (1 for mono, 2 for stereo, etc.), or AudioSystem.NOT_SPECIFIED"
javax.sound.sampled.AudioFormat.getFrameSize(),int,"the number of bytes per frame, or AudioSystem.NOT_SPECIFIED"
javax.sound.sampled.AudioFormat.getFrameRate(),float,"the number of frames per second, or AudioSystem.NOT_SPECIFIED"
javax.sound.sampled.AudioFormat.isBigEndian(),boolean,"true if the data is stored in big-endian byte order, false if little-endian"
javax.sound.sampled.AudioFormat.properties(),"Map&lt;String,Object&gt;","a Map&lt;String,Object&gt; object containing all properties. If no properties are recognized, an empty map is returned."
javax.sound.sampled.AudioFormat.getProperty(String),Object,"the value of the property with the specified key, or null if the property does not exist."
javax.sound.sampled.AudioFormat.matches(AudioFormat),boolean,"true if this format matches the one specified, false otherwise."
javax.sound.sampled.AudioFormat.toString(),String,a string that describes the format parameters
javax.sound.sampled.AudioFormat.Encoding.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.sound.sampled.AudioFormat.Encoding.hashCode(),int,a hash code value for this object.
javax.sound.sampled.AudioFormat.Encoding.toString(),String,the encoding name
javax.sound.sampled.AudioInputStream.getFormat(),AudioFormat,an audio format object describing this stream's format
javax.sound.sampled.AudioInputStream.getFrameLength(),long,the length in sample frames
javax.sound.sampled.AudioInputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached"
javax.sound.sampled.AudioInputStream.read(byte[]),int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached"
"javax.sound.sampled.AudioInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached"
javax.sound.sampled.AudioInputStream.skip(long),long,the actual number of bytes skipped
javax.sound.sampled.AudioInputStream.available(),int,the number of bytes that can be read from this audio input stream without blocking
javax.sound.sampled.AudioInputStream.close(),void,
javax.sound.sampled.AudioInputStream.mark(int),void,
javax.sound.sampled.AudioInputStream.reset(),void,
javax.sound.sampled.AudioInputStream.markSupported(),boolean,true if this stream supports the mark and reset methods; false otherwise
javax.sound.sampled.AudioSystem.getMixerInfo(),Mixer.Info[],"an array of info objects for the currently installed mixers. If no mixers are available on the system, an array of length 0 is returned."
javax.sound.sampled.AudioSystem.getMixer(Mixer.Info),Mixer,the requested mixer
javax.sound.sampled.AudioSystem.getSourceLineInfo(Line.Info),Line.Info[],"an array of Line.Info objects describing source lines matching the type requested. If no matching source lines are supported, an array of length 0 is returned."
javax.sound.sampled.AudioSystem.getTargetLineInfo(Line.Info),Line.Info[],"an array of Line.Info objects describing target lines matching the type requested. If no matching target lines are supported, an array of length 0 is returned."
javax.sound.sampled.AudioSystem.isLineSupported(Line.Info),boolean,"true if at least one matching line is supported, otherwise false"
javax.sound.sampled.AudioSystem.getLine(Line.Info),Line,a line of the requested kind
javax.sound.sampled.AudioSystem.getClip(),Clip,the desired clip object
javax.sound.sampled.AudioSystem.getClip(Mixer.Info),Clip,a clip object from the specified mixer
javax.sound.sampled.AudioSystem.getSourceDataLine(AudioFormat),SourceDataLine,the desired SourceDataLine object
"javax.sound.sampled.AudioSystem.getSourceDataLine(AudioFormat,Mixer.Info)",SourceDataLine,the desired SourceDataLine object
javax.sound.sampled.AudioSystem.getTargetDataLine(AudioFormat),TargetDataLine,the desired TargetDataLine object
"javax.sound.sampled.AudioSystem.getTargetDataLine(AudioFormat,Mixer.Info)",TargetDataLine,the desired TargetDataLine object
javax.sound.sampled.AudioSystem.getTargetEncodings(AudioFormat.Encoding),AudioFormat.Encoding[],"array of encodings. If sourceEncodingis not supported, an array of length 0 is returned. Otherwise, the array will have a length of at least 1, representing sourceEncoding (no conversion)."
javax.sound.sampled.AudioSystem.getTargetEncodings(AudioFormat),AudioFormat.Encoding[],"array of encodings. If sourceFormatis not supported, an array of length 0 is returned. Otherwise, the array will have a length of at least 1, representing the encoding of sourceFormat (no conversion)."
"javax.sound.sampled.AudioSystem.isConversionSupported(AudioFormat.Encoding,AudioFormat)",boolean,"true if the conversion is supported, otherwise false"
"javax.sound.sampled.AudioSystem.getAudioInputStream(AudioFormat.Encoding,AudioInputStream)",AudioInputStream,an audio input stream of the indicated encoding
"javax.sound.sampled.AudioSystem.getTargetFormats(AudioFormat.Encoding,AudioFormat)",AudioFormat[],"array of formats. If no formats of the specified encoding are supported, an array of length 0 is returned."
"javax.sound.sampled.AudioSystem.isConversionSupported(AudioFormat,AudioFormat)",boolean,"true if the conversion is supported, otherwise false"
"javax.sound.sampled.AudioSystem.getAudioInputStream(AudioFormat,AudioInputStream)",AudioInputStream,an audio input stream of the indicated format
javax.sound.sampled.AudioSystem.getAudioFileFormat(InputStream),AudioFileFormat,an AudioFileFormat object describing the stream's audio file format
javax.sound.sampled.AudioSystem.getAudioFileFormat(URL),AudioFileFormat,an AudioFileFormat object describing the audio file format
javax.sound.sampled.AudioSystem.getAudioFileFormat(File),AudioFileFormat,an AudioFileFormat object describing the audio file format
javax.sound.sampled.AudioSystem.getAudioInputStream(InputStream),AudioInputStream,an AudioInputStream object based on the audio file data contained in the input stream.
javax.sound.sampled.AudioSystem.getAudioInputStream(URL),AudioInputStream,an AudioInputStream object based on the audio file data pointed to by the URL
javax.sound.sampled.AudioSystem.getAudioInputStream(File),AudioInputStream,an AudioInputStream object based on the audio file data pointed to by the File
javax.sound.sampled.AudioSystem.getAudioFileTypes(),AudioFileFormat.Type[],"array of unique file types. If no file types are supported, an array of length 0 is returned."
javax.sound.sampled.AudioSystem.isFileTypeSupported(AudioFileFormat.Type),boolean,"true if the file type is supported, otherwise false"
javax.sound.sampled.AudioSystem.getAudioFileTypes(AudioInputStream),AudioFileFormat.Type[],"array of file types. If no file types are supported, an array of length 0 is returned."
"javax.sound.sampled.AudioSystem.isFileTypeSupported(AudioFileFormat.Type,AudioInputStream)",boolean,"true if the file type is supported for this audio input stream, otherwise false"
"javax.sound.sampled.AudioSystem.write(AudioInputStream,AudioFileFormat.Type,OutputStream)",int,the number of bytes written to the output stream
"javax.sound.sampled.AudioSystem.write(AudioInputStream,AudioFileFormat.Type,File)",int,the number of bytes written to the file
javax.sound.sampled.BooleanControl.setValue(boolean),void,
javax.sound.sampled.BooleanControl.getValue(),boolean,current value.
javax.sound.sampled.BooleanControl.getStateLabel(boolean),String,"the label for the specified state, such as ""true"" or ""on"" for true, or ""false"" or ""off"" for false."
javax.sound.sampled.BooleanControl.toString(),String,a string description
javax.sound.sampled.CompoundControl.getMemberControls(),Control[],the set of member controls.
javax.sound.sampled.CompoundControl.toString(),String,a string description
javax.sound.sampled.Control.getType(),Control.Type,the control's type.
javax.sound.sampled.Control.toString(),String,a String representation of the Control.
javax.sound.sampled.Control.Type.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.sound.sampled.Control.Type.hashCode(),int,a hash code value for this object.
javax.sound.sampled.Control.Type.toString(),String,the control type name
javax.sound.sampled.DataLine.Info.getFormats(),AudioFormat[],a set of supported audio formats.
javax.sound.sampled.DataLine.Info.isFormatSupported(AudioFormat),boolean,"true if the format is supported, otherwise false"
javax.sound.sampled.DataLine.Info.getMinBufferSize(),int,"minimum buffer size in bytes, or AudioSystem.NOT_SPECIFIED"
javax.sound.sampled.DataLine.Info.getMaxBufferSize(),int,"maximum buffer size in bytes, or AudioSystem.NOT_SPECIFIED"
javax.sound.sampled.DataLine.Info.matches(Line.Info),boolean,"true if this object matches the one specified, otherwise false."
javax.sound.sampled.DataLine.Info.toString(),String,a string description
javax.sound.sampled.EnumControl.setValue(Object),void,
javax.sound.sampled.EnumControl.getValue(),Object,the current value
javax.sound.sampled.EnumControl.getValues(),Object[],the set of possible values
javax.sound.sampled.EnumControl.toString(),String,a string description
javax.sound.sampled.FloatControl.setValue(float),void,
javax.sound.sampled.FloatControl.getValue(),float,the current value
javax.sound.sampled.FloatControl.getMaximum(),float,the maximum allowable value
javax.sound.sampled.FloatControl.getMinimum(),float,the minimum allowable value
javax.sound.sampled.FloatControl.getUnits(),String,"the units label, or a zero-length string if no label"
javax.sound.sampled.FloatControl.getMinLabel(),String,"the minimum value label, or a zero-length string if no label * has been set"
javax.sound.sampled.FloatControl.getMidLabel(),String,"the mid-point value label, or a zero-length string if no label * has been set"
javax.sound.sampled.FloatControl.getMaxLabel(),String,"the maximum value label, or a zero-length string if no label * has been set"
javax.sound.sampled.FloatControl.getPrecision(),float,the control's precision
javax.sound.sampled.FloatControl.getUpdatePeriod(),int,"update period in microseconds, or -1 if shifting over time is unsupported"
"javax.sound.sampled.FloatControl.shift(float,float,int)",void,
javax.sound.sampled.FloatControl.toString(),String,a string description
javax.sound.sampled.Line.Info.getLineClass(),Class&lt;?&gt;,the described line's class
javax.sound.sampled.Line.Info.matches(Line.Info),boolean,"true if the specified object matches this one, false otherwise"
javax.sound.sampled.Line.Info.toString(),String,a string description
javax.sound.sampled.LineEvent.getLine(),Line,the line responsible for this event
javax.sound.sampled.LineEvent.getType(),LineEvent.Type,"this event's type (LineEvent.Type.OPEN, LineEvent.Type.CLOSE, LineEvent.Type.START, or LineEvent.Type.STOP)"
javax.sound.sampled.LineEvent.getFramePosition(),long,the line's position as a sample frame number
javax.sound.sampled.LineEvent.toString(),String,a string describing the event.
javax.sound.sampled.LineEvent.Type.equals(Object),boolean,true if this event type is the same as obj; false otherwise
javax.sound.sampled.LineEvent.Type.hashCode(),int,a hash code value for this object.
javax.sound.sampled.LineEvent.Type.toString(),String,a string representation of the object.
javax.sound.sampled.Mixer.Info.equals(Object),boolean,true if this info object is the same as the obj argument; false otherwise
javax.sound.sampled.Mixer.Info.hashCode(),int,the hashcode for this object
javax.sound.sampled.Mixer.Info.getName(),String,a string that names the mixer
javax.sound.sampled.Mixer.Info.getVendor(),String,a string that names the mixer's vendor
javax.sound.sampled.Mixer.Info.getDescription(),String,a textual description of the mixer
javax.sound.sampled.Mixer.Info.getVersion(),String,textual version information for the mixer
javax.sound.sampled.Mixer.Info.toString(),String,a string describing the info object
javax.sound.sampled.Port.Info.getName(),String,the string that names the port
javax.sound.sampled.Port.Info.isSource(),boolean,"true if the port is a source port (such as a microphone), false if the port is a target port (such as a speaker)."
javax.sound.sampled.Port.Info.matches(Line.Info),boolean,"true if the specified object matches this one, false otherwise"
javax.sound.sampled.Port.Info.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.sound.sampled.Port.Info.hashCode(),int,a hash code value for this object.
javax.sound.sampled.Port.Info.toString(),String,a string that describes the port
javax.sound.sampled.ReverbType.getName(),String,the name of this reverb type
javax.sound.sampled.ReverbType.getEarlyReflectionDelay(),int,"early reflection delay time for this reverb type, in microseconds"
javax.sound.sampled.ReverbType.getEarlyReflectionIntensity(),float,"early reflection intensity for this reverb type, in dB"
javax.sound.sampled.ReverbType.getLateReflectionDelay(),int,"late reflection delay time for this reverb type, in microseconds"
javax.sound.sampled.ReverbType.getLateReflectionIntensity(),float,"late reflection intensity for this reverb type, in dB"
javax.sound.sampled.ReverbType.getDecayTime(),int,"the decay time of the late reflections, in microseconds"
javax.sound.sampled.ReverbType.equals(Object),boolean,true if this reverb type is the same as obj; false otherwise
javax.sound.sampled.ReverbType.hashCode(),int,a hash code value for this object.
javax.sound.sampled.ReverbType.toString(),String,reverberation type name and description
javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(InputStream),abstractAudioFileFormat,an AudioFileFormat object describing the audio file format
javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(URL),abstractAudioFileFormat,an AudioFileFormat object describing the audio file format
javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(File),abstractAudioFileFormat,an AudioFileFormat object describing the audio file format
javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(InputStream),abstractAudioInputStream,an AudioInputStream object based on the audio file data contained in the input stream.
javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(URL),abstractAudioInputStream,an AudioInputStream object based on the audio file data pointed to by the URL
javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(File),abstractAudioInputStream,an AudioInputStream object based on the audio file data pointed to by the File
javax.sound.sampled.spi.AudioFileWriter.getAudioFileTypes(),abstractAudioFileFormat.Type[],"array of file types. If no file types are supported, an array of length 0 is returned."
javax.sound.sampled.spi.AudioFileWriter.isFileTypeSupported(AudioFileFormat.Type),boolean,"true if the file type is supported, otherwise false"
javax.sound.sampled.spi.AudioFileWriter.getAudioFileTypes(AudioInputStream),abstractAudioFileFormat.Type[],"array of file types. If no file types are supported, an array of length 0 is returned."
"javax.sound.sampled.spi.AudioFileWriter.isFileTypeSupported(AudioFileFormat.Type,AudioInputStream)",boolean,"true if the file type is supported for this audio input stream, otherwise false"
"javax.sound.sampled.spi.AudioFileWriter.write(AudioInputStream,AudioFileFormat.Type,OutputStream)",abstractint,the number of bytes written to the output stream
"javax.sound.sampled.spi.AudioFileWriter.write(AudioInputStream,AudioFileFormat.Type,File)",abstractint,the number of bytes written to the file
javax.sound.sampled.spi.FormatConversionProvider.getSourceEncodings(),abstractAudioFormat.Encoding[],"array of source format encodings. If for some reason provider does not provide any conversion services, an array of length 0 is returned."
javax.sound.sampled.spi.FormatConversionProvider.getTargetEncodings(),abstractAudioFormat.Encoding[],"array of target format encodings. If for some reason provider does not provide any conversion services, an array of length 0 is returned."
javax.sound.sampled.spi.FormatConversionProvider.isSourceEncodingSupported(AudioFormat.Encoding),boolean,"true if the encoding is supported, otherwise false"
javax.sound.sampled.spi.FormatConversionProvider.isTargetEncodingSupported(AudioFormat.Encoding),boolean,"true if the encoding is supported, otherwise false"
javax.sound.sampled.spi.FormatConversionProvider.getTargetEncodings(AudioFormat),abstractAudioFormat.Encoding[],array of supported target format encodings.
"javax.sound.sampled.spi.FormatConversionProvider.isConversionSupported(AudioFormat.Encoding,AudioFormat)",boolean,"true if the conversion is supported, otherwise false"
"javax.sound.sampled.spi.FormatConversionProvider.getTargetFormats(AudioFormat.Encoding,AudioFormat)",abstractAudioFormat[],array of supported target formats.
"javax.sound.sampled.spi.FormatConversionProvider.isConversionSupported(AudioFormat,AudioFormat)",boolean,"true if the conversion is supported, otherwise false"
"javax.sound.sampled.spi.FormatConversionProvider.getAudioInputStream(AudioFormat.Encoding,AudioInputStream)",abstractAudioInputStream,stream from which processed data with the specified target encoding may be read
"javax.sound.sampled.spi.FormatConversionProvider.getAudioInputStream(AudioFormat,AudioInputStream)",abstractAudioInputStream,stream from which processed data with the specified format may be read
javax.sound.sampled.spi.MixerProvider.isMixerSupported(Mixer.Info),boolean,"true if the specified mixer is supported, otherwise false"
javax.sound.sampled.spi.MixerProvider.getMixerInfo(),abstractMixer.Info[],a set of mixer info objects
javax.sound.sampled.spi.MixerProvider.getMixer(Mixer.Info),abstractMixer,mixer instance
javax.sql.ConnectionEvent.getSQLException(),SQLException,the SQLException about to be thrown or null
javax.sql.StatementEvent.getStatement(),PreparedStatement,The PreparedStatement that is being closed or is invalid
javax.sql.StatementEvent.getSQLException(),SQLException,The SQLException the driver is about to throw
javax.sql.rowset.BaseRowSet.initParams(),void,
javax.sql.rowset.BaseRowSet.addRowSetListener(RowSetListener),void,
javax.sql.rowset.BaseRowSet.removeRowSetListener(RowSetListener),void,
javax.sql.rowset.BaseRowSet.notifyCursorMoved(),void,
javax.sql.rowset.BaseRowSet.notifyRowChanged(),void,
javax.sql.rowset.BaseRowSet.notifyRowSetChanged(),void,
javax.sql.rowset.BaseRowSet.getCommand(),String,the String that is the value for this RowSet object's command property; may be null
javax.sql.rowset.BaseRowSet.setCommand(String),void,
javax.sql.rowset.BaseRowSet.getUrl(),String,a String object that contains the JDBC URL used to establish the connection for this RowSet object; may be null (default value) if not set
javax.sql.rowset.BaseRowSet.setUrl(String),void,
javax.sql.rowset.BaseRowSet.getDataSourceName(),String,"a String object that identifies the DataSource object to be used for making a connection; if no logical name has been set, null is returned."
javax.sql.rowset.BaseRowSet.setDataSourceName(String),void,
javax.sql.rowset.BaseRowSet.getUsername(),String,the String object containing the user name that is supplied to the data source to create a connection; may be null (default value) if not set
javax.sql.rowset.BaseRowSet.setUsername(String),void,
javax.sql.rowset.BaseRowSet.getPassword(),String,the String object that represents the password that must be supplied to the database to create a connection
javax.sql.rowset.BaseRowSet.setPassword(String),void,
javax.sql.rowset.BaseRowSet.setType(int),void,
javax.sql.rowset.BaseRowSet.getType(),int,"the type of this JDBC RowSet object, which must be one of the following: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"
javax.sql.rowset.BaseRowSet.setConcurrency(int),void,
javax.sql.rowset.BaseRowSet.isReadOnly(),boolean,true if this RowSet object cannot be updated; false otherwise
javax.sql.rowset.BaseRowSet.setReadOnly(boolean),void,
javax.sql.rowset.BaseRowSet.getTransactionIsolation(),int,"one of the following constants: Connection.TRANSACTION_NONE, Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, or Connection.TRANSACTION_SERIALIZABLE"
javax.sql.rowset.BaseRowSet.setTransactionIsolation(int),void,
javax.sql.rowset.BaseRowSet.getTypeMap(),"Map&lt;String,Class&lt;?&gt;&gt;",the java.util.Map object that is the type map for this RowSet object's connection
"javax.sql.rowset.BaseRowSet.setTypeMap(Map&lt;String,Class&lt;?&gt;&gt;)",void,
javax.sql.rowset.BaseRowSet.getMaxFieldSize(),int,an int indicating the current maximum column size limit; zero means that there is no limit
javax.sql.rowset.BaseRowSet.setMaxFieldSize(int),void,
javax.sql.rowset.BaseRowSet.getMaxRows(),int,an int indicating the current maximum number of rows; zero means that there is no limit
javax.sql.rowset.BaseRowSet.setMaxRows(int),void,
javax.sql.rowset.BaseRowSet.setEscapeProcessing(boolean),void,
javax.sql.rowset.BaseRowSet.getQueryTimeout(),int,the current query timeout limit in seconds; zero means that there is no limit
javax.sql.rowset.BaseRowSet.setQueryTimeout(int),void,
javax.sql.rowset.BaseRowSet.getShowDeleted(),boolean,true if deleted rows are visible; false otherwise
javax.sql.rowset.BaseRowSet.setShowDeleted(boolean),void,
javax.sql.rowset.BaseRowSet.getEscapeProcessing(),boolean,true if escape processing is turned on; false otherwise
javax.sql.rowset.BaseRowSet.setFetchDirection(int),void,
javax.sql.rowset.BaseRowSet.getFetchDirection(),int,"one of ResultSet.FETCH_FORWARD, ResultSet.FETCH_REVERSE, or ResultSet.FETCH_UNKNOWN"
javax.sql.rowset.BaseRowSet.setFetchSize(int),void,
javax.sql.rowset.BaseRowSet.getFetchSize(),int,the number of rows suggested as the fetch size when this RowSet object needs more rows from the database
javax.sql.rowset.BaseRowSet.getConcurrency(),int,"the concurrency type for this RowSet object, which must be one of the following: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"
"javax.sql.rowset.BaseRowSet.setNull(int,int)",void,
"javax.sql.rowset.BaseRowSet.setNull(int,int,String)",void,
"javax.sql.rowset.BaseRowSet.setBoolean(int,boolean)",void,
"javax.sql.rowset.BaseRowSet.setByte(int,byte)",void,
"javax.sql.rowset.BaseRowSet.setShort(int,short)",void,
"javax.sql.rowset.BaseRowSet.setInt(int,int)",void,
"javax.sql.rowset.BaseRowSet.setLong(int,long)",void,
"javax.sql.rowset.BaseRowSet.setFloat(int,float)",void,
"javax.sql.rowset.BaseRowSet.setDouble(int,double)",void,
"javax.sql.rowset.BaseRowSet.setBigDecimal(int,BigDecimal)",void,
"javax.sql.rowset.BaseRowSet.setString(int,String)",void,
"javax.sql.rowset.BaseRowSet.setBytes(int,byte[])",void,
"javax.sql.rowset.BaseRowSet.setDate(int,Date)",void,
"javax.sql.rowset.BaseRowSet.setTime(int,Time)",void,
"javax.sql.rowset.BaseRowSet.setTimestamp(int,Timestamp)",void,
"javax.sql.rowset.BaseRowSet.setAsciiStream(int,InputStream,int)",void,
"javax.sql.rowset.BaseRowSet.setAsciiStream(int,InputStream)",void,
"javax.sql.rowset.BaseRowSet.setBinaryStream(int,InputStream,int)",void,
"javax.sql.rowset.BaseRowSet.setBinaryStream(int,InputStream)",void,
"javax.sql.rowset.BaseRowSet.setUnicodeStream(int,InputStream,int)",void,
"javax.sql.rowset.BaseRowSet.setCharacterStream(int,Reader,int)",void,
"javax.sql.rowset.BaseRowSet.setCharacterStream(int,Reader)",void,
"javax.sql.rowset.BaseRowSet.setObject(int,Object,int,int)",void,
"javax.sql.rowset.BaseRowSet.setObject(int,Object,int)",void,
"javax.sql.rowset.BaseRowSet.setObject(int,Object)",void,
"javax.sql.rowset.BaseRowSet.setRef(int,Ref)",void,
"javax.sql.rowset.BaseRowSet.setBlob(int,Blob)",void,
"javax.sql.rowset.BaseRowSet.setClob(int,Clob)",void,
"javax.sql.rowset.BaseRowSet.setArray(int,Array)",void,
"javax.sql.rowset.BaseRowSet.setDate(int,Date,Calendar)",void,
"javax.sql.rowset.BaseRowSet.setTime(int,Time,Calendar)",void,
"javax.sql.rowset.BaseRowSet.setTimestamp(int,Timestamp,Calendar)",void,
javax.sql.rowset.BaseRowSet.clearParameters(),void,
javax.sql.rowset.BaseRowSet.getParams(),Object[],an array of Object instances that includes the parameter values that may be set in this RowSet object's command; an empty array if no parameters have been set
"javax.sql.rowset.BaseRowSet.setNull(String,int)",void,
"javax.sql.rowset.BaseRowSet.setNull(String,int,String)",void,
"javax.sql.rowset.BaseRowSet.setBoolean(String,boolean)",void,
"javax.sql.rowset.BaseRowSet.setByte(String,byte)",void,
"javax.sql.rowset.BaseRowSet.setShort(String,short)",void,
"javax.sql.rowset.BaseRowSet.setInt(String,int)",void,
"javax.sql.rowset.BaseRowSet.setLong(String,long)",void,
"javax.sql.rowset.BaseRowSet.setFloat(String,float)",void,
"javax.sql.rowset.BaseRowSet.setDouble(String,double)",void,
"javax.sql.rowset.BaseRowSet.setBigDecimal(String,BigDecimal)",void,
"javax.sql.rowset.BaseRowSet.setString(String,String)",void,
"javax.sql.rowset.BaseRowSet.setBytes(String,byte[])",void,
"javax.sql.rowset.BaseRowSet.setTimestamp(String,Timestamp)",void,
"javax.sql.rowset.BaseRowSet.setAsciiStream(String,InputStream,int)",void,
"javax.sql.rowset.BaseRowSet.setBinaryStream(String,InputStream,int)",void,
"javax.sql.rowset.BaseRowSet.setCharacterStream(String,Reader,int)",void,
"javax.sql.rowset.BaseRowSet.setAsciiStream(String,InputStream)",void,
"javax.sql.rowset.BaseRowSet.setBinaryStream(String,InputStream)",void,
"javax.sql.rowset.BaseRowSet.setCharacterStream(String,Reader)",void,
"javax.sql.rowset.BaseRowSet.setNCharacterStream(int,Reader)",void,
"javax.sql.rowset.BaseRowSet.setObject(String,Object,int,int)",void,
"javax.sql.rowset.BaseRowSet.setObject(String,Object,int)",void,
"javax.sql.rowset.BaseRowSet.setObject(String,Object)",void,
"javax.sql.rowset.BaseRowSet.setBlob(int,InputStream,long)",void,
"javax.sql.rowset.BaseRowSet.setBlob(int,InputStream)",void,
"javax.sql.rowset.BaseRowSet.setBlob(String,InputStream,long)",void,
"javax.sql.rowset.BaseRowSet.setBlob(String,Blob)",void,
"javax.sql.rowset.BaseRowSet.setBlob(String,InputStream)",void,
"javax.sql.rowset.BaseRowSet.setClob(int,Reader,long)",void,
"javax.sql.rowset.BaseRowSet.setClob(int,Reader)",void,
"javax.sql.rowset.BaseRowSet.setClob(String,Reader,long)",void,
"javax.sql.rowset.BaseRowSet.setClob(String,Clob)",void,
"javax.sql.rowset.BaseRowSet.setClob(String,Reader)",void,
"javax.sql.rowset.BaseRowSet.setDate(String,Date)",void,
"javax.sql.rowset.BaseRowSet.setDate(String,Date,Calendar)",void,
"javax.sql.rowset.BaseRowSet.setTime(String,Time)",void,
"javax.sql.rowset.BaseRowSet.setTime(String,Time,Calendar)",void,
"javax.sql.rowset.BaseRowSet.setTimestamp(String,Timestamp,Calendar)",void,
"javax.sql.rowset.BaseRowSet.setSQLXML(int,SQLXML)",void,
"javax.sql.rowset.BaseRowSet.setSQLXML(String,SQLXML)",void,
"javax.sql.rowset.BaseRowSet.setRowId(int,RowId)",void,
"javax.sql.rowset.BaseRowSet.setRowId(String,RowId)",void,
"javax.sql.rowset.BaseRowSet.setNString(int,String)",void,
"javax.sql.rowset.BaseRowSet.setNString(String,String)",void,
"javax.sql.rowset.BaseRowSet.setNCharacterStream(int,Reader,long)",void,
"javax.sql.rowset.BaseRowSet.setNCharacterStream(String,Reader,long)",void,
"javax.sql.rowset.BaseRowSet.setNCharacterStream(String,Reader)",void,
"javax.sql.rowset.BaseRowSet.setNClob(String,NClob)",void,
"javax.sql.rowset.BaseRowSet.setNClob(String,Reader,long)",void,
"javax.sql.rowset.BaseRowSet.setNClob(String,Reader)",void,
"javax.sql.rowset.BaseRowSet.setNClob(int,Reader,long)",void,
"javax.sql.rowset.BaseRowSet.setNClob(int,NClob)",void,
"javax.sql.rowset.BaseRowSet.setNClob(int,Reader)",void,
"javax.sql.rowset.BaseRowSet.setURL(int,URL)",void,
javax.sql.rowset.RowSetMetaDataImpl.setColumnCount(int),void,
"javax.sql.rowset.RowSetMetaDataImpl.setAutoIncrement(int,boolean)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setCaseSensitive(int,boolean)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setSearchable(int,boolean)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setCurrency(int,boolean)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setNullable(int,int)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setSigned(int,boolean)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setColumnDisplaySize(int,int)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setColumnLabel(int,String)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setColumnName(int,String)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setSchemaName(int,String)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setPrecision(int,int)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setScale(int,int)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setTableName(int,String)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setCatalogName(int,String)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setColumnType(int,int)",void,
"javax.sql.rowset.RowSetMetaDataImpl.setColumnTypeName(int,String)",void,
javax.sql.rowset.RowSetMetaDataImpl.getColumnCount(),int,the number of columns
javax.sql.rowset.RowSetMetaDataImpl.isAutoIncrement(int),boolean,true if the column is automatically numbered; false otherwise
javax.sql.rowset.RowSetMetaDataImpl.isCaseSensitive(int),boolean,true if the column name is case sensitive; false otherwise
javax.sql.rowset.RowSetMetaDataImpl.isSearchable(int),boolean,true if a value in the designated column can be used in a WHERE clause; false otherwise
javax.sql.rowset.RowSetMetaDataImpl.isCurrency(int),boolean,true if a value in the designated column is a cash value; false otherwise
javax.sql.rowset.RowSetMetaDataImpl.isNullable(int),int,"a constant from the ResultSetMetaData interface; either columnNoNulls, columnNullable, or columnNullableUnknown"
javax.sql.rowset.RowSetMetaDataImpl.isSigned(int),boolean,true if a value in the designated column is a signed number; false otherwise
javax.sql.rowset.RowSetMetaDataImpl.getColumnDisplaySize(int),int,the maximum number of chars that can be displayed in the designated column
javax.sql.rowset.RowSetMetaDataImpl.getColumnLabel(int),String,the suggested column name to use in printouts and displays
javax.sql.rowset.RowSetMetaDataImpl.getColumnName(int),String,the column name of the designated column
javax.sql.rowset.RowSetMetaDataImpl.getSchemaName(int),String,the schema name or an empty String if no schema name is available
javax.sql.rowset.RowSetMetaDataImpl.getPrecision(int),int,the precision for values stored in the designated column
javax.sql.rowset.RowSetMetaDataImpl.getScale(int),int,the scale for values stored in the designated column
javax.sql.rowset.RowSetMetaDataImpl.getTableName(int),String,the table name or an empty String if no table name is available
javax.sql.rowset.RowSetMetaDataImpl.getCatalogName(int),String,the catalog name of the column's table or an empty String if no catalog name is available
javax.sql.rowset.RowSetMetaDataImpl.getColumnType(int),int,an int representing the SQL type of values stored in the designated column
javax.sql.rowset.RowSetMetaDataImpl.getColumnTypeName(int),String,the type name used by the data source
javax.sql.rowset.RowSetMetaDataImpl.isReadOnly(int),boolean,true if this RowSet object is read-Only and thus not updatable; false otherwise
javax.sql.rowset.RowSetMetaDataImpl.isWritable(int),boolean,true if a write operation on the designated column may will succeed; false otherwise
javax.sql.rowset.RowSetMetaDataImpl.isDefinitelyWritable(int),boolean,true if a write operation on the designated column will definitely succeed; false otherwise
javax.sql.rowset.RowSetMetaDataImpl.getColumnClassName(int),String,the fully-qualified name of the class in the Java programming language that would be used by the method RowSet.getObject to retrieve the value in the specified column. This is the class name used for custom mapping when there is a custom mapping.
javax.sql.rowset.RowSetMetaDataImpl.unwrap(Class&lt;T&gt;),&lt;T&gt;T,an object that implements the interface. May be a proxy for the actual implementing object.
javax.sql.rowset.RowSetMetaDataImpl.isWrapperFor(Class&lt;?&gt;),boolean,true if this implements the interface or directly or indirectly wraps an object that does.
javax.sql.rowset.RowSetProvider.newFactory(),RowSetFactory,
"javax.sql.rowset.RowSetProvider.newFactory(String,ClassLoader)",RowSetFactory,New instance of a RowSetFactory
javax.sql.rowset.serial.SerialArray.free(),void,
javax.sql.rowset.serial.SerialArray.getArray(),Object,a copy of this SerialArray object as an Object in the Java programming language
"javax.sql.rowset.serial.SerialArray.getArray(Map&lt;String,Class&lt;?&gt;&gt;)",Object,a copy of this SerialArray object as an Object in the Java programming language
"javax.sql.rowset.serial.SerialArray.getArray(long,int)",Object,a copy of the designated elements in this SerialArray object as an Object in the Java programming language
"javax.sql.rowset.serial.SerialArray.getArray(long,int,Map&lt;String,Class&lt;?&gt;&gt;)",Object,a copy of the designated elements in this SerialArray object as an Object in the Java programming language
javax.sql.rowset.serial.SerialArray.getBaseType(),int,"one of the constants in java.sql.Types, indicating the SQL type of the elements in this SerialArray object"
javax.sql.rowset.serial.SerialArray.getBaseTypeName(),String,the SQL type name used by the DBMS for the base type of this SerialArray object
"javax.sql.rowset.serial.SerialArray.getResultSet(long,int)",ResultSet,"a ResultSet object containing the designated elements in this SerialArray object, with a separate row for each element"
"javax.sql.rowset.serial.SerialArray.getResultSet(Map&lt;String,Class&lt;?&gt;&gt;)",ResultSet,"a ResultSet object containing all of the elements in this SerialArray object, with a separate row for each element"
javax.sql.rowset.serial.SerialArray.getResultSet(),ResultSet,"a ResultSet object containing all of the elements in this SerialArray object, with a separate row for each element"
"javax.sql.rowset.serial.SerialArray.getResultSet(long,int,Map&lt;String,Class&lt;?&gt;&gt;)",ResultSet,"a ResultSet object containing the designated elements in this SerialArray object, with a separate row for each element"
javax.sql.rowset.serial.SerialArray.equals(Object),boolean,"true if the given object represents a SerialArray equivalent to this SerialArray, false otherwise"
javax.sql.rowset.serial.SerialArray.hashCode(),int,a hash code value for this object.
javax.sql.rowset.serial.SerialArray.clone(),Object,a clone of this SerialArray
"javax.sql.rowset.serial.SerialBlob.getBytes(long,int)",byte[],"an array of bytes that is a copy of a region of this SerialBlob object, starting at the given position and containing the given number of consecutive bytes"
javax.sql.rowset.serial.SerialBlob.length(),long,a long indicating the length in bytes of this SerialBlob object's array of bytes
javax.sql.rowset.serial.SerialBlob.getBinaryStream(),InputStream,a java.io.InputStream object that contains this SerialBlob object's array of bytes
"javax.sql.rowset.serial.SerialBlob.position(byte[],long)",long,"the position in this SerialBlob object where the given pattern begins, starting at the specified position; -1 if the pattern is not found or the given starting position is out of bounds; position numbering for the return value starts at 1"
"javax.sql.rowset.serial.SerialBlob.position(Blob,long)",long,"the position in this SerialBlob object where the given Blob object begins, starting at the specified position; -1 if the pattern is not found or the given starting position is out of bounds; position numbering for the return value starts at 1"
"javax.sql.rowset.serial.SerialBlob.setBytes(long,byte[])",int,the number of bytes written
"javax.sql.rowset.serial.SerialBlob.setBytes(long,byte[],int,int)",int,the number of bytes written
javax.sql.rowset.serial.SerialBlob.setBinaryStream(long),OutputStream,a java.io.OutputStream object to which data can be written
javax.sql.rowset.serial.SerialBlob.truncate(long),void,
"javax.sql.rowset.serial.SerialBlob.getBinaryStream(long,long)",InputStream,InputStream through which the partial Blob value can be read.
javax.sql.rowset.serial.SerialBlob.free(),void,
javax.sql.rowset.serial.SerialBlob.equals(Object),boolean,"true if the given object represents a SerialBlob equivalent to this SerialBlob, false otherwise"
javax.sql.rowset.serial.SerialBlob.hashCode(),int,a hash code value for this object.
javax.sql.rowset.serial.SerialBlob.clone(),Object,a clone of this SerialBlob
javax.sql.rowset.serial.SerialClob.length(),long,a long indicating the length in characters of this SerialClob object's array of character
javax.sql.rowset.serial.SerialClob.getCharacterStream(),Reader,a java.io.Reader object containing this SerialClob object's data
javax.sql.rowset.serial.SerialClob.getAsciiStream(),InputStream,a java.io.InputStream object containing this SerialClob object's data
"javax.sql.rowset.serial.SerialClob.getSubString(long,int)",String,a String object containing a substring of this SerialClob object beginning at the given position and containing the specified number of consecutive characters
"javax.sql.rowset.serial.SerialClob.position(String,long)",long,"the position at which the given String object begins, starting the search at the specified position; -1 if the given String object is not found or the starting position is out of bounds; position numbering for the return value starts at 1"
"javax.sql.rowset.serial.SerialClob.position(Clob,long)",long,"the position at which the given Clob object begins in this SerialClob object, at or after the specified starting position"
"javax.sql.rowset.serial.SerialClob.setString(long,String)",int,the number of characters written
"javax.sql.rowset.serial.SerialClob.setString(long,String,int,int)",int,the number of characters written
javax.sql.rowset.serial.SerialClob.setAsciiStream(long),OutputStream,the stream to which ASCII encoded characters can be written
javax.sql.rowset.serial.SerialClob.setCharacterStream(long),Writer,a stream to which Unicode encoded characters can be written
javax.sql.rowset.serial.SerialClob.truncate(long),void,
"javax.sql.rowset.serial.SerialClob.getCharacterStream(long,long)",Reader,Reader through which the partial SerialClob value can be read.
javax.sql.rowset.serial.SerialClob.free(),void,
javax.sql.rowset.serial.SerialClob.equals(Object),boolean,"true if the given object represents a SerialClob equivalent to this SerialClob, false otherwise"
javax.sql.rowset.serial.SerialClob.hashCode(),int,a hash code value for this object.
javax.sql.rowset.serial.SerialClob.clone(),Object,a clone of this SerialClob
javax.sql.rowset.serial.SerialDatalink.getDatalink(),URL,a copy of this SerialDatalink object as a URL object in the Java programming language.
javax.sql.rowset.serial.SerialDatalink.equals(Object),boolean,"true if the given object represents a SerialDatalink equivalent to this SerialDatalink, false otherwise"
javax.sql.rowset.serial.SerialDatalink.hashCode(),int,a hash code value for this object.
javax.sql.rowset.serial.SerialDatalink.clone(),Object,a clone of this SerialDatalink
javax.sql.rowset.serial.SerialJavaObject.getObject(),Object,a copy of this SerialJavaObject object as an Object in the Java programming language
javax.sql.rowset.serial.SerialJavaObject.getFields(),Field[],an array of Field objects
javax.sql.rowset.serial.SerialJavaObject.equals(Object),boolean,"true if the given object represents a SerialJavaObject equivalent to this SerialJavaObject, false otherwise"
javax.sql.rowset.serial.SerialJavaObject.hashCode(),int,a hash code value for this object.
javax.sql.rowset.serial.SerialJavaObject.clone(),Object,a clone of this SerialJavaObject
javax.sql.rowset.serial.SerialRef.getBaseTypeName(),String,a string of the base type name of the Ref
"javax.sql.rowset.serial.SerialRef.getObject(Map&lt;String,Class&lt;?&gt;&gt;)",Object,an object instance resolved from the Ref reference and mapped according to the supplied type map
javax.sql.rowset.serial.SerialRef.getObject(),Object,an object instance resolved from the Ref reference
javax.sql.rowset.serial.SerialRef.setObject(Object),void,
javax.sql.rowset.serial.SerialRef.equals(Object),boolean,"true if the given object represents a SerialRef equivalent to this SerialRef, false otherwise"
javax.sql.rowset.serial.SerialRef.hashCode(),int,a hash code value for this object.
javax.sql.rowset.serial.SerialRef.clone(),Object,a clone of this SerialRef
javax.sql.rowset.serial.SerialStruct.getSQLTypeName(),String,a String object representing the SQL type name for the SQL structured type that this SerialStruct object represents
javax.sql.rowset.serial.SerialStruct.getAttributes(),Object[],"an array of Object values, with each element being an attribute of the SQL structured type that this SerialStruct object represents"
"javax.sql.rowset.serial.SerialStruct.getAttributes(Map&lt;String,Class&lt;?&gt;&gt;)",Object[],"an array of Object values, with each element being an attribute of the SQL structured type that this SerialStruct object represents"
javax.sql.rowset.serial.SerialStruct.equals(Object),boolean,"true if the given object represents a SerialStruct equivalent to this SerialStruct, false otherwise"
javax.sql.rowset.serial.SerialStruct.hashCode(),int,a hash code value for this object.
javax.sql.rowset.serial.SerialStruct.clone(),Object,a clone of this SerialStruct
javax.sql.rowset.serial.SQLInputImpl.readString(),String,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readBoolean(),boolean,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readByte(),byte,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readShort(),short,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readInt(),int,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readLong(),long,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readFloat(),float,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readDouble(),double,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readBigDecimal(),BigDecimal,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readBytes(),byte[],"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readDate(),Date,"the next attribute in this SQLInputImpl object; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readTime(),Time,"the attribute; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readTimestamp(),Timestamp,"the attribute; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readCharacterStream(),Reader,"the attribute; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readAsciiStream(),InputStream,"the attribute; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readBinaryStream(),InputStream,"the attribute; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readObject(),Object,the value at the head of the stream as an Object in the Java programming language; null if the value is SQL NULL
javax.sql.rowset.serial.SQLInputImpl.readRef(),Ref,a Ref object representing the SQL REF value at the head of the stream; if the value is SQL NULL return null
javax.sql.rowset.serial.SQLInputImpl.readBlob(),Blob,"a Blob object representing the SQL BLOB value at the head of this stream; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readClob(),Clob,"a Clob object representing the SQL CLOB value at the head of the stream; if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readArray(),Array,"an Array object representing the SQL ARRAY value at the head of the stream; * if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.wasNull(),boolean,"true if the SQL value read most recently was null; otherwise, false; by default it will return false"
javax.sql.rowset.serial.SQLInputImpl.readURL(),URL,"an URL object representing the SQL DATALINK value at the head of the stream; * if the value is SQL NULL, return null"
javax.sql.rowset.serial.SQLInputImpl.readNClob(),NClob,a NClob object representing data of the SQL NCLOB value at the head of the stream; null if the value read is SQL NULL
javax.sql.rowset.serial.SQLInputImpl.readNString(),String,"the attribute; if the value is SQL NULL, returns null"
javax.sql.rowset.serial.SQLInputImpl.readSQLXML(),SQLXML,a SQLXML object representing data of the SQL XML value at the head of the stream; null if the value read is SQL NULL
javax.sql.rowset.serial.SQLInputImpl.readRowId(),RowId,a RowId object representing data of the SQL ROWID value at the head of the stream; null if the value read is SQL NULL
javax.sql.rowset.serial.SQLOutputImpl.writeString(String),void,
javax.sql.rowset.serial.SQLOutputImpl.writeBoolean(boolean),void,
javax.sql.rowset.serial.SQLOutputImpl.writeByte(byte),void,
javax.sql.rowset.serial.SQLOutputImpl.writeShort(short),void,
javax.sql.rowset.serial.SQLOutputImpl.writeInt(int),void,
javax.sql.rowset.serial.SQLOutputImpl.writeLong(long),void,
javax.sql.rowset.serial.SQLOutputImpl.writeFloat(float),void,
javax.sql.rowset.serial.SQLOutputImpl.writeDouble(double),void,
javax.sql.rowset.serial.SQLOutputImpl.writeBigDecimal(BigDecimal),void,
javax.sql.rowset.serial.SQLOutputImpl.writeBytes(byte[]),void,
javax.sql.rowset.serial.SQLOutputImpl.writeDate(Date),void,
javax.sql.rowset.serial.SQLOutputImpl.writeTime(Time),void,
javax.sql.rowset.serial.SQLOutputImpl.writeTimestamp(Timestamp),void,
javax.sql.rowset.serial.SQLOutputImpl.writeCharacterStream(Reader),void,
javax.sql.rowset.serial.SQLOutputImpl.writeAsciiStream(InputStream),void,
javax.sql.rowset.serial.SQLOutputImpl.writeBinaryStream(InputStream),void,
javax.sql.rowset.serial.SQLOutputImpl.writeObject(SQLData),void,
javax.sql.rowset.serial.SQLOutputImpl.writeRef(Ref),void,
javax.sql.rowset.serial.SQLOutputImpl.writeBlob(Blob),void,
javax.sql.rowset.serial.SQLOutputImpl.writeClob(Clob),void,
javax.sql.rowset.serial.SQLOutputImpl.writeStruct(Struct),void,
javax.sql.rowset.serial.SQLOutputImpl.writeArray(Array),void,
javax.sql.rowset.serial.SQLOutputImpl.writeURL(URL),void,
javax.sql.rowset.serial.SQLOutputImpl.writeNString(String),void,
javax.sql.rowset.serial.SQLOutputImpl.writeNClob(NClob),void,
javax.sql.rowset.serial.SQLOutputImpl.writeRowId(RowId),void,
javax.sql.rowset.serial.SQLOutputImpl.writeSQLXML(SQLXML),void,
javax.sql.rowset.spi.SyncFactory.registerProvider(String),void,
javax.sql.rowset.spi.SyncFactory.getSyncFactory(),SyncFactory,the SyncFactory instance
javax.sql.rowset.spi.SyncFactory.unregisterProvider(String),void,
javax.sql.rowset.spi.SyncFactory.getInstance(String),SyncProvider,a SyncProvider implementation
javax.sql.rowset.spi.SyncFactory.getRegisteredProviders(),Enumeration&lt;SyncProvider&gt;,Enumeration A enumeration of available synchronization providers that are registered with this Factory
javax.sql.rowset.spi.SyncFactory.setLogger(Logger),void,
"javax.sql.rowset.spi.SyncFactory.setLogger(Logger,Level)",void,
javax.sql.rowset.spi.SyncFactory.getLogger(),Logger,The Logger that has been specified for use by SyncProvider implementations
javax.sql.rowset.spi.SyncFactory.setJNDIContext(Context),void,
javax.sql.rowset.spi.SyncProvider.getProviderID(),abstractString,a String object with the fully qualified class name of this SyncProvider object
javax.sql.rowset.spi.SyncProvider.getRowSetReader(),abstractRowSetReader,a javax.sql.RowSetReader object
javax.sql.rowset.spi.SyncProvider.getRowSetWriter(),abstractRowSetWriter,a javax.sql.RowSetWriter object
javax.sql.rowset.spi.SyncProvider.getProviderGrade(),abstractint,"an int that is one of the following constants: SyncProvider.GRADE_NONE, SyncProvider.GRADE_CHECK_MODIFIED_AT_COMMIT, SyncProvider.GRADE_CHECK_ALL_AT_COMMIT, SyncProvider.GRADE_LOCK_WHEN_MODIFIED, SyncProvider.GRADE_LOCK_WHEN_LOADED"
javax.sql.rowset.spi.SyncProvider.setDataSourceLock(int),abstractvoid,
javax.sql.rowset.spi.SyncProvider.getDataSourceLock(),abstractint,"a constant indicating the current level of data source lock active in this SyncProvider object; one of the following: SyncProvider.DATASOURCE_NO_LOCK, SyncProvider.DATASOURCE_ROW_LOCK, SyncProvider.DATASOURCE_TABLE_LOCK, SyncProvider.DATASOURCE_DB_LOCK"
javax.sql.rowset.spi.SyncProvider.supportsUpdatableView(),abstractint,"an int saying whether this SyncProvider object supports updating an SQL VIEW; one of the following: SyncProvider.UPDATABLE_VIEW_SYNC, SyncProvider.NONUPDATABLE_VIEW_SYNC"
javax.sql.rowset.spi.SyncProvider.getVersion(),abstractString,a String detailing the release version of the SyncProvider implementation
javax.sql.rowset.spi.SyncProvider.getVendor(),abstractString,a String detailing the vendor name of this SyncProvider implementation
javax.swing.AbstractAction.getValue(String),Object,"the binding Object stored with this key; if there are no keys, it will return null"
"javax.swing.AbstractAction.putValue(String,Object)",void,
javax.swing.AbstractAction.isEnabled(),boolean,"true if the action is enabled, false otherwise"
javax.swing.AbstractAction.setEnabled(boolean),void,
javax.swing.AbstractAction.getKeys(),Object[],"an array of key objects, or null if no keys have values set"
"javax.swing.AbstractAction.firePropertyChange(String,Object,Object)",void,
javax.swing.AbstractAction.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.AbstractAction.removePropertyChangeListener(PropertyChangeListener),void,
javax.swing.AbstractAction.getPropertyChangeListeners(),PropertyChangeListener[],all of the PropertyChangeListeners added or an empty array if no listeners have been added
javax.swing.AbstractAction.clone(),Object,a clone of this instance.
javax.swing.AbstractButton.setHideActionText(boolean),void,
javax.swing.AbstractButton.getHideActionText(),boolean,true if the button's text property should not reflect that of the Action; the default is false
javax.swing.AbstractButton.getText(),String,the buttons text
javax.swing.AbstractButton.setText(String),void,
javax.swing.AbstractButton.isSelected(),boolean,"true if the toggle button is selected, otherwise false"
javax.swing.AbstractButton.setSelected(boolean),void,
javax.swing.AbstractButton.doClick(),void,
javax.swing.AbstractButton.doClick(int),void,
javax.swing.AbstractButton.setMargin(Insets),void,
javax.swing.AbstractButton.getMargin(),Insets,an Insets object specifying the margin between the botton's border and the label
javax.swing.AbstractButton.getIcon(),Icon,the default Icon
javax.swing.AbstractButton.setIcon(Icon),void,
javax.swing.AbstractButton.getPressedIcon(),Icon,the pressedIcon property
javax.swing.AbstractButton.setPressedIcon(Icon),void,
javax.swing.AbstractButton.getSelectedIcon(),Icon,the selectedIcon property
javax.swing.AbstractButton.setSelectedIcon(Icon),void,
javax.swing.AbstractButton.getRolloverIcon(),Icon,the rolloverIcon property
javax.swing.AbstractButton.setRolloverIcon(Icon),void,
javax.swing.AbstractButton.getRolloverSelectedIcon(),Icon,the rolloverSelectedIcon property
javax.swing.AbstractButton.setRolloverSelectedIcon(Icon),void,
javax.swing.AbstractButton.getDisabledIcon(),Icon,the disabledIcon property
javax.swing.AbstractButton.setDisabledIcon(Icon),void,
javax.swing.AbstractButton.getDisabledSelectedIcon(),Icon,the disabledSelectedIcon property
javax.swing.AbstractButton.setDisabledSelectedIcon(Icon),void,
javax.swing.AbstractButton.getVerticalAlignment(),int,
javax.swing.AbstractButton.setVerticalAlignment(int),void,
javax.swing.AbstractButton.getHorizontalAlignment(),int,
javax.swing.AbstractButton.setHorizontalAlignment(int),void,
javax.swing.AbstractButton.getVerticalTextPosition(),int,
javax.swing.AbstractButton.setVerticalTextPosition(int),void,
javax.swing.AbstractButton.getHorizontalTextPosition(),int,
javax.swing.AbstractButton.setHorizontalTextPosition(int),void,
javax.swing.AbstractButton.getIconTextGap(),int,an int equal to the number of pixels between the text and the icon.
javax.swing.AbstractButton.setIconTextGap(int),void,
"javax.swing.AbstractButton.checkHorizontalKey(int,String)",int,
"javax.swing.AbstractButton.checkVerticalKey(int,String)",int,
javax.swing.AbstractButton.removeNotify(),void,
javax.swing.AbstractButton.setActionCommand(String),void,
javax.swing.AbstractButton.getActionCommand(),String,the action command for this button
javax.swing.AbstractButton.setAction(Action),void,
javax.swing.AbstractButton.getAction(),Action,"the Action for this ActionEvent source, or null"
javax.swing.AbstractButton.configurePropertiesFromAction(Action),void,
"javax.swing.AbstractButton.actionPropertyChanged(Action,String)",void,
javax.swing.AbstractButton.createActionPropertyChangeListener(Action),PropertyChangeListener,
javax.swing.AbstractButton.isBorderPainted(),boolean,the value of the borderPainted property
javax.swing.AbstractButton.setBorderPainted(boolean),void,
javax.swing.AbstractButton.paintBorder(Graphics),void,
javax.swing.AbstractButton.isFocusPainted(),boolean,the paintFocus property
javax.swing.AbstractButton.setFocusPainted(boolean),void,
javax.swing.AbstractButton.isContentAreaFilled(),boolean,the contentAreaFilled property
javax.swing.AbstractButton.setContentAreaFilled(boolean),void,
javax.swing.AbstractButton.isRolloverEnabled(),boolean,the value of the rolloverEnabled property
javax.swing.AbstractButton.setRolloverEnabled(boolean),void,
javax.swing.AbstractButton.getMnemonic(),int,the keyboard mnemonic from the model
javax.swing.AbstractButton.setMnemonic(int),void,
javax.swing.AbstractButton.setMnemonic(char),void,
javax.swing.AbstractButton.setDisplayedMnemonicIndex(int),void,
javax.swing.AbstractButton.getDisplayedMnemonicIndex(),int,index representing mnemonic character
javax.swing.AbstractButton.setMultiClickThreshhold(long),void,
javax.swing.AbstractButton.getMultiClickThreshhold(),long,the amount of time required between mouse press events to generate corresponding action events
javax.swing.AbstractButton.getModel(),ButtonModel,the model property
javax.swing.AbstractButton.setModel(ButtonModel),void,
javax.swing.AbstractButton.getUI(),ButtonUI,the ButtonUI object
javax.swing.AbstractButton.setUI(ButtonUI),void,
javax.swing.AbstractButton.updateUI(),void,
"javax.swing.AbstractButton.addImpl(Component,Object,int)",void,
javax.swing.AbstractButton.setLayout(LayoutManager),void,
javax.swing.AbstractButton.addChangeListener(ChangeListener),void,
javax.swing.AbstractButton.removeChangeListener(ChangeListener),void,
javax.swing.AbstractButton.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.AbstractButton.fireStateChanged(),void,
javax.swing.AbstractButton.addActionListener(ActionListener),void,
javax.swing.AbstractButton.removeActionListener(ActionListener),void,
javax.swing.AbstractButton.getActionListeners(),ActionListener[],all of the ActionListeners added or an empty array if no listeners have been added
javax.swing.AbstractButton.createChangeListener(),ChangeListener,the new ChangeListener
javax.swing.AbstractButton.fireActionPerformed(ActionEvent),void,
javax.swing.AbstractButton.fireItemStateChanged(ItemEvent),void,
javax.swing.AbstractButton.createActionListener(),ActionListener,
javax.swing.AbstractButton.createItemListener(),ItemListener,
javax.swing.AbstractButton.setEnabled(boolean),void,
javax.swing.AbstractButton.getLabel(),String,a String containing the label
javax.swing.AbstractButton.setLabel(String),void,
javax.swing.AbstractButton.addItemListener(ItemListener),void,
javax.swing.AbstractButton.removeItemListener(ItemListener),void,
javax.swing.AbstractButton.getItemListeners(),ItemListener[],all of the ItemListeners added or an empty array if no listeners have been added
javax.swing.AbstractButton.getSelectedObjects(),Object[],"an array containing 1 Object: the text of the button, if the item is selected; otherwise null"
"javax.swing.AbstractButton.init(String,Icon)",void,
"javax.swing.AbstractButton.imageUpdate(Image,int,int,int,int,int)",boolean,false if the infoflags indicate that the image is completely loaded; true otherwise.
javax.swing.AbstractButton.paramString(),String,a string representation of this AbstractButton
javax.swing.AbstractCellEditor.isCellEditable(EventObject),boolean,true
javax.swing.AbstractCellEditor.shouldSelectCell(EventObject),boolean,true
javax.swing.AbstractCellEditor.stopCellEditing(),boolean,true
javax.swing.AbstractCellEditor.cancelCellEditing(),void,
javax.swing.AbstractCellEditor.addCellEditorListener(CellEditorListener),void,
javax.swing.AbstractCellEditor.removeCellEditorListener(CellEditorListener),void,
javax.swing.AbstractCellEditor.getCellEditorListeners(),CellEditorListener[],all of the CellEditorListeners added or an empty array if no listeners have been added
javax.swing.AbstractCellEditor.fireEditingStopped(),void,
javax.swing.AbstractCellEditor.fireEditingCanceled(),void,
javax.swing.AbstractListModel.addListDataListener(ListDataListener),void,
javax.swing.AbstractListModel.removeListDataListener(ListDataListener),void,
javax.swing.AbstractListModel.getListDataListeners(),ListDataListener[],"all of this model's ListDataListeners, or an empty array if no list data listeners are currently registered"
"javax.swing.AbstractListModel.fireContentsChanged(Object,int,int)",void,
"javax.swing.AbstractListModel.fireIntervalAdded(Object,int,int)",void,
"javax.swing.AbstractListModel.fireIntervalRemoved(Object,int,int)",void,
javax.swing.AbstractListModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this model, or an empty array if no such listeners have been added"
javax.swing.AbstractSpinnerModel.addChangeListener(ChangeListener),void,
javax.swing.AbstractSpinnerModel.removeChangeListener(ChangeListener),void,
javax.swing.AbstractSpinnerModel.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.AbstractSpinnerModel.fireStateChanged(),void,
javax.swing.AbstractSpinnerModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],all of the objects receiving listenerType notifications from this model
javax.swing.ActionMap.setParent(ActionMap),void,
javax.swing.ActionMap.getParent(),ActionMap,"the ActionMap that is the parent of this one, or null if this ActionMap has no parent"
"javax.swing.ActionMap.put(Object,Action)",void,
javax.swing.ActionMap.get(Object),Action,
javax.swing.ActionMap.remove(Object),void,
javax.swing.ActionMap.clear(),void,
javax.swing.ActionMap.keys(),Object[],
javax.swing.ActionMap.size(),int,the number of bindings in this ActionMap
javax.swing.ActionMap.allKeys(),Object[],
javax.swing.BorderFactory.createLineBorder(Color),Border,the Border object
"javax.swing.BorderFactory.createLineBorder(Color,int)",Border,the Border object
"javax.swing.BorderFactory.createLineBorder(Color,int,boolean)",Border,the Border object
javax.swing.BorderFactory.createRaisedBevelBorder(),Border,the Border object
javax.swing.BorderFactory.createLoweredBevelBorder(),Border,the Border object
javax.swing.BorderFactory.createBevelBorder(int),Border,the Border object
"javax.swing.BorderFactory.createBevelBorder(int,Color,Color)",Border,the Border object
"javax.swing.BorderFactory.createBevelBorder(int,Color,Color,Color,Color)",Border,the Border object
javax.swing.BorderFactory.createRaisedSoftBevelBorder(),Border,the Border object
javax.swing.BorderFactory.createLoweredSoftBevelBorder(),Border,the Border object
javax.swing.BorderFactory.createSoftBevelBorder(int),Border,the Border object or null if the specified type is not valid
"javax.swing.BorderFactory.createSoftBevelBorder(int,Color,Color)",Border,the Border object
"javax.swing.BorderFactory.createSoftBevelBorder(int,Color,Color,Color,Color)",Border,the Border object
javax.swing.BorderFactory.createEtchedBorder(),Border,the Border object
"javax.swing.BorderFactory.createEtchedBorder(Color,Color)",Border,the Border object
javax.swing.BorderFactory.createEtchedBorder(int),Border,the Border object
"javax.swing.BorderFactory.createEtchedBorder(int,Color,Color)",Border,the Border object
javax.swing.BorderFactory.createTitledBorder(String),TitledBorder,the TitledBorder object
javax.swing.BorderFactory.createTitledBorder(Border),TitledBorder,the TitledBorder object
"javax.swing.BorderFactory.createTitledBorder(Border,String)",TitledBorder,the TitledBorder object
"javax.swing.BorderFactory.createTitledBorder(Border,String,int,int)",TitledBorder,
"javax.swing.BorderFactory.createTitledBorder(Border,String,int,int,Font)",TitledBorder,
"javax.swing.BorderFactory.createTitledBorder(Border,String,int,int,Font,Color)",TitledBorder,
javax.swing.BorderFactory.createEmptyBorder(),Border,the Border object
"javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)",Border,the Border object
javax.swing.BorderFactory.createCompoundBorder(),CompoundBorder,the CompoundBorder object
"javax.swing.BorderFactory.createCompoundBorder(Border,Border)",CompoundBorder,the CompoundBorder object
"javax.swing.BorderFactory.createMatteBorder(int,int,int,int,Color)",MatteBorder,the MatteBorder object
"javax.swing.BorderFactory.createMatteBorder(int,int,int,int,Icon)",MatteBorder,the MatteBorder object
javax.swing.BorderFactory.createStrokeBorder(BasicStroke),Border,the Border object
"javax.swing.BorderFactory.createStrokeBorder(BasicStroke,Paint)",Border,the Border object
javax.swing.BorderFactory.createDashedBorder(Paint),Border,the Border object
"javax.swing.BorderFactory.createDashedBorder(Paint,float,float)",Border,the Border object
"javax.swing.BorderFactory.createDashedBorder(Paint,float,float,float,boolean)",Border,the Border object
javax.swing.Box.createHorizontalBox(),Box,the box
javax.swing.Box.createVerticalBox(),Box,the box
javax.swing.Box.createRigidArea(Dimension),Component,the component
javax.swing.Box.createHorizontalStrut(int),Component,the component
javax.swing.Box.createVerticalStrut(int),Component,the component
javax.swing.Box.createGlue(),Component,the component
javax.swing.Box.createHorizontalGlue(),Component,the component
javax.swing.Box.createVerticalGlue(),Component,the component
javax.swing.Box.setLayout(LayoutManager),void,
javax.swing.Box.paintComponent(Graphics),void,
javax.swing.Box.getAccessibleContext(),AccessibleContext,an AccessibleBox that serves as the AccessibleContext of this Box
"javax.swing.Box.Filler.changeShape(Dimension,Dimension,Dimension)",void,
javax.swing.Box.Filler.paintComponent(Graphics),void,
javax.swing.Box.Filler.getAccessibleContext(),AccessibleContext,an AccessibleBoxFiller that serves as the AccessibleContext of this Box.Filler.
javax.swing.BoxLayout.getTarget(),Container,the container that uses this layout manager
javax.swing.BoxLayout.getAxis(),int,the axis that was used to lay out components
javax.swing.BoxLayout.invalidateLayout(Container),void,
"javax.swing.BoxLayout.addLayoutComponent(String,Component)",void,
javax.swing.BoxLayout.removeLayoutComponent(Component),void,
"javax.swing.BoxLayout.addLayoutComponent(Component,Object)",void,
javax.swing.BoxLayout.preferredLayoutSize(Container),Dimension,the dimensions &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE
javax.swing.BoxLayout.minimumLayoutSize(Container),Dimension,the dimensions &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE
javax.swing.BoxLayout.maximumLayoutSize(Container),Dimension,the dimensions &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE
javax.swing.BoxLayout.getLayoutAlignmentX(Container),float,the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f
javax.swing.BoxLayout.getLayoutAlignmentY(Container),float,the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f
javax.swing.BoxLayout.layoutContainer(Container),void,
javax.swing.ButtonGroup.add(AbstractButton),void,
javax.swing.ButtonGroup.remove(AbstractButton),void,
javax.swing.ButtonGroup.clearSelection(),void,
javax.swing.ButtonGroup.getElements(),Enumeration&lt;AbstractButton&gt;,an Enumeration of the buttons in this group
javax.swing.ButtonGroup.getSelection(),ButtonModel,the selected button model
"javax.swing.ButtonGroup.setSelected(ButtonModel,boolean)",void,
javax.swing.ButtonGroup.isSelected(ButtonModel),boolean,"true if the button is selected, otherwise returns false"
javax.swing.ButtonGroup.getButtonCount(),int,the button count
javax.swing.CellRendererPane.invalidate(),void,
javax.swing.CellRendererPane.paint(Graphics),void,
javax.swing.CellRendererPane.update(Graphics),void,
"javax.swing.CellRendererPane.addImpl(Component,Object,int)",void,
"javax.swing.CellRendererPane.paintComponent(Graphics,Component,Container,int,int,int,int,boolean)",void,
"javax.swing.CellRendererPane.paintComponent(Graphics,Component,Container,int,int,int,int)",void,
"javax.swing.CellRendererPane.paintComponent(Graphics,Component,Container,Rectangle)",void,
javax.swing.CellRendererPane.getAccessibleContext(),AccessibleContext,an AccessibleCellRendererPane that serves as the AccessibleContext of this CellRendererPane
javax.swing.ComponentInputMap.setParent(InputMap),void,
javax.swing.ComponentInputMap.getComponent(),JComponent,
"javax.swing.ComponentInputMap.put(KeyStroke,Object)",void,
javax.swing.ComponentInputMap.remove(KeyStroke),void,
javax.swing.ComponentInputMap.clear(),void,
javax.swing.DebugGraphics.create(),Graphics,a new graphics context that is a copy of this graphics context.
"javax.swing.DebugGraphics.create(int,int,int,int)",Graphics,a new graphics context.
javax.swing.DebugGraphics.setFlashColor(Color),void,
javax.swing.DebugGraphics.flashColor(),Color,
javax.swing.DebugGraphics.setFlashTime(int),void,
javax.swing.DebugGraphics.flashTime(),int,
javax.swing.DebugGraphics.setFlashCount(int),void,
javax.swing.DebugGraphics.flashCount(),int,
javax.swing.DebugGraphics.setLogStream(PrintStream),void,
javax.swing.DebugGraphics.logStream(),PrintStream,
javax.swing.DebugGraphics.setFont(Font),void,
javax.swing.DebugGraphics.getFont(),Font,this graphics context's current font.
javax.swing.DebugGraphics.setColor(Color),void,
javax.swing.DebugGraphics.getColor(),Color,this graphics context's current color.
javax.swing.DebugGraphics.getFontMetrics(),FontMetrics,the font metrics of this graphics context's current font.
javax.swing.DebugGraphics.getFontMetrics(Font),FontMetrics,the font metrics for the specified font.
"javax.swing.DebugGraphics.translate(int,int)",void,
javax.swing.DebugGraphics.setPaintMode(),void,
javax.swing.DebugGraphics.setXORMode(Color),void,
javax.swing.DebugGraphics.getClipBounds(),Rectangle,"the bounding rectangle of the current clipping area, or null if no clip is set."
"javax.swing.DebugGraphics.clipRect(int,int,int,int)",void,
"javax.swing.DebugGraphics.setClip(int,int,int,int)",void,
javax.swing.DebugGraphics.getClip(),Shape,"a Shape object representing the current clipping area, or null if no clip is set."
javax.swing.DebugGraphics.setClip(Shape),void,
"javax.swing.DebugGraphics.drawRect(int,int,int,int)",void,
"javax.swing.DebugGraphics.fillRect(int,int,int,int)",void,
"javax.swing.DebugGraphics.clearRect(int,int,int,int)",void,
"javax.swing.DebugGraphics.drawRoundRect(int,int,int,int,int,int)",void,
"javax.swing.DebugGraphics.fillRoundRect(int,int,int,int,int,int)",void,
"javax.swing.DebugGraphics.drawLine(int,int,int,int)",void,
"javax.swing.DebugGraphics.draw3DRect(int,int,int,int,boolean)",void,
"javax.swing.DebugGraphics.fill3DRect(int,int,int,int,boolean)",void,
"javax.swing.DebugGraphics.drawOval(int,int,int,int)",void,
"javax.swing.DebugGraphics.fillOval(int,int,int,int)",void,
"javax.swing.DebugGraphics.drawArc(int,int,int,int,int,int)",void,
"javax.swing.DebugGraphics.fillArc(int,int,int,int,int,int)",void,
"javax.swing.DebugGraphics.drawPolyline(int[],int[],int)",void,
"javax.swing.DebugGraphics.drawPolygon(int[],int[],int)",void,
"javax.swing.DebugGraphics.fillPolygon(int[],int[],int)",void,
"javax.swing.DebugGraphics.drawString(String,int,int)",void,
"javax.swing.DebugGraphics.drawString(AttributedCharacterIterator,int,int)",void,
"javax.swing.DebugGraphics.drawBytes(byte[],int,int,int,int)",void,
"javax.swing.DebugGraphics.drawChars(char[],int,int,int,int)",void,
"javax.swing.DebugGraphics.drawImage(Image,int,int,ImageObserver)",boolean,false if the image pixels are still changing; true otherwise.
"javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,ImageObserver)",boolean,false if the image pixels are still changing; true otherwise.
"javax.swing.DebugGraphics.drawImage(Image,int,int,Color,ImageObserver)",boolean,false if the image pixels are still changing; true otherwise.
"javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,Color,ImageObserver)",boolean,false if the image pixels are still changing; true otherwise.
"javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,int,int,int,int,ImageObserver)",boolean,false if the image pixels are still changing; true otherwise.
"javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,int,int,int,int,Color,ImageObserver)",boolean,false if the image pixels are still changing; true otherwise.
"javax.swing.DebugGraphics.copyArea(int,int,int,int,int,int)",void,
javax.swing.DebugGraphics.dispose(),void,
javax.swing.DebugGraphics.isDrawingBuffer(),boolean,true if this object is drawing from a Buffer
javax.swing.DebugGraphics.setDebugOptions(int),void,
javax.swing.DebugGraphics.getDebugOptions(),int,
javax.swing.DefaultBoundedRangeModel.getValue(),int,the model's current value
javax.swing.DefaultBoundedRangeModel.getExtent(),int,the model's extent
javax.swing.DefaultBoundedRangeModel.getMinimum(),int,the model's minimum
javax.swing.DefaultBoundedRangeModel.getMaximum(),int,the model's maximum
javax.swing.DefaultBoundedRangeModel.setValue(int),void,
javax.swing.DefaultBoundedRangeModel.setExtent(int),void,
javax.swing.DefaultBoundedRangeModel.setMinimum(int),void,
javax.swing.DefaultBoundedRangeModel.setMaximum(int),void,
javax.swing.DefaultBoundedRangeModel.setValueIsAdjusting(boolean),void,
javax.swing.DefaultBoundedRangeModel.getValueIsAdjusting(),boolean,the value of the valueIsAdjusting property
"javax.swing.DefaultBoundedRangeModel.setRangeProperties(int,int,int,int,boolean)",void,
javax.swing.DefaultBoundedRangeModel.addChangeListener(ChangeListener),void,
javax.swing.DefaultBoundedRangeModel.removeChangeListener(ChangeListener),void,
javax.swing.DefaultBoundedRangeModel.getChangeListeners(),ChangeListener[],all of this model's ChangeListeners or an empty array if no change listeners are currently registered
javax.swing.DefaultBoundedRangeModel.fireStateChanged(),void,
javax.swing.DefaultBoundedRangeModel.toString(),String,a string representation of the object.
javax.swing.DefaultBoundedRangeModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this model, or an empty array if no such listeners have been added"
javax.swing.DefaultButtonModel.setActionCommand(String),void,
javax.swing.DefaultButtonModel.getActionCommand(),String,the String that identifies the generated event
javax.swing.DefaultButtonModel.isArmed(),boolean,"true if the button is armed, and ready to be triggered"
javax.swing.DefaultButtonModel.isSelected(),boolean,true if the button is selected
javax.swing.DefaultButtonModel.isEnabled(),boolean,true if the button is enabled
javax.swing.DefaultButtonModel.isPressed(),boolean,true if the button is pressed
javax.swing.DefaultButtonModel.isRollover(),boolean,true if the mouse is over the button
javax.swing.DefaultButtonModel.setArmed(boolean),void,
javax.swing.DefaultButtonModel.setEnabled(boolean),void,
javax.swing.DefaultButtonModel.setSelected(boolean),void,
javax.swing.DefaultButtonModel.setPressed(boolean),void,
javax.swing.DefaultButtonModel.setRollover(boolean),void,
javax.swing.DefaultButtonModel.setMnemonic(int),void,
javax.swing.DefaultButtonModel.getMnemonic(),int,an int specifying the accelerator key
javax.swing.DefaultButtonModel.addChangeListener(ChangeListener),void,
javax.swing.DefaultButtonModel.removeChangeListener(ChangeListener),void,
javax.swing.DefaultButtonModel.getChangeListeners(),ChangeListener[],all of this model's ChangeListeners or an empty array if no change listeners are currently registered
javax.swing.DefaultButtonModel.fireStateChanged(),void,
javax.swing.DefaultButtonModel.addActionListener(ActionListener),void,
javax.swing.DefaultButtonModel.removeActionListener(ActionListener),void,
javax.swing.DefaultButtonModel.getActionListeners(),ActionListener[],all of this model's ActionListeners or an empty array if no action listeners are currently registered
javax.swing.DefaultButtonModel.fireActionPerformed(ActionEvent),void,
javax.swing.DefaultButtonModel.addItemListener(ItemListener),void,
javax.swing.DefaultButtonModel.removeItemListener(ItemListener),void,
javax.swing.DefaultButtonModel.getItemListeners(),ItemListener[],all of this model's ItemListeners or an empty array if no item listeners are currently registered
javax.swing.DefaultButtonModel.fireItemStateChanged(ItemEvent),void,
javax.swing.DefaultButtonModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this model, or an empty array if no such listeners have been added"
javax.swing.DefaultButtonModel.getSelectedObjects(),Object[],
javax.swing.DefaultButtonModel.setGroup(ButtonGroup),void,
javax.swing.DefaultButtonModel.getGroup(),ButtonGroup,the ButtonGroup that the button belongs to
javax.swing.DefaultCellEditor.getComponent(),Component,the editor Component
javax.swing.DefaultCellEditor.setClickCountToStart(int),void,
javax.swing.DefaultCellEditor.getClickCountToStart(),int,the number of clicks needed to start editing
javax.swing.DefaultCellEditor.getCellEditorValue(),Object,the value contained in the editor
javax.swing.DefaultCellEditor.isCellEditable(EventObject),boolean,true
javax.swing.DefaultCellEditor.shouldSelectCell(EventObject),boolean,true
javax.swing.DefaultCellEditor.stopCellEditing(),boolean,true
javax.swing.DefaultCellEditor.cancelCellEditing(),void,
"javax.swing.DefaultCellEditor.getTreeCellEditorComponent(JTree,Object,boolean,boolean,boolean,int)",Component,the component for editing
"javax.swing.DefaultCellEditor.getTableCellEditorComponent(JTable,Object,boolean,int,int)",Component,the component for editing
javax.swing.DefaultComboBoxModel.setSelectedItem(Object),void,
javax.swing.DefaultComboBoxModel.getSelectedItem(),Object,The selected item or null if there is no selection
javax.swing.DefaultComboBoxModel.getSize(),int,the length of the list
javax.swing.DefaultComboBoxModel.getElementAt(int),E,the value at index
javax.swing.DefaultComboBoxModel.getIndexOf(Object),int,"an int representing the index position, where 0 is the first position"
javax.swing.DefaultComboBoxModel.addElement(E),void,
"javax.swing.DefaultComboBoxModel.insertElementAt(E,int)",void,
javax.swing.DefaultComboBoxModel.removeElementAt(int),void,
javax.swing.DefaultComboBoxModel.removeElement(Object),void,
javax.swing.DefaultComboBoxModel.removeAllElements(),void,
javax.swing.DefaultDesktopManager.openFrame(JInternalFrame),void,
javax.swing.DefaultDesktopManager.closeFrame(JInternalFrame),void,
javax.swing.DefaultDesktopManager.maximizeFrame(JInternalFrame),void,
javax.swing.DefaultDesktopManager.minimizeFrame(JInternalFrame),void,
javax.swing.DefaultDesktopManager.iconifyFrame(JInternalFrame),void,
javax.swing.DefaultDesktopManager.deiconifyFrame(JInternalFrame),void,
javax.swing.DefaultDesktopManager.activateFrame(JInternalFrame),void,
javax.swing.DefaultDesktopManager.deactivateFrame(JInternalFrame),void,
javax.swing.DefaultDesktopManager.beginDraggingFrame(JComponent),void,
"javax.swing.DefaultDesktopManager.dragFrame(JComponent,int,int)",void,
javax.swing.DefaultDesktopManager.endDraggingFrame(JComponent),void,
"javax.swing.DefaultDesktopManager.beginResizingFrame(JComponent,int)",void,
"javax.swing.DefaultDesktopManager.resizeFrame(JComponent,int,int,int,int)",void,
javax.swing.DefaultDesktopManager.endResizingFrame(JComponent),void,
"javax.swing.DefaultDesktopManager.setBoundsForFrame(JComponent,int,int,int,int)",void,
javax.swing.DefaultDesktopManager.removeIconFor(JInternalFrame),void,
javax.swing.DefaultDesktopManager.getBoundsForIconOf(JInternalFrame),Rectangle,
"javax.swing.DefaultDesktopManager.setPreviousBounds(JInternalFrame,Rectangle)",void,
javax.swing.DefaultDesktopManager.getPreviousBounds(JInternalFrame),Rectangle,the normal bounds of the component
"javax.swing.DefaultDesktopManager.setWasIcon(JInternalFrame,Boolean)",void,
javax.swing.DefaultDesktopManager.wasIcon(JInternalFrame),boolean,true if the component has been iconized; otherwise returns false
"javax.swing.DefaultFocusManager.getComponentAfter(Container,Component)",Component,
"javax.swing.DefaultFocusManager.getComponentBefore(Container,Component)",Component,
javax.swing.DefaultFocusManager.getFirstComponent(Container),Component,
javax.swing.DefaultFocusManager.getLastComponent(Container),Component,
"javax.swing.DefaultFocusManager.compareTabOrder(Component,Component)",boolean,
"javax.swing.DefaultListCellRenderer.getListCellRendererComponent(JList&lt;?&gt;,Object,int,boolean,boolean)",Component,A component whose paint() method will render the specified value.
javax.swing.DefaultListCellRenderer.isOpaque(),boolean,true if the background is completely opaque and differs from the JList's background; false otherwise
javax.swing.DefaultListCellRenderer.validate(),void,
javax.swing.DefaultListCellRenderer.invalidate(),void,
javax.swing.DefaultListCellRenderer.repaint(),void,
javax.swing.DefaultListCellRenderer.revalidate(),void,
"javax.swing.DefaultListCellRenderer.repaint(long,int,int,int,int)",void,
javax.swing.DefaultListCellRenderer.repaint(Rectangle),void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,Object,Object)",void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,byte,byte)",void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,char,char)",void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,short,short)",void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,int,int)",void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,long,long)",void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,float,float)",void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,double,double)",void,
"javax.swing.DefaultListCellRenderer.firePropertyChange(String,boolean,boolean)",void,
javax.swing.DefaultListModel.getSize(),int,the number of components in this list
javax.swing.DefaultListModel.getElementAt(int),E,the component at the specified index
javax.swing.DefaultListModel.copyInto(Object[]),void,
javax.swing.DefaultListModel.trimToSize(),void,
javax.swing.DefaultListModel.ensureCapacity(int),void,
javax.swing.DefaultListModel.setSize(int),void,
javax.swing.DefaultListModel.capacity(),int,the current capacity
javax.swing.DefaultListModel.size(),int,the number of components in this list
javax.swing.DefaultListModel.isEmpty(),boolean,"true if and only if this list has no components, that is, its size is zero; false otherwise"
javax.swing.DefaultListModel.elements(),Enumeration&lt;E&gt;,an enumeration of the components of this list
javax.swing.DefaultListModel.contains(Object),boolean,true if the specified object is the same as a component in this list
javax.swing.DefaultListModel.indexOf(Object),int,the index of the first occurrence of the argument in this list; returns -1 if the object is not found
"javax.swing.DefaultListModel.indexOf(Object,int)",int,the index where the first occurrence of elem is found after index; returns -1 if the elem is not found in the list
javax.swing.DefaultListModel.lastIndexOf(Object),int,the index of the last occurrence of elem in the list; returns -1 if the object is not found
"javax.swing.DefaultListModel.lastIndexOf(Object,int)",int,the index of the last occurrence of the elem in this list at position less than index; returns -1 if the object is not found
javax.swing.DefaultListModel.elementAt(int),E,the component at the specified index
javax.swing.DefaultListModel.firstElement(),E,the first component of this list
javax.swing.DefaultListModel.lastElement(),E,the last component of the list
"javax.swing.DefaultListModel.setElementAt(E,int)",void,
javax.swing.DefaultListModel.removeElementAt(int),void,
"javax.swing.DefaultListModel.insertElementAt(E,int)",void,
javax.swing.DefaultListModel.addElement(E),void,
javax.swing.DefaultListModel.removeElement(Object),boolean,true if the argument was a component of this list; false otherwise
javax.swing.DefaultListModel.removeAllElements(),void,
javax.swing.DefaultListModel.toString(),String,a String representation of this object
javax.swing.DefaultListModel.toArray(),Object[],an array containing the elements of the list
javax.swing.DefaultListModel.get(int),E,
"javax.swing.DefaultListModel.set(int,E)",E,the element previously at the specified position
"javax.swing.DefaultListModel.add(int,E)",void,
javax.swing.DefaultListModel.remove(int),E,the element previously at the specified position
javax.swing.DefaultListModel.clear(),void,
"javax.swing.DefaultListModel.removeRange(int,int)",void,
javax.swing.DefaultListSelectionModel.getMinSelectionIndex(),int,
javax.swing.DefaultListSelectionModel.getMaxSelectionIndex(),int,
javax.swing.DefaultListSelectionModel.getValueIsAdjusting(),boolean,true if the selection is undergoing a series of changes
javax.swing.DefaultListSelectionModel.getSelectionMode(),int,the current selection mode
javax.swing.DefaultListSelectionModel.setSelectionMode(int),void,
javax.swing.DefaultListSelectionModel.isSelectedIndex(int),boolean,
javax.swing.DefaultListSelectionModel.isSelectionEmpty(),boolean,
javax.swing.DefaultListSelectionModel.addListSelectionListener(ListSelectionListener),void,
javax.swing.DefaultListSelectionModel.removeListSelectionListener(ListSelectionListener),void,
javax.swing.DefaultListSelectionModel.getListSelectionListeners(),ListSelectionListener[],all of this model's ListSelectionListeners or an empty array if no list selection listeners are currently registered
javax.swing.DefaultListSelectionModel.fireValueChanged(boolean),void,
"javax.swing.DefaultListSelectionModel.fireValueChanged(int,int)",void,
"javax.swing.DefaultListSelectionModel.fireValueChanged(int,int,boolean)",void,
javax.swing.DefaultListSelectionModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this model, or an empty array if no such listeners have been added"
javax.swing.DefaultListSelectionModel.setLeadAnchorNotificationEnabled(boolean),void,
javax.swing.DefaultListSelectionModel.isLeadAnchorNotificationEnabled(),boolean,the value of the leadAnchorNotificationEnabled flag
javax.swing.DefaultListSelectionModel.clearSelection(),void,
"javax.swing.DefaultListSelectionModel.setSelectionInterval(int,int)",void,
"javax.swing.DefaultListSelectionModel.addSelectionInterval(int,int)",void,
"javax.swing.DefaultListSelectionModel.removeSelectionInterval(int,int)",void,
"javax.swing.DefaultListSelectionModel.insertIndexInterval(int,int,boolean)",void,
"javax.swing.DefaultListSelectionModel.removeIndexInterval(int,int)",void,
javax.swing.DefaultListSelectionModel.setValueIsAdjusting(boolean),void,
javax.swing.DefaultListSelectionModel.toString(),String,a String representation of this object
javax.swing.DefaultListSelectionModel.clone(),Object,a clone of this instance.
javax.swing.DefaultListSelectionModel.getAnchorSelectionIndex(),int,
javax.swing.DefaultListSelectionModel.getLeadSelectionIndex(),int,
javax.swing.DefaultListSelectionModel.setAnchorSelectionIndex(int),void,
javax.swing.DefaultListSelectionModel.moveLeadSelectionIndex(int),void,
javax.swing.DefaultListSelectionModel.setLeadSelectionIndex(int),void,
"javax.swing.DefaultRowSorter.setModelWrapper(DefaultRowSorter.ModelWrapper&lt;M,I&gt;)",void,
javax.swing.DefaultRowSorter.getModelWrapper(),"DefaultRowSorter.ModelWrapper&lt;M,I&gt;",the model wrapper responsible for providing the data that gets sorted and filtered
javax.swing.DefaultRowSorter.getModel(),M,the underlying model
"javax.swing.DefaultRowSorter.setSortable(int,boolean)",void,
javax.swing.DefaultRowSorter.isSortable(int),boolean,true if the column is sortable
javax.swing.DefaultRowSorter.setSortKeys(List&lt;?),void,
javax.swing.DefaultRowSorter.getSortKeys(),List&lt;? extends RowSorter.SortKey&gt;,the current sort order
javax.swing.DefaultRowSorter.setMaxSortKeys(int),void,
javax.swing.DefaultRowSorter.getMaxSortKeys(),int,the maximum number of sort keys
javax.swing.DefaultRowSorter.setSortsOnUpdates(boolean),void,
javax.swing.DefaultRowSorter.getSortsOnUpdates(),boolean,whether or not to sort when the model is updated
"javax.swing.DefaultRowSorter.setRowFilter(RowFilter&lt;?,?)",void,
javax.swing.DefaultRowSorter.getRowFilter(),"RowFilter&lt;? super M,? super I&gt;",the filter
javax.swing.DefaultRowSorter.toggleSortOrder(int),void,
javax.swing.DefaultRowSorter.convertRowIndexToView(int),int,"row index in terms of the view, or -1 if index has been filtered out of the view"
javax.swing.DefaultRowSorter.convertRowIndexToModel(int),int,row index in terms of the view
javax.swing.DefaultRowSorter.sort(),void,
javax.swing.DefaultRowSorter.useToString(int),boolean,
"javax.swing.DefaultRowSorter.setComparator(int,Comparator&lt;?&gt;)",void,
javax.swing.DefaultRowSorter.getComparator(int),Comparator&lt;?&gt;,the Comparator for the specified column
javax.swing.DefaultRowSorter.getViewRowCount(),int,number of rows in the view
javax.swing.DefaultRowSorter.getModelRowCount(),int,number of rows in the underlying model
javax.swing.DefaultRowSorter.modelStructureChanged(),void,
javax.swing.DefaultRowSorter.allRowsChanged(),void,
"javax.swing.DefaultRowSorter.rowsInserted(int,int)",void,
"javax.swing.DefaultRowSorter.rowsDeleted(int,int)",void,
"javax.swing.DefaultRowSorter.rowsUpdated(int,int)",void,
"javax.swing.DefaultRowSorter.rowsUpdated(int,int,int)",void,
javax.swing.DefaultRowSorter.ModelWrapper.getModel(),abstractM,the underlying model
javax.swing.DefaultRowSorter.ModelWrapper.getColumnCount(),abstractint,the number of columns in the model
javax.swing.DefaultRowSorter.ModelWrapper.getRowCount(),abstractint,the number of rows in the model
"javax.swing.DefaultRowSorter.ModelWrapper.getValueAt(int,int)",abstractObject,the value at the specified index
"javax.swing.DefaultRowSorter.ModelWrapper.getStringValueAt(int,int)",String,the value at the specified index as a String
javax.swing.DefaultRowSorter.ModelWrapper.getIdentifier(int),abstractI,the identifier
javax.swing.DefaultSingleSelectionModel.getSelectedIndex(),int,"the model's selection, or -1 if there is no selection"
javax.swing.DefaultSingleSelectionModel.setSelectedIndex(int),void,
javax.swing.DefaultSingleSelectionModel.clearSelection(),void,
javax.swing.DefaultSingleSelectionModel.isSelected(),boolean,true if a value is currently selected
javax.swing.DefaultSingleSelectionModel.addChangeListener(ChangeListener),void,
javax.swing.DefaultSingleSelectionModel.removeChangeListener(ChangeListener),void,
javax.swing.DefaultSingleSelectionModel.getChangeListeners(),ChangeListener[],all of this model's ChangeListeners or an empty array if no change listeners are currently registered
javax.swing.DefaultSingleSelectionModel.fireStateChanged(),void,
javax.swing.DefaultSingleSelectionModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this model, or an empty array if no such listeners have been added"
javax.swing.FocusManager.getCurrentManager(),FocusManager,this thread's context's KeyboardFocusManager
javax.swing.FocusManager.setCurrentManager(FocusManager),void,
javax.swing.FocusManager.disableSwingFocusManager(),void,
javax.swing.FocusManager.isFocusManagerEnabled(),boolean,
javax.swing.GrayFilter.createDisabledImage(Image),Image,
"javax.swing.GrayFilter.filterRGB(int,int,int)",int,a filtered pixel in the default RGB color model.
javax.swing.GroupLayout.setHonorsVisibility(boolean),void,
javax.swing.GroupLayout.getHonorsVisibility(),boolean,whether component visibility is considered when sizing and positioning components
"javax.swing.GroupLayout.setHonorsVisibility(Component,Boolean)",void,
javax.swing.GroupLayout.setAutoCreateGaps(boolean),void,
javax.swing.GroupLayout.getAutoCreateGaps(),boolean,true if gaps between components are automatically created
javax.swing.GroupLayout.setAutoCreateContainerGaps(boolean),void,
javax.swing.GroupLayout.getAutoCreateContainerGaps(),boolean,true if gaps between the container and components that border the container are automatically created
javax.swing.GroupLayout.setHorizontalGroup(GroupLayout.Group),void,
javax.swing.GroupLayout.setVerticalGroup(GroupLayout.Group),void,
javax.swing.GroupLayout.createSequentialGroup(),GroupLayout.SequentialGroup,a new SequentialGroup
javax.swing.GroupLayout.createParallelGroup(),GroupLayout.ParallelGroup,a new ParallelGroup
javax.swing.GroupLayout.createParallelGroup(GroupLayout.Alignment),GroupLayout.ParallelGroup,a new ParallelGroup
"javax.swing.GroupLayout.createParallelGroup(GroupLayout.Alignment,boolean)",GroupLayout.ParallelGroup,a new ParallelGroup
"javax.swing.GroupLayout.createBaselineGroup(boolean,boolean)",GroupLayout.ParallelGroup,
javax.swing.GroupLayout.linkSize(Component...),void,
"javax.swing.GroupLayout.linkSize(int,Component...)",void,
"javax.swing.GroupLayout.replace(Component,Component)",void,
javax.swing.GroupLayout.setLayoutStyle(LayoutStyle),void,
javax.swing.GroupLayout.getLayoutStyle(),LayoutStyle,the LayoutStyle used for calculating the preferred gap between components
"javax.swing.GroupLayout.addLayoutComponent(String,Component)",void,
javax.swing.GroupLayout.removeLayoutComponent(Component),void,
javax.swing.GroupLayout.preferredLayoutSize(Container),Dimension,the preferred size for parent
javax.swing.GroupLayout.minimumLayoutSize(Container),Dimension,the minimum size for parent
javax.swing.GroupLayout.layoutContainer(Container),void,
"javax.swing.GroupLayout.addLayoutComponent(Component,Object)",void,
javax.swing.GroupLayout.maximumLayoutSize(Container),Dimension,the maximum size for parent
javax.swing.GroupLayout.getLayoutAlignmentX(Container),float,the alignment; this implementation returns .5
javax.swing.GroupLayout.getLayoutAlignmentY(Container),float,alignment; this implementation returns .5
javax.swing.GroupLayout.invalidateLayout(Container),void,
javax.swing.GroupLayout.toString(),String,a string representation of this GroupLayout
javax.swing.ImageIcon.loadImage(Image),void,
javax.swing.ImageIcon.getImageLoadStatus(),int,the loading status as defined by java.awt.MediaTracker
javax.swing.ImageIcon.getImage(),Image,the Image object for this ImageIcon
javax.swing.ImageIcon.setImage(Image),void,
javax.swing.ImageIcon.getDescription(),String,a brief textual description of the image
javax.swing.ImageIcon.setDescription(String),void,
"javax.swing.ImageIcon.paintIcon(Component,Graphics,int,int)",void,
javax.swing.ImageIcon.getIconWidth(),int,the width in pixels of this icon
javax.swing.ImageIcon.getIconHeight(),int,the height in pixels of this icon
javax.swing.ImageIcon.setImageObserver(ImageObserver),void,
javax.swing.ImageIcon.getImageObserver(),ImageObserver,"the image observer, which may be null"
javax.swing.ImageIcon.toString(),String,a string representing this image
javax.swing.ImageIcon.getAccessibleContext(),AccessibleContext,an AccessibleImageIcon that serves as the AccessibleContext of this ImageIcon
javax.swing.InputMap.setParent(InputMap),void,
javax.swing.InputMap.getParent(),InputMap,"map the InputMap that is the parent of this one, or null if this InputMap has no parent"
"javax.swing.InputMap.put(KeyStroke,Object)",void,
javax.swing.InputMap.get(KeyStroke),Object,
javax.swing.InputMap.remove(KeyStroke),void,
javax.swing.InputMap.clear(),void,
javax.swing.InputMap.keys(),KeyStroke[],
javax.swing.InputMap.size(),int,
javax.swing.InputMap.allKeys(),KeyStroke[],
javax.swing.InputVerifier.verify(JComponent),abstractboolean,"true when valid, false when invalid"
javax.swing.InputVerifier.shouldYieldFocus(JComponent),boolean,"true when valid, false when invalid"
javax.swing.InternalFrameFocusTraversalPolicy.getInitialComponent(JInternalFrame),Component,"the Component that should receive the focus when frame is selected for the first time, or null if no suitable Component can be found"
javax.swing.JApplet.createRootPane(),JRootPane,
javax.swing.JApplet.setTransferHandler(TransferHandler),void,
javax.swing.JApplet.getTransferHandler(),TransferHandler,the value of the transferHandler property
javax.swing.JApplet.update(Graphics),void,
javax.swing.JApplet.setJMenuBar(JMenuBar),void,
javax.swing.JApplet.getJMenuBar(),JMenuBar,
javax.swing.JApplet.isRootPaneCheckingEnabled(),boolean,true if add and setLayout are forwarded; false otherwise
javax.swing.JApplet.setRootPaneCheckingEnabled(boolean),void,
"javax.swing.JApplet.addImpl(Component,Object,int)",void,
javax.swing.JApplet.remove(Component),void,
javax.swing.JApplet.setLayout(LayoutManager),void,
javax.swing.JApplet.getRootPane(),JRootPane,this components single JRootPane child.
javax.swing.JApplet.setRootPane(JRootPane),void,
javax.swing.JApplet.getContentPane(),Container,the value of the contentPane property.
javax.swing.JApplet.setContentPane(Container),void,
javax.swing.JApplet.getLayeredPane(),JLayeredPane,the value of the layeredPane property.
javax.swing.JApplet.setLayeredPane(JLayeredPane),void,
javax.swing.JApplet.getGlassPane(),Component,the value of the glassPane property.
javax.swing.JApplet.setGlassPane(Component),void,
javax.swing.JApplet.getGraphics(),Graphics,"a graphics context for this component, or null if it has none"
"javax.swing.JApplet.repaint(long,int,int,int,int)",void,
javax.swing.JApplet.paramString(),String,a string representation of this JApplet.
javax.swing.JApplet.getAccessibleContext(),AccessibleContext,an AccessibleJApplet that serves as the AccessibleContext of this JApplet
javax.swing.JButton.updateUI(),void,
javax.swing.JButton.getUIClassID(),String,"the string ""ButtonUI"""
javax.swing.JButton.isDefaultButton(),boolean,the value of the defaultButton property
javax.swing.JButton.isDefaultCapable(),boolean,the value of the defaultCapable property
javax.swing.JButton.setDefaultCapable(boolean),void,
javax.swing.JButton.removeNotify(),void,
javax.swing.JButton.paramString(),String,a string representation of this JButton
javax.swing.JButton.getAccessibleContext(),AccessibleContext,an AccessibleJButton that serves as the AccessibleContext of this JButton
javax.swing.JCheckBox.setBorderPaintedFlat(boolean),void,
javax.swing.JCheckBox.isBorderPaintedFlat(),boolean,the value of the borderPaintedFlat property
javax.swing.JCheckBox.updateUI(),void,
javax.swing.JCheckBox.getUIClassID(),String,"the string ""CheckBoxUI"""
javax.swing.JCheckBox.paramString(),String,a string representation of this JCheckBox.
javax.swing.JCheckBox.getAccessibleContext(),AccessibleContext,an AccessibleJCheckBox that serves as the AccessibleContext of this JCheckBox
javax.swing.JCheckBoxMenuItem.getUIClassID(),String,"""CheckBoxMenuItemUI"""
javax.swing.JCheckBoxMenuItem.getState(),boolean,true if the item is selected
javax.swing.JCheckBoxMenuItem.setState(boolean),void,
javax.swing.JCheckBoxMenuItem.getSelectedObjects(),Object[],an array containing one Object -- the text of the menu item -- if the item is selected; otherwise null
javax.swing.JCheckBoxMenuItem.paramString(),String,a string representation of this JCheckBoxMenuItem.
javax.swing.JCheckBoxMenuItem.getAccessibleContext(),AccessibleContext,an AccessibleJCheckBoxMenuItem that serves as the AccessibleContext of this AccessibleJCheckBoxMenuItem
"javax.swing.JColorChooser.showDialog(Component,String,Color)",Color,the selected color or null if the user opted out
"javax.swing.JColorChooser.createDialog(Component,String,boolean,JColorChooser,ActionListener,ActionListener)",JDialog,a new dialog containing the color-chooser pane
javax.swing.JColorChooser.getUI(),ColorChooserUI,the ColorChooserUI object that renders this component
javax.swing.JColorChooser.setUI(ColorChooserUI),void,
javax.swing.JColorChooser.updateUI(),void,
javax.swing.JColorChooser.getUIClassID(),String,"the string ""ColorChooserUI"""
javax.swing.JColorChooser.getColor(),Color,the current color value of the color chooser
javax.swing.JColorChooser.setColor(Color),void,
"javax.swing.JColorChooser.setColor(int,int,int)",void,
javax.swing.JColorChooser.setColor(int),void,
javax.swing.JColorChooser.setDragEnabled(boolean),void,
javax.swing.JColorChooser.getDragEnabled(),boolean,the value of the dragEnabled property
javax.swing.JColorChooser.setPreviewPanel(JComponent),void,
javax.swing.JColorChooser.getPreviewPanel(),JComponent,a JComponent object -- the preview panel
javax.swing.JColorChooser.addChooserPanel(AbstractColorChooserPanel),void,
javax.swing.JColorChooser.removeChooserPanel(AbstractColorChooserPanel),AbstractColorChooserPanel,the color panel
javax.swing.JColorChooser.setChooserPanels(AbstractColorChooserPanel[]),void,
javax.swing.JColorChooser.getChooserPanels(),AbstractColorChooserPanel[],an array of AbstractColorChooserPanel objects
javax.swing.JColorChooser.getSelectionModel(),ColorSelectionModel,a ColorSelectionModel object
javax.swing.JColorChooser.setSelectionModel(ColorSelectionModel),void,
javax.swing.JColorChooser.paramString(),String,a string representation of this JColorChooser
javax.swing.JColorChooser.getAccessibleContext(),AccessibleContext,an AccessibleJColorChooser that serves as the AccessibleContext of this JColorChooser
javax.swing.JComboBox.installAncestorListener(),void,
javax.swing.JComboBox.setUI(ComboBoxUI),void,
javax.swing.JComboBox.updateUI(),void,
javax.swing.JComboBox.getUIClassID(),String,"the string ""ComboBoxUI"""
javax.swing.JComboBox.getUI(),ComboBoxUI,the ComboBoxUI object that renders this component
javax.swing.JComboBox.setModel(ComboBoxModel&lt;E&gt;),void,
javax.swing.JComboBox.getModel(),ComboBoxModel&lt;E&gt;,the ComboBoxModel that provides the displayed list of items
javax.swing.JComboBox.setLightWeightPopupEnabled(boolean),void,
javax.swing.JComboBox.isLightWeightPopupEnabled(),boolean,the value of the lightWeightPopupEnabled property
javax.swing.JComboBox.setEditable(boolean),void,
javax.swing.JComboBox.isEditable(),boolean,"true if the JComboBox is editable, else false"
javax.swing.JComboBox.setMaximumRowCount(int),void,
javax.swing.JComboBox.getMaximumRowCount(),int,an integer specifying the maximum number of items that are displayed in the list before using a scrollbar
javax.swing.JComboBox.setRenderer(ListCellRenderer&lt;?),void,
javax.swing.JComboBox.getRenderer(),ListCellRenderer&lt;? super E&gt;,the ListCellRenderer that displays the selected item.
javax.swing.JComboBox.setEditor(ComboBoxEditor),void,
javax.swing.JComboBox.getEditor(),ComboBoxEditor,the ComboBoxEditor that displays the selected item
javax.swing.JComboBox.setSelectedItem(Object),void,
javax.swing.JComboBox.getSelectedItem(),Object,the current selected Object
javax.swing.JComboBox.setSelectedIndex(int),void,
javax.swing.JComboBox.getSelectedIndex(),int,"an integer specifying the currently selected list item, where 0 specifies the first item in the list; or -1 if no item is selected or if the currently selected item is not in the list"
javax.swing.JComboBox.getPrototypeDisplayValue(),E,the value of the prototypeDisplayValue property
javax.swing.JComboBox.setPrototypeDisplayValue(E),void,
javax.swing.JComboBox.addItem(E),void,
"javax.swing.JComboBox.insertItemAt(E,int)",void,
javax.swing.JComboBox.removeItem(Object),void,
javax.swing.JComboBox.removeItemAt(int),void,
javax.swing.JComboBox.removeAllItems(),void,
javax.swing.JComboBox.showPopup(),void,
javax.swing.JComboBox.hidePopup(),void,
javax.swing.JComboBox.setPopupVisible(boolean),void,
javax.swing.JComboBox.isPopupVisible(),boolean,"true if the popup is visible, otherwise returns false"
javax.swing.JComboBox.addItemListener(ItemListener),void,
javax.swing.JComboBox.removeItemListener(ItemListener),void,
javax.swing.JComboBox.getItemListeners(),ItemListener[],all of the ItemListeners added or an empty array if no listeners have been added
javax.swing.JComboBox.addActionListener(ActionListener),void,
javax.swing.JComboBox.removeActionListener(ActionListener),void,
javax.swing.JComboBox.getActionListeners(),ActionListener[],all of the ActionListeners added or an empty array if no listeners have been added
javax.swing.JComboBox.addPopupMenuListener(PopupMenuListener),void,
javax.swing.JComboBox.removePopupMenuListener(PopupMenuListener),void,
javax.swing.JComboBox.getPopupMenuListeners(),PopupMenuListener[],all of the PopupMenuListeners added or an empty array if no listeners have been added
javax.swing.JComboBox.firePopupMenuWillBecomeVisible(),void,
javax.swing.JComboBox.firePopupMenuWillBecomeInvisible(),void,
javax.swing.JComboBox.firePopupMenuCanceled(),void,
javax.swing.JComboBox.setActionCommand(String),void,
javax.swing.JComboBox.getActionCommand(),String,"the string containing the ""command"" that is sent to action listeners."
javax.swing.JComboBox.setAction(Action),void,
javax.swing.JComboBox.getAction(),Action,the Action for this ActionEvent source; or null
javax.swing.JComboBox.configurePropertiesFromAction(Action),void,
javax.swing.JComboBox.createActionPropertyChangeListener(Action),PropertyChangeListener,
"javax.swing.JComboBox.actionPropertyChanged(Action,String)",void,
javax.swing.JComboBox.fireItemStateChanged(ItemEvent),void,
javax.swing.JComboBox.fireActionEvent(),void,
javax.swing.JComboBox.selectedItemChanged(),void,
javax.swing.JComboBox.getSelectedObjects(),Object[],an array of Objects containing one element -- the selected item
javax.swing.JComboBox.actionPerformed(ActionEvent),void,
javax.swing.JComboBox.contentsChanged(ListDataEvent),void,
javax.swing.JComboBox.intervalAdded(ListDataEvent),void,
javax.swing.JComboBox.intervalRemoved(ListDataEvent),void,
javax.swing.JComboBox.selectWithKeyChar(char),boolean,
javax.swing.JComboBox.setEnabled(boolean),void,
"javax.swing.JComboBox.configureEditor(ComboBoxEditor,Object)",void,
javax.swing.JComboBox.processKeyEvent(KeyEvent),void,
"javax.swing.JComboBox.processKeyBinding(KeyStroke,KeyEvent,int,boolean)",boolean,
javax.swing.JComboBox.setKeySelectionManager(JComboBox.KeySelectionManager),void,
javax.swing.JComboBox.getKeySelectionManager(),JComboBox.KeySelectionManager,the KeySelectionManager currently in use
javax.swing.JComboBox.getItemCount(),int,an integer equal to the number of items in the list
javax.swing.JComboBox.getItemAt(int),E,the item at that list position; or null if out of range
javax.swing.JComboBox.createDefaultKeySelectionManager(),JComboBox.KeySelectionManager,the KeySelectionManager currently used by the list
javax.swing.JComboBox.paramString(),String,a string representation of this JComboBox
javax.swing.JComboBox.getAccessibleContext(),AccessibleContext,an AccessibleJComboBox that serves as the AccessibleContext of this JComboBox
javax.swing.JComponent.setInheritsPopupMenu(boolean),void,
javax.swing.JComponent.getInheritsPopupMenu(),boolean,
javax.swing.JComponent.setComponentPopupMenu(JPopupMenu),void,
javax.swing.JComponent.getComponentPopupMenu(),JPopupMenu,JPopupMenu assigned for this component or null if no popup assigned
javax.swing.JComponent.updateUI(),void,
javax.swing.JComponent.setUI(ComponentUI),void,
javax.swing.JComponent.getUIClassID(),String,the UIDefaults key for a ComponentUI subclass
javax.swing.JComponent.getComponentGraphics(Graphics),Graphics,a Graphics object configured for this component
javax.swing.JComponent.paintComponent(Graphics),void,
javax.swing.JComponent.paintChildren(Graphics),void,
javax.swing.JComponent.paintBorder(Graphics),void,
javax.swing.JComponent.update(Graphics),void,
javax.swing.JComponent.paint(Graphics),void,
javax.swing.JComponent.printAll(Graphics),void,
javax.swing.JComponent.print(Graphics),void,
javax.swing.JComponent.printComponent(Graphics),void,
javax.swing.JComponent.printChildren(Graphics),void,
javax.swing.JComponent.printBorder(Graphics),void,
javax.swing.JComponent.isPaintingTile(),boolean,"true if the component is currently painting a tile, false otherwise"
javax.swing.JComponent.isPaintingForPrint(),boolean,true if the current painting operation on this component is part of a print operation
javax.swing.JComponent.isManagingFocus(),boolean,
javax.swing.JComponent.setNextFocusableComponent(Component),void,
javax.swing.JComponent.getNextFocusableComponent(),Component,"the Component that will follow this JComponent in the focus traversal cycle, or null if none has been explicitly specified"
javax.swing.JComponent.setRequestFocusEnabled(boolean),void,
javax.swing.JComponent.isRequestFocusEnabled(),boolean,"true if this component should get focus, otherwise returns false"
javax.swing.JComponent.requestFocus(),void,
javax.swing.JComponent.requestFocus(boolean),boolean,false if the focus change request is guaranteed to fail; true if it is likely to succeed
javax.swing.JComponent.requestFocusInWindow(),boolean,false if the focus change request is guaranteed to fail; true if it is likely to succeed
javax.swing.JComponent.requestFocusInWindow(boolean),boolean,false if the focus change request is guaranteed to fail; true if it is likely to succeed
javax.swing.JComponent.grabFocus(),void,
javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean),void,
javax.swing.JComponent.getVerifyInputWhenFocusTarget(),boolean,value of the verifyInputWhenFocusTarget property
javax.swing.JComponent.getFontMetrics(Font),FontMetrics,the font metrics for font
javax.swing.JComponent.setPreferredSize(Dimension),void,
javax.swing.JComponent.getPreferredSize(),Dimension,the value of the preferredSize property
javax.swing.JComponent.setMaximumSize(Dimension),void,
javax.swing.JComponent.getMaximumSize(),Dimension,the value of the maximumSize property
javax.swing.JComponent.setMinimumSize(Dimension),void,
javax.swing.JComponent.getMinimumSize(),Dimension,the value of the minimumSize property
"javax.swing.JComponent.contains(int,int)",boolean,"true if this component logically contains x,y"
javax.swing.JComponent.setBorder(Border),void,
javax.swing.JComponent.getBorder(),Border,the border object for this component
javax.swing.JComponent.getInsets(),Insets,the value of the insets property
javax.swing.JComponent.getInsets(Insets),Insets,the Insets object
javax.swing.JComponent.getAlignmentY(),float,the value of the alignmentY property
javax.swing.JComponent.setAlignmentY(float),void,
javax.swing.JComponent.getAlignmentX(),float,the value of the alignmentX property
javax.swing.JComponent.setAlignmentX(float),void,
javax.swing.JComponent.setInputVerifier(InputVerifier),void,
javax.swing.JComponent.getInputVerifier(),InputVerifier,the inputVerifier property
javax.swing.JComponent.getGraphics(),Graphics,this components graphics context
javax.swing.JComponent.setDebugGraphicsOptions(int),void,
javax.swing.JComponent.getDebugGraphicsOptions(),int,
"javax.swing.JComponent.registerKeyboardAction(ActionListener,String,KeyStroke,int)",void,
"javax.swing.JComponent.registerKeyboardAction(ActionListener,KeyStroke,int)",void,
javax.swing.JComponent.unregisterKeyboardAction(KeyStroke),void,
javax.swing.JComponent.getRegisteredKeyStrokes(),KeyStroke[],an array of KeyStroke objects
javax.swing.JComponent.getConditionForKeyStroke(KeyStroke),int,the action-keystroke condition
javax.swing.JComponent.getActionForKeyStroke(KeyStroke),ActionListener,the ActionListener object invoked when the keystroke occurs
javax.swing.JComponent.resetKeyboardActions(),void,
"javax.swing.JComponent.setInputMap(int,InputMap)",void,
javax.swing.JComponent.getInputMap(int),InputMap,the InputMap for the specified condition
javax.swing.JComponent.getInputMap(),InputMap,the InputMap used when the component has focus
javax.swing.JComponent.setActionMap(ActionMap),void,
javax.swing.JComponent.getActionMap(),ActionMap,the ActionMap containing the key/action bindings
"javax.swing.JComponent.getBaseline(int,int)",int,the baseline or &lt; 0 indicating there is no reasonable baseline
javax.swing.JComponent.getBaselineResizeBehavior(),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.JComponent.requestDefaultFocus(),boolean,
javax.swing.JComponent.setVisible(boolean),void,
javax.swing.JComponent.setEnabled(boolean),void,
javax.swing.JComponent.setForeground(Color),void,
javax.swing.JComponent.setBackground(Color),void,
javax.swing.JComponent.setFont(Font),void,
javax.swing.JComponent.getDefaultLocale(),Locale,the default Locale.
javax.swing.JComponent.setDefaultLocale(Locale),void,
javax.swing.JComponent.processComponentKeyEvent(KeyEvent),void,
javax.swing.JComponent.processKeyEvent(KeyEvent),void,
"javax.swing.JComponent.processKeyBinding(KeyStroke,KeyEvent,int,boolean)",boolean,
javax.swing.JComponent.setToolTipText(String),void,
javax.swing.JComponent.getToolTipText(),String,the text of the tool tip
javax.swing.JComponent.getToolTipText(MouseEvent),String,
javax.swing.JComponent.getToolTipLocation(MouseEvent),Point,always returns null
javax.swing.JComponent.getPopupLocation(MouseEvent),Point,"location to display the JPopupMenu, or null"
javax.swing.JComponent.createToolTip(),JToolTip,the JToolTip used to display this toolTip
javax.swing.JComponent.scrollRectToVisible(Rectangle),void,
javax.swing.JComponent.setAutoscrolls(boolean),void,
javax.swing.JComponent.getAutoscrolls(),boolean,the value of the autoscrolls property
javax.swing.JComponent.setTransferHandler(TransferHandler),void,
javax.swing.JComponent.getTransferHandler(),TransferHandler,the value of the transferHandler property
javax.swing.JComponent.processMouseEvent(MouseEvent),void,
javax.swing.JComponent.processMouseMotionEvent(MouseEvent),void,
javax.swing.JComponent.enable(),void,
javax.swing.JComponent.disable(),void,
javax.swing.JComponent.getClientProperty(Object),Object,the value of this property or null
"javax.swing.JComponent.putClientProperty(Object,Object)",void,
"javax.swing.JComponent.setFocusTraversalKeys(int,Set&lt;?)",void,
javax.swing.JComponent.isLightweightComponent(Component),boolean,true if this component is lightweight
"javax.swing.JComponent.reshape(int,int,int,int)",void,
javax.swing.JComponent.getBounds(Rectangle),Rectangle,rv; if rv is null return a newly created Rectangle with this component's bounds
javax.swing.JComponent.getSize(Dimension),Dimension,rv
javax.swing.JComponent.getLocation(Point),Point,rv
javax.swing.JComponent.getX(),int,the current x coordinate of the component's origin
javax.swing.JComponent.getY(),int,the current y coordinate of the component's origin
javax.swing.JComponent.getWidth(),int,the current width of this component
javax.swing.JComponent.getHeight(),int,the current height of this component
javax.swing.JComponent.isOpaque(),boolean,true if this component is completely opaque
javax.swing.JComponent.setOpaque(boolean),void,
javax.swing.JComponent.computeVisibleRect(Rectangle),void,
javax.swing.JComponent.getVisibleRect(),Rectangle,the visible rectangle
"javax.swing.JComponent.firePropertyChange(String,boolean,boolean)",void,
"javax.swing.JComponent.firePropertyChange(String,int,int)",void,
"javax.swing.JComponent.firePropertyChange(String,char,char)",void,
"javax.swing.JComponent.fireVetoableChange(String,Object,Object)",void,
javax.swing.JComponent.addVetoableChangeListener(VetoableChangeListener),void,
javax.swing.JComponent.removeVetoableChangeListener(VetoableChangeListener),void,
javax.swing.JComponent.getVetoableChangeListeners(),VetoableChangeListener[],all of the component's VetoableChangeListeners or an empty array if no vetoable change listeners are currently registered
javax.swing.JComponent.getTopLevelAncestor(),Container,"the top-level Container that this component is in, or null if not in any container"
javax.swing.JComponent.addAncestorListener(AncestorListener),void,
javax.swing.JComponent.removeAncestorListener(AncestorListener),void,
javax.swing.JComponent.getAncestorListeners(),AncestorListener[],all of the component's AncestorListeners or an empty array if no ancestor listeners are currently registered
javax.swing.JComponent.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added"
javax.swing.JComponent.addNotify(),void,
javax.swing.JComponent.removeNotify(),void,
"javax.swing.JComponent.repaint(long,int,int,int,int)",void,
javax.swing.JComponent.repaint(Rectangle),void,
javax.swing.JComponent.revalidate(),void,
javax.swing.JComponent.isValidateRoot(),boolean,always returns false
javax.swing.JComponent.isOptimizedDrawingEnabled(),boolean,always returns true
javax.swing.JComponent.isPaintingOrigin(),boolean,always returns false
"javax.swing.JComponent.paintImmediately(int,int,int,int)",void,
javax.swing.JComponent.paintImmediately(Rectangle),void,
javax.swing.JComponent.setDoubleBuffered(boolean),void,
javax.swing.JComponent.isDoubleBuffered(),boolean,"true if this component is double buffered, otherwise false"
javax.swing.JComponent.getRootPane(),JRootPane,"the JRootPane that contains this component, or null if no JRootPane is found"
javax.swing.JComponent.paramString(),String,a string representation of this JComponent
javax.swing.JComponent.hide(),void,
javax.swing.JDesktopPane.getUI(),DesktopPaneUI,the DesktopPaneUI object that renders this component
javax.swing.JDesktopPane.setUI(DesktopPaneUI),void,
javax.swing.JDesktopPane.setDragMode(int),void,
javax.swing.JDesktopPane.getDragMode(),int,either Live_DRAG_MODE or OUTLINE_DRAG_MODE
javax.swing.JDesktopPane.getDesktopManager(),DesktopManager,
javax.swing.JDesktopPane.setDesktopManager(DesktopManager),void,
javax.swing.JDesktopPane.updateUI(),void,
javax.swing.JDesktopPane.getUIClassID(),String,"the string ""DesktopPaneUI"""
javax.swing.JDesktopPane.getAllFrames(),JInternalFrame[],an array of JInternalFrame objects
javax.swing.JDesktopPane.getSelectedFrame(),JInternalFrame,the currently active JInternalFrame or null
javax.swing.JDesktopPane.setSelectedFrame(JInternalFrame),void,
javax.swing.JDesktopPane.getAllFramesInLayer(int),JInternalFrame[],an array of JInternalFrame objects
javax.swing.JDesktopPane.remove(Component),void,
javax.swing.JDesktopPane.selectFrame(boolean),JInternalFrame,the JInternalFrame that was selected or null if nothing was selected
"javax.swing.JDesktopPane.addImpl(Component,Object,int)",void,
javax.swing.JDesktopPane.remove(int),void,
javax.swing.JDesktopPane.removeAll(),void,
"javax.swing.JDesktopPane.setComponentZOrder(Component,int)",void,
javax.swing.JDesktopPane.paramString(),String,a string representation of this JDesktopPane
javax.swing.JDesktopPane.getAccessibleContext(),AccessibleContext,an AccessibleJDesktopPane that serves as the AccessibleContext of this JDesktopPane
javax.swing.JDialog.dialogInit(),void,
javax.swing.JDialog.createRootPane(),JRootPane,
javax.swing.JDialog.processWindowEvent(WindowEvent),void,
javax.swing.JDialog.setDefaultCloseOperation(int),void,
javax.swing.JDialog.getDefaultCloseOperation(),int,an integer indicating the window-close operation
javax.swing.JDialog.setTransferHandler(TransferHandler),void,
javax.swing.JDialog.getTransferHandler(),TransferHandler,the value of the transferHandler property
javax.swing.JDialog.update(Graphics),void,
javax.swing.JDialog.setJMenuBar(JMenuBar),void,
javax.swing.JDialog.getJMenuBar(),JMenuBar,
javax.swing.JDialog.isRootPaneCheckingEnabled(),boolean,true if add and setLayout are forwarded; false otherwise
javax.swing.JDialog.setRootPaneCheckingEnabled(boolean),void,
"javax.swing.JDialog.addImpl(Component,Object,int)",void,
javax.swing.JDialog.remove(Component),void,
javax.swing.JDialog.setLayout(LayoutManager),void,
javax.swing.JDialog.getRootPane(),JRootPane,this components single JRootPane child.
javax.swing.JDialog.setRootPane(JRootPane),void,
javax.swing.JDialog.getContentPane(),Container,the contentPane property
javax.swing.JDialog.setContentPane(Container),void,
javax.swing.JDialog.getLayeredPane(),JLayeredPane,the layeredPane property
javax.swing.JDialog.setLayeredPane(JLayeredPane),void,
javax.swing.JDialog.getGlassPane(),Component,the glassPane property
javax.swing.JDialog.setGlassPane(Component),void,
javax.swing.JDialog.getGraphics(),Graphics,"a graphics context for this component, or null if it has none"
"javax.swing.JDialog.repaint(long,int,int,int,int)",void,
javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean),void,
javax.swing.JDialog.isDefaultLookAndFeelDecorated(),boolean,true if look and feel should provide Window decorations.
javax.swing.JDialog.paramString(),String,a string representation of this JDialog.
javax.swing.JDialog.getAccessibleContext(),AccessibleContext,an AccessibleJDialog that serves as the AccessibleContext of this JDialog
javax.swing.JEditorPane.addHyperlinkListener(HyperlinkListener),void,
javax.swing.JEditorPane.removeHyperlinkListener(HyperlinkListener),void,
javax.swing.JEditorPane.getHyperlinkListeners(),HyperlinkListener[],all of the HyperLinkListeners added or an empty array if no listeners have been added
javax.swing.JEditorPane.fireHyperlinkUpdate(HyperlinkEvent),void,
javax.swing.JEditorPane.setPage(URL),void,
"javax.swing.JEditorPane.read(InputStream,Object)",void,
javax.swing.JEditorPane.getStream(URL),InputStream,
javax.swing.JEditorPane.scrollToReference(String),void,
javax.swing.JEditorPane.getPage(),URL,"the URL, or null if none"
javax.swing.JEditorPane.setPage(String),void,
javax.swing.JEditorPane.getUIClassID(),String,"the string ""EditorPaneUI"""
javax.swing.JEditorPane.createDefaultEditorKit(),EditorKit,the editor kit
javax.swing.JEditorPane.getEditorKit(),EditorKit,the editor kit
javax.swing.JEditorPane.getContentType(),String,"the content type, null if no editor kit set"
javax.swing.JEditorPane.setContentType(String),void,
javax.swing.JEditorPane.setEditorKit(EditorKit),void,
javax.swing.JEditorPane.getEditorKitForContentType(String),EditorKit,the editor kit
"javax.swing.JEditorPane.setEditorKitForContentType(String,EditorKit)",void,
javax.swing.JEditorPane.replaceSelection(String),void,
javax.swing.JEditorPane.createEditorKitForContentType(String),EditorKit,"the editor kit, or null if there is nothing registered for the given type"
"javax.swing.JEditorPane.registerEditorKitForContentType(String,String)",void,
"javax.swing.JEditorPane.registerEditorKitForContentType(String,String,ClassLoader)",void,
javax.swing.JEditorPane.getEditorKitClassNameForContentType(String),String,
javax.swing.JEditorPane.getPreferredSize(),Dimension,a Dimension containing the preferred size
javax.swing.JEditorPane.setText(String),void,
javax.swing.JEditorPane.getText(),String,the text
javax.swing.JEditorPane.getScrollableTracksViewportWidth(),boolean,"true if a viewport should force the Scrollables width to match its own, false otherwise"
javax.swing.JEditorPane.getScrollableTracksViewportHeight(),boolean,"true if a viewport should force the Scrollable's height to match its own, false otherwise"
javax.swing.JEditorPane.paramString(),String,a string representation of this JEditorPane
javax.swing.JEditorPane.getAccessibleContext(),AccessibleContext,an AccessibleJEditorPane that serves as the AccessibleContext of this JEditorPane
javax.swing.JFileChooser.setup(FileSystemView),void,
javax.swing.JFileChooser.setDragEnabled(boolean),void,
javax.swing.JFileChooser.getDragEnabled(),boolean,the value of the dragEnabled property
javax.swing.JFileChooser.getSelectedFile(),File,the selected file
javax.swing.JFileChooser.setSelectedFile(File),void,
javax.swing.JFileChooser.getSelectedFiles(),File[],
javax.swing.JFileChooser.setSelectedFiles(File[]),void,
javax.swing.JFileChooser.getCurrentDirectory(),File,the current directory
javax.swing.JFileChooser.setCurrentDirectory(File),void,
javax.swing.JFileChooser.changeToParentDirectory(),void,
javax.swing.JFileChooser.rescanCurrentDirectory(),void,
javax.swing.JFileChooser.ensureFileIsVisible(File),void,
javax.swing.JFileChooser.showOpenDialog(Component),int,
javax.swing.JFileChooser.showSaveDialog(Component),int,
"javax.swing.JFileChooser.showDialog(Component,String)",int,
javax.swing.JFileChooser.createDialog(Component),JDialog,a new JDialog containing this instance
javax.swing.JFileChooser.getControlButtonsAreShown(),boolean,the value of the controlButtonsAreShown property
javax.swing.JFileChooser.setControlButtonsAreShown(boolean),void,
javax.swing.JFileChooser.getDialogType(),int,
javax.swing.JFileChooser.setDialogType(int),void,
javax.swing.JFileChooser.setDialogTitle(String),void,
javax.swing.JFileChooser.getDialogTitle(),String,
javax.swing.JFileChooser.setApproveButtonToolTipText(String),void,
javax.swing.JFileChooser.getApproveButtonToolTipText(),String,the tooltip text used for the approve button
javax.swing.JFileChooser.getApproveButtonMnemonic(),int,an integer value for the mnemonic key
javax.swing.JFileChooser.setApproveButtonMnemonic(int),void,
javax.swing.JFileChooser.setApproveButtonMnemonic(char),void,
javax.swing.JFileChooser.setApproveButtonText(String),void,
javax.swing.JFileChooser.getApproveButtonText(),String,the text used in the ApproveButton
javax.swing.JFileChooser.getChoosableFileFilters(),FileFilter[],a FileFilter array containing all the choosable file filters
javax.swing.JFileChooser.addChoosableFileFilter(FileFilter),void,
javax.swing.JFileChooser.removeChoosableFileFilter(FileFilter),boolean,
javax.swing.JFileChooser.resetChoosableFileFilters(),void,
javax.swing.JFileChooser.getAcceptAllFileFilter(),FileFilter,
javax.swing.JFileChooser.isAcceptAllFileFilterUsed(),boolean,true if the AcceptAll FileFilter is used
javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean),void,
javax.swing.JFileChooser.getAccessory(),JComponent,"this JFileChooser's accessory component, or null"
javax.swing.JFileChooser.setAccessory(JComponent),void,
javax.swing.JFileChooser.setFileSelectionMode(int),void,
javax.swing.JFileChooser.getFileSelectionMode(),int,
javax.swing.JFileChooser.isFileSelectionEnabled(),boolean,
javax.swing.JFileChooser.isDirectorySelectionEnabled(),boolean,
javax.swing.JFileChooser.setMultiSelectionEnabled(boolean),void,
javax.swing.JFileChooser.isMultiSelectionEnabled(),boolean,true if multiple files can be selected
javax.swing.JFileChooser.isFileHidingEnabled(),boolean,the status of the file hiding property
javax.swing.JFileChooser.setFileHidingEnabled(boolean),void,
javax.swing.JFileChooser.setFileFilter(FileFilter),void,
javax.swing.JFileChooser.getFileFilter(),FileFilter,the current file filter
javax.swing.JFileChooser.setFileView(FileView),void,
javax.swing.JFileChooser.getFileView(),FileView,
javax.swing.JFileChooser.getName(File),String,the String containing the filename for f
javax.swing.JFileChooser.getDescription(File),String,the String containing the file description for f
javax.swing.JFileChooser.getTypeDescription(File),String,the String containing the file type description for f
javax.swing.JFileChooser.getIcon(File),Icon,"the Icon for this file, or type of file"
javax.swing.JFileChooser.isTraversable(File),boolean,"true if the file/directory can be traversed, otherwise false"
javax.swing.JFileChooser.accept(File),boolean,"true if the file should be displayed, otherwise false"
javax.swing.JFileChooser.setFileSystemView(FileSystemView),void,
javax.swing.JFileChooser.getFileSystemView(),FileSystemView,the FileSystemView object
javax.swing.JFileChooser.approveSelection(),void,
javax.swing.JFileChooser.cancelSelection(),void,
javax.swing.JFileChooser.addActionListener(ActionListener),void,
javax.swing.JFileChooser.removeActionListener(ActionListener),void,
javax.swing.JFileChooser.getActionListeners(),ActionListener[],all of this file chooser's ActionListeners or an empty array if no action listeners are currently registered
javax.swing.JFileChooser.fireActionPerformed(String),void,
javax.swing.JFileChooser.updateUI(),void,
javax.swing.JFileChooser.getUIClassID(),String,"the string ""FileChooserUI"""
javax.swing.JFileChooser.getUI(),FileChooserUI,the FileChooserUI object that implements the FileChooserUI L&amp;F
javax.swing.JFileChooser.paramString(),String,a string representation of this JFileChooser
javax.swing.JFileChooser.getAccessibleContext(),AccessibleContext,an AccessibleJFileChooser that serves as the AccessibleContext of this JFileChooser
javax.swing.JFormattedTextField.setFocusLostBehavior(int),void,
javax.swing.JFormattedTextField.getFocusLostBehavior(),int,returns behavior when focus is lost
javax.swing.JFormattedTextField.setFormatterFactory(JFormattedTextField.AbstractFormatterFactory),void,
javax.swing.JFormattedTextField.getFormatterFactory(),JFormattedTextField.AbstractFormatterFactory,AbstractFormatterFactory used to determine AbstractFormatters
javax.swing.JFormattedTextField.setFormatter(JFormattedTextField.AbstractFormatter),void,
javax.swing.JFormattedTextField.getFormatter(),JFormattedTextField.AbstractFormatter,AbstractFormatter used for formatting
javax.swing.JFormattedTextField.setValue(Object),void,
javax.swing.JFormattedTextField.getValue(),Object,Last valid value
javax.swing.JFormattedTextField.commitEdit(),void,
javax.swing.JFormattedTextField.isEditValid(),boolean,true if the current value being edited is valid.
javax.swing.JFormattedTextField.invalidEdit(),void,
javax.swing.JFormattedTextField.processInputMethodEvent(InputMethodEvent),void,
javax.swing.JFormattedTextField.processFocusEvent(FocusEvent),void,
javax.swing.JFormattedTextField.getActions(),Action[],the command list
javax.swing.JFormattedTextField.getUIClassID(),String,"the string ""FormattedTextFieldUI"""
javax.swing.JFormattedTextField.setDocument(Document),void,
javax.swing.JFormattedTextField.AbstractFormatter.install(JFormattedTextField),void,
javax.swing.JFormattedTextField.AbstractFormatter.uninstall(),void,
javax.swing.JFormattedTextField.AbstractFormatter.stringToValue(String),abstractObject,Object representation of text
javax.swing.JFormattedTextField.AbstractFormatter.valueToString(Object),abstractString,String representation of value
javax.swing.JFormattedTextField.AbstractFormatter.getFormattedTextField(),JFormattedTextField,JFormattedTextField formatting for.
javax.swing.JFormattedTextField.AbstractFormatter.invalidEdit(),void,
javax.swing.JFormattedTextField.AbstractFormatter.setEditValid(boolean),void,
javax.swing.JFormattedTextField.AbstractFormatter.getActions(),Action[],Array of Actions to install on JFormattedTextField
javax.swing.JFormattedTextField.AbstractFormatter.getDocumentFilter(),DocumentFilter,DocumentFilter to restrict edits
javax.swing.JFormattedTextField.AbstractFormatter.getNavigationFilter(),NavigationFilter,NavigationFilter to restrict navigation
javax.swing.JFormattedTextField.AbstractFormatter.clone(),Object,Copy of the AbstractFormatter
javax.swing.JFormattedTextField.AbstractFormatterFactory.getFormatter(JFormattedTextField),abstractJFormattedTextField.AbstractFormatter,"AbstractFormatter to handle formatting duties, a null return value implies the JFormattedTextField should behave like a normal JTextField"
javax.swing.JFrame.frameInit(),void,
javax.swing.JFrame.createRootPane(),JRootPane,
javax.swing.JFrame.processWindowEvent(WindowEvent),void,
javax.swing.JFrame.setDefaultCloseOperation(int),void,
javax.swing.JFrame.getDefaultCloseOperation(),int,an integer indicating the window-close operation
javax.swing.JFrame.setTransferHandler(TransferHandler),void,
javax.swing.JFrame.getTransferHandler(),TransferHandler,the value of the transferHandler property
javax.swing.JFrame.update(Graphics),void,
javax.swing.JFrame.setJMenuBar(JMenuBar),void,
javax.swing.JFrame.getJMenuBar(),JMenuBar,the menubar for this frame
javax.swing.JFrame.isRootPaneCheckingEnabled(),boolean,true if add and setLayout are forwarded; false otherwise
javax.swing.JFrame.setRootPaneCheckingEnabled(boolean),void,
"javax.swing.JFrame.addImpl(Component,Object,int)",void,
javax.swing.JFrame.remove(Component),void,
javax.swing.JFrame.setLayout(LayoutManager),void,
javax.swing.JFrame.getRootPane(),JRootPane,the rootPane property
javax.swing.JFrame.setRootPane(JRootPane),void,
javax.swing.JFrame.setIconImage(Image),void,
javax.swing.JFrame.getContentPane(),Container,the contentPane property
javax.swing.JFrame.setContentPane(Container),void,
javax.swing.JFrame.getLayeredPane(),JLayeredPane,the layeredPane property
javax.swing.JFrame.setLayeredPane(JLayeredPane),void,
javax.swing.JFrame.getGlassPane(),Component,the glassPane property
javax.swing.JFrame.setGlassPane(Component),void,
javax.swing.JFrame.getGraphics(),Graphics,"a graphics context for this component, or null if it has none"
"javax.swing.JFrame.repaint(long,int,int,int,int)",void,
javax.swing.JFrame.setDefaultLookAndFeelDecorated(boolean),void,
javax.swing.JFrame.isDefaultLookAndFeelDecorated(),boolean,true if look and feel should provide Window decorations.
javax.swing.JFrame.paramString(),String,a string representation of this JFrame
javax.swing.JFrame.getAccessibleContext(),AccessibleContext,an AccessibleJFrame that serves as the AccessibleContext of this JFrame
javax.swing.JInternalFrame.createRootPane(),JRootPane,a new JRootPane
javax.swing.JInternalFrame.getUI(),InternalFrameUI,the InternalFrameUI object that renders this component
javax.swing.JInternalFrame.setUI(InternalFrameUI),void,
javax.swing.JInternalFrame.updateUI(),void,
javax.swing.JInternalFrame.getUIClassID(),String,"the string ""InternalFrameUI"""
javax.swing.JInternalFrame.isRootPaneCheckingEnabled(),boolean,true if add and setLayout are forwarded; false otherwise
javax.swing.JInternalFrame.setRootPaneCheckingEnabled(boolean),void,
"javax.swing.JInternalFrame.addImpl(Component,Object,int)",void,
javax.swing.JInternalFrame.remove(Component),void,
javax.swing.JInternalFrame.setLayout(LayoutManager),void,
javax.swing.JInternalFrame.getMenuBar(),JMenuBar,"the current menu bar, or null if none has been set"
javax.swing.JInternalFrame.getJMenuBar(),JMenuBar,the JMenuBar used by this internal frame
javax.swing.JInternalFrame.setMenuBar(JMenuBar),void,
javax.swing.JInternalFrame.setJMenuBar(JMenuBar),void,
javax.swing.JInternalFrame.getContentPane(),Container,the content pane
javax.swing.JInternalFrame.setContentPane(Container),void,
javax.swing.JInternalFrame.getLayeredPane(),JLayeredPane,a JLayeredPane object
javax.swing.JInternalFrame.setLayeredPane(JLayeredPane),void,
javax.swing.JInternalFrame.getGlassPane(),Component,the glass pane
javax.swing.JInternalFrame.setGlassPane(Component),void,
javax.swing.JInternalFrame.getRootPane(),JRootPane,the rootPane property
javax.swing.JInternalFrame.setRootPane(JRootPane),void,
javax.swing.JInternalFrame.setClosable(boolean),void,
javax.swing.JInternalFrame.isClosable(),boolean,true if this internal frame can be closed
javax.swing.JInternalFrame.isClosed(),boolean,"true if this internal frame is closed, false otherwise"
javax.swing.JInternalFrame.setClosed(boolean),void,
javax.swing.JInternalFrame.setResizable(boolean),void,
javax.swing.JInternalFrame.isResizable(),boolean,"true if this internal frame can be resized, false otherwise"
javax.swing.JInternalFrame.setIconifiable(boolean),void,
javax.swing.JInternalFrame.isIconifiable(),boolean,the value of the iconable property.
javax.swing.JInternalFrame.isIcon(),boolean,true if this internal frame is iconified
javax.swing.JInternalFrame.setIcon(boolean),void,
javax.swing.JInternalFrame.setMaximizable(boolean),void,
javax.swing.JInternalFrame.isMaximizable(),boolean,the value of the maximizable property
javax.swing.JInternalFrame.isMaximum(),boolean,"true if this internal frame is maximized, false otherwise"
javax.swing.JInternalFrame.setMaximum(boolean),void,
javax.swing.JInternalFrame.getTitle(),String,a String containing this internal frame's title
javax.swing.JInternalFrame.setTitle(String),void,
javax.swing.JInternalFrame.setSelected(boolean),void,
javax.swing.JInternalFrame.isSelected(),boolean,true if this internal frame is currently selected (active)
javax.swing.JInternalFrame.setFrameIcon(Icon),void,
javax.swing.JInternalFrame.getFrameIcon(),Icon,the Icon displayed in the title bar
javax.swing.JInternalFrame.moveToFront(),void,
javax.swing.JInternalFrame.moveToBack(),void,
javax.swing.JInternalFrame.getLastCursor(),Cursor,the last non-resizable Cursor
javax.swing.JInternalFrame.setCursor(Cursor),void,
javax.swing.JInternalFrame.setLayer(Integer),void,
javax.swing.JInternalFrame.setLayer(int),void,
javax.swing.JInternalFrame.getLayer(),int,an Integer object specifying this frame's desktop layer
javax.swing.JInternalFrame.getDesktopPane(),JDesktopPane,"the JDesktopPane this internal frame belongs to, or null if none is found"
javax.swing.JInternalFrame.setDesktopIcon(JInternalFrame.JDesktopIcon),void,
javax.swing.JInternalFrame.getDesktopIcon(),JInternalFrame.JDesktopIcon,the JDesktopIcon displayed on the desktop
javax.swing.JInternalFrame.getNormalBounds(),Rectangle,a Rectangle containing the bounds of this frame when in the normal state
javax.swing.JInternalFrame.setNormalBounds(Rectangle),void,
javax.swing.JInternalFrame.getFocusOwner(),Component,"the component with focus, or null if no children have focus"
javax.swing.JInternalFrame.getMostRecentFocusOwner(),Component,the child component that will receive focus when this JInternalFrame is selected
javax.swing.JInternalFrame.restoreSubcomponentFocus(),void,
"javax.swing.JInternalFrame.reshape(int,int,int,int)",void,
javax.swing.JInternalFrame.addInternalFrameListener(InternalFrameListener),void,
javax.swing.JInternalFrame.removeInternalFrameListener(InternalFrameListener),void,
javax.swing.JInternalFrame.getInternalFrameListeners(),InternalFrameListener[],all of the InternalFrameListeners added or an empty array if no listeners have been added
javax.swing.JInternalFrame.fireInternalFrameEvent(int),void,
javax.swing.JInternalFrame.doDefaultCloseAction(),void,
javax.swing.JInternalFrame.setDefaultCloseOperation(int),void,
javax.swing.JInternalFrame.getDefaultCloseOperation(),int,the operation that will occur when the user closes the internal frame
javax.swing.JInternalFrame.pack(),void,
javax.swing.JInternalFrame.show(),void,
javax.swing.JInternalFrame.hide(),void,
javax.swing.JInternalFrame.dispose(),void,
javax.swing.JInternalFrame.toFront(),void,
javax.swing.JInternalFrame.toBack(),void,
javax.swing.JInternalFrame.setFocusCycleRoot(boolean),void,
javax.swing.JInternalFrame.isFocusCycleRoot(),boolean,true
javax.swing.JInternalFrame.getFocusCycleRootAncestor(),Container,null
javax.swing.JInternalFrame.getWarningString(),String,null
javax.swing.JInternalFrame.paramString(),String,a string representation of this JInternalFrame
javax.swing.JInternalFrame.paintComponent(Graphics),void,
javax.swing.JInternalFrame.getAccessibleContext(),AccessibleContext,an AccessibleJInternalFrame that serves as the AccessibleContext of this JInternalFrame
javax.swing.JInternalFrame.JDesktopIcon.getUI(),DesktopIconUI,the DesktopIconUI object that renders this component
javax.swing.JInternalFrame.JDesktopIcon.setUI(DesktopIconUI),void,
javax.swing.JInternalFrame.JDesktopIcon.getInternalFrame(),JInternalFrame,the JInternalFrame with which this icon is associated
javax.swing.JInternalFrame.JDesktopIcon.setInternalFrame(JInternalFrame),void,
javax.swing.JInternalFrame.JDesktopIcon.getDesktopPane(),JDesktopPane,"the JDesktopPane that contains this icon's internal frame, or null if none found"
javax.swing.JInternalFrame.JDesktopIcon.updateUI(),void,
javax.swing.JInternalFrame.JDesktopIcon.getUIClassID(),String,"the string ""DesktopIconUI"""
javax.swing.JInternalFrame.JDesktopIcon.getAccessibleContext(),AccessibleContext,an AccessibleJDesktopIcon that serves as the AccessibleContext of this JDesktopIcon
javax.swing.JLabel.getUI(),LabelUI,LabelUI object
javax.swing.JLabel.setUI(LabelUI),void,
javax.swing.JLabel.updateUI(),void,
javax.swing.JLabel.getUIClassID(),String,"String ""LabelUI"""
javax.swing.JLabel.getText(),String,a String
javax.swing.JLabel.setText(String),void,
javax.swing.JLabel.getIcon(),Icon,an Icon
javax.swing.JLabel.setIcon(Icon),void,
javax.swing.JLabel.getDisabledIcon(),Icon,the disabledIcon property
javax.swing.JLabel.setDisabledIcon(Icon),void,
javax.swing.JLabel.setDisplayedMnemonic(int),void,
javax.swing.JLabel.setDisplayedMnemonic(char),void,
javax.swing.JLabel.getDisplayedMnemonic(),int,int value for the mnemonic key
javax.swing.JLabel.setDisplayedMnemonicIndex(int),void,
javax.swing.JLabel.getDisplayedMnemonicIndex(),int,index representing mnemonic character
"javax.swing.JLabel.checkHorizontalKey(int,String)",int,
"javax.swing.JLabel.checkVerticalKey(int,String)",int,
javax.swing.JLabel.getIconTextGap(),int,an int equal to the number of pixels between the text and the icon.
javax.swing.JLabel.setIconTextGap(int),void,
javax.swing.JLabel.getVerticalAlignment(),int,"The value of the verticalAlignment property, one of the following constants defined in SwingConstants: TOP, CENTER, or BOTTOM."
javax.swing.JLabel.setVerticalAlignment(int),void,
javax.swing.JLabel.getHorizontalAlignment(),int,"The value of the horizontalAlignment property, one of the following constants defined in SwingConstants: LEFT, CENTER, RIGHT, LEADING or TRAILING."
javax.swing.JLabel.setHorizontalAlignment(int),void,
javax.swing.JLabel.getVerticalTextPosition(),int,"One of the following constants defined in SwingConstants: TOP, CENTER, or BOTTOM."
javax.swing.JLabel.setVerticalTextPosition(int),void,
javax.swing.JLabel.getHorizontalTextPosition(),int,"One of the following constants defined in SwingConstants: LEFT, CENTER, RIGHT, LEADING or TRAILING."
javax.swing.JLabel.setHorizontalTextPosition(int),void,
"javax.swing.JLabel.imageUpdate(Image,int,int,int,int,int)",boolean,false if the infoflags indicate that the image is completely loaded; true otherwise.
javax.swing.JLabel.paramString(),String,a string representation of this JLabel.
javax.swing.JLabel.getLabelFor(),Component,"the Component this is labelling. Can be null if this does not label a Component. If the displayedMnemonic property is set and the labelFor property is also set, the label will call the requestFocus method of the component specified by the labelFor property when the mnemonic is activated."
javax.swing.JLabel.setLabelFor(Component),void,
javax.swing.JLabel.getAccessibleContext(),AccessibleContext,the AccessibleContext of this object
javax.swing.JLayer.getView(),V,the JLayer's view component or null if none exists
javax.swing.JLayer.setView(V),void,
javax.swing.JLayer.setUI(LayerUI&lt;?),void,
javax.swing.JLayer.getUI(),LayerUI&lt;? super V&gt;,the LayerUI for this JLayer
javax.swing.JLayer.getGlassPane(),JPanel,the JLayer's glassPane component or null if none exists
javax.swing.JLayer.setGlassPane(JPanel),void,
javax.swing.JLayer.createGlassPane(),JPanel,the default glassPane
javax.swing.JLayer.setLayout(LayoutManager),void,
javax.swing.JLayer.setBorder(Border),void,
"javax.swing.JLayer.addImpl(Component,Object,int)",void,
javax.swing.JLayer.remove(Component),void,
javax.swing.JLayer.removeAll(),void,
javax.swing.JLayer.isPaintingOrigin(),boolean,true
"javax.swing.JLayer.paintImmediately(int,int,int,int)",void,
javax.swing.JLayer.paint(Graphics),void,
javax.swing.JLayer.paintComponent(Graphics),void,
javax.swing.JLayer.isOptimizedDrawingEnabled(),boolean,false
javax.swing.JLayer.propertyChange(PropertyChangeEvent),void,
javax.swing.JLayer.setLayerEventMask(long),void,
javax.swing.JLayer.getLayerEventMask(),long,the bitmask of event types to receive for this JLayer
javax.swing.JLayer.updateUI(),void,
javax.swing.JLayer.getPreferredScrollableViewportSize(),Dimension,the preferred size of the viewport for a view component
"javax.swing.JLayer.getScrollableBlockIncrement(Rectangle,int,int)",int,"the ""block"" increment for scrolling in the specified direction"
javax.swing.JLayer.getScrollableTracksViewportHeight(),boolean,whether the layer should track the height of the viewport
javax.swing.JLayer.getScrollableTracksViewportWidth(),boolean,whether the layer should track the width of the viewport
"javax.swing.JLayer.getScrollableUnitIncrement(Rectangle,int,int)",int,"The ""unit"" increment for scrolling in the specified direction. This value should always be positive."
javax.swing.JLayer.addNotify(),void,
javax.swing.JLayer.removeNotify(),void,
javax.swing.JLayer.doLayout(),void,
javax.swing.JLayer.getAccessibleContext(),AccessibleContext,the AccessibleContext associated with this JLayer.
"javax.swing.JLayeredPane.addImpl(Component,Object,int)",void,
javax.swing.JLayeredPane.remove(int),void,
javax.swing.JLayeredPane.removeAll(),void,
javax.swing.JLayeredPane.isOptimizedDrawingEnabled(),boolean,"false if components can overlap, else true"
"javax.swing.JLayeredPane.putLayer(JComponent,int)",void,
javax.swing.JLayeredPane.getLayer(JComponent),int,an int specifying the component's layer
javax.swing.JLayeredPane.getLayeredPaneAbove(Component),JLayeredPane,"the JLayeredPane that contains the component, or null if no JLayeredPane is found in the component hierarchy"
"javax.swing.JLayeredPane.setLayer(Component,int)",void,
"javax.swing.JLayeredPane.setLayer(Component,int,int)",void,
javax.swing.JLayeredPane.getLayer(Component),int,an int specifying the component's current layer
javax.swing.JLayeredPane.getIndexOf(Component),int,an int specifying the component's index
javax.swing.JLayeredPane.moveToFront(Component),void,
javax.swing.JLayeredPane.moveToBack(Component),void,
"javax.swing.JLayeredPane.setPosition(Component,int)",void,
javax.swing.JLayeredPane.getPosition(Component),int,"an int giving the component's position, where 0 is the topmost position and the highest index value = the count count of components at that layer, minus 1"
javax.swing.JLayeredPane.highestLayer(),int,"an int indicating the layer of the topmost component in the pane, or zero if there are no children"
javax.swing.JLayeredPane.lowestLayer(),int,"an int indicating the layer of the bottommost component in the pane, or zero if there are no children"
javax.swing.JLayeredPane.getComponentCountInLayer(int),int,an int specifying the number of components in that layer
javax.swing.JLayeredPane.getComponentsInLayer(int),Component[],an array of Components contained in that layer
javax.swing.JLayeredPane.paint(Graphics),void,
javax.swing.JLayeredPane.getComponentToLayer(),"Hashtable&lt;Component,Integer&gt;",the Hashtable used to map components to their layers
javax.swing.JLayeredPane.getObjectForLayer(int),Integer,an Integer object for that layer
"javax.swing.JLayeredPane.insertIndexForLayer(int,int)",int,an int giving the (absolute) insertion-index
javax.swing.JLayeredPane.paramString(),String,a string representation of this JLayeredPane.
javax.swing.JLayeredPane.getAccessibleContext(),AccessibleContext,an AccessibleJLayeredPane that serves as the AccessibleContext of this JLayeredPane
javax.swing.JList.getUI(),ListUI,the ListUI object that renders this component
javax.swing.JList.setUI(ListUI),void,
javax.swing.JList.updateUI(),void,
javax.swing.JList.getUIClassID(),String,"the string ""ListUI"""
javax.swing.JList.getPrototypeCellValue(),E,the value of the prototypeCellValue property
javax.swing.JList.setPrototypeCellValue(E),void,
javax.swing.JList.getFixedCellWidth(),int,the fixed cell width
javax.swing.JList.setFixedCellWidth(int),void,
javax.swing.JList.getFixedCellHeight(),int,the fixed cell height
javax.swing.JList.setFixedCellHeight(int),void,
javax.swing.JList.getCellRenderer(),ListCellRenderer&lt;? super E&gt;,the value of the cellRenderer property
javax.swing.JList.setCellRenderer(ListCellRenderer&lt;?),void,
javax.swing.JList.getSelectionForeground(),Color,the color to draw the foreground of selected items
javax.swing.JList.setSelectionForeground(Color),void,
javax.swing.JList.getSelectionBackground(),Color,the color to draw the background of selected items
javax.swing.JList.setSelectionBackground(Color),void,
javax.swing.JList.getVisibleRowCount(),int,the value of the visibleRowCount property.
javax.swing.JList.setVisibleRowCount(int),void,
javax.swing.JList.getLayoutOrientation(),int,the value of the layoutOrientation property
javax.swing.JList.setLayoutOrientation(int),void,
javax.swing.JList.getFirstVisibleIndex(),int,the index of the first visible cell
javax.swing.JList.getLastVisibleIndex(),int,the index of the last visible cell
javax.swing.JList.ensureIndexIsVisible(int),void,
javax.swing.JList.setDragEnabled(boolean),void,
javax.swing.JList.getDragEnabled(),boolean,the value of the dragEnabled property
javax.swing.JList.setDropMode(DropMode),void,
javax.swing.JList.getDropMode(),DropMode,the drop mode for this component
javax.swing.JList.getDropLocation(),JList.DropLocation,the drop location
"javax.swing.JList.getNextMatch(String,int,Position.Bias)",int,the index of the next list element that starts with the prefix; otherwise -1
javax.swing.JList.getToolTipText(MouseEvent),String,
javax.swing.JList.locationToIndex(Point),int,"the cell index closest to the given location, or -1"
javax.swing.JList.indexToLocation(int),Point,"the origin of the cell, or null"
"javax.swing.JList.getCellBounds(int,int)",Rectangle,"the bounding rectangle for the range of cells, or null"
javax.swing.JList.getModel(),ListModel&lt;E&gt;,the ListModel that provides the displayed list of items
javax.swing.JList.setModel(ListModel&lt;E&gt;),void,
javax.swing.JList.setListData(E[]),void,
javax.swing.JList.setListData(Vector&lt;?),void,
javax.swing.JList.createSelectionModel(),ListSelectionModel,"a DefaultListSelecitonModel, used to initialize the list's selection model property during construction"
javax.swing.JList.getSelectionModel(),ListSelectionModel,the ListSelectionModel that maintains the list's selections
"javax.swing.JList.fireSelectionValueChanged(int,int,boolean)",void,
javax.swing.JList.addListSelectionListener(ListSelectionListener),void,
javax.swing.JList.removeListSelectionListener(ListSelectionListener),void,
javax.swing.JList.getListSelectionListeners(),ListSelectionListener[],"all of the ListSelectionListeners on this list, or an empty array if no listeners have been added"
javax.swing.JList.setSelectionModel(ListSelectionModel),void,
javax.swing.JList.setSelectionMode(int),void,
javax.swing.JList.getSelectionMode(),int,the current selection mode
javax.swing.JList.getAnchorSelectionIndex(),int,the anchor selection index
javax.swing.JList.getLeadSelectionIndex(),int,the lead selection index
javax.swing.JList.getMinSelectionIndex(),int,"the smallest selected cell index, or -1"
javax.swing.JList.getMaxSelectionIndex(),int,the largest selected cell index
javax.swing.JList.isSelectedIndex(int),boolean,"true if the specified index is selected, else false"
javax.swing.JList.isSelectionEmpty(),boolean,"true if nothing is selected, else false"
javax.swing.JList.clearSelection(),void,
"javax.swing.JList.setSelectionInterval(int,int)",void,
"javax.swing.JList.addSelectionInterval(int,int)",void,
"javax.swing.JList.removeSelectionInterval(int,int)",void,
javax.swing.JList.setValueIsAdjusting(boolean),void,
javax.swing.JList.getValueIsAdjusting(),boolean,the value of the selection model's isAdjusting property.
javax.swing.JList.getSelectedIndices(),int[],"all of the selected indices, in increasing order, or an empty array if nothing is selected"
javax.swing.JList.setSelectedIndex(int),void,
javax.swing.JList.setSelectedIndices(int[]),void,
javax.swing.JList.getSelectedValues(),Object[],"the selected values, or an empty array if nothing is selected"
javax.swing.JList.getSelectedValuesList(),List&lt;E&gt;,"the selected items, or an empty list if nothing is selected"
javax.swing.JList.getSelectedIndex(),int,the smallest selected cell index
javax.swing.JList.getSelectedValue(),E,the first selected value
"javax.swing.JList.setSelectedValue(Object,boolean)",void,
javax.swing.JList.getPreferredScrollableViewportSize(),Dimension,a dimension containing the size of the viewport needed to display visibleRowCount rows
"javax.swing.JList.getScrollableUnitIncrement(Rectangle,int,int)",int,"the ""unit"" increment for scrolling in the specified direction; always positive"
"javax.swing.JList.getScrollableBlockIncrement(Rectangle,int,int)",int,
javax.swing.JList.getScrollableTracksViewportWidth(),boolean,whether or not an enclosing viewport should force the list's width to match its own
javax.swing.JList.getScrollableTracksViewportHeight(),boolean,whether or not an enclosing viewport should force the list's height to match its own
javax.swing.JList.paramString(),String,a String representation of this JList.
javax.swing.JList.getAccessibleContext(),AccessibleContext,an AccessibleJList that serves as the AccessibleContext of this JList
javax.swing.JList.DropLocation.getIndex(),int,the drop index
javax.swing.JList.DropLocation.isInsert(),boolean,whether or not this is an insert location
javax.swing.JList.DropLocation.toString(),String,a string representation of this drop location
javax.swing.JMenu.updateUI(),void,
javax.swing.JMenu.getUIClassID(),String,"the string ""MenuUI"""
javax.swing.JMenu.setModel(ButtonModel),void,
javax.swing.JMenu.isSelected(),boolean,"true if the menu is selected, else false"
javax.swing.JMenu.setSelected(boolean),void,
javax.swing.JMenu.isPopupMenuVisible(),boolean,"true if the menu is visible, else false"
javax.swing.JMenu.setPopupMenuVisible(boolean),void,
javax.swing.JMenu.getPopupMenuOrigin(),Point,a Point in the coordinate space of the menu which should be used as the origin of the JMenu's popup menu
javax.swing.JMenu.getDelay(),int,the delay property
javax.swing.JMenu.setDelay(int),void,
"javax.swing.JMenu.setMenuLocation(int,int)",void,
javax.swing.JMenu.add(JMenuItem),JMenuItem,the JMenuItem added
javax.swing.JMenu.add(Component),Component,the Component added
"javax.swing.JMenu.add(Component,int)",Component,the Component added
javax.swing.JMenu.add(String),JMenuItem,
javax.swing.JMenu.add(Action),JMenuItem,
javax.swing.JMenu.createActionComponent(Action),JMenuItem,the new menu item
javax.swing.JMenu.createActionChangeListener(JMenuItem),PropertyChangeListener,
javax.swing.JMenu.addSeparator(),void,
"javax.swing.JMenu.insert(String,int)",void,
"javax.swing.JMenu.insert(JMenuItem,int)",JMenuItem,the new menu item
"javax.swing.JMenu.insert(Action,int)",JMenuItem,
javax.swing.JMenu.insertSeparator(int),void,
javax.swing.JMenu.getItem(int),JMenuItem,the menu item at the specified position; or null if the item as the specified position is not a menu item
javax.swing.JMenu.getItemCount(),int,an integer equal to the number of items on the menu
javax.swing.JMenu.isTearOff(),boolean,"true if the menu can be torn off, else false"
javax.swing.JMenu.remove(JMenuItem),void,
javax.swing.JMenu.remove(int),void,
javax.swing.JMenu.remove(Component),void,
javax.swing.JMenu.removeAll(),void,
javax.swing.JMenu.getMenuComponentCount(),int,an integer containing the number of components on the menu
javax.swing.JMenu.getMenuComponent(int),Component,"the component requested, or null if there is no popup menu"
javax.swing.JMenu.getMenuComponents(),Component[],an array of Components or an empty array if there is no popup menu
javax.swing.JMenu.isTopLevelMenu(),boolean,true if the menu is activated from the menu bar; false if the menu is activated from a menu item on another menu
javax.swing.JMenu.isMenuComponent(Component),boolean,"true if the Component exists, false otherwise"
javax.swing.JMenu.getPopupMenu(),JPopupMenu,
javax.swing.JMenu.addMenuListener(MenuListener),void,
javax.swing.JMenu.removeMenuListener(MenuListener),void,
javax.swing.JMenu.getMenuListeners(),MenuListener[],all of the MenuListeners added or an empty array if no listeners have been added
javax.swing.JMenu.fireMenuSelected(),void,
javax.swing.JMenu.fireMenuDeselected(),void,
javax.swing.JMenu.fireMenuCanceled(),void,
javax.swing.JMenu.createWinListener(JPopupMenu),JMenu.WinListener,the new window-closing listener
javax.swing.JMenu.menuSelectionChanged(boolean),void,
javax.swing.JMenu.getSubElements(),MenuElement[],an array of MenuElement objects
javax.swing.JMenu.getComponent(),Component,the Component that paints this menu item
javax.swing.JMenu.applyComponentOrientation(ComponentOrientation),void,
javax.swing.JMenu.setComponentOrientation(ComponentOrientation),void,
javax.swing.JMenu.setAccelerator(KeyStroke),void,
javax.swing.JMenu.processKeyEvent(KeyEvent),void,
javax.swing.JMenu.doClick(int),void,
javax.swing.JMenu.paramString(),String,a string representation of this JMenu.
javax.swing.JMenu.getAccessibleContext(),AccessibleContext,an AccessibleJMenu that serves as the AccessibleContext of this JMenu
javax.swing.JMenuBar.getUI(),MenuBarUI,
javax.swing.JMenuBar.setUI(MenuBarUI),void,
javax.swing.JMenuBar.updateUI(),void,
javax.swing.JMenuBar.getUIClassID(),String,"the string ""MenuBarUI"""
javax.swing.JMenuBar.getSelectionModel(),SingleSelectionModel,the SingleSelectionModel property
javax.swing.JMenuBar.setSelectionModel(SingleSelectionModel),void,
javax.swing.JMenuBar.add(JMenu),JMenu,the menu component
javax.swing.JMenuBar.getMenu(int),JMenu,"the JMenu at that position, or null if if there is no JMenu at that position (ie. if it is a JMenuItem)"
javax.swing.JMenuBar.getMenuCount(),int,the number of items in the menu bar
javax.swing.JMenuBar.setHelpMenu(JMenu),void,
javax.swing.JMenuBar.getHelpMenu(),JMenu,the JMenu that delivers help to the user
javax.swing.JMenuBar.getComponentAtIndex(int),Component,"the Component at the position, or null for an invalid index"
javax.swing.JMenuBar.getComponentIndex(Component),int,"an integer giving the component's position, where 0 is first; or -1 if it can't be found"
javax.swing.JMenuBar.setSelected(Component),void,
javax.swing.JMenuBar.isSelected(),boolean,"true if a selection has been made, else false"
javax.swing.JMenuBar.isBorderPainted(),boolean,"true if the border should be painted, else false"
javax.swing.JMenuBar.setBorderPainted(boolean),void,
javax.swing.JMenuBar.paintBorder(Graphics),void,
javax.swing.JMenuBar.setMargin(Insets),void,
javax.swing.JMenuBar.getMargin(),Insets,an Insets object containing the margin values
"javax.swing.JMenuBar.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)",void,
"javax.swing.JMenuBar.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)",void,
javax.swing.JMenuBar.menuSelectionChanged(boolean),void,
javax.swing.JMenuBar.getSubElements(),MenuElement[],an array of menu items in the menu bar.
javax.swing.JMenuBar.getComponent(),Component,the current Component (this)
javax.swing.JMenuBar.paramString(),String,a string representation of this JMenuBar
javax.swing.JMenuBar.getAccessibleContext(),AccessibleContext,an AccessibleJMenuBar that serves as the AccessibleContext of this JMenuBar
"javax.swing.JMenuBar.processKeyBinding(KeyStroke,KeyEvent,int,boolean)",boolean,
javax.swing.JMenuBar.addNotify(),void,
javax.swing.JMenuBar.removeNotify(),void,
javax.swing.JMenuItem.setModel(ButtonModel),void,
"javax.swing.JMenuItem.init(String,Icon)",void,
javax.swing.JMenuItem.setUI(MenuItemUI),void,
javax.swing.JMenuItem.updateUI(),void,
javax.swing.JMenuItem.getUIClassID(),String,"the string ""MenuItemUI"""
javax.swing.JMenuItem.setArmed(boolean),void,
javax.swing.JMenuItem.isArmed(),boolean,"true if the menu item is armed, and it can be selected"
javax.swing.JMenuItem.setEnabled(boolean),void,
javax.swing.JMenuItem.setAccelerator(KeyStroke),void,
javax.swing.JMenuItem.getAccelerator(),KeyStroke,a KeyStroke object identifying the accelerator key
javax.swing.JMenuItem.configurePropertiesFromAction(Action),void,
"javax.swing.JMenuItem.actionPropertyChanged(Action,String)",void,
"javax.swing.JMenuItem.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)",void,
"javax.swing.JMenuItem.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)",void,
javax.swing.JMenuItem.processMenuDragMouseEvent(MenuDragMouseEvent),void,
javax.swing.JMenuItem.processMenuKeyEvent(MenuKeyEvent),void,
javax.swing.JMenuItem.fireMenuDragMouseEntered(MenuDragMouseEvent),void,
javax.swing.JMenuItem.fireMenuDragMouseExited(MenuDragMouseEvent),void,
javax.swing.JMenuItem.fireMenuDragMouseDragged(MenuDragMouseEvent),void,
javax.swing.JMenuItem.fireMenuDragMouseReleased(MenuDragMouseEvent),void,
javax.swing.JMenuItem.fireMenuKeyPressed(MenuKeyEvent),void,
javax.swing.JMenuItem.fireMenuKeyReleased(MenuKeyEvent),void,
javax.swing.JMenuItem.fireMenuKeyTyped(MenuKeyEvent),void,
javax.swing.JMenuItem.menuSelectionChanged(boolean),void,
javax.swing.JMenuItem.getSubElements(),MenuElement[],an array of MenuElements
javax.swing.JMenuItem.getComponent(),Component,the Component that paints this menu item
javax.swing.JMenuItem.addMenuDragMouseListener(MenuDragMouseListener),void,
javax.swing.JMenuItem.removeMenuDragMouseListener(MenuDragMouseListener),void,
javax.swing.JMenuItem.getMenuDragMouseListeners(),MenuDragMouseListener[],all of the MenuDragMouseListeners added or an empty array if no listeners have been added
javax.swing.JMenuItem.addMenuKeyListener(MenuKeyListener),void,
javax.swing.JMenuItem.removeMenuKeyListener(MenuKeyListener),void,
javax.swing.JMenuItem.getMenuKeyListeners(),MenuKeyListener[],all of the MenuKeyListeners added or an empty array if no listeners have been added
javax.swing.JMenuItem.paramString(),String,a string representation of this JMenuItem
javax.swing.JMenuItem.getAccessibleContext(),AccessibleContext,an AccessibleJMenuItem that serves as the AccessibleContext of this JMenuItem
javax.swing.JOptionPane.showInputDialog(Object),String,
"javax.swing.JOptionPane.showInputDialog(Object,Object)",String,
"javax.swing.JOptionPane.showInputDialog(Component,Object)",String,
"javax.swing.JOptionPane.showInputDialog(Component,Object,Object)",String,
"javax.swing.JOptionPane.showInputDialog(Component,Object,String,int)",String,
"javax.swing.JOptionPane.showInputDialog(Component,Object,String,int,Icon,Object[],Object)",Object,"user's input, or null meaning the user canceled the input"
"javax.swing.JOptionPane.showMessageDialog(Component,Object)",void,
"javax.swing.JOptionPane.showMessageDialog(Component,Object,String,int)",void,
"javax.swing.JOptionPane.showMessageDialog(Component,Object,String,int,Icon)",void,
"javax.swing.JOptionPane.showConfirmDialog(Component,Object)",int,an integer indicating the option selected by the user
"javax.swing.JOptionPane.showConfirmDialog(Component,Object,String,int)",int,an int indicating the option selected by the user
"javax.swing.JOptionPane.showConfirmDialog(Component,Object,String,int,int)",int,an integer indicating the option selected by the user
"javax.swing.JOptionPane.showConfirmDialog(Component,Object,String,int,int,Icon)",int,an int indicating the option selected by the user
"javax.swing.JOptionPane.showOptionDialog(Component,Object,String,int,int,Icon,Object[],Object)",int,"an integer indicating the option chosen by the user, or CLOSED_OPTION if the user closed the dialog"
"javax.swing.JOptionPane.createDialog(Component,String)",JDialog,a new JDialog containing this instance
javax.swing.JOptionPane.createDialog(String),JDialog,a new JDialog containing this instance
"javax.swing.JOptionPane.showInternalMessageDialog(Component,Object)",void,
"javax.swing.JOptionPane.showInternalMessageDialog(Component,Object,String,int)",void,
"javax.swing.JOptionPane.showInternalMessageDialog(Component,Object,String,int,Icon)",void,
"javax.swing.JOptionPane.showInternalConfirmDialog(Component,Object)",int,an integer indicating the option selected by the user
"javax.swing.JOptionPane.showInternalConfirmDialog(Component,Object,String,int)",int,an integer indicating the option selected by the user
"javax.swing.JOptionPane.showInternalConfirmDialog(Component,Object,String,int,int)",int,an integer indicating the option selected by the user
"javax.swing.JOptionPane.showInternalConfirmDialog(Component,Object,String,int,int,Icon)",int,an integer indicating the option selected by the user
"javax.swing.JOptionPane.showInternalOptionDialog(Component,Object,String,int,int,Icon,Object[],Object)",int,"an integer indicating the option chosen by the user, or CLOSED_OPTION if the user closed the Dialog"
"javax.swing.JOptionPane.showInternalInputDialog(Component,Object)",String,
"javax.swing.JOptionPane.showInternalInputDialog(Component,Object,String,int)",String,
"javax.swing.JOptionPane.showInternalInputDialog(Component,Object,String,int,Icon,Object[],Object)",Object,"user's input, or null meaning the user canceled the input"
"javax.swing.JOptionPane.createInternalFrame(Component,String)",JInternalFrame,a JInternalFrame containing a JOptionPane
javax.swing.JOptionPane.getFrameForComponent(Component),Frame,"the Frame that contains the component, or getRootFrame if the component is null, or does not have a valid Frame parent"
javax.swing.JOptionPane.getDesktopPaneForComponent(Component),JDesktopPane,"the JDesktopPane that contains the component, or null if the component is null or does not have an ancestor that is a JInternalFrame"
javax.swing.JOptionPane.setRootFrame(Frame),void,
javax.swing.JOptionPane.getRootFrame(),Frame,the default Frame to use
javax.swing.JOptionPane.setUI(OptionPaneUI),void,
javax.swing.JOptionPane.getUI(),OptionPaneUI,the OptionPaneUI object
javax.swing.JOptionPane.updateUI(),void,
javax.swing.JOptionPane.getUIClassID(),String,"the string ""OptionPaneUI"""
javax.swing.JOptionPane.setMessage(Object),void,
javax.swing.JOptionPane.getMessage(),Object,the Object that is displayed
javax.swing.JOptionPane.setIcon(Icon),void,
javax.swing.JOptionPane.getIcon(),Icon,the Icon that is displayed
javax.swing.JOptionPane.setValue(Object),void,
javax.swing.JOptionPane.getValue(),Object,"the Object chosen by the user, UNINITIALIZED_VALUE if the user has not yet made a choice, or null if the user closed the window without making a choice"
javax.swing.JOptionPane.setOptions(Object[]),void,
javax.swing.JOptionPane.getOptions(),Object[],the array of Objects that give the user's choices
javax.swing.JOptionPane.setInitialValue(Object),void,
javax.swing.JOptionPane.getInitialValue(),Object,the Object that gets the initial keyboard focus
javax.swing.JOptionPane.setMessageType(int),void,
javax.swing.JOptionPane.getMessageType(),int,an integer specifying the message type
javax.swing.JOptionPane.setOptionType(int),void,
javax.swing.JOptionPane.getOptionType(),int,an integer specifying the user-selectable options
javax.swing.JOptionPane.setSelectionValues(Object[]),void,
javax.swing.JOptionPane.getSelectionValues(),Object[],the array of Objects the user can select
javax.swing.JOptionPane.setInitialSelectionValue(Object),void,
javax.swing.JOptionPane.getInitialSelectionValue(),Object,the initially selected value
javax.swing.JOptionPane.setInputValue(Object),void,
javax.swing.JOptionPane.getInputValue(),Object,"the Object the user specified, if it was one of the objects, or a String if it was a value typed into a field"
javax.swing.JOptionPane.getMaxCharactersPerLineCount(),int,an integer giving the maximum number of characters on a line
javax.swing.JOptionPane.setWantsInput(boolean),void,
javax.swing.JOptionPane.getWantsInput(),boolean,true if an input component will be provided
javax.swing.JOptionPane.selectInitialValue(),void,
javax.swing.JOptionPane.paramString(),String,a string representation of this JOptionPane
javax.swing.JOptionPane.getAccessibleContext(),AccessibleContext,an AccessibleJOptionPane that serves as the AccessibleContext of this AccessibleJOptionPane
javax.swing.JPanel.updateUI(),void,
javax.swing.JPanel.getUI(),PanelUI,the PanelUI object that renders this component
javax.swing.JPanel.setUI(PanelUI),void,
javax.swing.JPanel.getUIClassID(),String,"""PanelUI"""
javax.swing.JPanel.paramString(),String,a string representation of this JPanel.
javax.swing.JPanel.getAccessibleContext(),AccessibleContext,an AccessibleJPanel that serves as the AccessibleContext of this JPanel
javax.swing.JPasswordField.getUIClassID(),String,"the string ""PasswordFieldUI"""
javax.swing.JPasswordField.updateUI(),void,
javax.swing.JPasswordField.getEchoChar(),char,"the echo character, 0 if unset"
javax.swing.JPasswordField.setEchoChar(char),void,
javax.swing.JPasswordField.echoCharIsSet(),boolean,true if a character is set for echoing
javax.swing.JPasswordField.cut(),void,
javax.swing.JPasswordField.copy(),void,
javax.swing.JPasswordField.getText(),String,the text
"javax.swing.JPasswordField.getText(int,int)",String,the text
javax.swing.JPasswordField.getPassword(),char[],the text
javax.swing.JPasswordField.paramString(),String,a string representation of this JPasswordField
javax.swing.JPasswordField.getAccessibleContext(),AccessibleContext,an AccessibleJPasswordField that serves as the AccessibleContext of this JPasswordField
javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(boolean),void,
javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled(),boolean,the value of the defaultLightWeightPopupEnabled property
javax.swing.JPopupMenu.getUI(),PopupMenuUI,the PopupMenuUI object that renders this component
javax.swing.JPopupMenu.setUI(PopupMenuUI),void,
javax.swing.JPopupMenu.updateUI(),void,
javax.swing.JPopupMenu.getUIClassID(),String,"the string ""PopupMenuUI"""
javax.swing.JPopupMenu.processFocusEvent(FocusEvent),void,
javax.swing.JPopupMenu.processKeyEvent(KeyEvent),void,
javax.swing.JPopupMenu.getSelectionModel(),SingleSelectionModel,the selectionModel property
javax.swing.JPopupMenu.setSelectionModel(SingleSelectionModel),void,
javax.swing.JPopupMenu.add(JMenuItem),JMenuItem,the JMenuItem added
javax.swing.JPopupMenu.add(String),JMenuItem,
javax.swing.JPopupMenu.add(Action),JMenuItem,the new menu item
javax.swing.JPopupMenu.createActionComponent(Action),JMenuItem,the new menu item
javax.swing.JPopupMenu.createActionChangeListener(JMenuItem),PropertyChangeListener,
javax.swing.JPopupMenu.remove(int),void,
javax.swing.JPopupMenu.setLightWeightPopupEnabled(boolean),void,
javax.swing.JPopupMenu.isLightWeightPopupEnabled(),boolean,the value of the lightWeightPopupEnabled property
javax.swing.JPopupMenu.getLabel(),String,a string containing the popup menu's label
javax.swing.JPopupMenu.setLabel(String),void,
javax.swing.JPopupMenu.addSeparator(),void,
"javax.swing.JPopupMenu.insert(Action,int)",void,
"javax.swing.JPopupMenu.insert(Component,int)",void,
javax.swing.JPopupMenu.addPopupMenuListener(PopupMenuListener),void,
javax.swing.JPopupMenu.removePopupMenuListener(PopupMenuListener),void,
javax.swing.JPopupMenu.getPopupMenuListeners(),PopupMenuListener[],all of the PopupMenuListeners added or an empty array if no listeners have been added
javax.swing.JPopupMenu.addMenuKeyListener(MenuKeyListener),void,
javax.swing.JPopupMenu.removeMenuKeyListener(MenuKeyListener),void,
javax.swing.JPopupMenu.getMenuKeyListeners(),MenuKeyListener[],all of the MenuKeyListeners added or an empty array if no listeners have been added
javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible(),void,
javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible(),void,
javax.swing.JPopupMenu.firePopupMenuCanceled(),void,
javax.swing.JPopupMenu.pack(),void,
javax.swing.JPopupMenu.setVisible(boolean),void,
javax.swing.JPopupMenu.isVisible(),boolean,"true if the component is visible, false otherwise"
"javax.swing.JPopupMenu.setLocation(int,int)",void,
javax.swing.JPopupMenu.getInvoker(),Component,the Component in which the popup menu is displayed
javax.swing.JPopupMenu.setInvoker(Component),void,
"javax.swing.JPopupMenu.show(Component,int,int)",void,
javax.swing.JPopupMenu.getComponentAtIndex(int),Component,the Component at that index
javax.swing.JPopupMenu.getComponentIndex(Component),int,"the index of the component, where 0 is the first; or -1 if the component is not found"
javax.swing.JPopupMenu.setPopupSize(Dimension),void,
"javax.swing.JPopupMenu.setPopupSize(int,int)",void,
javax.swing.JPopupMenu.setSelected(Component),void,
javax.swing.JPopupMenu.isBorderPainted(),boolean,"true if the border is painted, false otherwise"
javax.swing.JPopupMenu.setBorderPainted(boolean),void,
javax.swing.JPopupMenu.paintBorder(Graphics),void,
javax.swing.JPopupMenu.getMargin(),Insets,an Insets object containing the margin values.
javax.swing.JPopupMenu.paramString(),String,a string representation of this JPopupMenu.
javax.swing.JPopupMenu.getAccessibleContext(),AccessibleContext,an AccessibleJPopupMenu that serves as the AccessibleContext of this JPopupMenu
"javax.swing.JPopupMenu.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)",void,
"javax.swing.JPopupMenu.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)",void,
javax.swing.JPopupMenu.menuSelectionChanged(boolean),void,
javax.swing.JPopupMenu.getSubElements(),MenuElement[],an array of MenuElement objects
javax.swing.JPopupMenu.getComponent(),Component,this JPopupMenu object
javax.swing.JPopupMenu.isPopupTrigger(MouseEvent),boolean,true if the mouse event is a popup trigger
javax.swing.JPopupMenu.Separator.getUIClassID(),String,"the string ""PopupMenuSeparatorUI"""
javax.swing.JProgressBar.getOrientation(),int,HORIZONTAL or VERTICAL
javax.swing.JProgressBar.setOrientation(int),void,
javax.swing.JProgressBar.isStringPainted(),boolean,the value of the stringPainted property
javax.swing.JProgressBar.setStringPainted(boolean),void,
javax.swing.JProgressBar.getString(),String,"the value of the progress string, or a simple percentage string if the progress string is null"
javax.swing.JProgressBar.setString(String),void,
javax.swing.JProgressBar.getPercentComplete(),double,the percent complete for this progress bar
javax.swing.JProgressBar.isBorderPainted(),boolean,the value of the borderPainted property
javax.swing.JProgressBar.setBorderPainted(boolean),void,
javax.swing.JProgressBar.paintBorder(Graphics),void,
javax.swing.JProgressBar.getUI(),ProgressBarUI,the ProgressBarUI object that renders this component
javax.swing.JProgressBar.setUI(ProgressBarUI),void,
javax.swing.JProgressBar.updateUI(),void,
javax.swing.JProgressBar.getUIClassID(),String,"the string ""ProgressBarUI"""
javax.swing.JProgressBar.createChangeListener(),ChangeListener,
javax.swing.JProgressBar.addChangeListener(ChangeListener),void,
javax.swing.JProgressBar.removeChangeListener(ChangeListener),void,
javax.swing.JProgressBar.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.JProgressBar.fireStateChanged(),void,
javax.swing.JProgressBar.getModel(),BoundedRangeModel,the BoundedRangeModel currently in use
javax.swing.JProgressBar.setModel(BoundedRangeModel),void,
javax.swing.JProgressBar.getValue(),int,the current value of the progress bar
javax.swing.JProgressBar.getMinimum(),int,the progress bar's minimum value
javax.swing.JProgressBar.getMaximum(),int,the progress bar's maximum value
javax.swing.JProgressBar.setValue(int),void,
javax.swing.JProgressBar.setMinimum(int),void,
javax.swing.JProgressBar.setMaximum(int),void,
javax.swing.JProgressBar.setIndeterminate(boolean),void,
javax.swing.JProgressBar.isIndeterminate(),boolean,the value of the indeterminate property
javax.swing.JProgressBar.paramString(),String,a string representation of this JProgressBar
javax.swing.JProgressBar.getAccessibleContext(),AccessibleContext,an AccessibleJProgressBar that serves as the AccessibleContext of this JProgressBar
javax.swing.JRadioButton.updateUI(),void,
javax.swing.JRadioButton.getUIClassID(),String,"String ""RadioButtonUI"""
javax.swing.JRadioButton.paramString(),String,a string representation of this JRadioButton.
javax.swing.JRadioButton.getAccessibleContext(),AccessibleContext,an AccessibleJRadioButton that serves as the AccessibleContext of this JRadioButton
javax.swing.JRadioButtonMenuItem.getUIClassID(),String,"the string ""RadioButtonMenuItemUI"""
javax.swing.JRadioButtonMenuItem.paramString(),String,a string representation of this JRadioButtonMenuItem
javax.swing.JRadioButtonMenuItem.getAccessibleContext(),AccessibleContext,an AccessibleJRadioButtonMenuItem that serves as the AccessibleContext of this JRadioButtonMenuItem
javax.swing.JRootPane.setDoubleBuffered(boolean),void,
javax.swing.JRootPane.getWindowDecorationStyle(),int,"One of NONE, FRAME, PLAIN_DIALOG, INFORMATION_DIALOG, ERROR_DIALOG, COLOR_CHOOSER_DIALOG, FILE_CHOOSER_DIALOG, QUESTION_DIALOG or WARNING_DIALOG."
javax.swing.JRootPane.setWindowDecorationStyle(int),void,
javax.swing.JRootPane.getUI(),RootPaneUI,LabelUI object
javax.swing.JRootPane.setUI(RootPaneUI),void,
javax.swing.JRootPane.updateUI(),void,
javax.swing.JRootPane.getUIClassID(),String,"the string ""RootPaneUI"""
javax.swing.JRootPane.createLayeredPane(),JLayeredPane,the default layeredPane
javax.swing.JRootPane.createContentPane(),Container,the default contentPane
javax.swing.JRootPane.createGlassPane(),Component,the default glassPane
javax.swing.JRootPane.createRootLayout(),LayoutManager,the default layoutManager.
javax.swing.JRootPane.setJMenuBar(JMenuBar),void,
javax.swing.JRootPane.setMenuBar(JMenuBar),void,
javax.swing.JRootPane.getJMenuBar(),JMenuBar,the JMenuBar used in the pane
javax.swing.JRootPane.getMenuBar(),JMenuBar,the JMenuBar used in the pane
javax.swing.JRootPane.setContentPane(Container),void,
javax.swing.JRootPane.getContentPane(),Container,the Container that holds the component-contents
javax.swing.JRootPane.setLayeredPane(JLayeredPane),void,
javax.swing.JRootPane.getLayeredPane(),JLayeredPane,the JLayeredPane currently in use
javax.swing.JRootPane.setGlassPane(Component),void,
javax.swing.JRootPane.getGlassPane(),Component,the current glass pane
javax.swing.JRootPane.isValidateRoot(),boolean,true
javax.swing.JRootPane.isOptimizedDrawingEnabled(),boolean,true if this component's children don't overlap
javax.swing.JRootPane.addNotify(),void,
javax.swing.JRootPane.removeNotify(),void,
javax.swing.JRootPane.setDefaultButton(JButton),void,
javax.swing.JRootPane.getDefaultButton(),JButton,the JButton which is currently the default button
"javax.swing.JRootPane.addImpl(Component,Object,int)",void,
javax.swing.JRootPane.paramString(),String,a string representation of this JRootPane.
javax.swing.JRootPane.getAccessibleContext(),AccessibleContext,an AccessibleJRootPane that serves as the AccessibleContext of this JRootPane
javax.swing.JScrollBar.setUI(ScrollBarUI),void,
javax.swing.JScrollBar.getUI(),ScrollBarUI,
javax.swing.JScrollBar.updateUI(),void,
javax.swing.JScrollBar.getUIClassID(),String,"""ScrollBarUI"""
javax.swing.JScrollBar.getOrientation(),int,VERTICAL or HORIZONTAL
javax.swing.JScrollBar.setOrientation(int),void,
javax.swing.JScrollBar.getModel(),BoundedRangeModel,
javax.swing.JScrollBar.setModel(BoundedRangeModel),void,
javax.swing.JScrollBar.getUnitIncrement(int),int,the value of the unitIncrement property
javax.swing.JScrollBar.setUnitIncrement(int),void,
javax.swing.JScrollBar.getBlockIncrement(int),int,the value of the blockIncrement property
javax.swing.JScrollBar.setBlockIncrement(int),void,
javax.swing.JScrollBar.getUnitIncrement(),int,the unit value increment for the adjustable object
javax.swing.JScrollBar.getBlockIncrement(),int,the block value increment for the adjustable object
javax.swing.JScrollBar.getValue(),int,the model's value property
javax.swing.JScrollBar.setValue(int),void,
javax.swing.JScrollBar.getVisibleAmount(),int,the value of the model's extent property
javax.swing.JScrollBar.setVisibleAmount(int),void,
javax.swing.JScrollBar.getMinimum(),int,the value of the model's minimum property
javax.swing.JScrollBar.setMinimum(int),void,
javax.swing.JScrollBar.getMaximum(),int,the value of the model's maximum property
javax.swing.JScrollBar.setMaximum(int),void,
javax.swing.JScrollBar.getValueIsAdjusting(),boolean,the value of the model's valueIsAdjusting property
javax.swing.JScrollBar.setValueIsAdjusting(boolean),void,
"javax.swing.JScrollBar.setValues(int,int,int,int)",void,
javax.swing.JScrollBar.addAdjustmentListener(AdjustmentListener),void,
javax.swing.JScrollBar.removeAdjustmentListener(AdjustmentListener),void,
javax.swing.JScrollBar.getAdjustmentListeners(),AdjustmentListener[],all of the AdjustmentListeners added or an empty array if no listeners have been added
"javax.swing.JScrollBar.fireAdjustmentValueChanged(int,int,int)",void,
javax.swing.JScrollBar.getMinimumSize(),Dimension,the value of the minimumSize property
javax.swing.JScrollBar.getMaximumSize(),Dimension,the value of the maximumSize property
javax.swing.JScrollBar.setEnabled(boolean),void,
javax.swing.JScrollBar.paramString(),String,a string representation of this JScrollBar.
javax.swing.JScrollBar.getAccessibleContext(),AccessibleContext,an AccessibleJScrollBar that serves as the AccessibleContext of this JScrollBar
javax.swing.JScrollPane.getUI(),ScrollPaneUI,the ScrollPaneUI object that renders this component
javax.swing.JScrollPane.setUI(ScrollPaneUI),void,
javax.swing.JScrollPane.updateUI(),void,
javax.swing.JScrollPane.getUIClassID(),String,"the string ""ScrollPaneUI"""
javax.swing.JScrollPane.setLayout(LayoutManager),void,
javax.swing.JScrollPane.isValidateRoot(),boolean,true
javax.swing.JScrollPane.getVerticalScrollBarPolicy(),int,the verticalScrollBarPolicy property
javax.swing.JScrollPane.setVerticalScrollBarPolicy(int),void,
javax.swing.JScrollPane.getHorizontalScrollBarPolicy(),int,the horizontalScrollBarPolicy property
javax.swing.JScrollPane.setHorizontalScrollBarPolicy(int),void,
javax.swing.JScrollPane.getViewportBorder(),Border,the viewportBorder property
javax.swing.JScrollPane.setViewportBorder(Border),void,
javax.swing.JScrollPane.getViewportBorderBounds(),Rectangle,a Rectangle object specifying the viewport border
javax.swing.JScrollPane.createHorizontalScrollBar(),JScrollBar,a JScrollBar with a horizontal orientation
javax.swing.JScrollPane.getHorizontalScrollBar(),JScrollBar,the horizontalScrollBar property
javax.swing.JScrollPane.setHorizontalScrollBar(JScrollBar),void,
javax.swing.JScrollPane.createVerticalScrollBar(),JScrollBar,a JScrollBar with a vertical orientation
javax.swing.JScrollPane.getVerticalScrollBar(),JScrollBar,the verticalScrollBar property
javax.swing.JScrollPane.setVerticalScrollBar(JScrollBar),void,
javax.swing.JScrollPane.createViewport(),JViewport,a new JViewport
javax.swing.JScrollPane.getViewport(),JViewport,the viewport property
javax.swing.JScrollPane.setViewport(JViewport),void,
javax.swing.JScrollPane.setViewportView(Component),void,
javax.swing.JScrollPane.getRowHeader(),JViewport,the rowHeader property
javax.swing.JScrollPane.setRowHeader(JViewport),void,
javax.swing.JScrollPane.setRowHeaderView(Component),void,
javax.swing.JScrollPane.getColumnHeader(),JViewport,the columnHeader property
javax.swing.JScrollPane.setColumnHeader(JViewport),void,
javax.swing.JScrollPane.setColumnHeaderView(Component),void,
javax.swing.JScrollPane.getCorner(String),Component,
"javax.swing.JScrollPane.setCorner(String,Component)",void,
javax.swing.JScrollPane.setComponentOrientation(ComponentOrientation),void,
javax.swing.JScrollPane.isWheelScrollingEnabled(),boolean,
javax.swing.JScrollPane.setWheelScrollingEnabled(boolean),void,
javax.swing.JScrollPane.paramString(),String,a string representation of this JScrollPane.
javax.swing.JScrollPane.getAccessibleContext(),AccessibleContext,an AccessibleJScrollPane that serves as the AccessibleContext of this JScrollPane
javax.swing.JSeparator.getUI(),SeparatorUI,the SeparatorUI object that renders this component
javax.swing.JSeparator.setUI(SeparatorUI),void,
javax.swing.JSeparator.updateUI(),void,
javax.swing.JSeparator.getUIClassID(),String,"the string ""SeparatorUI"""
javax.swing.JSeparator.getOrientation(),int,"The value of the orientation property, one of the following constants defined in SwingConstants: VERTICAL, or HORIZONTAL."
javax.swing.JSeparator.setOrientation(int),void,
javax.swing.JSeparator.paramString(),String,a string representation of this JSeparator
javax.swing.JSeparator.getAccessibleContext(),AccessibleContext,an AccessibleJSeparator that serves as the AccessibleContext of this JSeparator
javax.swing.JSlider.getUI(),SliderUI,the SliderUI object that implements the Slider L&amp;F
javax.swing.JSlider.setUI(SliderUI),void,
javax.swing.JSlider.updateUI(),void,
javax.swing.JSlider.getUIClassID(),String,"""SliderUI"""
javax.swing.JSlider.createChangeListener(),ChangeListener,
javax.swing.JSlider.addChangeListener(ChangeListener),void,
javax.swing.JSlider.removeChangeListener(ChangeListener),void,
javax.swing.JSlider.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.JSlider.fireStateChanged(),void,
javax.swing.JSlider.getModel(),BoundedRangeModel,the data model for this component
javax.swing.JSlider.setModel(BoundedRangeModel),void,
javax.swing.JSlider.getValue(),int,the current value of the slider
javax.swing.JSlider.setValue(int),void,
javax.swing.JSlider.getMinimum(),int,the value of the model's minimum property
javax.swing.JSlider.setMinimum(int),void,
javax.swing.JSlider.getMaximum(),int,the value of the model's maximum property
javax.swing.JSlider.setMaximum(int),void,
javax.swing.JSlider.getValueIsAdjusting(),boolean,the value of the model's valueIsAdjusting property
javax.swing.JSlider.setValueIsAdjusting(boolean),void,
javax.swing.JSlider.getExtent(),int,an int representing the extent
javax.swing.JSlider.setExtent(int),void,
javax.swing.JSlider.getOrientation(),int,SwingConstants.VERTICAL or SwingConstants.HORIZONTAL
javax.swing.JSlider.setOrientation(int),void,
javax.swing.JSlider.setFont(Font),void,
"javax.swing.JSlider.imageUpdate(Image,int,int,int,int,int)",boolean,false if the infoflags indicate that the image is completely loaded; true otherwise.
javax.swing.JSlider.getLabelTable(),Dictionary,the Dictionary containing labels and where to draw them
javax.swing.JSlider.setLabelTable(Dictionary),void,
javax.swing.JSlider.updateLabelUIs(),void,
javax.swing.JSlider.createStandardLabels(int),Hashtable,a new Hashtable of labels
"javax.swing.JSlider.createStandardLabels(int,int)",Hashtable,a new Hashtable of labels
javax.swing.JSlider.getInverted(),boolean,true if the slider values are reversed from their normal order
javax.swing.JSlider.setInverted(boolean),void,
javax.swing.JSlider.getMajorTickSpacing(),int,the number of values between major ticks
javax.swing.JSlider.setMajorTickSpacing(int),void,
javax.swing.JSlider.getMinorTickSpacing(),int,the number of values between minor ticks
javax.swing.JSlider.setMinorTickSpacing(int),void,
javax.swing.JSlider.getSnapToTicks(),boolean,"true if the value snaps to the nearest tick mark, else false"
javax.swing.JSlider.setSnapToTicks(boolean),void,
javax.swing.JSlider.getPaintTicks(),boolean,"true if tick marks are painted, else false"
javax.swing.JSlider.setPaintTicks(boolean),void,
javax.swing.JSlider.getPaintTrack(),boolean,"true if track is painted, else false"
javax.swing.JSlider.setPaintTrack(boolean),void,
javax.swing.JSlider.getPaintLabels(),boolean,"true if labels are painted, else false"
javax.swing.JSlider.setPaintLabels(boolean),void,
javax.swing.JSlider.paramString(),String,a string representation of this JSlider.
javax.swing.JSlider.getAccessibleContext(),AccessibleContext,an AccessibleJSlider that serves as the AccessibleContext of this JSlider
javax.swing.JSpinner.getUI(),SpinnerUI,the SpinnerUI object that renders this component
javax.swing.JSpinner.setUI(SpinnerUI),void,
javax.swing.JSpinner.getUIClassID(),String,"the string ""SpinnerUI"""
javax.swing.JSpinner.updateUI(),void,
javax.swing.JSpinner.createEditor(SpinnerModel),JComponent,
javax.swing.JSpinner.setModel(SpinnerModel),void,
javax.swing.JSpinner.getModel(),SpinnerModel,the value of the model property
javax.swing.JSpinner.getValue(),Object,
javax.swing.JSpinner.setValue(Object),void,
javax.swing.JSpinner.getNextValue(),Object,the next legal value or null if one doesn't exist
javax.swing.JSpinner.addChangeListener(ChangeListener),void,
javax.swing.JSpinner.removeChangeListener(ChangeListener),void,
javax.swing.JSpinner.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.JSpinner.fireStateChanged(),void,
javax.swing.JSpinner.getPreviousValue(),Object,the previous legal value or null if one doesn't exist
javax.swing.JSpinner.setEditor(JComponent),void,
javax.swing.JSpinner.getEditor(),JComponent,the component that displays and potentially changes the model's value
javax.swing.JSpinner.commitEdit(),void,
javax.swing.JSpinner.getAccessibleContext(),AccessibleContext,the AccessibleContext for the JSpinner
javax.swing.JSpinner.DateEditor.getFormat(),SimpleDateFormat,the value of getTextField().getFormatter().getFormat().
javax.swing.JSpinner.DateEditor.getModel(),SpinnerDateModel,getSpinner().getModel()
javax.swing.JSpinner.DefaultEditor.dismiss(JSpinner),void,
javax.swing.JSpinner.DefaultEditor.getSpinner(),JSpinner,JSpinner ancestor; null if none of the ancestors are a JSpinner
javax.swing.JSpinner.DefaultEditor.getTextField(),JFormattedTextField,the JFormattedTextField that gives the user access to the SpinnerDateModel's value.
javax.swing.JSpinner.DefaultEditor.stateChanged(ChangeEvent),void,
javax.swing.JSpinner.DefaultEditor.propertyChange(PropertyChangeEvent),void,
"javax.swing.JSpinner.DefaultEditor.addLayoutComponent(String,Component)",void,
javax.swing.JSpinner.DefaultEditor.removeLayoutComponent(Component),void,
javax.swing.JSpinner.DefaultEditor.preferredLayoutSize(Container),Dimension,the preferred dimensions to lay out the subcomponents of the specified container.
javax.swing.JSpinner.DefaultEditor.minimumLayoutSize(Container),Dimension,the minimum dimensions needed to lay out the subcomponents of the specified container.
javax.swing.JSpinner.DefaultEditor.layoutContainer(Container),void,
javax.swing.JSpinner.DefaultEditor.commitEdit(),void,
"javax.swing.JSpinner.DefaultEditor.getBaseline(int,int)",int,the baseline or &lt; 0 indicating there is no reasonable baseline
javax.swing.JSpinner.DefaultEditor.getBaselineResizeBehavior(),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.JSpinner.ListEditor.getModel(),SpinnerListModel,getSpinner().getModel()
javax.swing.JSpinner.NumberEditor.getFormat(),DecimalFormat,the value of getTextField().getFormatter().getFormat().
javax.swing.JSpinner.NumberEditor.getModel(),SpinnerNumberModel,getSpinner().getModel()
javax.swing.JSplitPane.setUI(SplitPaneUI),void,
javax.swing.JSplitPane.getUI(),SplitPaneUI,the SplitPaneUI object that renders this component
javax.swing.JSplitPane.updateUI(),void,
javax.swing.JSplitPane.getUIClassID(),String,"the string ""SplitPaneUI"""
javax.swing.JSplitPane.setDividerSize(int),void,
javax.swing.JSplitPane.getDividerSize(),int,an integer giving the size of the divider in pixels
javax.swing.JSplitPane.setLeftComponent(Component),void,
javax.swing.JSplitPane.getLeftComponent(),Component,the Component displayed in that position
javax.swing.JSplitPane.setTopComponent(Component),void,
javax.swing.JSplitPane.getTopComponent(),Component,the Component displayed in that position
javax.swing.JSplitPane.setRightComponent(Component),void,
javax.swing.JSplitPane.getRightComponent(),Component,the Component displayed in that position
javax.swing.JSplitPane.setBottomComponent(Component),void,
javax.swing.JSplitPane.getBottomComponent(),Component,the Component displayed in that position
javax.swing.JSplitPane.setOneTouchExpandable(boolean),void,
javax.swing.JSplitPane.isOneTouchExpandable(),boolean,the value of the oneTouchExpandable property
javax.swing.JSplitPane.setLastDividerLocation(int),void,
javax.swing.JSplitPane.getLastDividerLocation(),int,an integer specifying the last divider location as a count of pixels from the left (or upper) edge of the pane to the left (or upper) edge of the divider
javax.swing.JSplitPane.setOrientation(int),void,
javax.swing.JSplitPane.getOrientation(),int,an integer giving the orientation
javax.swing.JSplitPane.setContinuousLayout(boolean),void,
javax.swing.JSplitPane.isContinuousLayout(),boolean,the value of the continuousLayout property
javax.swing.JSplitPane.setResizeWeight(double),void,
javax.swing.JSplitPane.getResizeWeight(),double,how extra space is to be distributed on a resize of the split pane
javax.swing.JSplitPane.resetToPreferredSizes(),void,
javax.swing.JSplitPane.setDividerLocation(double),void,
javax.swing.JSplitPane.setDividerLocation(int),void,
javax.swing.JSplitPane.getDividerLocation(),int,an integer specifying the location of the divider
javax.swing.JSplitPane.getMinimumDividerLocation(),int,an integer specifying a UI-specific value for the minimum location (typically a pixel count); or -1 if the UI is null
javax.swing.JSplitPane.getMaximumDividerLocation(),int,an integer specifying a UI-specific value for the maximum location (typically a pixel count); or -1 if the UI is null
javax.swing.JSplitPane.remove(Component),void,
javax.swing.JSplitPane.remove(int),void,
javax.swing.JSplitPane.removeAll(),void,
javax.swing.JSplitPane.isValidateRoot(),boolean,true
"javax.swing.JSplitPane.addImpl(Component,Object,int)",void,
javax.swing.JSplitPane.paintChildren(Graphics),void,
javax.swing.JSplitPane.paramString(),String,a string representation of this JSplitPane.
javax.swing.JSplitPane.getAccessibleContext(),AccessibleContext,an AccessibleJSplitPane that serves as the AccessibleContext of this JSplitPane
javax.swing.JTabbedPane.getUI(),TabbedPaneUI,a TabbedPaneUI object
javax.swing.JTabbedPane.setUI(TabbedPaneUI),void,
javax.swing.JTabbedPane.updateUI(),void,
javax.swing.JTabbedPane.getUIClassID(),String,"the string ""TabbedPaneUI"""
javax.swing.JTabbedPane.createChangeListener(),ChangeListener,
javax.swing.JTabbedPane.addChangeListener(ChangeListener),void,
javax.swing.JTabbedPane.removeChangeListener(ChangeListener),void,
javax.swing.JTabbedPane.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.JTabbedPane.fireStateChanged(),void,
javax.swing.JTabbedPane.getModel(),SingleSelectionModel,
javax.swing.JTabbedPane.setModel(SingleSelectionModel),void,
javax.swing.JTabbedPane.getTabPlacement(),int,
javax.swing.JTabbedPane.setTabPlacement(int),void,
javax.swing.JTabbedPane.getTabLayoutPolicy(),int,
javax.swing.JTabbedPane.setTabLayoutPolicy(int),void,
javax.swing.JTabbedPane.getSelectedIndex(),int,the index of the selected tab
javax.swing.JTabbedPane.setSelectedIndex(int),void,
javax.swing.JTabbedPane.getSelectedComponent(),Component,the component corresponding to the selected tab
javax.swing.JTabbedPane.setSelectedComponent(Component),void,
"javax.swing.JTabbedPane.insertTab(String,Icon,Component,String,int)",void,
"javax.swing.JTabbedPane.addTab(String,Icon,Component,String)",void,
"javax.swing.JTabbedPane.addTab(String,Icon,Component)",void,
"javax.swing.JTabbedPane.addTab(String,Component)",void,
javax.swing.JTabbedPane.add(Component),Component,the component
"javax.swing.JTabbedPane.add(String,Component)",Component,the component
"javax.swing.JTabbedPane.add(Component,int)",Component,the component
"javax.swing.JTabbedPane.add(Component,Object)",void,
"javax.swing.JTabbedPane.add(Component,Object,int)",void,
javax.swing.JTabbedPane.removeTabAt(int),void,
javax.swing.JTabbedPane.remove(Component),void,
javax.swing.JTabbedPane.remove(int),void,
javax.swing.JTabbedPane.removeAll(),void,
javax.swing.JTabbedPane.getTabCount(),int,an integer specifying the number of tabbed pages
javax.swing.JTabbedPane.getTabRunCount(),int,"an integer giving the number of rows if the tabPlacement is TOP or BOTTOM and the number of columns if tabPlacement is LEFT or RIGHT, or 0 if there is no UI set on this tabbedpane"
javax.swing.JTabbedPane.getTitleAt(int),String,the title at index
javax.swing.JTabbedPane.getIconAt(int),Icon,the icon at index
javax.swing.JTabbedPane.getDisabledIconAt(int),Icon,the icon at index
javax.swing.JTabbedPane.getToolTipTextAt(int),String,a string containing the tool tip text at index
javax.swing.JTabbedPane.getBackgroundAt(int),Color,the Color of the tab background at index
javax.swing.JTabbedPane.getForegroundAt(int),Color,the Color of the tab foreground at index
javax.swing.JTabbedPane.isEnabledAt(int),boolean,true if the tab at index is enabled; false otherwise
javax.swing.JTabbedPane.getComponentAt(int),Component,the Component at index
javax.swing.JTabbedPane.getMnemonicAt(int),int,the key code which represents the mnemonic; -1 if a mnemonic is not specified for the tab
javax.swing.JTabbedPane.getDisplayedMnemonicIndexAt(int),int,index representing mnemonic character if one exists; otherwise returns -1
javax.swing.JTabbedPane.getBoundsAt(int),Rectangle,"a Rectangle containing the tab bounds at index, or null if tab at index is not currently visible in the UI, or if there is no UI set on this tabbedpane"
"javax.swing.JTabbedPane.setTitleAt(int,String)",void,
"javax.swing.JTabbedPane.setIconAt(int,Icon)",void,
"javax.swing.JTabbedPane.setDisabledIconAt(int,Icon)",void,
"javax.swing.JTabbedPane.setToolTipTextAt(int,String)",void,
"javax.swing.JTabbedPane.setBackgroundAt(int,Color)",void,
"javax.swing.JTabbedPane.setForegroundAt(int,Color)",void,
"javax.swing.JTabbedPane.setEnabledAt(int,boolean)",void,
"javax.swing.JTabbedPane.setComponentAt(int,Component)",void,
"javax.swing.JTabbedPane.setDisplayedMnemonicIndexAt(int,int)",void,
"javax.swing.JTabbedPane.setMnemonicAt(int,int)",void,
javax.swing.JTabbedPane.indexOfTab(String),int,"the first tab index which matches title, or -1 if no tab has this title"
javax.swing.JTabbedPane.indexOfTab(Icon),int,"the first tab index which matches icon, or -1 if no tab has this icon"
javax.swing.JTabbedPane.indexOfComponent(Component),int,"the first tab which matches this component, or -1 if there is no tab for this component"
"javax.swing.JTabbedPane.indexAtLocation(int,int)",int,"the tab index which intersects the location, or -1 if no tab intersects the location"
javax.swing.JTabbedPane.getToolTipText(MouseEvent),String,the String containing the tooltip text
javax.swing.JTabbedPane.paramString(),String,a string representation of this JTabbedPane.
javax.swing.JTabbedPane.getAccessibleContext(),AccessibleContext,an AccessibleJTabbedPane that serves as the AccessibleContext of this JTabbedPane
"javax.swing.JTabbedPane.setTabComponentAt(int,Component)",void,
javax.swing.JTabbedPane.getTabComponentAt(int),Component,the tab component at index
javax.swing.JTabbedPane.indexOfTabComponent(Component),int,"the first tab which matches this tab component, or -1 if there is no tab for this tab component"
javax.swing.JTable.addNotify(),void,
javax.swing.JTable.configureEnclosingScrollPane(),void,
javax.swing.JTable.removeNotify(),void,
javax.swing.JTable.unconfigureEnclosingScrollPane(),void,
javax.swing.JTable.createScrollPaneForTable(JTable),JScrollPane,
javax.swing.JTable.setTableHeader(JTableHeader),void,
javax.swing.JTable.getTableHeader(),JTableHeader,the tableHeader used by this table
javax.swing.JTable.setRowHeight(int),void,
javax.swing.JTable.getRowHeight(),int,the height in pixels of a table row
"javax.swing.JTable.setRowHeight(int,int)",void,
javax.swing.JTable.getRowHeight(int),int,"the height, in pixels, of the cells in the row"
javax.swing.JTable.setRowMargin(int),void,
javax.swing.JTable.getRowMargin(),int,the number of pixels between cells in a row
javax.swing.JTable.setIntercellSpacing(Dimension),void,
javax.swing.JTable.getIntercellSpacing(),Dimension,the horizontal and vertical spacing between cells
javax.swing.JTable.setGridColor(Color),void,
javax.swing.JTable.getGridColor(),Color,the color used to draw grid lines
javax.swing.JTable.setShowGrid(boolean),void,
javax.swing.JTable.setShowHorizontalLines(boolean),void,
javax.swing.JTable.setShowVerticalLines(boolean),void,
javax.swing.JTable.getShowHorizontalLines(),boolean,"true if the table draws horizontal lines between cells, false if it doesn't"
javax.swing.JTable.getShowVerticalLines(),boolean,"true if the table draws vertical lines between cells, false if it doesn't"
javax.swing.JTable.setAutoResizeMode(int),void,
javax.swing.JTable.getAutoResizeMode(),int,the autoResizeMode of the table
javax.swing.JTable.setAutoCreateColumnsFromModel(boolean),void,
javax.swing.JTable.getAutoCreateColumnsFromModel(),boolean,the autoCreateColumnsFromModel of the table
javax.swing.JTable.createDefaultColumnsFromModel(),void,
"javax.swing.JTable.setDefaultRenderer(Class&lt;?&gt;,TableCellRenderer)",void,
javax.swing.JTable.getDefaultRenderer(Class&lt;?&gt;),TableCellRenderer,the renderer for this columnClass
"javax.swing.JTable.setDefaultEditor(Class&lt;?&gt;,TableCellEditor)",void,
javax.swing.JTable.getDefaultEditor(Class&lt;?&gt;),TableCellEditor,the default cell editor to be used for this columnClass
javax.swing.JTable.setDragEnabled(boolean),void,
javax.swing.JTable.getDragEnabled(),boolean,the value of the dragEnabled property
javax.swing.JTable.setDropMode(DropMode),void,
javax.swing.JTable.getDropMode(),DropMode,the drop mode for this component
javax.swing.JTable.getDropLocation(),JTable.DropLocation,the drop location
javax.swing.JTable.setAutoCreateRowSorter(boolean),void,
javax.swing.JTable.getAutoCreateRowSorter(),boolean,true if a RowSorter should be created when the model changes
javax.swing.JTable.setUpdateSelectionOnSort(boolean),void,
javax.swing.JTable.getUpdateSelectionOnSort(),boolean,whether to update the selection on a sort
javax.swing.JTable.setRowSorter(RowSorter&lt;?),void,
javax.swing.JTable.getRowSorter(),RowSorter&lt;? extends TableModel&gt;,the object responsible for sorting
javax.swing.JTable.setSelectionMode(int),void,
javax.swing.JTable.setRowSelectionAllowed(boolean),void,
javax.swing.JTable.getRowSelectionAllowed(),boolean,"true if rows can be selected, otherwise false"
javax.swing.JTable.setColumnSelectionAllowed(boolean),void,
javax.swing.JTable.getColumnSelectionAllowed(),boolean,"true if columns can be selected, otherwise false"
javax.swing.JTable.setCellSelectionEnabled(boolean),void,
javax.swing.JTable.getCellSelectionEnabled(),boolean,true if both row and column selection models are enabled
javax.swing.JTable.selectAll(),void,
javax.swing.JTable.clearSelection(),void,
"javax.swing.JTable.setRowSelectionInterval(int,int)",void,
"javax.swing.JTable.setColumnSelectionInterval(int,int)",void,
"javax.swing.JTable.addRowSelectionInterval(int,int)",void,
"javax.swing.JTable.addColumnSelectionInterval(int,int)",void,
"javax.swing.JTable.removeRowSelectionInterval(int,int)",void,
"javax.swing.JTable.removeColumnSelectionInterval(int,int)",void,
javax.swing.JTable.getSelectedRow(),int,the index of the first selected row
javax.swing.JTable.getSelectedColumn(),int,the index of the first selected column
javax.swing.JTable.getSelectedRows(),int[],"an array of integers containing the indices of all selected rows, or an empty array if no row is selected"
javax.swing.JTable.getSelectedColumns(),int[],"an array of integers containing the indices of all selected columns, or an empty array if no column is selected"
javax.swing.JTable.getSelectedRowCount(),int,"the number of selected rows, 0 if no rows are selected"
javax.swing.JTable.getSelectedColumnCount(),int,"the number of selected columns, 0 if no columns are selected"
javax.swing.JTable.isRowSelected(int),boolean,true if row is a valid index and the row at that index is selected (where 0 is the first row)
javax.swing.JTable.isColumnSelected(int),boolean,true if column is a valid index and the column at that index is selected (where 0 is the first column)
"javax.swing.JTable.isCellSelected(int,int)",boolean,"true if row and column are valid indices and the cell at index (row, column) is selected, where the first row and first column are at index 0"
"javax.swing.JTable.changeSelection(int,int,boolean,boolean)",void,
javax.swing.JTable.getSelectionForeground(),Color,the Color object for the foreground property
javax.swing.JTable.setSelectionForeground(Color),void,
javax.swing.JTable.getSelectionBackground(),Color,the Color used for the background of selected list items
javax.swing.JTable.setSelectionBackground(Color),void,
javax.swing.JTable.getColumn(Object),TableColumn,the TableColumn object that matches the identifier
javax.swing.JTable.convertColumnIndexToModel(int),int,the index of the corresponding column in the model
javax.swing.JTable.convertColumnIndexToView(int),int,the index of the corresponding column in the view
javax.swing.JTable.convertRowIndexToView(int),int,"the index of the corresponding row in the view, or -1 if the row isn't visible"
javax.swing.JTable.convertRowIndexToModel(int),int,the index of the corresponding row in the model
javax.swing.JTable.getRowCount(),int,the number of rows shown in the JTable
javax.swing.JTable.getColumnCount(),int,the number of columns in the table
javax.swing.JTable.getColumnName(int),String,the name of the column at position column in the view where the first column is column 0
javax.swing.JTable.getColumnClass(int),Class&lt;?&gt;,the type of the column at position column in the view where the first column is column 0
"javax.swing.JTable.getValueAt(int,int)",Object,the Object at the specified cell
"javax.swing.JTable.setValueAt(Object,int,int)",void,
"javax.swing.JTable.isCellEditable(int,int)",boolean,true if the cell is editable
javax.swing.JTable.addColumn(TableColumn),void,
javax.swing.JTable.removeColumn(TableColumn),void,
"javax.swing.JTable.moveColumn(int,int)",void,
javax.swing.JTable.columnAtPoint(Point),int,"the index of the column that point lies in, or -1 if the result is not in the range [0, getColumnCount()-1]"
javax.swing.JTable.rowAtPoint(Point),int,"the index of the row that point lies in, or -1 if the result is not in the range [0, getRowCount()-1]"
"javax.swing.JTable.getCellRect(int,int,boolean)",Rectangle,"the rectangle containing the cell at location row,column"
javax.swing.JTable.doLayout(),void,
javax.swing.JTable.sizeColumnsToFit(boolean),void,
javax.swing.JTable.sizeColumnsToFit(int),void,
javax.swing.JTable.getToolTipText(MouseEvent),String,
javax.swing.JTable.setSurrendersFocusOnKeystroke(boolean),void,
javax.swing.JTable.getSurrendersFocusOnKeystroke(),boolean,true if the editor should get the focus when keystrokes cause the editor to be activated
"javax.swing.JTable.editCellAt(int,int)",boolean,"false if for any reason the cell cannot be edited, or if the indices are invalid"
"javax.swing.JTable.editCellAt(int,int,EventObject)",boolean,"false if for any reason the cell cannot be edited, or if the indices are invalid"
javax.swing.JTable.isEditing(),boolean,true if the table is editing a cell
javax.swing.JTable.getEditorComponent(),Component,Component handling editing session
javax.swing.JTable.getEditingColumn(),int,the index of the column that contains the cell currently being edited; returns -1 if nothing being edited
javax.swing.JTable.getEditingRow(),int,the index of the row that contains the cell currently being edited; returns -1 if nothing being edited
javax.swing.JTable.getUI(),TableUI,the TableUI object that renders this component
javax.swing.JTable.setUI(TableUI),void,
javax.swing.JTable.updateUI(),void,
javax.swing.JTable.getUIClassID(),String,"the string ""TableUI"""
javax.swing.JTable.setModel(TableModel),void,
javax.swing.JTable.getModel(),TableModel,the TableModel that provides the data displayed by this JTable
javax.swing.JTable.setColumnModel(TableColumnModel),void,
javax.swing.JTable.getColumnModel(),TableColumnModel,the object that provides the column state of the table
javax.swing.JTable.setSelectionModel(ListSelectionModel),void,
javax.swing.JTable.getSelectionModel(),ListSelectionModel,"the object that provides row selection state, null if row selection is not allowed"
javax.swing.JTable.sorterChanged(RowSorterEvent),void,
javax.swing.JTable.tableChanged(TableModelEvent),void,
javax.swing.JTable.columnAdded(TableColumnModelEvent),void,
javax.swing.JTable.columnRemoved(TableColumnModelEvent),void,
javax.swing.JTable.columnMoved(TableColumnModelEvent),void,
javax.swing.JTable.columnMarginChanged(ChangeEvent),void,
javax.swing.JTable.columnSelectionChanged(ListSelectionEvent),void,
javax.swing.JTable.valueChanged(ListSelectionEvent),void,
javax.swing.JTable.editingStopped(ChangeEvent),void,
javax.swing.JTable.editingCanceled(ChangeEvent),void,
javax.swing.JTable.setPreferredScrollableViewportSize(Dimension),void,
javax.swing.JTable.getPreferredScrollableViewportSize(),Dimension,a Dimension object containing the preferredSize of the JViewport which displays this table
"javax.swing.JTable.getScrollableUnitIncrement(Rectangle,int,int)",int,"the ""unit"" increment for scrolling in the specified direction"
"javax.swing.JTable.getScrollableBlockIncrement(Rectangle,int,int)",int,visibleRect.height or visibleRect.width per the orientation
javax.swing.JTable.getScrollableTracksViewportWidth(),boolean,"false if autoResizeMode is set to AUTO_RESIZE_OFF, otherwise returns true"
javax.swing.JTable.getScrollableTracksViewportHeight(),boolean,false unless getFillsViewportHeight is true and the table needs to be stretched to fill the viewport
javax.swing.JTable.setFillsViewportHeight(boolean),void,
javax.swing.JTable.getFillsViewportHeight(),boolean,whether or not this table is always made large enough to fill the height of an enclosing viewport
"javax.swing.JTable.processKeyBinding(KeyStroke,KeyEvent,int,boolean)",boolean,
javax.swing.JTable.createDefaultRenderers(),void,
javax.swing.JTable.createDefaultEditors(),void,
javax.swing.JTable.initializeLocalVars(),void,
javax.swing.JTable.createDefaultDataModel(),TableModel,the default table model object
javax.swing.JTable.createDefaultColumnModel(),TableColumnModel,the default column model object
javax.swing.JTable.createDefaultSelectionModel(),ListSelectionModel,the default selection model object
javax.swing.JTable.createDefaultTableHeader(),JTableHeader,the default table header object
javax.swing.JTable.resizeAndRepaint(),void,
javax.swing.JTable.getCellEditor(),TableCellEditor,"the TableCellEditor that does the editing, or null if the table is not currently editing."
javax.swing.JTable.setCellEditor(TableCellEditor),void,
javax.swing.JTable.setEditingColumn(int),void,
javax.swing.JTable.setEditingRow(int),void,
"javax.swing.JTable.getCellRenderer(int,int)",TableCellRenderer,the assigned renderer; if null returns the default renderer for this type of object
"javax.swing.JTable.prepareRenderer(TableCellRenderer,int,int)",Component,the Component under the event location
"javax.swing.JTable.getCellEditor(int,int)",TableCellEditor,the editor for this cell; if null return the default editor for this type of cell
"javax.swing.JTable.prepareEditor(TableCellEditor,int,int)",Component,the Component being edited
javax.swing.JTable.removeEditor(),void,
javax.swing.JTable.paramString(),String,a string representation of this table
javax.swing.JTable.print(),boolean,"true, unless printing is cancelled by the user"
javax.swing.JTable.print(JTable.PrintMode),boolean,"true, unless printing is cancelled by the user"
"javax.swing.JTable.print(JTable.PrintMode,MessageFormat,MessageFormat)",boolean,"true, unless printing is cancelled by the user"
"javax.swing.JTable.print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean)",boolean,"true, unless printing is cancelled by the user"
"javax.swing.JTable.print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean,PrintService)",boolean,"true, unless printing is cancelled by the user"
"javax.swing.JTable.getPrintable(JTable.PrintMode,MessageFormat,MessageFormat)",Printable,
javax.swing.JTable.getAccessibleContext(),AccessibleContext,an AccessibleJTable that serves as the AccessibleContext of this JTable
javax.swing.JTable.DropLocation.getRow(),int,the drop row
javax.swing.JTable.DropLocation.getColumn(),int,the drop row
javax.swing.JTable.DropLocation.isInsertRow(),boolean,whether or not this is an insert row
javax.swing.JTable.DropLocation.isInsertColumn(),boolean,whether or not this is an insert column
javax.swing.JTable.DropLocation.toString(),String,a string representation of this drop location
javax.swing.JTextArea.getUIClassID(),String,"the ID (""TextAreaUI"")"
javax.swing.JTextArea.createDefaultModel(),Document,the default document model
javax.swing.JTextArea.setTabSize(int),void,
javax.swing.JTextArea.getTabSize(),int,the number of characters
javax.swing.JTextArea.setLineWrap(boolean),void,
javax.swing.JTextArea.getLineWrap(),boolean,if lines will be wrapped
javax.swing.JTextArea.setWrapStyleWord(boolean),void,
javax.swing.JTextArea.getWrapStyleWord(),boolean,if the wrap style should be word boundaries instead of character boundaries
javax.swing.JTextArea.getLineOfOffset(int),int,the line number &gt;= 0
javax.swing.JTextArea.getLineCount(),int,the number of lines &gt; 0
javax.swing.JTextArea.getLineStartOffset(int),int,the offset &gt;= 0
javax.swing.JTextArea.getLineEndOffset(int),int,the offset &gt;= 0
"javax.swing.JTextArea.insert(String,int)",void,
javax.swing.JTextArea.append(String),void,
"javax.swing.JTextArea.replaceRange(String,int,int)",void,
javax.swing.JTextArea.getRows(),int,the number of rows &gt;= 0
javax.swing.JTextArea.setRows(int),void,
javax.swing.JTextArea.getRowHeight(),int,the height &gt;= 1
javax.swing.JTextArea.getColumns(),int,number of columns &gt;= 0
javax.swing.JTextArea.setColumns(int),void,
javax.swing.JTextArea.getColumnWidth(),int,the column width &gt;= 1
javax.swing.JTextArea.getPreferredSize(),Dimension,the size
javax.swing.JTextArea.setFont(Font),void,
javax.swing.JTextArea.paramString(),String,a string representation of this JTextArea.
javax.swing.JTextArea.getScrollableTracksViewportWidth(),boolean,true if a viewport should force the Scrollables width to match its own.
javax.swing.JTextArea.getPreferredScrollableViewportSize(),Dimension,The preferredSize of a JViewport whose view is this Scrollable.
"javax.swing.JTextArea.getScrollableUnitIncrement(Rectangle,int,int)",int,"The ""unit"" increment for scrolling in the specified direction"
javax.swing.JTextArea.getAccessibleContext(),AccessibleContext,an AccessibleJTextArea that serves as the AccessibleContext of this JTextArea
javax.swing.JTextField.getUIClassID(),String,"the string ""TextFieldUI"""
javax.swing.JTextField.setDocument(Document),void,
javax.swing.JTextField.isValidateRoot(),boolean,"if the parent of this textfield is a JViewPort return false, otherwise return true"
javax.swing.JTextField.getHorizontalAlignment(),int,
javax.swing.JTextField.setHorizontalAlignment(int),void,
javax.swing.JTextField.createDefaultModel(),Document,the default model implementation
javax.swing.JTextField.getColumns(),int,the number of columns &gt;= 0
javax.swing.JTextField.setColumns(int),void,
javax.swing.JTextField.getColumnWidth(),int,the column width &gt;= 1
javax.swing.JTextField.getPreferredSize(),Dimension,the dimension of this textfield
javax.swing.JTextField.setFont(Font),void,
javax.swing.JTextField.addActionListener(ActionListener),void,
javax.swing.JTextField.removeActionListener(ActionListener),void,
javax.swing.JTextField.getActionListeners(),ActionListener[],all of the ActionListeners added or an empty array if no listeners have been added
javax.swing.JTextField.fireActionPerformed(),void,
javax.swing.JTextField.setActionCommand(String),void,
javax.swing.JTextField.setAction(Action),void,
javax.swing.JTextField.getAction(),Action,"the Action for this ActionEvent source, or null"
javax.swing.JTextField.configurePropertiesFromAction(Action),void,
"javax.swing.JTextField.actionPropertyChanged(Action,String)",void,
javax.swing.JTextField.createActionPropertyChangeListener(Action),PropertyChangeListener,
javax.swing.JTextField.getActions(),Action[],the command list
javax.swing.JTextField.postActionEvent(),void,
javax.swing.JTextField.getHorizontalVisibility(),BoundedRangeModel,the visibility
javax.swing.JTextField.getScrollOffset(),int,the offset &gt;= 0
javax.swing.JTextField.setScrollOffset(int),void,
javax.swing.JTextField.scrollRectToVisible(Rectangle),void,
javax.swing.JTextField.paramString(),String,a string representation of this JTextField
javax.swing.JTextField.getAccessibleContext(),AccessibleContext,an AccessibleJTextField that serves as the AccessibleContext of this JTextField
javax.swing.JTextPane.getUIClassID(),String,"the string ""TextPaneUI"""
javax.swing.JTextPane.setDocument(Document),void,
javax.swing.JTextPane.setStyledDocument(StyledDocument),void,
javax.swing.JTextPane.getStyledDocument(),StyledDocument,the model
javax.swing.JTextPane.replaceSelection(String),void,
javax.swing.JTextPane.insertComponent(Component),void,
javax.swing.JTextPane.insertIcon(Icon),void,
"javax.swing.JTextPane.addStyle(String,Style)",Style,the new Style
javax.swing.JTextPane.removeStyle(String),void,
javax.swing.JTextPane.getStyle(String),Style,the Style
javax.swing.JTextPane.setLogicalStyle(Style),void,
javax.swing.JTextPane.getLogicalStyle(),Style,the Style
javax.swing.JTextPane.getCharacterAttributes(),AttributeSet,"the attributes, or null"
"javax.swing.JTextPane.setCharacterAttributes(AttributeSet,boolean)",void,
javax.swing.JTextPane.getParagraphAttributes(),AttributeSet,the attributes
"javax.swing.JTextPane.setParagraphAttributes(AttributeSet,boolean)",void,
javax.swing.JTextPane.getInputAttributes(),MutableAttributeSet,the attributes
javax.swing.JTextPane.getStyledEditorKit(),StyledEditorKit,the editor kit
javax.swing.JTextPane.createDefaultEditorKit(),EditorKit,the editor kit
javax.swing.JTextPane.setEditorKit(EditorKit),void,
javax.swing.JTextPane.paramString(),String,a string representation of this JTextPane
javax.swing.JToggleButton.updateUI(),void,
javax.swing.JToggleButton.getUIClassID(),String,"String ""ToggleButtonUI"""
javax.swing.JToggleButton.paramString(),String,a string representation of this JToggleButton.
javax.swing.JToggleButton.getAccessibleContext(),AccessibleContext,an AccessibleJToggleButton that serves as the AccessibleContext of this JToggleButton
javax.swing.JToggleButton.ToggleButtonModel.isSelected(),boolean,true if the button is selected
javax.swing.JToggleButton.ToggleButtonModel.setSelected(boolean),void,
javax.swing.JToggleButton.ToggleButtonModel.setPressed(boolean),void,
javax.swing.JToolBar.getUI(),ToolBarUI,
javax.swing.JToolBar.setUI(ToolBarUI),void,
javax.swing.JToolBar.updateUI(),void,
javax.swing.JToolBar.getUIClassID(),String,"the string ""ToolBarUI"""
javax.swing.JToolBar.getComponentIndex(Component),int,"an integer indicating the component's position, where 0 is first"
javax.swing.JToolBar.getComponentAtIndex(int),Component,"the Component at that position, or null for an invalid index"
javax.swing.JToolBar.setMargin(Insets),void,
javax.swing.JToolBar.getMargin(),Insets,an Insets object containing the margin values
javax.swing.JToolBar.isBorderPainted(),boolean,the value of the borderPainted property
javax.swing.JToolBar.setBorderPainted(boolean),void,
javax.swing.JToolBar.paintBorder(Graphics),void,
javax.swing.JToolBar.isFloatable(),boolean,the value of the floatable property
javax.swing.JToolBar.setFloatable(boolean),void,
javax.swing.JToolBar.getOrientation(),int,an integer representing the current orientation -- either HORIZONTAL or VERTICAL
javax.swing.JToolBar.setOrientation(int),void,
javax.swing.JToolBar.setRollover(boolean),void,
javax.swing.JToolBar.isRollover(),boolean,true if rollover toolbar buttons are to be drawn; otherwise false
javax.swing.JToolBar.addSeparator(),void,
javax.swing.JToolBar.addSeparator(Dimension),void,
javax.swing.JToolBar.add(Action),JButton,the new button which dispatches the action
javax.swing.JToolBar.createActionComponent(Action),JButton,the newly created button
javax.swing.JToolBar.createActionChangeListener(JButton),PropertyChangeListener,null
"javax.swing.JToolBar.addImpl(Component,Object,int)",void,
javax.swing.JToolBar.paramString(),String,a string representation of this JToolBar.
javax.swing.JToolBar.setLayout(LayoutManager),void,
javax.swing.JToolBar.getAccessibleContext(),AccessibleContext,an AccessibleJToolBar that serves as the AccessibleContext of this JToolBar
javax.swing.JToolBar.Separator.getUIClassID(),String,"the string ""ToolBarSeparatorUI"""
javax.swing.JToolBar.Separator.setSeparatorSize(Dimension),void,
javax.swing.JToolBar.Separator.getSeparatorSize(),Dimension,"the Dimension object containing the separator's size (This is a reference, NOT a copy!)"
javax.swing.JToolBar.Separator.getMinimumSize(),Dimension,the Dimension object containing the separator's minimum size
javax.swing.JToolBar.Separator.getMaximumSize(),Dimension,the Dimension object containing the separator's maximum size
javax.swing.JToolBar.Separator.getPreferredSize(),Dimension,the Dimension object containing the separator's preferred size
javax.swing.JToolTip.getUI(),ToolTipUI,the ToolTipUI object that renders this component
javax.swing.JToolTip.updateUI(),void,
javax.swing.JToolTip.getUIClassID(),String,"the string ""ToolTipUI"""
javax.swing.JToolTip.setTipText(String),void,
javax.swing.JToolTip.getTipText(),String,the String that is displayed
javax.swing.JToolTip.setComponent(JComponent),void,
javax.swing.JToolTip.getComponent(),JComponent,the component that the tooltip describes
javax.swing.JToolTip.paramString(),String,a string representation of this JToolTip
javax.swing.JToolTip.getAccessibleContext(),AccessibleContext,an AccessibleJToolTip that serves as the AccessibleContext of this JToolTip
javax.swing.JTree.getDefaultTreeModel(),TreeModel,the default TreeModel
javax.swing.JTree.createTreeModel(Object),TreeModel,
javax.swing.JTree.getUI(),TreeUI,the TreeUI object that renders this component
javax.swing.JTree.setUI(TreeUI),void,
javax.swing.JTree.updateUI(),void,
javax.swing.JTree.getUIClassID(),String,"the string ""TreeUI"""
javax.swing.JTree.getCellRenderer(),TreeCellRenderer,the TreeCellRenderer that is rendering each cell
javax.swing.JTree.setCellRenderer(TreeCellRenderer),void,
javax.swing.JTree.setEditable(boolean),void,
javax.swing.JTree.isEditable(),boolean,true if the tree is editable
javax.swing.JTree.setCellEditor(TreeCellEditor),void,
javax.swing.JTree.getCellEditor(),TreeCellEditor,"the TreeCellEditor in use, or null if the tree cannot be edited"
javax.swing.JTree.getModel(),TreeModel,the TreeModel that is providing the data
javax.swing.JTree.setModel(TreeModel),void,
javax.swing.JTree.isRootVisible(),boolean,true if the root node of the tree is displayed
javax.swing.JTree.setRootVisible(boolean),void,
javax.swing.JTree.setShowsRootHandles(boolean),void,
javax.swing.JTree.getShowsRootHandles(),boolean,the value of the showsRootHandles property
javax.swing.JTree.setRowHeight(int),void,
javax.swing.JTree.getRowHeight(),int,
javax.swing.JTree.isFixedRowHeight(),boolean,true if the height of each row is a fixed size
javax.swing.JTree.setLargeModel(boolean),void,
javax.swing.JTree.isLargeModel(),boolean,true if a large model is suggested
javax.swing.JTree.setInvokesStopCellEditing(boolean),void,
javax.swing.JTree.getInvokesStopCellEditing(),boolean,the indicator that tells what happens when editing is interrupted
javax.swing.JTree.setScrollsOnExpand(boolean),void,
javax.swing.JTree.getScrollsOnExpand(),boolean,the value of the scrollsOnExpand property
javax.swing.JTree.setToggleClickCount(int),void,
javax.swing.JTree.getToggleClickCount(),int,number of mouse clicks before node is expanded
javax.swing.JTree.setExpandsSelectedPaths(boolean),void,
javax.swing.JTree.getExpandsSelectedPaths(),boolean,true if selection changes result in the parent path being expanded
javax.swing.JTree.setDragEnabled(boolean),void,
javax.swing.JTree.getDragEnabled(),boolean,the value of the dragEnabled property
javax.swing.JTree.setDropMode(DropMode),void,
javax.swing.JTree.getDropMode(),DropMode,the drop mode for this component
javax.swing.JTree.getDropLocation(),JTree.DropLocation,the drop location
javax.swing.JTree.isPathEditable(TreePath),boolean,true if every parent node and the node itself is editable
javax.swing.JTree.getToolTipText(MouseEvent),String,a string containing the tooltip or null if event is null
"javax.swing.JTree.convertValueToText(Object,boolean,boolean,boolean,int,boolean)",String,the String representation of the node's value
javax.swing.JTree.getRowCount(),int,the number of viewable nodes
javax.swing.JTree.setSelectionPath(TreePath),void,
javax.swing.JTree.setSelectionPaths(TreePath[]),void,
javax.swing.JTree.setLeadSelectionPath(TreePath),void,
javax.swing.JTree.setAnchorSelectionPath(TreePath),void,
javax.swing.JTree.setSelectionRow(int),void,
javax.swing.JTree.setSelectionRows(int[]),void,
javax.swing.JTree.addSelectionPath(TreePath),void,
javax.swing.JTree.addSelectionPaths(TreePath[]),void,
javax.swing.JTree.addSelectionRow(int),void,
javax.swing.JTree.addSelectionRows(int[]),void,
javax.swing.JTree.getLastSelectedPathComponent(),Object,"the last path component of the selected path, or null if nothing is selected"
javax.swing.JTree.getLeadSelectionPath(),TreePath,path identified as the lead
javax.swing.JTree.getAnchorSelectionPath(),TreePath,path identified as the anchor
javax.swing.JTree.getSelectionPath(),TreePath,"the TreePath for the first selected node, or null if nothing is currently selected"
javax.swing.JTree.getSelectionPaths(),TreePath[],"an array of TreePath objects indicating the selected nodes, or null if nothing is currently selected"
javax.swing.JTree.getSelectionRows(),int[],an array of integers that identifies all currently selected rows where 0 is the first row in the display
javax.swing.JTree.getSelectionCount(),int,the number of nodes selected
javax.swing.JTree.getMinSelectionRow(),int,the smallest selected row
javax.swing.JTree.getMaxSelectionRow(),int,the largest selected row
javax.swing.JTree.getLeadSelectionRow(),int,"an integer giving the row index of the lead path, where 0 is the first row in the display; or -1 if leadPath is null"
javax.swing.JTree.isPathSelected(TreePath),boolean,true if the node is selected
javax.swing.JTree.isRowSelected(int),boolean,true if the node is selected
javax.swing.JTree.getExpandedDescendants(TreePath),Enumeration&lt;TreePath&gt;,"an Enumeration of the descendents of parent, or null if parent is not currently expanded"
javax.swing.JTree.hasBeenExpanded(TreePath),boolean,true if the path has ever been expanded
javax.swing.JTree.isExpanded(TreePath),boolean,"false if any of the nodes in the node's path are collapsed, true if all nodes in the path are expanded"
javax.swing.JTree.isExpanded(int),boolean,"true if the node is currently expanded, otherwise false"
javax.swing.JTree.isCollapsed(TreePath),boolean,"true if any of the nodes in the node's path are collapsed, false if all nodes in the path are expanded"
javax.swing.JTree.isCollapsed(int),boolean,"true if the node is currently collapsed, otherwise false"
javax.swing.JTree.makeVisible(TreePath),void,
javax.swing.JTree.isVisible(TreePath),boolean,"true if the node is viewable, otherwise false"
javax.swing.JTree.getPathBounds(TreePath),Rectangle,"the Rectangle the node is drawn in, or null"
javax.swing.JTree.getRowBounds(int),Rectangle,the Rectangle the node is drawn in
javax.swing.JTree.scrollPathToVisible(TreePath),void,
javax.swing.JTree.scrollRowToVisible(int),void,
javax.swing.JTree.getPathForRow(int),TreePath,"the TreePath to the specified node, null if row &lt; 0 or row &gt;= getRowCount()"
javax.swing.JTree.getRowForPath(TreePath),int,"an integer specifying the display row, where 0 is the first row in the display, or -1 if any of the elements in path are hidden under a collapsed parent."
javax.swing.JTree.expandPath(TreePath),void,
javax.swing.JTree.expandRow(int),void,
javax.swing.JTree.collapsePath(TreePath),void,
javax.swing.JTree.collapseRow(int),void,
"javax.swing.JTree.getPathForLocation(int,int)",TreePath,the TreePath for the node at that location
"javax.swing.JTree.getRowForLocation(int,int)",int,"the row corresponding to the location, or -1 if the location is not within the bounds of a displayed cell"
"javax.swing.JTree.getClosestPathForLocation(int,int)",TreePath,"the TreePath for the node closest to that location, null if nothing is viewable or there is no model"
"javax.swing.JTree.getClosestRowForLocation(int,int)",int,"the row closest to the location, -1 if nothing is viewable or there is no model"
javax.swing.JTree.isEditing(),boolean,true if the user is currently editing a node
javax.swing.JTree.stopEditing(),boolean,"true if editing was in progress and is now stopped, false if editing was not in progress"
javax.swing.JTree.cancelEditing(),void,
javax.swing.JTree.startEditingAtPath(TreePath),void,
javax.swing.JTree.getEditingPath(),TreePath,the TreePath for the node being edited
javax.swing.JTree.setSelectionModel(TreeSelectionModel),void,
javax.swing.JTree.getSelectionModel(),TreeSelectionModel,
"javax.swing.JTree.getPathBetweenRows(int,int)",TreePath[],the paths (inclusive) between the specified row indices
"javax.swing.JTree.setSelectionInterval(int,int)",void,
"javax.swing.JTree.addSelectionInterval(int,int)",void,
"javax.swing.JTree.removeSelectionInterval(int,int)",void,
javax.swing.JTree.removeSelectionPath(TreePath),void,
javax.swing.JTree.removeSelectionPaths(TreePath[]),void,
javax.swing.JTree.removeSelectionRow(int),void,
javax.swing.JTree.removeSelectionRows(int[]),void,
javax.swing.JTree.clearSelection(),void,
javax.swing.JTree.isSelectionEmpty(),boolean,true if the selection is currently empty
javax.swing.JTree.addTreeExpansionListener(TreeExpansionListener),void,
javax.swing.JTree.removeTreeExpansionListener(TreeExpansionListener),void,
javax.swing.JTree.getTreeExpansionListeners(),TreeExpansionListener[],all of the TreeExpansionListeners added or an empty array if no listeners have been added
javax.swing.JTree.addTreeWillExpandListener(TreeWillExpandListener),void,
javax.swing.JTree.removeTreeWillExpandListener(TreeWillExpandListener),void,
javax.swing.JTree.getTreeWillExpandListeners(),TreeWillExpandListener[],all of the TreeWillExpandListeners added or an empty array if no listeners have been added
javax.swing.JTree.fireTreeExpanded(TreePath),void,
javax.swing.JTree.fireTreeCollapsed(TreePath),void,
javax.swing.JTree.fireTreeWillExpand(TreePath),void,
javax.swing.JTree.fireTreeWillCollapse(TreePath),void,
javax.swing.JTree.addTreeSelectionListener(TreeSelectionListener),void,
javax.swing.JTree.removeTreeSelectionListener(TreeSelectionListener),void,
javax.swing.JTree.getTreeSelectionListeners(),TreeSelectionListener[],all of the TreeSelectionListeners added or an empty array if no listeners have been added
javax.swing.JTree.fireValueChanged(TreeSelectionEvent),void,
javax.swing.JTree.treeDidChange(),void,
javax.swing.JTree.setVisibleRowCount(int),void,
javax.swing.JTree.getVisibleRowCount(),int,the number of rows displayed
"javax.swing.JTree.getNextMatch(String,int,Position.Bias)",TreePath,the TreePath of the next tree element that starts with the prefix; otherwise null
javax.swing.JTree.getPreferredScrollableViewportSize(),Dimension,a Dimension object containing the preferred size
"javax.swing.JTree.getScrollableUnitIncrement(Rectangle,int,int)",int,"the ""unit"" increment for scrolling in the specified direction"
"javax.swing.JTree.getScrollableBlockIncrement(Rectangle,int,int)",int,"the ""block"" increment for scrolling in the specified direction"
javax.swing.JTree.getScrollableTracksViewportWidth(),boolean,whether the tree should track the width of the viewport
javax.swing.JTree.getScrollableTracksViewportHeight(),boolean,whether the tree should track the height of the viewport
"javax.swing.JTree.setExpandedState(TreePath,boolean)",void,
javax.swing.JTree.getDescendantToggledPaths(TreePath),Enumeration&lt;TreePath&gt;,
javax.swing.JTree.removeDescendantToggledPaths(Enumeration&lt;TreePath&gt;),void,
javax.swing.JTree.clearToggledPaths(),void,
javax.swing.JTree.createTreeModelListener(),TreeModelListener,
"javax.swing.JTree.removeDescendantSelectedPaths(TreePath,boolean)",boolean,true if a descendant was selected
javax.swing.JTree.paramString(),String,a string representation of this JTree.
javax.swing.JTree.getAccessibleContext(),AccessibleContext,an AccessibleJTree that serves as the AccessibleContext of this JTree
javax.swing.JTree.DropLocation.getChildIndex(),int,the child index
javax.swing.JTree.DropLocation.getPath(),TreePath,
javax.swing.JTree.DropLocation.toString(),String,a string representation of this drop location
"javax.swing.JTree.DynamicUtilTreeNode.createChildren(DefaultMutableTreeNode,Object)",void,
javax.swing.JTree.DynamicUtilTreeNode.isLeaf(),boolean,"true if this node allows children, false otherwise"
javax.swing.JTree.DynamicUtilTreeNode.getChildCount(),int,the number of child nodes
javax.swing.JTree.DynamicUtilTreeNode.loadChildren(),void,
javax.swing.JTree.DynamicUtilTreeNode.getChildAt(int),TreeNode,the TreeNode in this node's child array at the specified index
javax.swing.JTree.DynamicUtilTreeNode.children(),Enumeration,an Enumeration of this node's children
javax.swing.JTree.EmptySelectionModel.sharedInstance(),JTree.EmptySelectionModel,single instance of EmptySelectionModel
javax.swing.JTree.EmptySelectionModel.setSelectionPaths(TreePath[]),void,
javax.swing.JTree.EmptySelectionModel.addSelectionPaths(TreePath[]),void,
javax.swing.JTree.EmptySelectionModel.removeSelectionPaths(TreePath[]),void,
javax.swing.JTree.EmptySelectionModel.setSelectionMode(int),void,
javax.swing.JTree.EmptySelectionModel.setRowMapper(RowMapper),void,
javax.swing.JTree.EmptySelectionModel.addTreeSelectionListener(TreeSelectionListener),void,
javax.swing.JTree.EmptySelectionModel.removeTreeSelectionListener(TreeSelectionListener),void,
javax.swing.JTree.EmptySelectionModel.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.JTree.EmptySelectionModel.removePropertyChangeListener(PropertyChangeListener),void,
javax.swing.JViewport.getUI(),ViewportUI,a ViewportUI object
javax.swing.JViewport.setUI(ViewportUI),void,
javax.swing.JViewport.updateUI(),void,
javax.swing.JViewport.getUIClassID(),String,"the string ""ViewportUI"""
"javax.swing.JViewport.addImpl(Component,Object,int)",void,
javax.swing.JViewport.remove(Component),void,
javax.swing.JViewport.scrollRectToVisible(Rectangle),void,
javax.swing.JViewport.setBorder(Border),void,
javax.swing.JViewport.getInsets(),Insets,a Rectangle of zero dimension and zero origin
javax.swing.JViewport.getInsets(Insets),Insets,this viewports inset values
javax.swing.JViewport.isOptimizedDrawingEnabled(),boolean,false
javax.swing.JViewport.isPaintingOrigin(),boolean,true if if scroll mode is a BACKINGSTORE_SCROLL_MODE.
javax.swing.JViewport.paint(Graphics),void,
"javax.swing.JViewport.reshape(int,int,int,int)",void,
javax.swing.JViewport.setScrollMode(int),void,
javax.swing.JViewport.getScrollMode(),int,the scrollMode property
javax.swing.JViewport.isBackingStoreEnabled(),boolean,true if scrollMode is BACKINGSTORE_SCROLL_MODE
javax.swing.JViewport.setBackingStoreEnabled(boolean),void,
javax.swing.JViewport.getView(),Component,"the viewports child, or null if none exists"
javax.swing.JViewport.setView(Component),void,
javax.swing.JViewport.getViewSize(),Dimension,a Dimension object specifying the size of the view
javax.swing.JViewport.setViewSize(Dimension),void,
javax.swing.JViewport.getViewPosition(),Point,a Point object giving the upper left coordinates
javax.swing.JViewport.setViewPosition(Point),void,
javax.swing.JViewport.getViewRect(),Rectangle,a Rectangle giving the visible part of the view using view coordinates.
"javax.swing.JViewport.computeBlit(int,int,Point,Point,Dimension,Rectangle)",boolean,true if the parameters are modified and we're ready to blit; false otherwise
javax.swing.JViewport.getExtentSize(),Dimension,a Dimension object giving the size of the view
javax.swing.JViewport.toViewCoordinates(Dimension),Dimension,a Dimension object converted to view coordinates
javax.swing.JViewport.toViewCoordinates(Point),Point,a Point object converted to view coordinates
javax.swing.JViewport.setExtentSize(Dimension),void,
javax.swing.JViewport.createViewListener(),JViewport.ViewListener,a ViewListener
javax.swing.JViewport.createLayoutManager(),LayoutManager,a LayoutManager
javax.swing.JViewport.addChangeListener(ChangeListener),void,
javax.swing.JViewport.removeChangeListener(ChangeListener),void,
javax.swing.JViewport.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.JViewport.fireStateChanged(),void,
"javax.swing.JViewport.repaint(long,int,int,int,int)",void,
javax.swing.JViewport.paramString(),String,a string representation of this JViewport
"javax.swing.JViewport.firePropertyChange(String,Object,Object)",void,
javax.swing.JViewport.getAccessibleContext(),AccessibleContext,an AccessibleJViewport that serves as the AccessibleContext of this JViewport
javax.swing.JWindow.windowInit(),void,
javax.swing.JWindow.createRootPane(),JRootPane,
javax.swing.JWindow.isRootPaneCheckingEnabled(),boolean,true if add and setLayout are forwarded; false otherwise
javax.swing.JWindow.setTransferHandler(TransferHandler),void,
javax.swing.JWindow.getTransferHandler(),TransferHandler,the value of the transferHandler property
javax.swing.JWindow.update(Graphics),void,
javax.swing.JWindow.setRootPaneCheckingEnabled(boolean),void,
"javax.swing.JWindow.addImpl(Component,Object,int)",void,
javax.swing.JWindow.remove(Component),void,
javax.swing.JWindow.setLayout(LayoutManager),void,
javax.swing.JWindow.getRootPane(),JRootPane,the rootPane property for this window
javax.swing.JWindow.setRootPane(JRootPane),void,
javax.swing.JWindow.getContentPane(),Container,the contentPane property
javax.swing.JWindow.setContentPane(Container),void,
javax.swing.JWindow.getLayeredPane(),JLayeredPane,the layeredPane property
javax.swing.JWindow.setLayeredPane(JLayeredPane),void,
javax.swing.JWindow.getGlassPane(),Component,the glassPane property
javax.swing.JWindow.setGlassPane(Component),void,
javax.swing.JWindow.getGraphics(),Graphics,"a graphics context for this component, or null if it has none"
"javax.swing.JWindow.repaint(long,int,int,int,int)",void,
javax.swing.JWindow.paramString(),String,a string representation of this JWindow
javax.swing.JWindow.getAccessibleContext(),AccessibleContext,an AccessibleJWindow that serves as the AccessibleContext of this JWindow
javax.swing.KeyStroke.getKeyStroke(char),KeyStroke,a KeyStroke object for that key
"javax.swing.KeyStroke.getKeyStroke(char,boolean)",KeyStroke,a KeyStroke object for that key
"javax.swing.KeyStroke.getKeyStroke(Character,int)",KeyStroke,
"javax.swing.KeyStroke.getKeyStroke(int,int,boolean)",KeyStroke,
"javax.swing.KeyStroke.getKeyStroke(int,int)",KeyStroke,
javax.swing.KeyStroke.getKeyStrokeForEvent(KeyEvent),KeyStroke,the KeyStroke that precipitated the event
javax.swing.KeyStroke.getKeyStroke(String),KeyStroke,"a KeyStroke object for that String, or null if the specified String is null, or is formatted incorrectly"
"javax.swing.LayoutFocusTraversalPolicy.getComponentAfter(Container,Component)",Component,"the Component that should receive the focus after aComponent, or null if no suitable Component can be found"
"javax.swing.LayoutFocusTraversalPolicy.getComponentBefore(Container,Component)",Component,"the Component that should receive the focus before aComponent, or null if no suitable Component can be found"
javax.swing.LayoutFocusTraversalPolicy.getFirstComponent(Container),Component,"the first Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
javax.swing.LayoutFocusTraversalPolicy.getLastComponent(Container),Component,"the last Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
javax.swing.LayoutFocusTraversalPolicy.accept(Component),boolean,
javax.swing.LayoutStyle.setInstance(LayoutStyle),void,
javax.swing.LayoutStyle.getInstance(),LayoutStyle,the shared instance of LayoutStyle
"javax.swing.LayoutStyle.getPreferredGap(JComponent,JComponent,LayoutStyle.ComponentPlacement,int,Container)",abstractint,the amount of space to place between the two components
"javax.swing.LayoutStyle.getContainerGap(JComponent,int,Container)",abstractint,the amount of space to place between the component and specified edge
"javax.swing.LookAndFeel.installColors(JComponent,String,String)",void,
"javax.swing.LookAndFeel.installColorsAndFont(JComponent,String,String,String)",void,
"javax.swing.LookAndFeel.installBorder(JComponent,String)",void,
javax.swing.LookAndFeel.uninstallBorder(JComponent),void,
"javax.swing.LookAndFeel.installProperty(JComponent,String,Object)",void,
javax.swing.LookAndFeel.makeKeyBindings(Object[]),JTextComponent.KeyBinding[],an array of KeyBindings
javax.swing.LookAndFeel.makeInputMap(Object[]),InputMap,newly created and populated InputMapUIResource
"javax.swing.LookAndFeel.makeComponentInputMap(JComponent,Object[])",ComponentInputMap,newly created and populated InputMapUIResource
"javax.swing.LookAndFeel.loadKeyBindings(InputMap,Object[])",void,
"javax.swing.LookAndFeel.makeIcon(Class&lt;?&gt;,String)",Object,a UIDefaults.LazyValue; when resolved the LazyValue loads the specified image
javax.swing.LookAndFeel.getLayoutStyle(),LayoutStyle,the LayoutStyle for this look and feel
javax.swing.LookAndFeel.provideErrorFeedback(Component),void,
"javax.swing.LookAndFeel.getDesktopPropertyValue(String,Object)",Object,the current value of the desktop property
"javax.swing.LookAndFeel.getDisabledIcon(JComponent,Icon)",Icon,"disabled Icon, or null if a suitable Icon can not be generated"
"javax.swing.LookAndFeel.getDisabledSelectedIcon(JComponent,Icon)",Icon,"disabled and selected icon, or null if a suitable Icon can not be generated."
javax.swing.LookAndFeel.getName(),abstractString,short identifier for the look and feel
javax.swing.LookAndFeel.getID(),abstractString,identifier for the look and feel
javax.swing.LookAndFeel.getDescription(),abstractString,short description for the look and feel
javax.swing.LookAndFeel.getSupportsWindowDecorations(),boolean,true if the RootPaneUI instances created by this look and feel support client side decorations
javax.swing.LookAndFeel.isNativeLookAndFeel(),abstractboolean,true if this look and feel represents the underlying platform look and feel
javax.swing.LookAndFeel.isSupportedLookAndFeel(),abstractboolean,true if this is a supported look and feel
javax.swing.LookAndFeel.initialize(),void,
javax.swing.LookAndFeel.uninitialize(),void,
javax.swing.LookAndFeel.getDefaults(),UIDefaults,the look and feel defaults
javax.swing.LookAndFeel.toString(),String,a String representation of this object
javax.swing.MenuSelectionManager.defaultManager(),MenuSelectionManager,a MenuSelectionManager object
javax.swing.MenuSelectionManager.setSelectedPath(MenuElement[]),void,
javax.swing.MenuSelectionManager.getSelectedPath(),MenuElement[],an array of MenuElement objects representing the selected path
javax.swing.MenuSelectionManager.clearSelectedPath(),void,
javax.swing.MenuSelectionManager.addChangeListener(ChangeListener),void,
javax.swing.MenuSelectionManager.removeChangeListener(ChangeListener),void,
javax.swing.MenuSelectionManager.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.MenuSelectionManager.fireStateChanged(),void,
javax.swing.MenuSelectionManager.processMouseEvent(MouseEvent),void,
"javax.swing.MenuSelectionManager.componentForPoint(Component,Point)",Component,"The component in the currently selected path which contains sourcePoint (relative to the source component's coordinate space. If sourcePoint is not inside a component on the currently selected path, null is returned."
javax.swing.MenuSelectionManager.processKeyEvent(KeyEvent),void,
javax.swing.MenuSelectionManager.isComponentPartOfCurrentMenu(Component),boolean,
javax.swing.OverlayLayout.getTarget(),Container,the container that uses this layout manager
javax.swing.OverlayLayout.invalidateLayout(Container),void,
"javax.swing.OverlayLayout.addLayoutComponent(String,Component)",void,
javax.swing.OverlayLayout.removeLayoutComponent(Component),void,
"javax.swing.OverlayLayout.addLayoutComponent(Component,Object)",void,
javax.swing.OverlayLayout.preferredLayoutSize(Container),Dimension,a Dimension object containing the preferred dimensions
javax.swing.OverlayLayout.minimumLayoutSize(Container),Dimension,a Dimension object containing the minimum dimensions
javax.swing.OverlayLayout.maximumLayoutSize(Container),Dimension,a Dimension object containing the maximum dimensions
javax.swing.OverlayLayout.getLayoutAlignmentX(Container),float,the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f
javax.swing.OverlayLayout.getLayoutAlignmentY(Container),float,the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f
javax.swing.OverlayLayout.layoutContainer(Container),void,
javax.swing.Popup.show(),void,
javax.swing.Popup.hide(),void,
javax.swing.PopupFactory.setSharedInstance(PopupFactory),void,
javax.swing.PopupFactory.getSharedInstance(),PopupFactory,Shared PopupFactory
"javax.swing.PopupFactory.getPopup(Component,Component,int,int)",Popup,Popup containing Contents
javax.swing.ProgressMonitor.setProgress(int),void,
javax.swing.ProgressMonitor.close(),void,
javax.swing.ProgressMonitor.getMinimum(),int,an int representing the minimum value
javax.swing.ProgressMonitor.setMinimum(int),void,
javax.swing.ProgressMonitor.getMaximum(),int,an int representing the maximum value
javax.swing.ProgressMonitor.setMaximum(int),void,
javax.swing.ProgressMonitor.isCanceled(),boolean,
javax.swing.ProgressMonitor.setMillisToDecideToPopup(int),void,
javax.swing.ProgressMonitor.getMillisToDecideToPopup(),int,
javax.swing.ProgressMonitor.setMillisToPopup(int),void,
javax.swing.ProgressMonitor.getMillisToPopup(),int,
javax.swing.ProgressMonitor.setNote(String),void,
javax.swing.ProgressMonitor.getNote(),String,a String specifying the note to display
javax.swing.ProgressMonitor.getAccessibleContext(),AccessibleContext,the AccessibleContext for the ProgressMonitor
javax.swing.ProgressMonitorInputStream.getProgressMonitor(),ProgressMonitor,the ProgressMonitor object used by this object
javax.swing.ProgressMonitorInputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached."
javax.swing.ProgressMonitorInputStream.read(byte[]),int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
"javax.swing.ProgressMonitorInputStream.read(byte[],int,int)",int,"the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."
javax.swing.ProgressMonitorInputStream.skip(long),long,the actual number of bytes skipped.
javax.swing.ProgressMonitorInputStream.close(),void,
javax.swing.ProgressMonitorInputStream.reset(),void,
javax.swing.RepaintManager.currentManager(Component),RepaintManager,the RepaintManager object
javax.swing.RepaintManager.currentManager(JComponent),RepaintManager,the RepaintManager object
javax.swing.RepaintManager.setCurrentManager(RepaintManager),void,
javax.swing.RepaintManager.addInvalidComponent(JComponent),void,
javax.swing.RepaintManager.removeInvalidComponent(JComponent),void,
"javax.swing.RepaintManager.addDirtyRegion(JComponent,int,int,int,int)",void,
"javax.swing.RepaintManager.addDirtyRegion(Window,int,int,int,int)",void,
"javax.swing.RepaintManager.addDirtyRegion(Applet,int,int,int,int)",void,
javax.swing.RepaintManager.getDirtyRegion(JComponent),Rectangle,
javax.swing.RepaintManager.markCompletelyDirty(JComponent),void,
javax.swing.RepaintManager.markCompletelyClean(JComponent),void,
javax.swing.RepaintManager.isCompletelyDirty(JComponent),boolean,
javax.swing.RepaintManager.validateInvalidComponents(),void,
javax.swing.RepaintManager.paintDirtyRegions(),void,
javax.swing.RepaintManager.toString(),String,a String representation of this object
"javax.swing.RepaintManager.getOffscreenBuffer(Component,int,int)",Image,
"javax.swing.RepaintManager.getVolatileOffscreenBuffer(Component,int,int)",Image,
javax.swing.RepaintManager.setDoubleBufferMaximumSize(Dimension),void,
javax.swing.RepaintManager.getDoubleBufferMaximumSize(),Dimension,a Dimension object representing the maximum size
javax.swing.RepaintManager.setDoubleBufferingEnabled(boolean),void,
javax.swing.RepaintManager.isDoubleBufferingEnabled(),boolean,true if this object is double buffered
"javax.swing.RowFilter.regexFilter(String,int...)","&lt;M,I&gt;RowFilter&lt;M,I&gt;",a RowFilter implementing the specified criteria
"javax.swing.RowFilter.dateFilter(RowFilter.ComparisonType,Date,int...)","&lt;M,I&gt;RowFilter&lt;M,I&gt;",a RowFilter implementing the specified criteria
"javax.swing.RowFilter.numberFilter(RowFilter.ComparisonType,Number,int...)","&lt;M,I&gt;RowFilter&lt;M,I&gt;",a RowFilter implementing the specified criteria
"javax.swing.RowFilter.orFilter(Iterable&lt;?,?)","&lt;M,I&gt;RowFilter&lt;M,I&gt;",a RowFilter implementing the specified criteria
"javax.swing.RowFilter.andFilter(Iterable&lt;?,?)","&lt;M,I&gt;RowFilter&lt;M,I&gt;",a RowFilter implementing the specified criteria
"javax.swing.RowFilter.notFilter(RowFilter&lt;M,I&gt;)","&lt;M,I&gt;RowFilter&lt;M,I&gt;",a RowFilter implementing the specified criteria
"javax.swing.RowFilter.include(RowFilter.Entry&lt;?,?)",abstractboolean,true if the entry should be shown
javax.swing.RowFilter.Entry.getModel(),abstractM,the model containing the data that this entry represents
javax.swing.RowFilter.Entry.getValueCount(),abstractint,number of values in the object being filtered
javax.swing.RowFilter.Entry.getValue(int),abstractObject,value at the specified index
javax.swing.RowFilter.Entry.getStringValue(int),String,non-null string at the specified index
javax.swing.RowFilter.Entry.getIdentifier(),abstractI,a model-based (not view-based) identifier for this entry
javax.swing.RowSorter.getModel(),abstractM,the underlying model
javax.swing.RowSorter.toggleSortOrder(int),abstractvoid,
javax.swing.RowSorter.convertRowIndexToModel(int),abstractint,row index in terms of the view
javax.swing.RowSorter.convertRowIndexToView(int),abstractint,"row index in terms of the view, or -1 if index has been filtered out of the view"
javax.swing.RowSorter.setSortKeys(List&lt;?),abstractvoid,
javax.swing.RowSorter.getSortKeys(),abstractList&lt;? extends RowSorter.SortKey&gt;,the current sort order
javax.swing.RowSorter.getViewRowCount(),abstractint,number of rows in the view
javax.swing.RowSorter.getModelRowCount(),abstractint,number of rows in the underlying model
javax.swing.RowSorter.modelStructureChanged(),abstractvoid,
javax.swing.RowSorter.allRowsChanged(),abstractvoid,
"javax.swing.RowSorter.rowsInserted(int,int)",abstractvoid,
"javax.swing.RowSorter.rowsDeleted(int,int)",abstractvoid,
"javax.swing.RowSorter.rowsUpdated(int,int)",abstractvoid,
"javax.swing.RowSorter.rowsUpdated(int,int,int)",abstractvoid,
javax.swing.RowSorter.addRowSorterListener(RowSorterListener),void,
javax.swing.RowSorter.removeRowSorterListener(RowSorterListener),void,
javax.swing.RowSorter.fireSortOrderChanged(),void,
javax.swing.RowSorter.fireRowSorterChanged(int[]),void,
javax.swing.RowSorter.SortKey.getColumn(),int,index of column
javax.swing.RowSorter.SortKey.getSortOrder(),SortOrder,the sort order of the column
javax.swing.RowSorter.SortKey.hashCode(),int,hash code
javax.swing.RowSorter.SortKey.equals(Object),boolean,true if o is equal to this SortKey
javax.swing.ScrollPaneLayout.syncWithScrollPane(JScrollPane),void,
"javax.swing.ScrollPaneLayout.addSingletonComponent(Component,Component)",Component,the newC
"javax.swing.ScrollPaneLayout.addLayoutComponent(String,Component)",void,
javax.swing.ScrollPaneLayout.removeLayoutComponent(Component),void,
javax.swing.ScrollPaneLayout.getVerticalScrollBarPolicy(),int,an integer giving the display policy
javax.swing.ScrollPaneLayout.setVerticalScrollBarPolicy(int),void,
javax.swing.ScrollPaneLayout.getHorizontalScrollBarPolicy(),int,an integer giving the display policy
javax.swing.ScrollPaneLayout.setHorizontalScrollBarPolicy(int),void,
javax.swing.ScrollPaneLayout.getViewport(),JViewport,the JViewport object that displays the scrollable contents
javax.swing.ScrollPaneLayout.getHorizontalScrollBar(),JScrollBar,the JScrollBar object that handles horizontal scrolling
javax.swing.ScrollPaneLayout.getVerticalScrollBar(),JScrollBar,the JScrollBar object that handles vertical scrolling
javax.swing.ScrollPaneLayout.getRowHeader(),JViewport,the JViewport object that is the row header
javax.swing.ScrollPaneLayout.getColumnHeader(),JViewport,the JViewport object that is the column header
javax.swing.ScrollPaneLayout.getCorner(String),Component,"the Component at the specified corner, as defined in ScrollPaneConstants; if key is not one of the four corners, null is returned"
javax.swing.ScrollPaneLayout.preferredLayoutSize(Container),Dimension,a Dimension object specifying the preferred size of the viewport and any scrollbars
javax.swing.ScrollPaneLayout.minimumLayoutSize(Container),Dimension,a Dimension object specifying the minimum size
javax.swing.ScrollPaneLayout.layoutContainer(Container),void,
javax.swing.ScrollPaneLayout.getViewportBorderBounds(JScrollPane),Rectangle,the size and position of the viewport border
javax.swing.SizeRequirements.toString(),String,the string
javax.swing.SizeRequirements.getTiledSizeRequirements(SizeRequirements[]),SizeRequirements,the total space requirements.
javax.swing.SizeRequirements.getAlignedSizeRequirements(SizeRequirements[]),SizeRequirements,the total space requirements.
"javax.swing.SizeRequirements.calculateTiledPositions(int,SizeRequirements,SizeRequirements[],int[],int[])",void,
"javax.swing.SizeRequirements.calculateTiledPositions(int,SizeRequirements,SizeRequirements[],int[],int[],boolean)",void,
"javax.swing.SizeRequirements.calculateAlignedPositions(int,SizeRequirements,SizeRequirements[],int[],int[])",void,
"javax.swing.SizeRequirements.calculateAlignedPositions(int,SizeRequirements,SizeRequirements[],int[],int[],boolean)",void,
"javax.swing.SizeRequirements.adjustSizes(int,SizeRequirements[])",int[],an array of ints containing the final size for each item
javax.swing.SizeSequence.setSizes(int[]),void,
javax.swing.SizeSequence.getSizes(),int[],a new array containing the sizes in this object
javax.swing.SizeSequence.getPosition(int),int,the starting position of the specified entry
javax.swing.SizeSequence.getIndex(int),int,the index of the entry that occupies the specified position
javax.swing.SizeSequence.getSize(int),int,the size of the entry
"javax.swing.SizeSequence.setSize(int,int)",void,
"javax.swing.SizeSequence.insertEntries(int,int,int)",void,
"javax.swing.SizeSequence.removeEntries(int,int)",void,
"javax.swing.SortingFocusTraversalPolicy.getComponentAfter(Container,Component)",Component,"the Component that should receive the focus after aComponent, or null if no suitable Component can be found"
"javax.swing.SortingFocusTraversalPolicy.getComponentBefore(Container,Component)",Component,"the Component that should receive the focus before aComponent, or null if no suitable Component can be found"
javax.swing.SortingFocusTraversalPolicy.getFirstComponent(Container),Component,"the first Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
javax.swing.SortingFocusTraversalPolicy.getLastComponent(Container),Component,"the last Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
javax.swing.SortingFocusTraversalPolicy.getDefaultComponent(Container),Component,"the default Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
javax.swing.SortingFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean),void,
javax.swing.SortingFocusTraversalPolicy.getImplicitDownCycleTraversal(),boolean,whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly
javax.swing.SortingFocusTraversalPolicy.setComparator(Comparator&lt;?),void,
javax.swing.SortingFocusTraversalPolicy.getComparator(),Comparator&lt;? super Component&gt;,the Comparator which will be used for sorting
javax.swing.SortingFocusTraversalPolicy.accept(Component),boolean,"true if aComponent is visible, displayable, enabled, and focusable; false otherwise"
javax.swing.SpinnerDateModel.setStart(Comparable),void,
javax.swing.SpinnerDateModel.getStart(),Comparable,the value of the start property
javax.swing.SpinnerDateModel.setEnd(Comparable),void,
javax.swing.SpinnerDateModel.getEnd(),Comparable,the value of the end property
javax.swing.SpinnerDateModel.setCalendarField(int),void,
javax.swing.SpinnerDateModel.getCalendarField(),int,the value of the calendarField property
javax.swing.SpinnerDateModel.getNextValue(),Object,"the next Date in the sequence, or null if the next date is after end."
javax.swing.SpinnerDateModel.getPreviousValue(),Object,"the previous Date in the sequence, or null if the previous date is before start"
javax.swing.SpinnerDateModel.getDate(),Date,the value property
javax.swing.SpinnerDateModel.getValue(),Object,the value property
javax.swing.SpinnerDateModel.setValue(Object),void,
javax.swing.SpinnerListModel.getList(),List&lt;?&gt;,the value of the list property
javax.swing.SpinnerListModel.setList(List&lt;?&gt;),void,
javax.swing.SpinnerListModel.getValue(),Object,the value property
javax.swing.SpinnerListModel.setValue(Object),void,
javax.swing.SpinnerListModel.getNextValue(),Object,the next legal value of the underlying sequence or null if value is already the last element
javax.swing.SpinnerListModel.getPreviousValue(),Object,the previous element of the underlying sequence or null if value is already the first element
javax.swing.SpinnerNumberModel.setMinimum(Comparable),void,
javax.swing.SpinnerNumberModel.getMinimum(),Comparable,the value of the minimum property
javax.swing.SpinnerNumberModel.setMaximum(Comparable),void,
javax.swing.SpinnerNumberModel.getMaximum(),Comparable,the value of the maximum property
javax.swing.SpinnerNumberModel.setStepSize(Number),void,
javax.swing.SpinnerNumberModel.getStepSize(),Number,the value of the stepSize property
javax.swing.SpinnerNumberModel.getNextValue(),Object,value + stepSize or null if the sum exceeds maximum.
javax.swing.SpinnerNumberModel.getPreviousValue(),Object,"value - stepSize, or null if the sum is less than minimum."
javax.swing.SpinnerNumberModel.getNumber(),Number,the value property
javax.swing.SpinnerNumberModel.getValue(),Object,the value property
javax.swing.SpinnerNumberModel.setValue(Object),void,
javax.swing.Spring.getMinimumValue(),abstractint,the minimumValue property of this Spring
javax.swing.Spring.getPreferredValue(),abstractint,the preferredValue of this Spring
javax.swing.Spring.getMaximumValue(),abstractint,the maximumValue property of this Spring
javax.swing.Spring.getValue(),abstractint,the value property of this Spring
javax.swing.Spring.setValue(int),abstractvoid,
javax.swing.Spring.constant(int),Spring,"a spring whose minimum, preferred, and maximum values each have the value pref"
"javax.swing.Spring.constant(int,int,int)",Spring,"a spring whose minimum, preferred, and maximum values have the values: min, pref, and max respectively"
javax.swing.Spring.minus(Spring),Spring,-s: a spring running in the opposite direction to s
"javax.swing.Spring.sum(Spring,Spring)",Spring,s1+s2: a spring representing s1 and s2 in series
"javax.swing.Spring.max(Spring,Spring)",Spring,"max(s1, s2): a spring whose value is always greater than (or equal to) the values of both s1 and s2"
"javax.swing.Spring.scale(Spring,float)",Spring,a spring whose properties are those of the input spring s multiplied by factor
javax.swing.Spring.width(Component),Spring,a spring whose properties are defined by the horizontal component of the component's size methods.
javax.swing.Spring.height(Component),Spring,a spring whose properties are defined by the vertical component of the component's size methods.
"javax.swing.SpringLayout.addLayoutComponent(String,Component)",void,
javax.swing.SpringLayout.removeLayoutComponent(Component),void,
javax.swing.SpringLayout.minimumLayoutSize(Container),Dimension,
javax.swing.SpringLayout.preferredLayoutSize(Container),Dimension,
javax.swing.SpringLayout.maximumLayoutSize(Container),Dimension,
"javax.swing.SpringLayout.addLayoutComponent(Component,Object)",void,
javax.swing.SpringLayout.getLayoutAlignmentX(Container),float,
javax.swing.SpringLayout.getLayoutAlignmentY(Container),float,
javax.swing.SpringLayout.invalidateLayout(Container),void,
"javax.swing.SpringLayout.putConstraint(String,Component,int,String,Component)",void,
"javax.swing.SpringLayout.putConstraint(String,Component,Spring,String,Component)",void,
javax.swing.SpringLayout.getConstraints(Component),SpringLayout.Constraints,the constraints for the specified component
"javax.swing.SpringLayout.getConstraint(String,Component)",Spring,a proxy for the spring controlling the distance between the specified edge and the top or left edge of its parent
javax.swing.SpringLayout.layoutContainer(Container),void,
javax.swing.SpringLayout.Constraints.setX(Spring),void,
javax.swing.SpringLayout.Constraints.getX(),Spring,the spring controlling the x value of a component's location
javax.swing.SpringLayout.Constraints.setY(Spring),void,
javax.swing.SpringLayout.Constraints.getY(),Spring,the spring controlling the y value of a component's location
javax.swing.SpringLayout.Constraints.setWidth(Spring),void,
javax.swing.SpringLayout.Constraints.getWidth(),Spring,the spring controlling the width of a component
javax.swing.SpringLayout.Constraints.setHeight(Spring),void,
javax.swing.SpringLayout.Constraints.getHeight(),Spring,the spring controlling the height of a component
"javax.swing.SpringLayout.Constraints.setConstraint(String,Spring)",void,
javax.swing.SpringLayout.Constraints.getConstraint(String),Spring,"the spring controlling the specified edge, may be null"
"javax.swing.SwingUtilities.isRectangleContainingRectangle(Rectangle,Rectangle)",boolean,
javax.swing.SwingUtilities.getLocalBounds(Component),Rectangle,
javax.swing.SwingUtilities.getWindowAncestor(Component),Window,"the first Window ancestor of c, or null if c is not contained inside a Window."
"javax.swing.SwingUtilities.convertPoint(Component,Point,Component)",Point,
"javax.swing.SwingUtilities.convertPoint(Component,int,int,Component)",Point,
"javax.swing.SwingUtilities.convertRectangle(Component,Rectangle,Component)",Rectangle,
"javax.swing.SwingUtilities.getAncestorOfClass(Class&lt;?&gt;,Component)",Container,
"javax.swing.SwingUtilities.getAncestorNamed(String,Component)",Container,
"javax.swing.SwingUtilities.getDeepestComponentAt(Component,int,int)",Component,
"javax.swing.SwingUtilities.convertMouseEvent(Component,MouseEvent,Component)",MouseEvent,
"javax.swing.SwingUtilities.convertPointToScreen(Point,Component)",void,
"javax.swing.SwingUtilities.convertPointFromScreen(Point,Component)",void,
javax.swing.SwingUtilities.windowForComponent(Component),Window,"the first Window ancestor of c, or null if c is not contained inside a Window."
"javax.swing.SwingUtilities.isDescendingFrom(Component,Component)",boolean,
"javax.swing.SwingUtilities.computeIntersection(int,int,int,int,Rectangle)",Rectangle,"dest, modified to specify the intersection"
"javax.swing.SwingUtilities.computeUnion(int,int,int,int,Rectangle)",Rectangle,the dest Rectangle
"javax.swing.SwingUtilities.computeDifference(Rectangle,Rectangle)",Rectangle[],
javax.swing.SwingUtilities.isLeftMouseButton(MouseEvent),boolean,true if the left mouse button was active
javax.swing.SwingUtilities.isMiddleMouseButton(MouseEvent),boolean,true if the middle mouse button was active
javax.swing.SwingUtilities.isRightMouseButton(MouseEvent),boolean,true if the right mouse button was active
"javax.swing.SwingUtilities.computeStringWidth(FontMetrics,String)",int,an int containing the string width
"javax.swing.SwingUtilities.layoutCompoundLabel(JComponent,FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)",String,
"javax.swing.SwingUtilities.layoutCompoundLabel(FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)",String,
"javax.swing.SwingUtilities.paintComponent(Graphics,Component,Container,int,int,int,int)",void,
"javax.swing.SwingUtilities.paintComponent(Graphics,Component,Container,Rectangle)",void,
javax.swing.SwingUtilities.updateComponentTreeUI(Component),void,
javax.swing.SwingUtilities.invokeLater(Runnable),void,
javax.swing.SwingUtilities.invokeAndWait(Runnable),void,
javax.swing.SwingUtilities.isEventDispatchThread(),boolean,true if the current thread is an AWT event dispatching thread
javax.swing.SwingUtilities.getAccessibleIndexInParent(Component),int,"-1 of this object does not have an accessible parent. Otherwise, the index of the child in its accessible parent."
"javax.swing.SwingUtilities.getAccessibleAt(Component,Point)",Accessible,"the Accessible at the specified location, if it exists; otherwise null"
javax.swing.SwingUtilities.getAccessibleStateSet(Component),AccessibleStateSet,an instance of AccessibleStateSet containing the current state set of the object
javax.swing.SwingUtilities.getAccessibleChildrenCount(Component),int,the number of accessible children in the object.
"javax.swing.SwingUtilities.getAccessibleChild(Component,int)",Accessible,the nth Accessible child of the object
javax.swing.SwingUtilities.findFocusOwner(Component),Component,"the focus owner, or null if there is no focus owner, or if the focus owner is not comp, or a descendant of comp"
javax.swing.SwingUtilities.getRootPane(Component),JRootPane,the JRootPane for Component c or null.
javax.swing.SwingUtilities.getRoot(Component),Component,the first ancestor of c that's a Window or the last Applet ancestor
javax.swing.SwingUtilities.processKeyBindings(KeyEvent),boolean,true if a binding has found and processed
"javax.swing.SwingUtilities.notifyAction(Action,KeyStroke,KeyEvent,Object,int)",boolean,
"javax.swing.SwingUtilities.replaceUIInputMap(JComponent,int,InputMap)",void,
"javax.swing.SwingUtilities.replaceUIActionMap(JComponent,ActionMap)",void,
"javax.swing.SwingUtilities.getUIInputMap(JComponent,int)",InputMap,
javax.swing.SwingUtilities.getUIActionMap(JComponent),ActionMap,
"javax.swing.SwingUtilities.calculateInnerArea(JComponent,Rectangle)",Rectangle,"null if the Component is null; otherwise, returns the passed-in rectangle (if non-null) or a new rectangle specifying position and size information"
javax.swing.SwingUtilities.getUnwrappedParent(Component),Container,"the first ancestor of the component which is not an instance of JLayer. If such an ancestor can not be found, null is returned."
javax.swing.SwingUtilities.getUnwrappedView(JViewport),Component,"the first JViewport's descendant which is not an instance of JLayer. If such a descendant can not be found, null is returned."
javax.swing.SwingWorker.doInBackground(),abstractT,the computed result
javax.swing.SwingWorker.run(),void,
javax.swing.SwingWorker.publish(V...),void,
javax.swing.SwingWorker.process(List&lt;V&gt;),void,
javax.swing.SwingWorker.done(),void,
javax.swing.SwingWorker.setProgress(int),void,
javax.swing.SwingWorker.getProgress(),int,the progress bound property.
javax.swing.SwingWorker.execute(),void,
javax.swing.SwingWorker.cancel(boolean),boolean,"false if the task could not be cancelled, typically because it has already completed normally; true otherwise"
javax.swing.SwingWorker.isCancelled(),boolean,true if this task was cancelled before it completed
javax.swing.SwingWorker.isDone(),boolean,true if this task completed
javax.swing.SwingWorker.get(),T,the computed result
"javax.swing.SwingWorker.get(long,TimeUnit)",T,the computed result
javax.swing.SwingWorker.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.SwingWorker.removePropertyChangeListener(PropertyChangeListener),void,
"javax.swing.SwingWorker.firePropertyChange(String,Object,Object)",void,
javax.swing.SwingWorker.getPropertyChangeSupport(),PropertyChangeSupport,PropertyChangeSupport for this SwingWorker
javax.swing.SwingWorker.getState(),SwingWorker.StateValue,the current state
javax.swing.Timer.addActionListener(ActionListener),void,
javax.swing.Timer.removeActionListener(ActionListener),void,
javax.swing.Timer.getActionListeners(),ActionListener[],all of the timer's ActionListeners or an empty array if no action listeners are currently registered
javax.swing.Timer.fireActionPerformed(ActionEvent),void,
javax.swing.Timer.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this timer, or an empty array if no such listeners have been added"
javax.swing.Timer.setLogTimers(boolean),void,
javax.swing.Timer.getLogTimers(),boolean,"true if logging is enabled; otherwise, false"
javax.swing.Timer.setDelay(int),void,
javax.swing.Timer.getDelay(),int,
javax.swing.Timer.setInitialDelay(int),void,
javax.swing.Timer.getInitialDelay(),int,
javax.swing.Timer.setRepeats(boolean),void,
javax.swing.Timer.isRepeats(),boolean,
javax.swing.Timer.setCoalesce(boolean),void,
javax.swing.Timer.isCoalesce(),boolean,
javax.swing.Timer.setActionCommand(String),void,
javax.swing.Timer.getActionCommand(),String,the action command used in firing events
javax.swing.Timer.start(),void,
javax.swing.Timer.isRunning(),boolean,
javax.swing.Timer.stop(),void,
javax.swing.Timer.restart(),void,
javax.swing.ToolTipManager.setEnabled(boolean),void,
javax.swing.ToolTipManager.isEnabled(),boolean,"true if this object is enabled, false otherwise"
javax.swing.ToolTipManager.setLightWeightPopupEnabled(boolean),void,
javax.swing.ToolTipManager.isLightWeightPopupEnabled(),boolean,true if lightweight ToolTips are in use
javax.swing.ToolTipManager.setInitialDelay(int),void,
javax.swing.ToolTipManager.getInitialDelay(),int,"an integer representing the initial delay value, in milliseconds"
javax.swing.ToolTipManager.setDismissDelay(int),void,
javax.swing.ToolTipManager.getDismissDelay(),int,"an integer representing the dismissal delay value, in milliseconds"
javax.swing.ToolTipManager.setReshowDelay(int),void,
javax.swing.ToolTipManager.getReshowDelay(),int,reshown delay property
javax.swing.ToolTipManager.sharedInstance(),ToolTipManager,a shared ToolTipManager object
javax.swing.ToolTipManager.registerComponent(JComponent),void,
javax.swing.ToolTipManager.unregisterComponent(JComponent),void,
javax.swing.ToolTipManager.mouseEntered(MouseEvent),void,
javax.swing.ToolTipManager.mouseExited(MouseEvent),void,
javax.swing.ToolTipManager.mousePressed(MouseEvent),void,
javax.swing.ToolTipManager.mouseDragged(MouseEvent),void,
javax.swing.ToolTipManager.mouseMoved(MouseEvent),void,
javax.swing.TransferHandler.getCutAction(),Action,an Action for performing cuts to the clipboard
javax.swing.TransferHandler.getCopyAction(),Action,an Action for performing copies to the clipboard
javax.swing.TransferHandler.getPasteAction(),Action,an Action for performing pastes from the clipboard
javax.swing.TransferHandler.setDragImage(Image),void,
javax.swing.TransferHandler.getDragImage(),Image,the reference to the drag image
javax.swing.TransferHandler.setDragImageOffset(Point),void,
javax.swing.TransferHandler.getDragImageOffset(),Point,"a Point object that corresponds to coordinates of an anchor offset of the image relative to the upper left corner of the image. The point (0,0) returns by default."
"javax.swing.TransferHandler.exportAsDrag(JComponent,InputEvent,int)",void,
"javax.swing.TransferHandler.exportToClipboard(JComponent,Clipboard,int)",void,
javax.swing.TransferHandler.importData(TransferHandler.TransferSupport),boolean,"true if the data was inserted into the component, false otherwise"
"javax.swing.TransferHandler.importData(JComponent,Transferable)",boolean,"true if the data was inserted into the component, false otherwise"
javax.swing.TransferHandler.canImport(TransferHandler.TransferSupport),boolean,"true if the import can happen, false otherwise"
"javax.swing.TransferHandler.canImport(JComponent,DataFlavor[])",boolean,"true if the data can be inserted into the component, false otherwise"
javax.swing.TransferHandler.getSourceActions(JComponent),int,"COPY if the transfer property can be found, otherwise returns NONE"
javax.swing.TransferHandler.getVisualRepresentation(Transferable),Icon,"null, indicating there is no default visual representation"
javax.swing.TransferHandler.createTransferable(JComponent),Transferable,"the representation of the data to be transferred, or null if the property associated with c is null"
"javax.swing.TransferHandler.exportDone(JComponent,Transferable,int)",void,
javax.swing.TransferHandler.DropLocation.getDropPoint(),Point,the drop point.
javax.swing.TransferHandler.DropLocation.toString(),String,a string representation of this drop location
javax.swing.TransferHandler.TransferSupport.isDrop(),boolean,"true if this is a drop operation, false otherwise."
javax.swing.TransferHandler.TransferSupport.getComponent(),Component,the target component
javax.swing.TransferHandler.TransferSupport.getDropLocation(),TransferHandler.DropLocation,the drop location
javax.swing.TransferHandler.TransferSupport.setShowDropLocation(boolean),void,
javax.swing.TransferHandler.TransferSupport.setDropAction(int),void,
javax.swing.TransferHandler.TransferSupport.getDropAction(),int,the action chosen for the drop
javax.swing.TransferHandler.TransferSupport.getUserDropAction(),int,the user drop action
javax.swing.TransferHandler.TransferSupport.getSourceDropActions(),int,the drag source's supported drop actions
javax.swing.TransferHandler.TransferSupport.getDataFlavors(),DataFlavor[],the data flavors for this transfer
javax.swing.TransferHandler.TransferSupport.isDataFlavorSupported(DataFlavor),boolean,whether or not the given flavor is supported.
javax.swing.TransferHandler.TransferSupport.getTransferable(),Transferable,the Transferable associated with this transfer
javax.swing.UIDefaults.get(Object),Object,the value for key
"javax.swing.UIDefaults.get(Object,Locale)",Object,the value for key
"javax.swing.UIDefaults.put(Object,Object)",Object,"the previous Object value, or null"
javax.swing.UIDefaults.putDefaults(Object[]),void,
javax.swing.UIDefaults.getFont(Object),Font,"if the value for key is a Font, return the Font object; otherwise return null"
"javax.swing.UIDefaults.getFont(Object,Locale)",Font,"if the value for key and Locale is a Font, return the Font object; otherwise return null"
javax.swing.UIDefaults.getColor(Object),Color,"if the value for key is a Color, return the Color object; otherwise return null"
"javax.swing.UIDefaults.getColor(Object,Locale)",Color,"if the value for key and Locale is a Color, return the Color object; otherwise return null"
javax.swing.UIDefaults.getIcon(Object),Icon,"if the value for key is an Icon, return the Icon object; otherwise return null"
"javax.swing.UIDefaults.getIcon(Object,Locale)",Icon,"if the value for key and Locale is an Icon, return the Icon object; otherwise return null"
javax.swing.UIDefaults.getBorder(Object),Border,"if the value for key is a Border, return the Border object; otherwise return null"
"javax.swing.UIDefaults.getBorder(Object,Locale)",Border,"if the value for key and Locale is a Border, return the Border object; otherwise return null"
javax.swing.UIDefaults.getString(Object),String,"if the value for key is a String, return the String object; otherwise return null"
"javax.swing.UIDefaults.getString(Object,Locale)",String,"if the value for key for the given Locale is a String, return the String object; otherwise return null"
javax.swing.UIDefaults.getInt(Object),int,"if the value for key is an Integer, return its value, otherwise return 0"
"javax.swing.UIDefaults.getInt(Object,Locale)",int,"if the value for key and Locale is an Integer, return its value, otherwise return 0"
javax.swing.UIDefaults.getBoolean(Object),boolean,"if the value of key is boolean, return the boolean value, otherwise return false."
"javax.swing.UIDefaults.getBoolean(Object,Locale)",boolean,"if the value for key and Locale is boolean, return the boolean value, otherwise return false."
javax.swing.UIDefaults.getInsets(Object),Insets,"if the value for key is an Insets, return the Insets object; otherwise return null"
"javax.swing.UIDefaults.getInsets(Object,Locale)",Insets,"if the value for key and Locale is an Insets, return the Insets object; otherwise return null"
javax.swing.UIDefaults.getDimension(Object),Dimension,"if the value for key is a Dimension, return the Dimension object; otherwise return null"
"javax.swing.UIDefaults.getDimension(Object,Locale)",Dimension,"if the value for key and Locale is a Dimension, return the Dimension object; otherwise return null"
"javax.swing.UIDefaults.getUIClass(String,ClassLoader)",Class&lt;? extends ComponentUI&gt;,the value of Class.forName(get(uidClassID))
javax.swing.UIDefaults.getUIClass(String),Class&lt;? extends ComponentUI&gt;,"the Class object returned by getUIClass(uiClassID, null)"
javax.swing.UIDefaults.getUIError(String),void,
javax.swing.UIDefaults.getUI(JComponent),ComponentUI,
javax.swing.UIDefaults.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.UIDefaults.removePropertyChangeListener(PropertyChangeListener),void,
javax.swing.UIDefaults.getPropertyChangeListeners(),PropertyChangeListener[],all of the PropertyChangeListeners added or an empty array if no listeners have been added
"javax.swing.UIDefaults.firePropertyChange(String,Object,Object)",void,
javax.swing.UIDefaults.addResourceBundle(String),void,
javax.swing.UIDefaults.removeResourceBundle(String),void,
javax.swing.UIDefaults.setDefaultLocale(Locale),void,
javax.swing.UIDefaults.getDefaultLocale(),Locale,the default locale
javax.swing.UIDefaults.LazyInputMap.createValue(UIDefaults),Object,the InputMap
javax.swing.UIDefaults.ProxyLazyValue.createValue(UIDefaults),Object,the created Object
javax.swing.UIManager.getInstalledLookAndFeels(),UIManager.LookAndFeelInfo[],an array of LookAndFeelInfo objects
javax.swing.UIManager.setInstalledLookAndFeels(UIManager.LookAndFeelInfo[]),void,
javax.swing.UIManager.installLookAndFeel(UIManager.LookAndFeelInfo),void,
"javax.swing.UIManager.installLookAndFeel(String,String)",void,
javax.swing.UIManager.getLookAndFeel(),LookAndFeel,"current look and feel, or null"
javax.swing.UIManager.setLookAndFeel(LookAndFeel),void,
javax.swing.UIManager.setLookAndFeel(String),void,
javax.swing.UIManager.getSystemLookAndFeelClassName(),String,the String of the LookAndFeel class
javax.swing.UIManager.getCrossPlatformLookAndFeelClassName(),String,a string with the JLF implementation-class
javax.swing.UIManager.getDefaults(),UIDefaults,a UIDefaults object containing the default values
javax.swing.UIManager.getFont(Object),Font,the Font object
"javax.swing.UIManager.getFont(Object,Locale)",Font,the Font object
javax.swing.UIManager.getColor(Object),Color,the Color object
"javax.swing.UIManager.getColor(Object,Locale)",Color,the Color object
javax.swing.UIManager.getIcon(Object),Icon,the Icon object
"javax.swing.UIManager.getIcon(Object,Locale)",Icon,the Icon object
javax.swing.UIManager.getBorder(Object),Border,the Border object
"javax.swing.UIManager.getBorder(Object,Locale)",Border,the Border object
javax.swing.UIManager.getString(Object),String,the String
"javax.swing.UIManager.getString(Object,Locale)",String,the String
javax.swing.UIManager.getInt(Object),int,the int
"javax.swing.UIManager.getInt(Object,Locale)",int,the int
javax.swing.UIManager.getBoolean(Object),boolean,the boolean value corresponding to the key
"javax.swing.UIManager.getBoolean(Object,Locale)",boolean,the boolean value corresponding to the key
javax.swing.UIManager.getInsets(Object),Insets,the Insets object
"javax.swing.UIManager.getInsets(Object,Locale)",Insets,the Insets object
javax.swing.UIManager.getDimension(Object),Dimension,the Dimension object
"javax.swing.UIManager.getDimension(Object,Locale)",Dimension,the Dimension object
javax.swing.UIManager.get(Object),Object,the Object
"javax.swing.UIManager.get(Object,Locale)",Object,the Object
"javax.swing.UIManager.put(Object,Object)",Object,"the Object returned by UIDefaults.put(java.lang.Object, java.lang.Object)"
javax.swing.UIManager.getUI(JComponent),ComponentUI,the ComponentUI object for target
javax.swing.UIManager.getLookAndFeelDefaults(),UIDefaults,UIDefaults from the current look and feel
javax.swing.UIManager.addAuxiliaryLookAndFeel(LookAndFeel),void,
javax.swing.UIManager.removeAuxiliaryLookAndFeel(LookAndFeel),boolean,true if the LookAndFeel was removed from the list
javax.swing.UIManager.getAuxiliaryLookAndFeels(),LookAndFeel[],list of auxiliary LookAndFeels or null
javax.swing.UIManager.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.UIManager.removePropertyChangeListener(PropertyChangeListener),void,
javax.swing.UIManager.getPropertyChangeListeners(),PropertyChangeListener[],all of the PropertyChangeListeners added or an empty array if no listeners have been added
javax.swing.UIManager.LookAndFeelInfo.getName(),String,a String containing the name
javax.swing.UIManager.LookAndFeelInfo.getClassName(),String,the name of the class that implements this LookAndFeel
javax.swing.UIManager.LookAndFeelInfo.toString(),String,a String representation of this object
"javax.swing.ViewportLayout.addLayoutComponent(String,Component)",void,
javax.swing.ViewportLayout.removeLayoutComponent(Component),void,
javax.swing.ViewportLayout.preferredLayoutSize(Container),Dimension,a Dimension object containing the preferred dimensions
javax.swing.ViewportLayout.minimumLayoutSize(Container),Dimension,a Dimension object containing the minimum dimensions
javax.swing.ViewportLayout.layoutContainer(Container),void,
"javax.swing.border.AbstractBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
javax.swing.border.AbstractBorder.getBorderInsets(Component),Insets,a new Insets object
"javax.swing.border.AbstractBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.AbstractBorder.isBorderOpaque(),boolean,false
"javax.swing.border.AbstractBorder.getInteriorRectangle(Component,int,int,int,int)",Rectangle,a Rectangle containing the interior coordinates
"javax.swing.border.AbstractBorder.getInteriorRectangle(Component,Border,int,int,int,int)",Rectangle,a Rectangle containing the interior coordinates
"javax.swing.border.AbstractBorder.getBaseline(Component,int,int)",int,the baseline or &lt; 0 indicating there is no reasonable baseline
javax.swing.border.AbstractBorder.getBaselineResizeBehavior(Component),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the border is resized
"javax.swing.border.BevelBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.BevelBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.BevelBorder.getHighlightOuterColor(Component),Color,
javax.swing.border.BevelBorder.getHighlightInnerColor(Component),Color,
javax.swing.border.BevelBorder.getShadowInnerColor(Component),Color,
javax.swing.border.BevelBorder.getShadowOuterColor(Component),Color,
javax.swing.border.BevelBorder.getHighlightOuterColor(),Color,
javax.swing.border.BevelBorder.getHighlightInnerColor(),Color,
javax.swing.border.BevelBorder.getShadowInnerColor(),Color,
javax.swing.border.BevelBorder.getShadowOuterColor(),Color,
javax.swing.border.BevelBorder.getBevelType(),int,
javax.swing.border.BevelBorder.isBorderOpaque(),boolean,false
"javax.swing.border.BevelBorder.paintRaisedBevel(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.BevelBorder.paintLoweredBevel(Component,Graphics,int,int,int,int)",void,
javax.swing.border.CompoundBorder.isBorderOpaque(),boolean,true if the inside and outside borders are each either null or opaque; or false otherwise
"javax.swing.border.CompoundBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.CompoundBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.CompoundBorder.getOutsideBorder(),Border,
javax.swing.border.CompoundBorder.getInsideBorder(),Border,
"javax.swing.border.EmptyBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.EmptyBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.EmptyBorder.getBorderInsets(),Insets,
javax.swing.border.EmptyBorder.isBorderOpaque(),boolean,false
"javax.swing.border.EtchedBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.EtchedBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.EtchedBorder.isBorderOpaque(),boolean,false
javax.swing.border.EtchedBorder.getEtchType(),int,
javax.swing.border.EtchedBorder.getHighlightColor(Component),Color,
javax.swing.border.EtchedBorder.getHighlightColor(),Color,
javax.swing.border.EtchedBorder.getShadowColor(Component),Color,
javax.swing.border.EtchedBorder.getShadowColor(),Color,
javax.swing.border.LineBorder.createBlackLineBorder(),Border,
javax.swing.border.LineBorder.createGrayLineBorder(),Border,
"javax.swing.border.LineBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.LineBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.LineBorder.getLineColor(),Color,
javax.swing.border.LineBorder.getThickness(),int,
javax.swing.border.LineBorder.getRoundedCorners(),boolean,
javax.swing.border.LineBorder.isBorderOpaque(),boolean,false
"javax.swing.border.MatteBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.MatteBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.MatteBorder.getBorderInsets(),Insets,
javax.swing.border.MatteBorder.getMatteColor(),Color,
javax.swing.border.MatteBorder.getTileIcon(),Icon,
javax.swing.border.MatteBorder.isBorderOpaque(),boolean,false
"javax.swing.border.SoftBevelBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.SoftBevelBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.SoftBevelBorder.isBorderOpaque(),boolean,false
"javax.swing.border.StrokeBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.StrokeBorder.getBorderInsets(Component,Insets)",Insets,the reinitialized insets parameter
javax.swing.border.StrokeBorder.getStroke(),BasicStroke,the BasicStroke object
javax.swing.border.StrokeBorder.getPaint(),Paint,the Paint object or null if the paint parameter is not set
"javax.swing.border.TitledBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.border.TitledBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.border.TitledBorder.isBorderOpaque(),boolean,false
javax.swing.border.TitledBorder.getTitle(),String,the title of the titled border
javax.swing.border.TitledBorder.getBorder(),Border,the border of the titled border
javax.swing.border.TitledBorder.getTitlePosition(),int,the title-position of the titled border
javax.swing.border.TitledBorder.getTitleJustification(),int,the title-justification of the titled border
javax.swing.border.TitledBorder.getTitleFont(),Font,the title-font of the titled border
javax.swing.border.TitledBorder.getTitleColor(),Color,the title-color of the titled border
javax.swing.border.TitledBorder.setTitle(String),void,
javax.swing.border.TitledBorder.setBorder(Border),void,
javax.swing.border.TitledBorder.setTitlePosition(int),void,
javax.swing.border.TitledBorder.setTitleJustification(int),void,
javax.swing.border.TitledBorder.setTitleFont(Font),void,
javax.swing.border.TitledBorder.setTitleColor(Color),void,
javax.swing.border.TitledBorder.getMinimumSize(Component),Dimension,the Dimension object
"javax.swing.border.TitledBorder.getBaseline(Component,int,int)",int,the baseline or &lt; 0 indicating there is no reasonable baseline
javax.swing.border.TitledBorder.getBaselineResizeBehavior(Component),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the border is resized
javax.swing.border.TitledBorder.getFont(Component),Font,
javax.swing.colorchooser.AbstractColorChooserPanel.updateChooser(),abstractvoid,
javax.swing.colorchooser.AbstractColorChooserPanel.buildChooser(),abstractvoid,
javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayName(),abstractString,the name of the display panel
javax.swing.colorchooser.AbstractColorChooserPanel.getMnemonic(),int,KeyEvent.VK constant identifying the mnemonic; &lt;= 0 for no mnemonic
javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayedMnemonicIndex(),int,Character index to render mnemonic for; -1 to provide no visual identifier for this panel.
javax.swing.colorchooser.AbstractColorChooserPanel.getSmallDisplayIcon(),abstractIcon,the small display icon
javax.swing.colorchooser.AbstractColorChooserPanel.getLargeDisplayIcon(),abstractIcon,the large display icon
javax.swing.colorchooser.AbstractColorChooserPanel.installChooserPanel(JColorChooser),void,
javax.swing.colorchooser.AbstractColorChooserPanel.uninstallChooserPanel(JColorChooser),void,
javax.swing.colorchooser.AbstractColorChooserPanel.getColorSelectionModel(),ColorSelectionModel,the ColorSelectionModel model this panel is editing
javax.swing.colorchooser.AbstractColorChooserPanel.getColorFromModel(),Color,the Color that is selected
javax.swing.colorchooser.AbstractColorChooserPanel.paint(Graphics),void,
javax.swing.colorchooser.ColorChooserComponentFactory.getDefaultChooserPanels(),AbstractColorChooserPanel[],
javax.swing.colorchooser.ColorChooserComponentFactory.getPreviewPanel(),JComponent,
javax.swing.colorchooser.DefaultColorSelectionModel.getSelectedColor(),Color,the selected Color
javax.swing.colorchooser.DefaultColorSelectionModel.setSelectedColor(Color),void,
javax.swing.colorchooser.DefaultColorSelectionModel.addChangeListener(ChangeListener),void,
javax.swing.colorchooser.DefaultColorSelectionModel.removeChangeListener(ChangeListener),void,
javax.swing.colorchooser.DefaultColorSelectionModel.getChangeListeners(),ChangeListener[],"all of the ChangeListeners added, or an empty array if no listeners have been added"
javax.swing.colorchooser.DefaultColorSelectionModel.fireStateChanged(),void,
javax.swing.event.AncestorEvent.getAncestor(),Container,
javax.swing.event.AncestorEvent.getAncestorParent(),Container,
javax.swing.event.AncestorEvent.getComponent(),JComponent,
javax.swing.event.CaretEvent.getDot(),abstractint,the dot &gt;= 0
javax.swing.event.CaretEvent.getMark(),abstractint,the mark &gt;= 0
javax.swing.event.DocumentEvent.EventType.toString(),String,the string
javax.swing.event.EventListenerList.getListenerList(),Object[],
javax.swing.event.EventListenerList.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],all of the listeners of the specified type.
javax.swing.event.EventListenerList.getListenerCount(),int,
javax.swing.event.EventListenerList.getListenerCount(Class&lt;?&gt;),int,
"javax.swing.event.EventListenerList.add(Class&lt;T&gt;,T)",&lt;T extends EventListener&gt;void,
"javax.swing.event.EventListenerList.remove(Class&lt;T&gt;,T)",&lt;T extends EventListener&gt;void,
javax.swing.event.EventListenerList.toString(),String,a string representation of the object.
javax.swing.event.HyperlinkEvent.getEventType(),HyperlinkEvent.EventType,the type
javax.swing.event.HyperlinkEvent.getDescription(),String,
javax.swing.event.HyperlinkEvent.getURL(),URL,the URL
javax.swing.event.HyperlinkEvent.getSourceElement(),Element,"Element indicating source of event, or null"
javax.swing.event.HyperlinkEvent.getInputEvent(),InputEvent,"InputEvent that triggered the hyperlink event, or null"
javax.swing.event.HyperlinkEvent.EventType.toString(),String,the string
javax.swing.event.InternalFrameAdapter.internalFrameOpened(InternalFrameEvent),void,
javax.swing.event.InternalFrameAdapter.internalFrameClosing(InternalFrameEvent),void,
javax.swing.event.InternalFrameAdapter.internalFrameClosed(InternalFrameEvent),void,
javax.swing.event.InternalFrameAdapter.internalFrameIconified(InternalFrameEvent),void,
javax.swing.event.InternalFrameAdapter.internalFrameDeiconified(InternalFrameEvent),void,
javax.swing.event.InternalFrameAdapter.internalFrameActivated(InternalFrameEvent),void,
javax.swing.event.InternalFrameAdapter.internalFrameDeactivated(InternalFrameEvent),void,
javax.swing.event.InternalFrameEvent.paramString(),String,a string identifying the event and its attributes
javax.swing.event.InternalFrameEvent.getInternalFrame(),JInternalFrame,the JInternalFrame object that originated the event
javax.swing.event.ListDataEvent.getType(),int,
javax.swing.event.ListDataEvent.getIndex0(),int,an int representing the lower index value
javax.swing.event.ListDataEvent.getIndex1(),int,an int representing the upper index value
javax.swing.event.ListDataEvent.toString(),String,a string representation of this ListDataEvent.
javax.swing.event.ListSelectionEvent.getFirstIndex(),int,"the first row whose selection value may have changed, where zero is the first row"
javax.swing.event.ListSelectionEvent.getLastIndex(),int,"the last row whose selection value may have changed, where zero is the first row"
javax.swing.event.ListSelectionEvent.getValueIsAdjusting(),boolean,"true if this is one in a series of multiple events, where changes are still being made"
javax.swing.event.ListSelectionEvent.toString(),String,a String representation of this object
javax.swing.event.MenuDragMouseEvent.getPath(),MenuElement[],an array of MenuElement objects representing the path value
javax.swing.event.MenuDragMouseEvent.getMenuSelectionManager(),MenuSelectionManager,a MenuSelectionManager object
javax.swing.event.MenuKeyEvent.getPath(),MenuElement[],an array of MenuElement objects representing the path value
javax.swing.event.MenuKeyEvent.getMenuSelectionManager(),MenuSelectionManager,a MenuSelectionManager object
javax.swing.event.RowSorterEvent.getSource(),RowSorter,the source of the event as a RowSorter
javax.swing.event.RowSorterEvent.getType(),RowSorterEvent.Type,the type of event
javax.swing.event.RowSorterEvent.convertPreviousRowIndexToModel(int),int,"the index in terms of the model prior to the sort, or -1 if the location is not valid or the mapping was not provided."
javax.swing.event.RowSorterEvent.getPreviousRowCount(),int,the number of rows in terms of the view prior to the sort
javax.swing.event.SwingPropertyChangeSupport.firePropertyChange(PropertyChangeEvent),void,
javax.swing.event.SwingPropertyChangeSupport.isNotifyOnEDT(),boolean,notifyOnEDT property
javax.swing.event.TableColumnModelEvent.getFromIndex(),int,
javax.swing.event.TableColumnModelEvent.getToIndex(),int,
javax.swing.event.TableModelEvent.getFirstRow(),int,
javax.swing.event.TableModelEvent.getLastRow(),int,
javax.swing.event.TableModelEvent.getColumn(),int,
javax.swing.event.TableModelEvent.getType(),int,
javax.swing.event.TreeExpansionEvent.getPath(),TreePath,
javax.swing.event.TreeModelEvent.getTreePath(),TreePath,the TreePath used in identifying the changed nodes.
javax.swing.event.TreeModelEvent.getPath(),Object[],"an array of Objects, where the first Object is the one stored at the root and the last object is the one stored at the node identified by the path"
javax.swing.event.TreeModelEvent.getChildren(),Object[],an array of Object containing the children specified by the event
javax.swing.event.TreeModelEvent.getChildIndices(),int[],an array of int containing index locations for the children specified by the event
javax.swing.event.TreeModelEvent.toString(),String,a String representation of this object
javax.swing.event.TreeSelectionEvent.getPaths(),TreePath[],
javax.swing.event.TreeSelectionEvent.getPath(),TreePath,
javax.swing.event.TreeSelectionEvent.isAddedPath(),boolean,"true if getPath was added to the selection, false otherwise"
javax.swing.event.TreeSelectionEvent.isAddedPath(TreePath),boolean,"true if path was added to the selection, false otherwise"
javax.swing.event.TreeSelectionEvent.isAddedPath(int),boolean,"true if the path was added to the selection, false otherwise"
javax.swing.event.TreeSelectionEvent.getOldLeadSelectionPath(),TreePath,
javax.swing.event.TreeSelectionEvent.getNewLeadSelectionPath(),TreePath,
javax.swing.event.TreeSelectionEvent.cloneWithSource(Object),Object,
javax.swing.event.UndoableEditEvent.getEdit(),UndoableEdit,the UndoableEdit object encapsulating the edit
javax.swing.filechooser.FileFilter.accept(File),abstractboolean,
javax.swing.filechooser.FileFilter.getDescription(),abstractString,
javax.swing.filechooser.FileNameExtensionFilter.accept(File),boolean,"true if the file is to be accepted, false otherwise"
javax.swing.filechooser.FileNameExtensionFilter.getDescription(),String,the description of this filter
javax.swing.filechooser.FileNameExtensionFilter.getExtensions(),String[],the set of file name extensions files are tested against
javax.swing.filechooser.FileNameExtensionFilter.toString(),String,a string representation of this FileNameExtensionFilter
javax.swing.filechooser.FileSystemView.getFileSystemView(),FileSystemView,
javax.swing.filechooser.FileSystemView.isRoot(File),boolean,true if f is a root in the navigable tree.
javax.swing.filechooser.FileSystemView.isTraversable(File),Boolean,"true if the file/directory can be traversed, otherwise false"
javax.swing.filechooser.FileSystemView.getSystemDisplayName(File),String,the file name as it would be displayed by a native file chooser
javax.swing.filechooser.FileSystemView.getSystemTypeDescription(File),String,the file type description as it would be displayed by a native file chooser or null if no native information is available.
javax.swing.filechooser.FileSystemView.getSystemIcon(File),Icon,an icon as it would be displayed by a native file chooser
"javax.swing.filechooser.FileSystemView.isParent(File,File)",boolean,true if folder is a directory or special folder and contains file.
"javax.swing.filechooser.FileSystemView.getChild(File,String)",File,"a File object. This is normally constructed with new File(parent, fileName) except when parent and child are both special folders, in which case the File is a wrapper containing a ShellFolder object."
javax.swing.filechooser.FileSystemView.isFileSystem(File),boolean,true if f is a real file or directory.
javax.swing.filechooser.FileSystemView.createNewFolder(File),abstractFile,
javax.swing.filechooser.FileSystemView.isHiddenFile(File),boolean,
javax.swing.filechooser.FileSystemView.isFileSystemRoot(File),boolean,true if f is a root of a filesystem
javax.swing.filechooser.FileSystemView.isDrive(File),boolean,false always
javax.swing.filechooser.FileSystemView.isFloppyDrive(File),boolean,false always
javax.swing.filechooser.FileSystemView.isComputerNode(File),boolean,false always
javax.swing.filechooser.FileSystemView.getRoots(),File[],
javax.swing.filechooser.FileSystemView.getHomeDirectory(),File,
javax.swing.filechooser.FileSystemView.getDefaultDirectory(),File,a File object representing the default starting folder
"javax.swing.filechooser.FileSystemView.createFileObject(File,String)",File,
javax.swing.filechooser.FileSystemView.createFileObject(String),File,
"javax.swing.filechooser.FileSystemView.getFiles(File,boolean)",File[],
javax.swing.filechooser.FileSystemView.getParentDirectory(File),File,"the parent directory of dir, or null if dir is null"
javax.swing.filechooser.FileSystemView.createFileSystemRoot(File),File,a new File object
javax.swing.filechooser.FileView.getName(File),String,
javax.swing.filechooser.FileView.getDescription(File),String,
javax.swing.filechooser.FileView.getTypeDescription(File),String,
javax.swing.filechooser.FileView.getIcon(File),Icon,
javax.swing.filechooser.FileView.isTraversable(File),Boolean,
javax.swing.plaf.BorderUIResource.getEtchedBorderUIResource(),Border,
javax.swing.plaf.BorderUIResource.getLoweredBevelBorderUIResource(),Border,
javax.swing.plaf.BorderUIResource.getRaisedBevelBorderUIResource(),Border,
javax.swing.plaf.BorderUIResource.getBlackLineBorderUIResource(),Border,
"javax.swing.plaf.BorderUIResource.paintBorder(Component,Graphics,int,int,int,int)",void,
javax.swing.plaf.BorderUIResource.getBorderInsets(Component),Insets,
javax.swing.plaf.BorderUIResource.isBorderOpaque(),boolean,
"javax.swing.plaf.ComboBoxUI.setPopupVisible(JComboBox,boolean)",abstractvoid,
javax.swing.plaf.ComboBoxUI.isPopupVisible(JComboBox),abstractboolean,
javax.swing.plaf.ComboBoxUI.isFocusTraversable(JComboBox),abstractboolean,
javax.swing.plaf.ComponentUI.installUI(JComponent),void,
javax.swing.plaf.ComponentUI.uninstallUI(JComponent),void,
"javax.swing.plaf.ComponentUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.ComponentUI.update(Graphics,JComponent)",void,
javax.swing.plaf.ComponentUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.ComponentUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.ComponentUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
"javax.swing.plaf.ComponentUI.contains(JComponent,int,int)",boolean,
javax.swing.plaf.ComponentUI.createUI(JComponent),ComponentUI,
"javax.swing.plaf.ComponentUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.ComponentUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.ComponentUI.getAccessibleChildrenCount(JComponent),int,the number of accessible children in the object
"javax.swing.plaf.ComponentUI.getAccessibleChild(JComponent,int)",Accessible,the ith Accessible child of the object
javax.swing.plaf.FileChooserUI.getAcceptAllFileFilter(JFileChooser),abstractFileFilter,
javax.swing.plaf.FileChooserUI.getFileView(JFileChooser),abstractFileView,
javax.swing.plaf.FileChooserUI.getApproveButtonText(JFileChooser),abstractString,
javax.swing.plaf.FileChooserUI.getDialogTitle(JFileChooser),abstractString,
javax.swing.plaf.FileChooserUI.rescanCurrentDirectory(JFileChooser),abstractvoid,
"javax.swing.plaf.FileChooserUI.ensureFileIsVisible(JFileChooser,File)",abstractvoid,
javax.swing.plaf.FileChooserUI.getDefaultButton(JFileChooser),JButton,
"javax.swing.plaf.IconUIResource.paintIcon(Component,Graphics,int,int)",void,
javax.swing.plaf.IconUIResource.getIconWidth(),int,an int specifying the fixed width of the icon.
javax.swing.plaf.IconUIResource.getIconHeight(),int,an int specifying the fixed height of the icon.
"javax.swing.plaf.LayerUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.LayerUI.eventDispatched(AWTEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processComponentEvent(ComponentEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processFocusEvent(FocusEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processKeyEvent(KeyEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processMouseEvent(MouseEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processMouseMotionEvent(MouseEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processMouseWheelEvent(MouseWheelEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processInputMethodEvent(InputMethodEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processHierarchyEvent(HierarchyEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.processHierarchyBoundsEvent(HierarchyEvent,JLayer&lt;?)",void,
javax.swing.plaf.LayerUI.updateUI(JLayer&lt;?),void,
javax.swing.plaf.LayerUI.installUI(JComponent),void,
javax.swing.plaf.LayerUI.uninstallUI(JComponent),void,
javax.swing.plaf.LayerUI.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.plaf.LayerUI.removePropertyChangeListener(PropertyChangeListener),void,
javax.swing.plaf.LayerUI.getPropertyChangeListeners(),PropertyChangeListener[],all of this ui's PropertyChangeListeners or an empty array if no property change listeners are currently registered
"javax.swing.plaf.LayerUI.addPropertyChangeListener(String,PropertyChangeListener)",void,
"javax.swing.plaf.LayerUI.removePropertyChangeListener(String,PropertyChangeListener)",void,
javax.swing.plaf.LayerUI.getPropertyChangeListeners(String),PropertyChangeListener[],"all of the PropertyChangeListeners associated with the named property; if no such listeners have been added or if propertyName is null, an empty array is returned"
"javax.swing.plaf.LayerUI.firePropertyChange(String,Object,Object)",void,
"javax.swing.plaf.LayerUI.applyPropertyChange(PropertyChangeEvent,JLayer&lt;?)",void,
"javax.swing.plaf.LayerUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.LayerUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.LayerUI.doLayout(JLayer&lt;?),void,
javax.swing.plaf.LayerUI.getPreferredSize(JComponent),Dimension,preferred size for the passed JLayer
javax.swing.plaf.LayerUI.getMinimumSize(JComponent),Dimension,minimal size for the passed JLayer
javax.swing.plaf.LayerUI.getMaximumSize(JComponent),Dimension,maximum size for the passed JLayer
"javax.swing.plaf.LayerUI.paintImmediately(int,int,int,int,JLayer&lt;?)",void,
"javax.swing.plaf.ListUI.locationToIndex(JList,Point)",abstractint,"the cell index closest to the given location, or -1"
"javax.swing.plaf.ListUI.indexToLocation(JList,int)",abstractPoint,"the origin of the cell, or null"
"javax.swing.plaf.ListUI.getCellBounds(JList,int,int)",abstractRectangle,"the bounding rectangle for the range of cells, or null"
javax.swing.plaf.OptionPaneUI.selectInitialValue(JOptionPane),abstractvoid,
javax.swing.plaf.OptionPaneUI.containsCustomComponents(JOptionPane),abstractboolean,
javax.swing.plaf.PopupMenuUI.isPopupTrigger(MouseEvent),boolean,
"javax.swing.plaf.PopupMenuUI.getPopup(JPopupMenu,int,int)",Popup,Popup that will show the JPopupMenu
javax.swing.plaf.SplitPaneUI.resetToPreferredSizes(JSplitPane),abstractvoid,
"javax.swing.plaf.SplitPaneUI.setDividerLocation(JSplitPane,int)",abstractvoid,
javax.swing.plaf.SplitPaneUI.getDividerLocation(JSplitPane),abstractint,
javax.swing.plaf.SplitPaneUI.getMinimumDividerLocation(JSplitPane),abstractint,
javax.swing.plaf.SplitPaneUI.getMaximumDividerLocation(JSplitPane),abstractint,
"javax.swing.plaf.SplitPaneUI.finishedPaintingChildren(JSplitPane,Graphics)",abstractvoid,
"javax.swing.plaf.TabbedPaneUI.tabForCoordinate(JTabbedPane,int,int)",abstractint,
"javax.swing.plaf.TabbedPaneUI.getTabBounds(JTabbedPane,int)",abstractRectangle,
javax.swing.plaf.TabbedPaneUI.getTabRunCount(JTabbedPane),abstractint,
"javax.swing.plaf.TextUI.modelToView(JTextComponent,int)",abstractRectangle,the coordinates as a rectangle
"javax.swing.plaf.TextUI.modelToView(JTextComponent,int,Position.Bias)",abstractRectangle,the coordinates as a rectangle
"javax.swing.plaf.TextUI.viewToModel(JTextComponent,Point)",abstractint,the offset from the start of the document &gt;= 0
"javax.swing.plaf.TextUI.viewToModel(JTextComponent,Point,Position.Bias[])",abstractint,the location within the model that best represents the given point in the view &gt;= 0
"javax.swing.plaf.TextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])",abstractint,the location within the model that best represents the next location visual position
"javax.swing.plaf.TextUI.damageRange(JTextComponent,int,int)",abstractvoid,
"javax.swing.plaf.TextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)",abstractvoid,
javax.swing.plaf.TextUI.getEditorKit(JTextComponent),abstractEditorKit,the editor kit binding
javax.swing.plaf.TextUI.getRootView(JTextComponent),abstractView,the view
"javax.swing.plaf.TextUI.getToolTipText(JTextComponent,Point)",String,
"javax.swing.plaf.TreeUI.getPathBounds(JTree,TreePath)",abstractRectangle,
"javax.swing.plaf.TreeUI.getPathForRow(JTree,int)",abstractTreePath,
"javax.swing.plaf.TreeUI.getRowForPath(JTree,TreePath)",abstractint,
javax.swing.plaf.TreeUI.getRowCount(JTree),abstractint,
"javax.swing.plaf.TreeUI.getClosestPathForLocation(JTree,int,int)",abstractTreePath,
javax.swing.plaf.TreeUI.isEditing(JTree),abstractboolean,
javax.swing.plaf.TreeUI.stopEditing(JTree),abstractboolean,
javax.swing.plaf.TreeUI.cancelEditing(JTree),abstractvoid,
"javax.swing.plaf.TreeUI.startEditingAtPath(JTree,TreePath)",abstractvoid,
javax.swing.plaf.TreeUI.getEditingPath(JTree),abstractTreePath,
javax.swing.plaf.basic.BasicArrowButton.getDirection(),int,
javax.swing.plaf.basic.BasicArrowButton.setDirection(int),void,
javax.swing.plaf.basic.BasicArrowButton.paint(Graphics),void,
javax.swing.plaf.basic.BasicArrowButton.getPreferredSize(),Dimension,the preferred size
javax.swing.plaf.basic.BasicArrowButton.getMinimumSize(),Dimension,the minimum size
javax.swing.plaf.basic.BasicArrowButton.getMaximumSize(),Dimension,the maximum size
javax.swing.plaf.basic.BasicArrowButton.isFocusTraversable(),boolean,false
"javax.swing.plaf.basic.BasicArrowButton.paintTriangle(Graphics,int,int,int,int,boolean)",void,
javax.swing.plaf.basic.BasicBorders.getButtonBorder(),Border,
javax.swing.plaf.basic.BasicBorders.getRadioButtonBorder(),Border,
javax.swing.plaf.basic.BasicBorders.getToggleButtonBorder(),Border,
javax.swing.plaf.basic.BasicBorders.getMenuBarBorder(),Border,
javax.swing.plaf.basic.BasicBorders.getSplitPaneBorder(),Border,
javax.swing.plaf.basic.BasicBorders.getSplitPaneDividerBorder(),Border,
javax.swing.plaf.basic.BasicBorders.getTextFieldBorder(),Border,
javax.swing.plaf.basic.BasicBorders.getProgressBarBorder(),Border,
javax.swing.plaf.basic.BasicBorders.getInternalFrameBorder(),Border,
"javax.swing.plaf.basic.BasicBorders.ButtonBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicBorders.ButtonBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.basic.BasicBorders.FieldBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicBorders.FieldBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.basic.BasicBorders.MarginBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.basic.BasicBorders.MenuBarBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicBorders.MenuBarBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.basic.BasicBorders.RadioButtonBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicBorders.RadioButtonBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.basic.BasicBorders.RolloverButtonBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicBorders.SplitPaneBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
javax.swing.plaf.basic.BasicBorders.SplitPaneBorder.getBorderInsets(Component),Insets,
javax.swing.plaf.basic.BasicBorders.SplitPaneBorder.isBorderOpaque(),boolean,
"javax.swing.plaf.basic.BasicBorders.ToggleButtonBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicBorders.ToggleButtonBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.plaf.basic.BasicButtonListener.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicButtonListener.checkOpacity(AbstractButton),void,
javax.swing.plaf.basic.BasicButtonListener.installKeyboardActions(JComponent),void,
javax.swing.plaf.basic.BasicButtonListener.uninstallKeyboardActions(JComponent),void,
javax.swing.plaf.basic.BasicButtonListener.stateChanged(ChangeEvent),void,
javax.swing.plaf.basic.BasicButtonListener.focusGained(FocusEvent),void,
javax.swing.plaf.basic.BasicButtonListener.focusLost(FocusEvent),void,
javax.swing.plaf.basic.BasicButtonListener.mouseMoved(MouseEvent),void,
javax.swing.plaf.basic.BasicButtonListener.mouseDragged(MouseEvent),void,
javax.swing.plaf.basic.BasicButtonListener.mouseClicked(MouseEvent),void,
javax.swing.plaf.basic.BasicButtonListener.mousePressed(MouseEvent),void,
javax.swing.plaf.basic.BasicButtonListener.mouseReleased(MouseEvent),void,
javax.swing.plaf.basic.BasicButtonListener.mouseEntered(MouseEvent),void,
javax.swing.plaf.basic.BasicButtonListener.mouseExited(MouseEvent),void,
javax.swing.plaf.basic.BasicButtonUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicButtonUI.getPropertyPrefix(),String,
javax.swing.plaf.basic.BasicButtonUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicButtonUI.installDefaults(AbstractButton),void,
javax.swing.plaf.basic.BasicButtonUI.installListeners(AbstractButton),void,
javax.swing.plaf.basic.BasicButtonUI.installKeyboardActions(AbstractButton),void,
javax.swing.plaf.basic.BasicButtonUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicButtonUI.uninstallKeyboardActions(AbstractButton),void,
javax.swing.plaf.basic.BasicButtonUI.uninstallListeners(AbstractButton),void,
javax.swing.plaf.basic.BasicButtonUI.uninstallDefaults(AbstractButton),void,
javax.swing.plaf.basic.BasicButtonUI.createButtonListener(AbstractButton),BasicButtonListener,
javax.swing.plaf.basic.BasicButtonUI.getDefaultTextIconGap(AbstractButton),int,
"javax.swing.plaf.basic.BasicButtonUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicButtonUI.paintIcon(Graphics,JComponent,Rectangle)",void,
"javax.swing.plaf.basic.BasicButtonUI.paintText(Graphics,JComponent,Rectangle,String)",void,
"javax.swing.plaf.basic.BasicButtonUI.paintText(Graphics,AbstractButton,Rectangle,String)",void,
"javax.swing.plaf.basic.BasicButtonUI.paintFocus(Graphics,AbstractButton,Rectangle,Rectangle,Rectangle)",void,
"javax.swing.plaf.basic.BasicButtonUI.paintButtonPressed(Graphics,AbstractButton)",void,
javax.swing.plaf.basic.BasicButtonUI.clearTextShiftOffset(),void,
javax.swing.plaf.basic.BasicButtonUI.setTextShiftOffset(),void,
javax.swing.plaf.basic.BasicButtonUI.getTextShiftOffset(),int,
javax.swing.plaf.basic.BasicButtonUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicButtonUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicButtonUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
"javax.swing.plaf.basic.BasicButtonUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicButtonUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicCheckBoxMenuItemUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicCheckBoxMenuItemUI.getPropertyPrefix(),String,
"javax.swing.plaf.basic.BasicCheckBoxMenuItemUI.processMouseEvent(JMenuItem,MouseEvent,MenuElement[],MenuSelectionManager)",void,
javax.swing.plaf.basic.BasicCheckBoxUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicCheckBoxUI.getPropertyPrefix(),String,
javax.swing.plaf.basic.BasicColorChooserUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicColorChooserUI.createDefaultChoosers(),AbstractColorChooserPanel[],
javax.swing.plaf.basic.BasicColorChooserUI.uninstallDefaultChoosers(),void,
javax.swing.plaf.basic.BasicColorChooserUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicColorChooserUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicColorChooserUI.installPreviewPanel(),void,
javax.swing.plaf.basic.BasicColorChooserUI.uninstallPreviewPanel(),void,
javax.swing.plaf.basic.BasicColorChooserUI.installDefaults(),void,
javax.swing.plaf.basic.BasicColorChooserUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicColorChooserUI.installListeners(),void,
javax.swing.plaf.basic.BasicColorChooserUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicColorChooserUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicComboBoxEditor.getEditorComponent(),Component,
javax.swing.plaf.basic.BasicComboBoxEditor.createEditorComponent(),JTextField,a new editor component
javax.swing.plaf.basic.BasicComboBoxEditor.setItem(Object),void,
javax.swing.plaf.basic.BasicComboBoxEditor.getItem(),Object,
javax.swing.plaf.basic.BasicComboBoxEditor.selectAll(),void,
javax.swing.plaf.basic.BasicComboBoxEditor.focusGained(FocusEvent),void,
javax.swing.plaf.basic.BasicComboBoxEditor.focusLost(FocusEvent),void,
javax.swing.plaf.basic.BasicComboBoxEditor.addActionListener(ActionListener),void,
javax.swing.plaf.basic.BasicComboBoxEditor.removeActionListener(ActionListener),void,
javax.swing.plaf.basic.BasicComboBoxRenderer.getPreferredSize(),Dimension,the value of the preferredSize property
"javax.swing.plaf.basic.BasicComboBoxRenderer.getListCellRendererComponent(JList,Object,int,boolean,boolean)",Component,A component whose paint() method will render the specified value.
javax.swing.plaf.basic.BasicComboBoxUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicComboBoxUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicComboBoxUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicComboBoxUI.installDefaults(),void,
javax.swing.plaf.basic.BasicComboBoxUI.installListeners(),void,
javax.swing.plaf.basic.BasicComboBoxUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicComboBoxUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicComboBoxUI.createPopup(),ComboPopup,an instance of ComboPopup
javax.swing.plaf.basic.BasicComboBoxUI.createKeyListener(),KeyListener,an instance KeyListener or null
javax.swing.plaf.basic.BasicComboBoxUI.createFocusListener(),FocusListener,an instance of a FocusListener or null
javax.swing.plaf.basic.BasicComboBoxUI.createListDataListener(),ListDataListener,an instance of a ListDataListener or null
javax.swing.plaf.basic.BasicComboBoxUI.createItemListener(),ItemListener,an instance of an ItemListener or null
javax.swing.plaf.basic.BasicComboBoxUI.createPropertyChangeListener(),PropertyChangeListener,an instance of a PropertyChangeListener or null
javax.swing.plaf.basic.BasicComboBoxUI.createLayoutManager(),LayoutManager,an instance of a layout manager
javax.swing.plaf.basic.BasicComboBoxUI.createRenderer(),ListCellRenderer,a ListCellRender used for the combo box
javax.swing.plaf.basic.BasicComboBoxUI.createEditor(),ComboBoxEditor,a ComboBoxEditor used for the combo box
javax.swing.plaf.basic.BasicComboBoxUI.installComponents(),void,
javax.swing.plaf.basic.BasicComboBoxUI.uninstallComponents(),void,
javax.swing.plaf.basic.BasicComboBoxUI.addEditor(),void,
javax.swing.plaf.basic.BasicComboBoxUI.removeEditor(),void,
javax.swing.plaf.basic.BasicComboBoxUI.configureEditor(),void,
javax.swing.plaf.basic.BasicComboBoxUI.unconfigureEditor(),void,
javax.swing.plaf.basic.BasicComboBoxUI.configureArrowButton(),void,
javax.swing.plaf.basic.BasicComboBoxUI.unconfigureArrowButton(),void,
javax.swing.plaf.basic.BasicComboBoxUI.createArrowButton(),JButton,a button which represents the popup control
javax.swing.plaf.basic.BasicComboBoxUI.isPopupVisible(JComboBox),boolean,
"javax.swing.plaf.basic.BasicComboBoxUI.setPopupVisible(JComboBox,boolean)",void,
javax.swing.plaf.basic.BasicComboBoxUI.isFocusTraversable(JComboBox),boolean,
"javax.swing.plaf.basic.BasicComboBoxUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicComboBoxUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicComboBoxUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicComboBoxUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
"javax.swing.plaf.basic.BasicComboBoxUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicComboBoxUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicComboBoxUI.getAccessibleChildrenCount(JComponent),int,the number of accessible children in the object
"javax.swing.plaf.basic.BasicComboBoxUI.getAccessibleChild(JComponent,int)",Accessible,the ith Accessible child of the object
javax.swing.plaf.basic.BasicComboBoxUI.isNavigationKey(int),boolean,
javax.swing.plaf.basic.BasicComboBoxUI.selectNextPossibleValue(),void,
javax.swing.plaf.basic.BasicComboBoxUI.selectPreviousPossibleValue(),void,
javax.swing.plaf.basic.BasicComboBoxUI.toggleOpenClose(),void,
javax.swing.plaf.basic.BasicComboBoxUI.rectangleForCurrentValue(),Rectangle,
javax.swing.plaf.basic.BasicComboBoxUI.getInsets(),Insets,
"javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValue(Graphics,Rectangle,boolean)",void,
"javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValueBackground(Graphics,Rectangle,boolean)",void,
javax.swing.plaf.basic.BasicComboBoxUI.getDefaultSize(),Dimension,the size of an empty display area
javax.swing.plaf.basic.BasicComboBoxUI.getDisplaySize(),Dimension,the size of the display area calculated from the combo box items
javax.swing.plaf.basic.BasicComboBoxUI.getSizeForComponent(Component),Dimension,size of the component
javax.swing.plaf.basic.BasicComboBoxUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicComboBoxUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicComboPopup.show(),void,
javax.swing.plaf.basic.BasicComboPopup.hide(),void,
javax.swing.plaf.basic.BasicComboPopup.getList(),JList,
javax.swing.plaf.basic.BasicComboPopup.getMouseListener(),MouseListener,a MouseListener or null
javax.swing.plaf.basic.BasicComboPopup.getMouseMotionListener(),MouseMotionListener,a MouseMotionListener or null
javax.swing.plaf.basic.BasicComboPopup.getKeyListener(),KeyListener,a KeyListener or null
javax.swing.plaf.basic.BasicComboPopup.uninstallingUI(),void,
javax.swing.plaf.basic.BasicComboPopup.uninstallComboBoxModelListeners(ComboBoxModel),void,
javax.swing.plaf.basic.BasicComboPopup.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicComboPopup.firePopupMenuWillBecomeVisible(),void,
javax.swing.plaf.basic.BasicComboPopup.firePopupMenuWillBecomeInvisible(),void,
javax.swing.plaf.basic.BasicComboPopup.firePopupMenuCanceled(),void,
javax.swing.plaf.basic.BasicComboPopup.createMouseListener(),MouseListener,a MouseListener which will be added to the combo box or null
javax.swing.plaf.basic.BasicComboPopup.createMouseMotionListener(),MouseMotionListener,a MouseMotionListener which will be added to the combo box or null
javax.swing.plaf.basic.BasicComboPopup.createKeyListener(),KeyListener,a KeyListener or null
javax.swing.plaf.basic.BasicComboPopup.createListSelectionListener(),ListSelectionListener,an instance of a ListSelectionListener or null
javax.swing.plaf.basic.BasicComboPopup.createListDataListener(),ListDataListener,an instance of a ListDataListener or null
javax.swing.plaf.basic.BasicComboPopup.createListMouseListener(),MouseListener,an instance of a MouseListener or null
javax.swing.plaf.basic.BasicComboPopup.createListMouseMotionListener(),MouseMotionListener,an instance of a MouseMotionListener or null
javax.swing.plaf.basic.BasicComboPopup.createPropertyChangeListener(),PropertyChangeListener,an instance of a PropertyChangeListener or null
javax.swing.plaf.basic.BasicComboPopup.createItemListener(),ItemListener,an instance of an ItemListener or null
javax.swing.plaf.basic.BasicComboPopup.createList(),JList,a JList used to display the combo box items
javax.swing.plaf.basic.BasicComboPopup.configureList(),void,
javax.swing.plaf.basic.BasicComboPopup.installListListeners(),void,
javax.swing.plaf.basic.BasicComboPopup.createScroller(),JScrollPane,
javax.swing.plaf.basic.BasicComboPopup.configureScroller(),void,
javax.swing.plaf.basic.BasicComboPopup.configurePopup(),void,
javax.swing.plaf.basic.BasicComboPopup.installComboBoxListeners(),void,
javax.swing.plaf.basic.BasicComboPopup.installComboBoxModelListeners(ComboBoxModel),void,
javax.swing.plaf.basic.BasicComboPopup.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicComboPopup.isFocusTraversable(),boolean,true if this Component is focusable; false otherwise
javax.swing.plaf.basic.BasicComboPopup.startAutoScrolling(int),void,
javax.swing.plaf.basic.BasicComboPopup.stopAutoScrolling(),void,
javax.swing.plaf.basic.BasicComboPopup.autoScrollUp(),void,
javax.swing.plaf.basic.BasicComboPopup.autoScrollDown(),void,
javax.swing.plaf.basic.BasicComboPopup.getAccessibleContext(),AccessibleContext,an AccessibleContext for the BasicComboPopup
javax.swing.plaf.basic.BasicComboPopup.delegateFocus(MouseEvent),void,
javax.swing.plaf.basic.BasicComboPopup.togglePopup(),void,
javax.swing.plaf.basic.BasicComboPopup.convertMouseEvent(MouseEvent),MouseEvent,
javax.swing.plaf.basic.BasicComboPopup.getPopupHeightForRowCount(int),int,
"javax.swing.plaf.basic.BasicComboPopup.computePopupBounds(int,int,int,int)",Rectangle,a rectangle which represents the placement and size of the popup
"javax.swing.plaf.basic.BasicComboPopup.updateListBoxSelectionForEvent(MouseEvent,boolean)",void,
javax.swing.plaf.basic.BasicDesktopIconUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicDesktopIconUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicDesktopIconUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicDesktopIconUI.installComponents(),void,
javax.swing.plaf.basic.BasicDesktopIconUI.uninstallComponents(),void,
javax.swing.plaf.basic.BasicDesktopIconUI.installListeners(),void,
javax.swing.plaf.basic.BasicDesktopIconUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicDesktopIconUI.installDefaults(),void,
javax.swing.plaf.basic.BasicDesktopIconUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicDesktopIconUI.createMouseInputListener(),MouseInputListener,
javax.swing.plaf.basic.BasicDesktopIconUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicDesktopIconUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicDesktopIconUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicDesktopIconUI.getInsets(JComponent),Insets,
javax.swing.plaf.basic.BasicDesktopIconUI.deiconize(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicDesktopPaneUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.installDefaults(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.installListeners(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.installDesktopManager(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.uninstallDesktopManager(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.registerKeyboardActions(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.unregisterKeyboardActions(),void,
javax.swing.plaf.basic.BasicDesktopPaneUI.uninstallKeyboardActions(),void,
"javax.swing.plaf.basic.BasicDesktopPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicDesktopPaneUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicDesktopPaneUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicDesktopPaneUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicDesktopPaneUI.createPropertyChangeListener(),PropertyChangeListener,The PropertyChangeListener that will be added to track changes in the desktop pane.
javax.swing.plaf.basic.BasicDirectoryModel.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicDirectoryModel.invalidateFileCache(),void,
javax.swing.plaf.basic.BasicDirectoryModel.getDirectories(),Vector&lt;File&gt;,
javax.swing.plaf.basic.BasicDirectoryModel.getFiles(),Vector&lt;File&gt;,
javax.swing.plaf.basic.BasicDirectoryModel.validateFileCache(),void,
"javax.swing.plaf.basic.BasicDirectoryModel.renameFile(File,File)",boolean,"true if rename succeeded, otherwise false"
javax.swing.plaf.basic.BasicDirectoryModel.fireContentsChanged(),void,
javax.swing.plaf.basic.BasicDirectoryModel.getSize(),int,the length of the list
javax.swing.plaf.basic.BasicDirectoryModel.contains(Object),boolean,
javax.swing.plaf.basic.BasicDirectoryModel.indexOf(Object),int,
javax.swing.plaf.basic.BasicDirectoryModel.getElementAt(int),Object,the value at index
javax.swing.plaf.basic.BasicDirectoryModel.intervalAdded(ListDataEvent),void,
javax.swing.plaf.basic.BasicDirectoryModel.intervalRemoved(ListDataEvent),void,
javax.swing.plaf.basic.BasicDirectoryModel.sort(Vector&lt;?),void,
"javax.swing.plaf.basic.BasicDirectoryModel.lt(File,File)",boolean,
javax.swing.plaf.basic.BasicDirectoryModel.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.plaf.basic.BasicDirectoryModel.removePropertyChangeListener(PropertyChangeListener),void,
javax.swing.plaf.basic.BasicDirectoryModel.getPropertyChangeListeners(),PropertyChangeListener[],all of this component's PropertyChangeListeners or an empty array if no property change listeners are currently registered
"javax.swing.plaf.basic.BasicDirectoryModel.firePropertyChange(String,Object,Object)",void,
javax.swing.plaf.basic.BasicEditorPaneUI.createUI(JComponent),ComponentUI,the UI
javax.swing.plaf.basic.BasicEditorPaneUI.getPropertyPrefix(),String,"the name (""EditorPane"")"
javax.swing.plaf.basic.BasicEditorPaneUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicEditorPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicEditorPaneUI.getEditorKit(JTextComponent),EditorKit,the editor capabilities
javax.swing.plaf.basic.BasicEditorPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicFileChooserUI.createUI(JComponent),ComponentUI,the BasicFileChooserUI object
javax.swing.plaf.basic.BasicFileChooserUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicFileChooserUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicFileChooserUI.installComponents(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.uninstallComponents(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.installListeners(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.uninstallListeners(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.installDefaults(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.installIcons(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.installStrings(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.uninstallDefaults(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.uninstallIcons(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.uninstallStrings(JFileChooser),void,
javax.swing.plaf.basic.BasicFileChooserUI.createModel(),void,
javax.swing.plaf.basic.BasicFileChooserUI.getModel(),BasicDirectoryModel,
javax.swing.plaf.basic.BasicFileChooserUI.createPropertyChangeListener(JFileChooser),PropertyChangeListener,
javax.swing.plaf.basic.BasicFileChooserUI.getFileName(),String,
javax.swing.plaf.basic.BasicFileChooserUI.getDirectoryName(),String,
javax.swing.plaf.basic.BasicFileChooserUI.setFileName(String),void,
javax.swing.plaf.basic.BasicFileChooserUI.setDirectoryName(String),void,
javax.swing.plaf.basic.BasicFileChooserUI.rescanCurrentDirectory(JFileChooser),void,
"javax.swing.plaf.basic.BasicFileChooserUI.ensureFileIsVisible(JFileChooser,File)",void,
javax.swing.plaf.basic.BasicFileChooserUI.getFileChooser(),JFileChooser,
javax.swing.plaf.basic.BasicFileChooserUI.getAccessoryPanel(),JPanel,
javax.swing.plaf.basic.BasicFileChooserUI.getApproveButton(JFileChooser),JButton,
javax.swing.plaf.basic.BasicFileChooserUI.getDefaultButton(JFileChooser),JButton,
javax.swing.plaf.basic.BasicFileChooserUI.getApproveButtonToolTipText(JFileChooser),String,
javax.swing.plaf.basic.BasicFileChooserUI.clearIconCache(),void,
"javax.swing.plaf.basic.BasicFileChooserUI.createDoubleClickListener(JFileChooser,JList)",MouseListener,
javax.swing.plaf.basic.BasicFileChooserUI.createListSelectionListener(JFileChooser),ListSelectionListener,
javax.swing.plaf.basic.BasicFileChooserUI.isDirectorySelected(),boolean,true iff a directory is currently selected.
javax.swing.plaf.basic.BasicFileChooserUI.setDirectorySelected(boolean),void,
javax.swing.plaf.basic.BasicFileChooserUI.getDirectory(),File,the value of the directory property
javax.swing.plaf.basic.BasicFileChooserUI.setDirectory(File),void,
javax.swing.plaf.basic.BasicFileChooserUI.getAcceptAllFileFilter(JFileChooser),FileFilter,
javax.swing.plaf.basic.BasicFileChooserUI.getFileView(JFileChooser),FileView,
javax.swing.plaf.basic.BasicFileChooserUI.getDialogTitle(JFileChooser),String,
javax.swing.plaf.basic.BasicFileChooserUI.getApproveButtonMnemonic(JFileChooser),int,
javax.swing.plaf.basic.BasicFileChooserUI.getApproveButtonText(JFileChooser),String,
javax.swing.plaf.basic.BasicFileChooserUI.getNewFolderAction(),Action,
javax.swing.plaf.basic.BasicFileChooserUI.getGoHomeAction(),Action,
javax.swing.plaf.basic.BasicFileChooserUI.getChangeToParentDirectoryAction(),Action,
javax.swing.plaf.basic.BasicFileChooserUI.getApproveSelectionAction(),Action,
javax.swing.plaf.basic.BasicFileChooserUI.getCancelSelectionAction(),Action,
javax.swing.plaf.basic.BasicFileChooserUI.getUpdateAction(),Action,
javax.swing.plaf.basic.BasicFormattedTextFieldUI.createUI(JComponent),ComponentUI,the UI
javax.swing.plaf.basic.BasicFormattedTextFieldUI.getPropertyPrefix(),String,"the name ""FormattedTextField"""
"javax.swing.plaf.basic.BasicGraphicsUtils.drawEtchedRect(Graphics,int,int,int,int,Color,Color,Color,Color)",void,
javax.swing.plaf.basic.BasicGraphicsUtils.getEtchedInsets(),Insets,the inset of an etched rect
"javax.swing.plaf.basic.BasicGraphicsUtils.drawGroove(Graphics,int,int,int,int,Color,Color)",void,
javax.swing.plaf.basic.BasicGraphicsUtils.getGrooveInsets(),Insets,the inset of a groove border
"javax.swing.plaf.basic.BasicGraphicsUtils.drawBezel(Graphics,int,int,int,int,boolean,boolean,Color,Color,Color,Color)",void,
"javax.swing.plaf.basic.BasicGraphicsUtils.drawLoweredBezel(Graphics,int,int,int,int,Color,Color,Color,Color)",void,
"javax.swing.plaf.basic.BasicGraphicsUtils.drawString(Graphics,String,int,int,int)",void,
"javax.swing.plaf.basic.BasicGraphicsUtils.drawStringUnderlineCharAt(Graphics,String,int,int,int)",void,
"javax.swing.plaf.basic.BasicGraphicsUtils.drawDashedRect(Graphics,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicGraphicsUtils.getPreferredButtonSize(AbstractButton,int)",Dimension,
"javax.swing.plaf.basic.BasicHTML.createHTMLView(JComponent,String)",View,
"javax.swing.plaf.basic.BasicHTML.getHTMLBaseline(View,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicHTML.isHTMLString(String),boolean,
"javax.swing.plaf.basic.BasicHTML.updateRenderer(JComponent,String)",void,
javax.swing.plaf.basic.BasicIconFactory.getMenuItemCheckIcon(),Icon,
javax.swing.plaf.basic.BasicIconFactory.getMenuItemArrowIcon(),Icon,
javax.swing.plaf.basic.BasicIconFactory.getMenuArrowIcon(),Icon,
javax.swing.plaf.basic.BasicIconFactory.getCheckBoxIcon(),Icon,
javax.swing.plaf.basic.BasicIconFactory.getRadioButtonIcon(),Icon,
javax.swing.plaf.basic.BasicIconFactory.getCheckBoxMenuItemIcon(),Icon,
javax.swing.plaf.basic.BasicIconFactory.getRadioButtonMenuItemIcon(),Icon,
javax.swing.plaf.basic.BasicIconFactory.createEmptyFrameIcon(),Icon,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.installTitlePane(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.addSubComponents(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.createActions(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.installListeners(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.uninstallListeners(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.installDefaults(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.createButtons(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.setButtonIcons(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.assembleSystemMenu(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.addSystemMenuItems(JMenu),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.createSystemMenu(),JMenu,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.createSystemMenuBar(),JMenuBar,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.showSystemMenu(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.paintComponent(Graphics),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.paintTitleBackground(Graphics),void,
"javax.swing.plaf.basic.BasicInternalFrameTitlePane.getTitle(String,FontMetrics,int)",String,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.postClosingEvent(JInternalFrame),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.enableActions(),void,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicInternalFrameTitlePane.createLayout(),LayoutManager,
javax.swing.plaf.basic.BasicInternalFrameUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicInternalFrameUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicInternalFrameUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicInternalFrameUI.installDefaults(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.installComponents(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.installListeners(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.uninstallComponents(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.createLayoutManager(),LayoutManager,
javax.swing.plaf.basic.BasicInternalFrameUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicInternalFrameUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicInternalFrameUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicInternalFrameUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
"javax.swing.plaf.basic.BasicInternalFrameUI.replacePane(JComponent,JComponent)",void,
javax.swing.plaf.basic.BasicInternalFrameUI.deinstallMouseHandlers(JComponent),void,
javax.swing.plaf.basic.BasicInternalFrameUI.installMouseHandlers(JComponent),void,
javax.swing.plaf.basic.BasicInternalFrameUI.createNorthPane(JInternalFrame),JComponent,
javax.swing.plaf.basic.BasicInternalFrameUI.createSouthPane(JInternalFrame),JComponent,
javax.swing.plaf.basic.BasicInternalFrameUI.createWestPane(JInternalFrame),JComponent,
javax.swing.plaf.basic.BasicInternalFrameUI.createEastPane(JInternalFrame),JComponent,
javax.swing.plaf.basic.BasicInternalFrameUI.createBorderListener(JInternalFrame),MouseInputAdapter,
javax.swing.plaf.basic.BasicInternalFrameUI.createInternalFrameListener(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.isKeyBindingRegistered(),boolean,
javax.swing.plaf.basic.BasicInternalFrameUI.setKeyBindingRegistered(boolean),void,
javax.swing.plaf.basic.BasicInternalFrameUI.isKeyBindingActive(),boolean,
javax.swing.plaf.basic.BasicInternalFrameUI.setKeyBindingActive(boolean),void,
javax.swing.plaf.basic.BasicInternalFrameUI.setupMenuOpenKey(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.setupMenuCloseKey(),void,
javax.swing.plaf.basic.BasicInternalFrameUI.getNorthPane(),JComponent,
javax.swing.plaf.basic.BasicInternalFrameUI.setNorthPane(JComponent),void,
javax.swing.plaf.basic.BasicInternalFrameUI.getSouthPane(),JComponent,
javax.swing.plaf.basic.BasicInternalFrameUI.setSouthPane(JComponent),void,
javax.swing.plaf.basic.BasicInternalFrameUI.getWestPane(),JComponent,
javax.swing.plaf.basic.BasicInternalFrameUI.setWestPane(JComponent),void,
javax.swing.plaf.basic.BasicInternalFrameUI.getEastPane(),JComponent,
javax.swing.plaf.basic.BasicInternalFrameUI.setEastPane(JComponent),void,
javax.swing.plaf.basic.BasicInternalFrameUI.getDesktopManager(),DesktopManager,
javax.swing.plaf.basic.BasicInternalFrameUI.createDesktopManager(),DesktopManager,
javax.swing.plaf.basic.BasicInternalFrameUI.closeFrame(JInternalFrame),void,
javax.swing.plaf.basic.BasicInternalFrameUI.maximizeFrame(JInternalFrame),void,
javax.swing.plaf.basic.BasicInternalFrameUI.minimizeFrame(JInternalFrame),void,
javax.swing.plaf.basic.BasicInternalFrameUI.iconifyFrame(JInternalFrame),void,
javax.swing.plaf.basic.BasicInternalFrameUI.deiconifyFrame(JInternalFrame),void,
javax.swing.plaf.basic.BasicInternalFrameUI.activateFrame(JInternalFrame),void,
javax.swing.plaf.basic.BasicInternalFrameUI.deactivateFrame(JInternalFrame),void,
javax.swing.plaf.basic.BasicInternalFrameUI.createComponentListener(),ComponentListener,
javax.swing.plaf.basic.BasicInternalFrameUI.createGlassPaneDispatcher(),MouseInputListener,
"javax.swing.plaf.basic.BasicLabelUI.layoutCL(JLabel,FontMetrics,String,Icon,Rectangle,Rectangle,Rectangle)",String,a possibly clipped version of the compound labels string
"javax.swing.plaf.basic.BasicLabelUI.paintEnabledText(JLabel,Graphics,String,int,int)",void,
"javax.swing.plaf.basic.BasicLabelUI.paintDisabledText(JLabel,Graphics,String,int,int)",void,
"javax.swing.plaf.basic.BasicLabelUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicLabelUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicLabelUI.getMinimumSize(JComponent),Dimension,getPreferredSize(c)
javax.swing.plaf.basic.BasicLabelUI.getMaximumSize(JComponent),Dimension,getPreferredSize(c)
"javax.swing.plaf.basic.BasicLabelUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicLabelUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicLabelUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicLabelUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicLabelUI.installDefaults(JLabel),void,
javax.swing.plaf.basic.BasicLabelUI.installListeners(JLabel),void,
javax.swing.plaf.basic.BasicLabelUI.installComponents(JLabel),void,
javax.swing.plaf.basic.BasicLabelUI.installKeyboardActions(JLabel),void,
javax.swing.plaf.basic.BasicLabelUI.uninstallDefaults(JLabel),void,
javax.swing.plaf.basic.BasicLabelUI.uninstallListeners(JLabel),void,
javax.swing.plaf.basic.BasicLabelUI.uninstallComponents(JLabel),void,
javax.swing.plaf.basic.BasicLabelUI.uninstallKeyboardActions(JLabel),void,
javax.swing.plaf.basic.BasicLabelUI.createUI(JComponent),ComponentUI,an instance of BasicLabelUI
javax.swing.plaf.basic.BasicLabelUI.propertyChange(PropertyChangeEvent),void,
"javax.swing.plaf.basic.BasicListUI.paintCell(Graphics,int,Rectangle,ListCellRenderer,ListModel,ListSelectionModel,int)",void,
"javax.swing.plaf.basic.BasicListUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicListUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicListUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicListUI.getPreferredSize(JComponent),Dimension,The total size of the list.
javax.swing.plaf.basic.BasicListUI.selectPreviousIndex(),void,
javax.swing.plaf.basic.BasicListUI.selectNextIndex(),void,
javax.swing.plaf.basic.BasicListUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicListUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicListUI.installListeners(),void,
javax.swing.plaf.basic.BasicListUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicListUI.installDefaults(),void,
javax.swing.plaf.basic.BasicListUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicListUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicListUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicListUI.createUI(JComponent),ComponentUI,A new ListUI implementation for the Windows look and feel.
"javax.swing.plaf.basic.BasicListUI.locationToIndex(JList,Point)",int,"the cell index closest to the given location, or -1"
"javax.swing.plaf.basic.BasicListUI.indexToLocation(JList,int)",Point,"the origin of the cell, or null"
"javax.swing.plaf.basic.BasicListUI.getCellBounds(JList,int,int)",Rectangle,"the bounding rectangle for the range of cells, or null"
javax.swing.plaf.basic.BasicListUI.getRowHeight(int),int,The specified row height or -1 if row isn't valid.
javax.swing.plaf.basic.BasicListUI.convertYToRow(int),int,"The row that contains y0, or -1."
javax.swing.plaf.basic.BasicListUI.convertRowToY(int),int,"The Y coordinate of the origin of row, or -1."
javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState(),void,
javax.swing.plaf.basic.BasicListUI.updateLayoutState(),void,
javax.swing.plaf.basic.BasicListUI.createMouseInputListener(),MouseInputListener,
javax.swing.plaf.basic.BasicListUI.createFocusListener(),FocusListener,
javax.swing.plaf.basic.BasicListUI.createListSelectionListener(),ListSelectionListener,
javax.swing.plaf.basic.BasicListUI.createListDataListener(),ListDataListener,
javax.swing.plaf.basic.BasicListUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicLookAndFeel.getDefaults(),UIDefaults,the look and feel defaults
javax.swing.plaf.basic.BasicLookAndFeel.initialize(),void,
javax.swing.plaf.basic.BasicLookAndFeel.uninitialize(),void,
javax.swing.plaf.basic.BasicLookAndFeel.initClassDefaults(UIDefaults),void,
javax.swing.plaf.basic.BasicLookAndFeel.initSystemColorDefaults(UIDefaults),void,
"javax.swing.plaf.basic.BasicLookAndFeel.loadSystemColors(UIDefaults,String[],boolean)",void,
javax.swing.plaf.basic.BasicLookAndFeel.initComponentDefaults(UIDefaults),void,
javax.swing.plaf.basic.BasicLookAndFeel.getAudioActionMap(),ActionMap,an ActionMap containing Actions responsible for playing auditory cues
javax.swing.plaf.basic.BasicLookAndFeel.createAudioAction(Object),Action,"an Action used to play the source, or null if key is null"
javax.swing.plaf.basic.BasicLookAndFeel.playSound(Action),void,
javax.swing.plaf.basic.BasicMenuBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicMenuBarUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicMenuBarUI.installDefaults(),void,
javax.swing.plaf.basic.BasicMenuBarUI.installListeners(),void,
javax.swing.plaf.basic.BasicMenuBarUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicMenuBarUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicMenuBarUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicMenuBarUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicMenuBarUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicMenuBarUI.createContainerListener(),ContainerListener,
javax.swing.plaf.basic.BasicMenuBarUI.createChangeListener(),ChangeListener,
javax.swing.plaf.basic.BasicMenuBarUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicMenuBarUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicMenuItemUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicMenuItemUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicMenuItemUI.installDefaults(),void,
javax.swing.plaf.basic.BasicMenuItemUI.installComponents(JMenuItem),void,
javax.swing.plaf.basic.BasicMenuItemUI.getPropertyPrefix(),String,
javax.swing.plaf.basic.BasicMenuItemUI.installListeners(),void,
javax.swing.plaf.basic.BasicMenuItemUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicMenuItemUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicMenuItemUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicMenuItemUI.uninstallComponents(JMenuItem),void,
javax.swing.plaf.basic.BasicMenuItemUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicMenuItemUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicMenuItemUI.createMouseInputListener(JComponent),MouseInputListener,
javax.swing.plaf.basic.BasicMenuItemUI.createMenuDragMouseListener(JComponent),MenuDragMouseListener,
javax.swing.plaf.basic.BasicMenuItemUI.createMenuKeyListener(JComponent),MenuKeyListener,
javax.swing.plaf.basic.BasicMenuItemUI.createPropertyChangeListener(JComponent),PropertyChangeListener,an instance of a PropertyChangeListener or null
javax.swing.plaf.basic.BasicMenuItemUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicMenuItemUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicMenuItemUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
"javax.swing.plaf.basic.BasicMenuItemUI.getPreferredMenuItemSize(JComponent,Icon,Icon,int)",Dimension,
"javax.swing.plaf.basic.BasicMenuItemUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicMenuItemUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicMenuItemUI.paintMenuItem(Graphics,JComponent,Icon,Icon,Color,Color,int)",void,
"javax.swing.plaf.basic.BasicMenuItemUI.paintBackground(Graphics,JMenuItem,Color)",void,
"javax.swing.plaf.basic.BasicMenuItemUI.paintText(Graphics,JMenuItem,Rectangle,String)",void,
javax.swing.plaf.basic.BasicMenuItemUI.getPath(),MenuElement[],
javax.swing.plaf.basic.BasicMenuItemUI.doClick(MenuSelectionManager),void,
javax.swing.plaf.basic.BasicMenuUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicMenuUI.installDefaults(),void,
javax.swing.plaf.basic.BasicMenuUI.getPropertyPrefix(),String,
javax.swing.plaf.basic.BasicMenuUI.installListeners(),void,
javax.swing.plaf.basic.BasicMenuUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicMenuUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicMenuUI.createMouseInputListener(JComponent),MouseInputListener,
javax.swing.plaf.basic.BasicMenuUI.createMenuListener(JComponent),MenuListener,
javax.swing.plaf.basic.BasicMenuUI.createChangeListener(JComponent),ChangeListener,
javax.swing.plaf.basic.BasicMenuUI.createPropertyChangeListener(JComponent),PropertyChangeListener,an instance of a PropertyChangeListener or null
javax.swing.plaf.basic.BasicMenuUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicMenuUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicMenuUI.createMenuDragMouseListener(JComponent),MenuDragMouseListener,
javax.swing.plaf.basic.BasicMenuUI.createMenuKeyListener(JComponent),MenuKeyListener,
javax.swing.plaf.basic.BasicMenuUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicMenuUI.setupPostTimer(JMenu),void,
javax.swing.plaf.basic.BasicOptionPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicOptionPaneUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicOptionPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicOptionPaneUI.installDefaults(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.installComponents(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.uninstallComponents(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.createLayoutManager(),LayoutManager,
javax.swing.plaf.basic.BasicOptionPaneUI.installListeners(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicOptionPaneUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.getMinimumOptionPaneSize(),Dimension,
javax.swing.plaf.basic.BasicOptionPaneUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicOptionPaneUI.createMessageArea(),Container,
"javax.swing.plaf.basic.BasicOptionPaneUI.addMessageComponents(Container,GridBagConstraints,Object,int,boolean)",void,
javax.swing.plaf.basic.BasicOptionPaneUI.getMessage(),Object,
javax.swing.plaf.basic.BasicOptionPaneUI.addIcon(Container),void,
javax.swing.plaf.basic.BasicOptionPaneUI.getIcon(),Icon,
javax.swing.plaf.basic.BasicOptionPaneUI.getIconForType(int),Icon,
javax.swing.plaf.basic.BasicOptionPaneUI.getMaxCharactersPerLineCount(),int,
"javax.swing.plaf.basic.BasicOptionPaneUI.burstStringInto(Container,String,int)",void,
javax.swing.plaf.basic.BasicOptionPaneUI.createSeparator(),Container,
javax.swing.plaf.basic.BasicOptionPaneUI.createButtonArea(),Container,
"javax.swing.plaf.basic.BasicOptionPaneUI.addButtonComponents(Container,Object[],int)",void,
javax.swing.plaf.basic.BasicOptionPaneUI.createButtonActionListener(int),ActionListener,
javax.swing.plaf.basic.BasicOptionPaneUI.getButtons(),Object[],
javax.swing.plaf.basic.BasicOptionPaneUI.getSizeButtonsToSameWidth(),boolean,
javax.swing.plaf.basic.BasicOptionPaneUI.getInitialValueIndex(),int,
javax.swing.plaf.basic.BasicOptionPaneUI.resetInputValue(),void,
javax.swing.plaf.basic.BasicOptionPaneUI.selectInitialValue(JOptionPane),void,
javax.swing.plaf.basic.BasicOptionPaneUI.containsCustomComponents(JOptionPane),boolean,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.setSyncAllWidths(boolean),void,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.getSyncAllWidths(),boolean,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.setPadding(int),void,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.getPadding(),int,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.setCentersChildren(boolean),void,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.getCentersChildren(),boolean,
"javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.addLayoutComponent(String,Component)",void,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.layoutContainer(Container),void,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.minimumLayoutSize(Container),Dimension,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.preferredLayoutSize(Container),Dimension,
javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.removeLayoutComponent(Component),void,
javax.swing.plaf.basic.BasicPanelUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicPanelUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicPanelUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicPanelUI.installDefaults(JPanel),void,
javax.swing.plaf.basic.BasicPanelUI.uninstallDefaults(JPanel),void,
"javax.swing.plaf.basic.BasicPanelUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicPanelUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicPasswordFieldUI.createUI(JComponent),ComponentUI,the UI
javax.swing.plaf.basic.BasicPasswordFieldUI.getPropertyPrefix(),String,"the name (""PasswordField"")"
javax.swing.plaf.basic.BasicPasswordFieldUI.installDefaults(),void,
javax.swing.plaf.basic.BasicPasswordFieldUI.create(Element),View,the view
javax.swing.plaf.basic.BasicPopupMenuSeparatorUI.createUI(JComponent),ComponentUI,
"javax.swing.plaf.basic.BasicPopupMenuSeparatorUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicPopupMenuSeparatorUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicPopupMenuUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicPopupMenuUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicPopupMenuUI.installDefaults(),void,
javax.swing.plaf.basic.BasicPopupMenuUI.installListeners(),void,
javax.swing.plaf.basic.BasicPopupMenuUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicPopupMenuUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicPopupMenuUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicPopupMenuUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicPopupMenuUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicPopupMenuUI.isPopupTrigger(MouseEvent),boolean,
javax.swing.plaf.basic.BasicProgressBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicProgressBarUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicProgressBarUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicProgressBarUI.installDefaults(),void,
javax.swing.plaf.basic.BasicProgressBarUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicProgressBarUI.installListeners(),void,
javax.swing.plaf.basic.BasicProgressBarUI.startAnimationTimer(),void,
javax.swing.plaf.basic.BasicProgressBarUI.stopAnimationTimer(),void,
javax.swing.plaf.basic.BasicProgressBarUI.uninstallListeners(),void,
"javax.swing.plaf.basic.BasicProgressBarUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicProgressBarUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicProgressBarUI.getPreferredInnerHorizontal(),Dimension,
javax.swing.plaf.basic.BasicProgressBarUI.getPreferredInnerVertical(),Dimension,
javax.swing.plaf.basic.BasicProgressBarUI.getSelectionForeground(),Color,
javax.swing.plaf.basic.BasicProgressBarUI.getSelectionBackground(),Color,
javax.swing.plaf.basic.BasicProgressBarUI.getCellLength(),int,the value representing the spacing between cells
javax.swing.plaf.basic.BasicProgressBarUI.setCellLength(int),void,
javax.swing.plaf.basic.BasicProgressBarUI.getCellSpacing(),int,the value representing the spacing between cells
javax.swing.plaf.basic.BasicProgressBarUI.setCellSpacing(int),void,
"javax.swing.plaf.basic.BasicProgressBarUI.getAmountFull(Insets,int,int)",int,
"javax.swing.plaf.basic.BasicProgressBarUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicProgressBarUI.getBox(Rectangle),Rectangle,"null if no box should be drawn; otherwise, returns the passed-in rectangle (if non-null) or a new rectangle"
"javax.swing.plaf.basic.BasicProgressBarUI.getBoxLength(int,int)",int,the size of the box dimension being determined; must be no larger than availableLength
"javax.swing.plaf.basic.BasicProgressBarUI.paintIndeterminate(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicProgressBarUI.paintDeterminate(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicProgressBarUI.paintString(Graphics,int,int,int,int,int,Insets)",void,
"javax.swing.plaf.basic.BasicProgressBarUI.getStringPlacement(Graphics,String,int,int,int,int)",Point,
javax.swing.plaf.basic.BasicProgressBarUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicProgressBarUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicProgressBarUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicProgressBarUI.getAnimationIndex(),int,
javax.swing.plaf.basic.BasicProgressBarUI.getFrameCount(),int,the number of frames
javax.swing.plaf.basic.BasicProgressBarUI.setAnimationIndex(int),void,
javax.swing.plaf.basic.BasicProgressBarUI.incrementAnimationIndex(),void,
javax.swing.plaf.basic.BasicRadioButtonMenuItemUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicRadioButtonMenuItemUI.getPropertyPrefix(),String,
"javax.swing.plaf.basic.BasicRadioButtonMenuItemUI.processMouseEvent(JMenuItem,MouseEvent,MenuElement[],MenuSelectionManager)",void,
javax.swing.plaf.basic.BasicRadioButtonUI.createUI(JComponent),ComponentUI,an instance of BasicRadioButtonUI
javax.swing.plaf.basic.BasicRadioButtonUI.getPropertyPrefix(),String,
javax.swing.plaf.basic.BasicRadioButtonUI.installDefaults(AbstractButton),void,
javax.swing.plaf.basic.BasicRadioButtonUI.uninstallDefaults(AbstractButton),void,
javax.swing.plaf.basic.BasicRadioButtonUI.getDefaultIcon(),Icon,the default icon
javax.swing.plaf.basic.BasicRadioButtonUI.installListeners(AbstractButton),void,
javax.swing.plaf.basic.BasicRadioButtonUI.uninstallListeners(AbstractButton),void,
"javax.swing.plaf.basic.BasicRadioButtonUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicRadioButtonUI.paintFocus(Graphics,Rectangle,Dimension)",void,
javax.swing.plaf.basic.BasicRadioButtonUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicRootPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicRootPaneUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicRootPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicRootPaneUI.installDefaults(JRootPane),void,
javax.swing.plaf.basic.BasicRootPaneUI.installComponents(JRootPane),void,
javax.swing.plaf.basic.BasicRootPaneUI.installListeners(JRootPane),void,
javax.swing.plaf.basic.BasicRootPaneUI.installKeyboardActions(JRootPane),void,
javax.swing.plaf.basic.BasicRootPaneUI.uninstallDefaults(JRootPane),void,
javax.swing.plaf.basic.BasicRootPaneUI.uninstallComponents(JRootPane),void,
javax.swing.plaf.basic.BasicRootPaneUI.uninstallListeners(JRootPane),void,
javax.swing.plaf.basic.BasicRootPaneUI.uninstallKeyboardActions(JRootPane),void,
javax.swing.plaf.basic.BasicRootPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicScrollBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicScrollBarUI.configureScrollBarColors(),void,
javax.swing.plaf.basic.BasicScrollBarUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicScrollBarUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicScrollBarUI.installDefaults(),void,
javax.swing.plaf.basic.BasicScrollBarUI.installComponents(),void,
javax.swing.plaf.basic.BasicScrollBarUI.uninstallComponents(),void,
javax.swing.plaf.basic.BasicScrollBarUI.installListeners(),void,
javax.swing.plaf.basic.BasicScrollBarUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicScrollBarUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicScrollBarUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicScrollBarUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicScrollBarUI.createTrackListener(),BasicScrollBarUI.TrackListener,
javax.swing.plaf.basic.BasicScrollBarUI.createArrowButtonListener(),BasicScrollBarUI.ArrowButtonListener,
javax.swing.plaf.basic.BasicScrollBarUI.createModelListener(),BasicScrollBarUI.ModelListener,
javax.swing.plaf.basic.BasicScrollBarUI.createScrollListener(),BasicScrollBarUI.ScrollListener,
javax.swing.plaf.basic.BasicScrollBarUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicScrollBarUI.setThumbRollover(boolean),void,
javax.swing.plaf.basic.BasicScrollBarUI.isThumbRollover(),boolean,true if the thumb is currently active
"javax.swing.plaf.basic.BasicScrollBarUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicScrollBarUI.getPreferredSize(JComponent),Dimension,the preferred size of a Basic JScrollBar
javax.swing.plaf.basic.BasicScrollBarUI.getMaximumSize(JComponent),Dimension,"new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);"
javax.swing.plaf.basic.BasicScrollBarUI.createDecreaseButton(int),JButton,
javax.swing.plaf.basic.BasicScrollBarUI.createIncreaseButton(int),JButton,
javax.swing.plaf.basic.BasicScrollBarUI.paintDecreaseHighlight(Graphics),void,
javax.swing.plaf.basic.BasicScrollBarUI.paintIncreaseHighlight(Graphics),void,
"javax.swing.plaf.basic.BasicScrollBarUI.paintTrack(Graphics,JComponent,Rectangle)",void,
"javax.swing.plaf.basic.BasicScrollBarUI.paintThumb(Graphics,JComponent,Rectangle)",void,
javax.swing.plaf.basic.BasicScrollBarUI.getMinimumThumbSize(),Dimension,The smallest acceptable size for the thumb.
javax.swing.plaf.basic.BasicScrollBarUI.getMaximumThumbSize(),Dimension,The largest acceptable size for the thumb.
"javax.swing.plaf.basic.BasicScrollBarUI.addLayoutComponent(String,Component)",void,
javax.swing.plaf.basic.BasicScrollBarUI.removeLayoutComponent(Component),void,
javax.swing.plaf.basic.BasicScrollBarUI.preferredLayoutSize(Container),Dimension,
javax.swing.plaf.basic.BasicScrollBarUI.minimumLayoutSize(Container),Dimension,
javax.swing.plaf.basic.BasicScrollBarUI.layoutVScrollbar(JScrollBar),void,
javax.swing.plaf.basic.BasicScrollBarUI.layoutHScrollbar(JScrollBar),void,
javax.swing.plaf.basic.BasicScrollBarUI.layoutContainer(Container),void,
"javax.swing.plaf.basic.BasicScrollBarUI.setThumbBounds(int,int,int,int)",void,
javax.swing.plaf.basic.BasicScrollBarUI.getThumbBounds(),Rectangle,The current size/location of the thumb.
javax.swing.plaf.basic.BasicScrollBarUI.getTrackBounds(),Rectangle,the current bounds of the scrollbar track
javax.swing.plaf.basic.BasicScrollBarUI.scrollByBlock(int),void,
javax.swing.plaf.basic.BasicScrollBarUI.scrollByUnit(int),void,
javax.swing.plaf.basic.BasicScrollBarUI.getSupportsAbsolutePositioning(),boolean,true if a mouse gesture can absolutely position the thumb
javax.swing.plaf.basic.BasicScrollPaneUI.createUI(JComponent),ComponentUI,
"javax.swing.plaf.basic.BasicScrollPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicScrollPaneUI.getMaximumSize(JComponent),Dimension,"new Dimension(Short.MAX_VALUE, Short.MAX_VALUE)"
javax.swing.plaf.basic.BasicScrollPaneUI.installDefaults(JScrollPane),void,
javax.swing.plaf.basic.BasicScrollPaneUI.installListeners(JScrollPane),void,
javax.swing.plaf.basic.BasicScrollPaneUI.installKeyboardActions(JScrollPane),void,
javax.swing.plaf.basic.BasicScrollPaneUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicScrollPaneUI.uninstallDefaults(JScrollPane),void,
javax.swing.plaf.basic.BasicScrollPaneUI.uninstallListeners(JComponent),void,
javax.swing.plaf.basic.BasicScrollPaneUI.uninstallKeyboardActions(JScrollPane),void,
javax.swing.plaf.basic.BasicScrollPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicScrollPaneUI.syncScrollPaneWithViewport(),void,
"javax.swing.plaf.basic.BasicScrollPaneUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicScrollPaneUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicScrollPaneUI.createViewportChangeListener(),ChangeListener,
javax.swing.plaf.basic.BasicScrollPaneUI.createHSBChangeListener(),ChangeListener,
javax.swing.plaf.basic.BasicScrollPaneUI.createVSBChangeListener(),ChangeListener,
javax.swing.plaf.basic.BasicScrollPaneUI.createMouseWheelListener(),MouseWheelListener,MouseWheelListener which implements wheel-driven scrolling
javax.swing.plaf.basic.BasicScrollPaneUI.updateScrollBarDisplayPolicy(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicScrollPaneUI.updateViewport(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicScrollPaneUI.updateRowHeader(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicScrollPaneUI.updateColumnHeader(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicScrollPaneUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicSeparatorUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicSeparatorUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicSeparatorUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicSeparatorUI.installDefaults(JSeparator),void,
javax.swing.plaf.basic.BasicSeparatorUI.uninstallDefaults(JSeparator),void,
javax.swing.plaf.basic.BasicSeparatorUI.installListeners(JSeparator),void,
javax.swing.plaf.basic.BasicSeparatorUI.uninstallListeners(JSeparator),void,
"javax.swing.plaf.basic.BasicSeparatorUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicSeparatorUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicSeparatorUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicSeparatorUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicSliderUI.getShadowColor(),Color,
javax.swing.plaf.basic.BasicSliderUI.getHighlightColor(),Color,
javax.swing.plaf.basic.BasicSliderUI.getFocusColor(),Color,
javax.swing.plaf.basic.BasicSliderUI.isDragging(),boolean,true if the user is dragging the slider
javax.swing.plaf.basic.BasicSliderUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicSliderUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicSliderUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicSliderUI.installDefaults(JSlider),void,
javax.swing.plaf.basic.BasicSliderUI.uninstallDefaults(JSlider),void,
javax.swing.plaf.basic.BasicSliderUI.createTrackListener(JSlider),BasicSliderUI.TrackListener,
javax.swing.plaf.basic.BasicSliderUI.createChangeListener(JSlider),ChangeListener,
javax.swing.plaf.basic.BasicSliderUI.createComponentListener(JSlider),ComponentListener,
javax.swing.plaf.basic.BasicSliderUI.createFocusListener(JSlider),FocusListener,
javax.swing.plaf.basic.BasicSliderUI.createScrollListener(JSlider),BasicSliderUI.ScrollListener,
javax.swing.plaf.basic.BasicSliderUI.createPropertyChangeListener(JSlider),PropertyChangeListener,
javax.swing.plaf.basic.BasicSliderUI.installListeners(JSlider),void,
javax.swing.plaf.basic.BasicSliderUI.uninstallListeners(JSlider),void,
javax.swing.plaf.basic.BasicSliderUI.installKeyboardActions(JSlider),void,
javax.swing.plaf.basic.BasicSliderUI.uninstallKeyboardActions(JSlider),void,
"javax.swing.plaf.basic.BasicSliderUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicSliderUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicSliderUI.labelsHaveSameBaselines(),boolean,true if all the labels from the label table have the same baseline
javax.swing.plaf.basic.BasicSliderUI.getPreferredHorizontalSize(),Dimension,
javax.swing.plaf.basic.BasicSliderUI.getPreferredVerticalSize(),Dimension,
javax.swing.plaf.basic.BasicSliderUI.getMinimumHorizontalSize(),Dimension,
javax.swing.plaf.basic.BasicSliderUI.getMinimumVerticalSize(),Dimension,
javax.swing.plaf.basic.BasicSliderUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicSliderUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicSliderUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicSliderUI.calculateGeometry(),void,
javax.swing.plaf.basic.BasicSliderUI.calculateFocusRect(),void,
javax.swing.plaf.basic.BasicSliderUI.calculateThumbSize(),void,
javax.swing.plaf.basic.BasicSliderUI.calculateContentRect(),void,
javax.swing.plaf.basic.BasicSliderUI.calculateThumbLocation(),void,
javax.swing.plaf.basic.BasicSliderUI.calculateTrackBuffer(),void,
javax.swing.plaf.basic.BasicSliderUI.calculateTrackRect(),void,
javax.swing.plaf.basic.BasicSliderUI.getTickLength(),int,
javax.swing.plaf.basic.BasicSliderUI.calculateTickRect(),void,
javax.swing.plaf.basic.BasicSliderUI.calculateLabelRect(),void,
javax.swing.plaf.basic.BasicSliderUI.getThumbSize(),Dimension,
javax.swing.plaf.basic.BasicSliderUI.getWidthOfWidestLabel(),int,
javax.swing.plaf.basic.BasicSliderUI.getHeightOfTallestLabel(),int,
javax.swing.plaf.basic.BasicSliderUI.getWidthOfHighValueLabel(),int,
javax.swing.plaf.basic.BasicSliderUI.getWidthOfLowValueLabel(),int,
javax.swing.plaf.basic.BasicSliderUI.getHeightOfHighValueLabel(),int,
javax.swing.plaf.basic.BasicSliderUI.getHeightOfLowValueLabel(),int,
javax.swing.plaf.basic.BasicSliderUI.drawInverted(),boolean,
javax.swing.plaf.basic.BasicSliderUI.getHighestValue(),Integer,"biggest value that has an entry in the label table, or null."
javax.swing.plaf.basic.BasicSliderUI.getLowestValue(),Integer,"smallest value that has an entry in the label table, or null."
javax.swing.plaf.basic.BasicSliderUI.getLowestValueLabel(),Component,
javax.swing.plaf.basic.BasicSliderUI.getHighestValueLabel(),Component,
"javax.swing.plaf.basic.BasicSliderUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicSliderUI.recalculateIfInsetsChanged(),void,
javax.swing.plaf.basic.BasicSliderUI.recalculateIfOrientationChanged(),void,
javax.swing.plaf.basic.BasicSliderUI.paintFocus(Graphics),void,
javax.swing.plaf.basic.BasicSliderUI.paintTrack(Graphics),void,
javax.swing.plaf.basic.BasicSliderUI.paintTicks(Graphics),void,
"javax.swing.plaf.basic.BasicSliderUI.paintMinorTickForHorizSlider(Graphics,Rectangle,int)",void,
"javax.swing.plaf.basic.BasicSliderUI.paintMajorTickForHorizSlider(Graphics,Rectangle,int)",void,
"javax.swing.plaf.basic.BasicSliderUI.paintMinorTickForVertSlider(Graphics,Rectangle,int)",void,
"javax.swing.plaf.basic.BasicSliderUI.paintMajorTickForVertSlider(Graphics,Rectangle,int)",void,
javax.swing.plaf.basic.BasicSliderUI.paintLabels(Graphics),void,
"javax.swing.plaf.basic.BasicSliderUI.paintHorizontalLabel(Graphics,int,Component)",void,
"javax.swing.plaf.basic.BasicSliderUI.paintVerticalLabel(Graphics,int,Component)",void,
javax.swing.plaf.basic.BasicSliderUI.paintThumb(Graphics),void,
"javax.swing.plaf.basic.BasicSliderUI.setThumbLocation(int,int)",void,
javax.swing.plaf.basic.BasicSliderUI.scrollByBlock(int),void,
javax.swing.plaf.basic.BasicSliderUI.scrollByUnit(int),void,
javax.swing.plaf.basic.BasicSliderUI.scrollDueToClickInTrack(int),void,
javax.swing.plaf.basic.BasicSliderUI.xPositionForValue(int),int,
javax.swing.plaf.basic.BasicSliderUI.yPositionForValue(int),int,
"javax.swing.plaf.basic.BasicSliderUI.yPositionForValue(int,int,int)",int,
javax.swing.plaf.basic.BasicSliderUI.valueForYPosition(int),int,
javax.swing.plaf.basic.BasicSliderUI.valueForXPosition(int),int,
javax.swing.plaf.basic.BasicSpinnerUI.createUI(JComponent),ComponentUI,a new BasicSpinnerUI object
javax.swing.plaf.basic.BasicSpinnerUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicSpinnerUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicSpinnerUI.installListeners(),void,
javax.swing.plaf.basic.BasicSpinnerUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicSpinnerUI.installDefaults(),void,
javax.swing.plaf.basic.BasicSpinnerUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicSpinnerUI.installNextButtonListeners(Component),void,
javax.swing.plaf.basic.BasicSpinnerUI.installPreviousButtonListeners(Component),void,
javax.swing.plaf.basic.BasicSpinnerUI.createLayout(),LayoutManager,"a LayoutManager for the editor, next button, and previous button."
javax.swing.plaf.basic.BasicSpinnerUI.createPropertyChangeListener(),PropertyChangeListener,A PropertyChangeListener for the JSpinner itself
javax.swing.plaf.basic.BasicSpinnerUI.createPreviousButton(),Component,"a component that will replace the spinner's value with the previous value in the sequence, or null"
javax.swing.plaf.basic.BasicSpinnerUI.createNextButton(),Component,"a component that will replace the spinner's value with the next value in the sequence, or null"
javax.swing.plaf.basic.BasicSpinnerUI.createEditor(),JComponent,"the JSpinners editor JComponent, spinner.getEditor() by default"
"javax.swing.plaf.basic.BasicSpinnerUI.replaceEditor(JComponent,JComponent)",void,
javax.swing.plaf.basic.BasicSpinnerUI.installKeyboardActions(),void,
"javax.swing.plaf.basic.BasicSpinnerUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicSpinnerUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicSplitPaneDivider.setBasicSplitPaneUI(BasicSplitPaneUI),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.getBasicSplitPaneUI(),BasicSplitPaneUI,
javax.swing.plaf.basic.BasicSplitPaneDivider.setDividerSize(int),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.getDividerSize(),int,
javax.swing.plaf.basic.BasicSplitPaneDivider.setBorder(Border),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.getBorder(),Border,the border object for this component
javax.swing.plaf.basic.BasicSplitPaneDivider.getInsets(),Insets,the value of the insets property.
javax.swing.plaf.basic.BasicSplitPaneDivider.setMouseOver(boolean),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.isMouseOver(),boolean,whether or not the mouse is currently over the divider
javax.swing.plaf.basic.BasicSplitPaneDivider.getPreferredSize(),Dimension,an instance of Dimension that represents the preferred size of this container.
javax.swing.plaf.basic.BasicSplitPaneDivider.getMinimumSize(),Dimension,an instance of Dimension that represents the minimum size of this container.
javax.swing.plaf.basic.BasicSplitPaneDivider.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.paint(Graphics),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.oneTouchExpandableChanged(),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.createLeftOneTouchButton(),JButton,
javax.swing.plaf.basic.BasicSplitPaneDivider.createRightOneTouchButton(),JButton,
javax.swing.plaf.basic.BasicSplitPaneDivider.prepareForDragging(),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.dragDividerTo(int),void,
javax.swing.plaf.basic.BasicSplitPaneDivider.finishDraggingTo(int),void,
javax.swing.plaf.basic.BasicSplitPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicSplitPaneUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicSplitPaneUI.installDefaults(),void,
javax.swing.plaf.basic.BasicSplitPaneUI.installListeners(),void,
javax.swing.plaf.basic.BasicSplitPaneUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicSplitPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicSplitPaneUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicSplitPaneUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicSplitPaneUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicSplitPaneUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicSplitPaneUI.createFocusListener(),FocusListener,
javax.swing.plaf.basic.BasicSplitPaneUI.createKeyboardUpLeftListener(),ActionListener,
javax.swing.plaf.basic.BasicSplitPaneUI.createKeyboardDownRightListener(),ActionListener,
javax.swing.plaf.basic.BasicSplitPaneUI.createKeyboardHomeListener(),ActionListener,
javax.swing.plaf.basic.BasicSplitPaneUI.createKeyboardEndListener(),ActionListener,
javax.swing.plaf.basic.BasicSplitPaneUI.createKeyboardResizeToggleListener(),ActionListener,
javax.swing.plaf.basic.BasicSplitPaneUI.getOrientation(),int,
javax.swing.plaf.basic.BasicSplitPaneUI.setOrientation(int),void,
javax.swing.plaf.basic.BasicSplitPaneUI.isContinuousLayout(),boolean,
javax.swing.plaf.basic.BasicSplitPaneUI.setContinuousLayout(boolean),void,
javax.swing.plaf.basic.BasicSplitPaneUI.getLastDragLocation(),int,
javax.swing.plaf.basic.BasicSplitPaneUI.setLastDragLocation(int),void,
javax.swing.plaf.basic.BasicSplitPaneUI.getDivider(),BasicSplitPaneDivider,
javax.swing.plaf.basic.BasicSplitPaneUI.createDefaultNonContinuousLayoutDivider(),Component,
javax.swing.plaf.basic.BasicSplitPaneUI.setNonContinuousLayoutDivider(Component),void,
"javax.swing.plaf.basic.BasicSplitPaneUI.setNonContinuousLayoutDivider(Component,boolean)",void,
javax.swing.plaf.basic.BasicSplitPaneUI.getNonContinuousLayoutDivider(),Component,
javax.swing.plaf.basic.BasicSplitPaneUI.getSplitPane(),JSplitPane,
javax.swing.plaf.basic.BasicSplitPaneUI.createDefaultDivider(),BasicSplitPaneDivider,
javax.swing.plaf.basic.BasicSplitPaneUI.resetToPreferredSizes(JSplitPane),void,
"javax.swing.plaf.basic.BasicSplitPaneUI.setDividerLocation(JSplitPane,int)",void,
javax.swing.plaf.basic.BasicSplitPaneUI.getDividerLocation(JSplitPane),int,
javax.swing.plaf.basic.BasicSplitPaneUI.getMinimumDividerLocation(JSplitPane),int,
javax.swing.plaf.basic.BasicSplitPaneUI.getMaximumDividerLocation(JSplitPane),int,
"javax.swing.plaf.basic.BasicSplitPaneUI.finishedPaintingChildren(JSplitPane,Graphics)",void,
"javax.swing.plaf.basic.BasicSplitPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicSplitPaneUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicSplitPaneUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicSplitPaneUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicSplitPaneUI.getInsets(JComponent),Insets,
javax.swing.plaf.basic.BasicSplitPaneUI.resetLayoutManager(),void,
javax.swing.plaf.basic.BasicSplitPaneUI.startDragging(),void,
javax.swing.plaf.basic.BasicSplitPaneUI.dragDividerTo(int),void,
javax.swing.plaf.basic.BasicSplitPaneUI.finishDraggingTo(int),void,
javax.swing.plaf.basic.BasicSplitPaneUI.getDividerBorderSize(),int,
javax.swing.plaf.basic.BasicTabbedPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicTabbedPaneUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.createLayoutManager(),LayoutManager,a layout manager object
javax.swing.plaf.basic.BasicTabbedPaneUI.installComponents(),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.createScrollButton(int),JButton,Widget for user to
javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallComponents(),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.installDefaults(),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.installListeners(),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.createMouseListener(),MouseListener,
javax.swing.plaf.basic.BasicTabbedPaneUI.createFocusListener(),FocusListener,
javax.swing.plaf.basic.BasicTabbedPaneUI.createChangeListener(),ChangeListener,
javax.swing.plaf.basic.BasicTabbedPaneUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicTabbedPaneUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.setRolloverTab(int),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.getRolloverTab(),int,"the tab the mouse is currently over, or -1 if the mouse is no longer over any tab"
javax.swing.plaf.basic.BasicTabbedPaneUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicTabbedPaneUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
"javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(int),int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineOffset(),int,amount to offset the baseline by
"javax.swing.plaf.basic.BasicTabbedPaneUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabArea(Graphics,int,int)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintTab(Graphics,int,Rectangle[],int,Rectangle,Rectangle)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.layoutLabel(int,FontMetrics,int,String,Icon,Rectangle,Rectangle,Rectangle,boolean)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintIcon(Graphics,int,int,Icon,Rectangle,boolean)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintText(Graphics,int,Font,FontMetrics,int,String,Rectangle,boolean)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabLabelShiftX(int,int,boolean)",int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabLabelShiftY(int,int,boolean)",int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintFocusIndicator(Graphics,int,Rectangle[],int,Rectangle,Rectangle,boolean)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBorder(Graphics,int,int,int,int,int,int,boolean)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBackground(Graphics,int,int,int,int,int,int,boolean)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorder(Graphics,int,int)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderTopEdge(Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderLeftEdge(Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderBottomEdge(Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderRightEdge(Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(JTabbedPane,int)",Rectangle,
javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunCount(JTabbedPane),int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.tabForCoordinate(JTabbedPane,int,int)",int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(int,Rectangle)",Rectangle,the resulting rectangle
javax.swing.plaf.basic.BasicTabbedPaneUI.getVisibleComponent(),Component,
javax.swing.plaf.basic.BasicTabbedPaneUI.setVisibleComponent(Component),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.assureRectsCreated(int),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.expandTabRunsArray(),void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getRunForTab(int,int)",int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.lastTabInRun(int,int)",int,
javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunOverlay(int),int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunIndent(int,int)",int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.shouldPadTabRun(int,int)",boolean,
javax.swing.plaf.basic.BasicTabbedPaneUI.shouldRotateTabRuns(int),boolean,
javax.swing.plaf.basic.BasicTabbedPaneUI.getIconForTab(int),Icon,
javax.swing.plaf.basic.BasicTabbedPaneUI.getTextViewForTab(int),View,the text view to render the tab's text or null if no specialized rendering is required
"javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabHeight(int,int,int)",int,
javax.swing.plaf.basic.BasicTabbedPaneUI.calculateMaxTabHeight(int),int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabWidth(int,int,FontMetrics)",int,
javax.swing.plaf.basic.BasicTabbedPaneUI.calculateMaxTabWidth(int),int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabAreaHeight(int,int,int)",int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabAreaWidth(int,int,int)",int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabInsets(int,int)",Insets,
javax.swing.plaf.basic.BasicTabbedPaneUI.getSelectedTabPadInsets(int),Insets,
javax.swing.plaf.basic.BasicTabbedPaneUI.getTabAreaInsets(int),Insets,
javax.swing.plaf.basic.BasicTabbedPaneUI.getContentBorderInsets(int),Insets,
javax.swing.plaf.basic.BasicTabbedPaneUI.getFontMetrics(),FontMetrics,
javax.swing.plaf.basic.BasicTabbedPaneUI.navigateSelectedTab(int),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.selectNextTabInRun(int),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.selectPreviousTabInRun(int),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.selectNextTab(int),void,
javax.swing.plaf.basic.BasicTabbedPaneUI.selectPreviousTab(int),void,
"javax.swing.plaf.basic.BasicTabbedPaneUI.selectAdjacentRunTab(int,int,int)",void,
javax.swing.plaf.basic.BasicTabbedPaneUI.getFocusIndex(),int,index of tab that has focus
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunOffset(int,int,int,boolean)",int,
javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabIndex(int),int,
javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabIndex(int),int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabIndexInRun(int,int)",int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabIndexInRun(int,int)",int,
javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabRun(int),int,
javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabRun(int),int,
"javax.swing.plaf.basic.BasicTabbedPaneUI.rotateInsets(Insets,Insets,int)",void,
javax.swing.plaf.basic.BasicTableHeaderUI.createMouseInputListener(),MouseInputListener,
javax.swing.plaf.basic.BasicTableHeaderUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicTableHeaderUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicTableHeaderUI.installDefaults(),void,
javax.swing.plaf.basic.BasicTableHeaderUI.installListeners(),void,
javax.swing.plaf.basic.BasicTableHeaderUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicTableHeaderUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicTableHeaderUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicTableHeaderUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicTableHeaderUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicTableHeaderUI.getRolloverColumn(),int,the index of the current rollover column
"javax.swing.plaf.basic.BasicTableHeaderUI.rolloverColumnUpdated(int,int)",void,
"javax.swing.plaf.basic.BasicTableHeaderUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
"javax.swing.plaf.basic.BasicTableHeaderUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicTableHeaderUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicTableHeaderUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicTableHeaderUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicTableUI.createKeyListener(),KeyListener,
javax.swing.plaf.basic.BasicTableUI.createFocusListener(),FocusListener,
javax.swing.plaf.basic.BasicTableUI.createMouseInputListener(),MouseInputListener,
javax.swing.plaf.basic.BasicTableUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicTableUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicTableUI.installDefaults(),void,
javax.swing.plaf.basic.BasicTableUI.installListeners(),void,
javax.swing.plaf.basic.BasicTableUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicTableUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicTableUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicTableUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicTableUI.uninstallKeyboardActions(),void,
"javax.swing.plaf.basic.BasicTableUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicTableUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicTableUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicTableUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicTableUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
"javax.swing.plaf.basic.BasicTableUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicTextAreaUI.createUI(JComponent),ComponentUI,the UI
javax.swing.plaf.basic.BasicTextAreaUI.getPropertyPrefix(),String,"the name (""TextArea"")"
javax.swing.plaf.basic.BasicTextAreaUI.installDefaults(),void,
javax.swing.plaf.basic.BasicTextAreaUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicTextAreaUI.getPreferredSize(JComponent),Dimension,the preferred size
javax.swing.plaf.basic.BasicTextAreaUI.getMinimumSize(JComponent),Dimension,the minimum size
javax.swing.plaf.basic.BasicTextAreaUI.create(Element),View,the view
"javax.swing.plaf.basic.BasicTextAreaUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicTextAreaUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicTextFieldUI.createUI(JComponent),ComponentUI,the UI
javax.swing.plaf.basic.BasicTextFieldUI.getPropertyPrefix(),String,"the name (""TextField"")"
javax.swing.plaf.basic.BasicTextFieldUI.create(Element),View,the view
"javax.swing.plaf.basic.BasicTextFieldUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicTextFieldUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
javax.swing.plaf.basic.BasicTextPaneUI.createUI(JComponent),ComponentUI,the UI
javax.swing.plaf.basic.BasicTextPaneUI.getPropertyPrefix(),String,"the name (""TextPane"")"
javax.swing.plaf.basic.BasicTextPaneUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicTextPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicTextUI.createCaret(),Caret,the caret object
javax.swing.plaf.basic.BasicTextUI.createHighlighter(),Highlighter,the highlighter
javax.swing.plaf.basic.BasicTextUI.getKeymapName(),String,the name
javax.swing.plaf.basic.BasicTextUI.createKeymap(),Keymap,the keymap
javax.swing.plaf.basic.BasicTextUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.basic.BasicTextUI.getPropertyPrefix(),abstractString,the name
javax.swing.plaf.basic.BasicTextUI.installDefaults(),void,
javax.swing.plaf.basic.BasicTextUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicTextUI.installListeners(),void,
javax.swing.plaf.basic.BasicTextUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicTextUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicTextUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicTextUI.paintBackground(Graphics),void,
javax.swing.plaf.basic.BasicTextUI.getComponent(),JTextComponent,the editor component
javax.swing.plaf.basic.BasicTextUI.modelChanged(),void,
javax.swing.plaf.basic.BasicTextUI.setView(View),void,
javax.swing.plaf.basic.BasicTextUI.paintSafely(Graphics),void,
javax.swing.plaf.basic.BasicTextUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicTextUI.uninstallUI(JComponent),void,
"javax.swing.plaf.basic.BasicTextUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicTextUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicTextUI.getPreferredSize(JComponent),Dimension,the size
javax.swing.plaf.basic.BasicTextUI.getMinimumSize(JComponent),Dimension,the size
javax.swing.plaf.basic.BasicTextUI.getMaximumSize(JComponent),Dimension,the size
javax.swing.plaf.basic.BasicTextUI.getVisibleEditorRect(),Rectangle,the bounding box for the root view
"javax.swing.plaf.basic.BasicTextUI.modelToView(JTextComponent,int)",Rectangle,"the coordinates as a rectangle, null if the model is not painted"
"javax.swing.plaf.basic.BasicTextUI.modelToView(JTextComponent,int,Position.Bias)",Rectangle,"the coordinates as a rectangle, null if the model is not painted"
"javax.swing.plaf.basic.BasicTextUI.viewToModel(JTextComponent,Point)",int,"the offset from the start of the document &gt;= 0, -1 if not painted"
"javax.swing.plaf.basic.BasicTextUI.viewToModel(JTextComponent,Point,Position.Bias[])",int,"the offset from the start of the document &gt;= 0, -1 if the component doesn't yet have a positive size."
"javax.swing.plaf.basic.BasicTextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])",int,the location within the model that best represents the next location visual position
"javax.swing.plaf.basic.BasicTextUI.damageRange(JTextComponent,int,int)",void,
"javax.swing.plaf.basic.BasicTextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)",void,
javax.swing.plaf.basic.BasicTextUI.getEditorKit(JTextComponent),EditorKit,the editor capabilities
javax.swing.plaf.basic.BasicTextUI.getRootView(JTextComponent),View,the view
"javax.swing.plaf.basic.BasicTextUI.getToolTipText(JTextComponent,Point)",String,
javax.swing.plaf.basic.BasicTextUI.create(Element),View,the view
"javax.swing.plaf.basic.BasicTextUI.create(Element,int,int)",View,the view
javax.swing.plaf.basic.BasicToggleButtonUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicToggleButtonUI.getPropertyPrefix(),String,
"javax.swing.plaf.basic.BasicToggleButtonUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.basic.BasicToggleButtonUI.paintIcon(Graphics,AbstractButton,Rectangle)",void,
javax.swing.plaf.basic.BasicToggleButtonUI.getTextShiftOffset(),int,
javax.swing.plaf.basic.BasicToolBarSeparatorUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicToolBarSeparatorUI.installDefaults(JSeparator),void,
"javax.swing.plaf.basic.BasicToolBarSeparatorUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicToolBarSeparatorUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicToolBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicToolBarUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicToolBarUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicToolBarUI.installDefaults(),void,
javax.swing.plaf.basic.BasicToolBarUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicToolBarUI.installComponents(),void,
javax.swing.plaf.basic.BasicToolBarUI.uninstallComponents(),void,
javax.swing.plaf.basic.BasicToolBarUI.installListeners(),void,
javax.swing.plaf.basic.BasicToolBarUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicToolBarUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicToolBarUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicToolBarUI.navigateFocusedComp(int),void,
javax.swing.plaf.basic.BasicToolBarUI.createRolloverBorder(),Border,
javax.swing.plaf.basic.BasicToolBarUI.createNonRolloverBorder(),Border,
javax.swing.plaf.basic.BasicToolBarUI.createFloatingFrame(JToolBar),JFrame,
javax.swing.plaf.basic.BasicToolBarUI.createFloatingWindow(JToolBar),RootPaneContainer,"a RootPaneContainer object, containing the toolbar."
javax.swing.plaf.basic.BasicToolBarUI.createDragWindow(JToolBar),BasicToolBarUI.DragWindow,
javax.swing.plaf.basic.BasicToolBarUI.isRolloverBorders(),boolean,true if rollover borders are enabled; false otherwise
javax.swing.plaf.basic.BasicToolBarUI.setRolloverBorders(boolean),void,
javax.swing.plaf.basic.BasicToolBarUI.installRolloverBorders(JComponent),void,
javax.swing.plaf.basic.BasicToolBarUI.installNonRolloverBorders(JComponent),void,
javax.swing.plaf.basic.BasicToolBarUI.installNormalBorders(JComponent),void,
javax.swing.plaf.basic.BasicToolBarUI.setBorderToRollover(Component),void,
javax.swing.plaf.basic.BasicToolBarUI.getRolloverBorder(AbstractButton),Border,the rollover border
javax.swing.plaf.basic.BasicToolBarUI.setBorderToNonRollover(Component),void,
javax.swing.plaf.basic.BasicToolBarUI.getNonRolloverBorder(AbstractButton),Border,the non-rollover border
javax.swing.plaf.basic.BasicToolBarUI.setBorderToNormal(Component),void,
"javax.swing.plaf.basic.BasicToolBarUI.setFloatingLocation(int,int)",void,
javax.swing.plaf.basic.BasicToolBarUI.isFloating(),boolean,
"javax.swing.plaf.basic.BasicToolBarUI.setFloating(boolean,Point)",void,
javax.swing.plaf.basic.BasicToolBarUI.setOrientation(int),void,
javax.swing.plaf.basic.BasicToolBarUI.getDockingColor(),Color,
javax.swing.plaf.basic.BasicToolBarUI.setDockingColor(Color),void,
javax.swing.plaf.basic.BasicToolBarUI.getFloatingColor(),Color,
javax.swing.plaf.basic.BasicToolBarUI.setFloatingColor(Color),void,
"javax.swing.plaf.basic.BasicToolBarUI.canDock(Component,Point)",boolean,
"javax.swing.plaf.basic.BasicToolBarUI.dragTo(Point,Point)",void,
"javax.swing.plaf.basic.BasicToolBarUI.floatAt(Point,Point)",void,
javax.swing.plaf.basic.BasicToolBarUI.createToolBarContListener(),ContainerListener,
javax.swing.plaf.basic.BasicToolBarUI.createToolBarFocusListener(),FocusListener,
javax.swing.plaf.basic.BasicToolBarUI.createPropertyListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicToolBarUI.createDockingListener(),MouseInputListener,
javax.swing.plaf.basic.BasicToolBarUI.createFrameListener(),WindowListener,
javax.swing.plaf.basic.BasicToolBarUI.paintDragWindow(Graphics),void,
javax.swing.plaf.basic.BasicToolTipUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicToolTipUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicToolTipUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicToolTipUI.installDefaults(JComponent),void,
javax.swing.plaf.basic.BasicToolTipUI.uninstallDefaults(JComponent),void,
javax.swing.plaf.basic.BasicToolTipUI.installListeners(JComponent),void,
javax.swing.plaf.basic.BasicToolTipUI.uninstallListeners(JComponent),void,
"javax.swing.plaf.basic.BasicToolTipUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicToolTipUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.basic.BasicToolTipUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicToolTipUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicTreeUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicTreeUI.getHashColor(),Color,
javax.swing.plaf.basic.BasicTreeUI.setHashColor(Color),void,
javax.swing.plaf.basic.BasicTreeUI.setLeftChildIndent(int),void,
javax.swing.plaf.basic.BasicTreeUI.getLeftChildIndent(),int,
javax.swing.plaf.basic.BasicTreeUI.setRightChildIndent(int),void,
javax.swing.plaf.basic.BasicTreeUI.getRightChildIndent(),int,
javax.swing.plaf.basic.BasicTreeUI.setExpandedIcon(Icon),void,
javax.swing.plaf.basic.BasicTreeUI.getExpandedIcon(),Icon,
javax.swing.plaf.basic.BasicTreeUI.setCollapsedIcon(Icon),void,
javax.swing.plaf.basic.BasicTreeUI.getCollapsedIcon(),Icon,
javax.swing.plaf.basic.BasicTreeUI.setLargeModel(boolean),void,
javax.swing.plaf.basic.BasicTreeUI.isLargeModel(),boolean,
javax.swing.plaf.basic.BasicTreeUI.setRowHeight(int),void,
javax.swing.plaf.basic.BasicTreeUI.getRowHeight(),int,
javax.swing.plaf.basic.BasicTreeUI.setCellRenderer(TreeCellRenderer),void,
javax.swing.plaf.basic.BasicTreeUI.getCellRenderer(),TreeCellRenderer,
javax.swing.plaf.basic.BasicTreeUI.setModel(TreeModel),void,
javax.swing.plaf.basic.BasicTreeUI.getModel(),TreeModel,
javax.swing.plaf.basic.BasicTreeUI.setRootVisible(boolean),void,
javax.swing.plaf.basic.BasicTreeUI.isRootVisible(),boolean,
javax.swing.plaf.basic.BasicTreeUI.setShowsRootHandles(boolean),void,
javax.swing.plaf.basic.BasicTreeUI.getShowsRootHandles(),boolean,
javax.swing.plaf.basic.BasicTreeUI.setCellEditor(TreeCellEditor),void,
javax.swing.plaf.basic.BasicTreeUI.getCellEditor(),TreeCellEditor,
javax.swing.plaf.basic.BasicTreeUI.setEditable(boolean),void,
javax.swing.plaf.basic.BasicTreeUI.isEditable(),boolean,
javax.swing.plaf.basic.BasicTreeUI.setSelectionModel(TreeSelectionModel),void,
javax.swing.plaf.basic.BasicTreeUI.getSelectionModel(),TreeSelectionModel,
"javax.swing.plaf.basic.BasicTreeUI.getPathBounds(JTree,TreePath)",Rectangle,
"javax.swing.plaf.basic.BasicTreeUI.getPathForRow(JTree,int)",TreePath,
"javax.swing.plaf.basic.BasicTreeUI.getRowForPath(JTree,TreePath)",int,
javax.swing.plaf.basic.BasicTreeUI.getRowCount(JTree),int,
"javax.swing.plaf.basic.BasicTreeUI.getClosestPathForLocation(JTree,int,int)",TreePath,
javax.swing.plaf.basic.BasicTreeUI.isEditing(JTree),boolean,
javax.swing.plaf.basic.BasicTreeUI.stopEditing(JTree),boolean,
javax.swing.plaf.basic.BasicTreeUI.cancelEditing(JTree),void,
"javax.swing.plaf.basic.BasicTreeUI.startEditingAtPath(JTree,TreePath)",void,
javax.swing.plaf.basic.BasicTreeUI.getEditingPath(JTree),TreePath,
javax.swing.plaf.basic.BasicTreeUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicTreeUI.prepareForUIInstall(),void,
javax.swing.plaf.basic.BasicTreeUI.completeUIInstall(),void,
javax.swing.plaf.basic.BasicTreeUI.installDefaults(),void,
javax.swing.plaf.basic.BasicTreeUI.installListeners(),void,
javax.swing.plaf.basic.BasicTreeUI.installKeyboardActions(),void,
javax.swing.plaf.basic.BasicTreeUI.installComponents(),void,
javax.swing.plaf.basic.BasicTreeUI.createNodeDimensions(),AbstractLayoutCache.NodeDimensions,
javax.swing.plaf.basic.BasicTreeUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicTreeUI.createMouseListener(),MouseListener,
javax.swing.plaf.basic.BasicTreeUI.createFocusListener(),FocusListener,
javax.swing.plaf.basic.BasicTreeUI.createKeyListener(),KeyListener,
javax.swing.plaf.basic.BasicTreeUI.createSelectionModelPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.basic.BasicTreeUI.createTreeSelectionListener(),TreeSelectionListener,
javax.swing.plaf.basic.BasicTreeUI.createCellEditorListener(),CellEditorListener,
javax.swing.plaf.basic.BasicTreeUI.createComponentListener(),ComponentListener,
javax.swing.plaf.basic.BasicTreeUI.createTreeExpansionListener(),TreeExpansionListener,
javax.swing.plaf.basic.BasicTreeUI.createLayoutCache(),AbstractLayoutCache,
javax.swing.plaf.basic.BasicTreeUI.createCellRendererPane(),CellRendererPane,
javax.swing.plaf.basic.BasicTreeUI.createDefaultCellEditor(),TreeCellEditor,
javax.swing.plaf.basic.BasicTreeUI.createDefaultCellRenderer(),TreeCellRenderer,
javax.swing.plaf.basic.BasicTreeUI.createTreeModelListener(),TreeModelListener,
javax.swing.plaf.basic.BasicTreeUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicTreeUI.prepareForUIUninstall(),void,
javax.swing.plaf.basic.BasicTreeUI.completeUIUninstall(),void,
javax.swing.plaf.basic.BasicTreeUI.uninstallDefaults(),void,
javax.swing.plaf.basic.BasicTreeUI.uninstallListeners(),void,
javax.swing.plaf.basic.BasicTreeUI.uninstallKeyboardActions(),void,
javax.swing.plaf.basic.BasicTreeUI.uninstallComponents(),void,
"javax.swing.plaf.basic.BasicTreeUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.basic.BasicTreeUI.getBaselineResizeBehavior(JComponent),Component.BaselineResizeBehavior,an enum indicating how the baseline changes as the component size changes
"javax.swing.plaf.basic.BasicTreeUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.basic.BasicTreeUI.isDropLine(JTree.DropLocation),boolean,true if the drop location should be shown as a line
javax.swing.plaf.basic.BasicTreeUI.paintDropLine(Graphics),void,
javax.swing.plaf.basic.BasicTreeUI.getDropLineRect(JTree.DropLocation),Rectangle,bounding box for the drop line
"javax.swing.plaf.basic.BasicTreeUI.paintHorizontalPartOfLeg(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)",void,
"javax.swing.plaf.basic.BasicTreeUI.paintVerticalPartOfLeg(Graphics,Rectangle,Insets,TreePath)",void,
"javax.swing.plaf.basic.BasicTreeUI.paintExpandControl(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)",void,
"javax.swing.plaf.basic.BasicTreeUI.paintRow(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)",void,
"javax.swing.plaf.basic.BasicTreeUI.shouldPaintExpandControl(TreePath,int,boolean,boolean,boolean)",boolean,
"javax.swing.plaf.basic.BasicTreeUI.paintVerticalLine(Graphics,JComponent,int,int,int)",void,
"javax.swing.plaf.basic.BasicTreeUI.paintHorizontalLine(Graphics,JComponent,int,int,int)",void,
javax.swing.plaf.basic.BasicTreeUI.getVerticalLegBuffer(),int,
javax.swing.plaf.basic.BasicTreeUI.getHorizontalLegBuffer(),int,
"javax.swing.plaf.basic.BasicTreeUI.drawCentered(Component,Graphics,Icon,int,int)",void,
"javax.swing.plaf.basic.BasicTreeUI.drawDashedHorizontalLine(Graphics,int,int,int)",void,
"javax.swing.plaf.basic.BasicTreeUI.drawDashedVerticalLine(Graphics,int,int,int)",void,
"javax.swing.plaf.basic.BasicTreeUI.getRowX(int,int)",int,amount to indent the given row.
javax.swing.plaf.basic.BasicTreeUI.updateLayoutCacheExpandedNodes(),void,
javax.swing.plaf.basic.BasicTreeUI.updateExpandedDescendants(TreePath),void,
javax.swing.plaf.basic.BasicTreeUI.getLastChildPath(TreePath),TreePath,
javax.swing.plaf.basic.BasicTreeUI.updateDepthOffset(),void,
javax.swing.plaf.basic.BasicTreeUI.updateCellEditor(),void,
javax.swing.plaf.basic.BasicTreeUI.updateRenderer(),void,
javax.swing.plaf.basic.BasicTreeUI.configureLayoutCache(),void,
javax.swing.plaf.basic.BasicTreeUI.updateSize(),void,
javax.swing.plaf.basic.BasicTreeUI.updateCachedPreferredSize(),void,
javax.swing.plaf.basic.BasicTreeUI.pathWasExpanded(TreePath),void,
javax.swing.plaf.basic.BasicTreeUI.pathWasCollapsed(TreePath),void,
"javax.swing.plaf.basic.BasicTreeUI.ensureRowsAreVisible(int,int)",void,
javax.swing.plaf.basic.BasicTreeUI.setPreferredMinSize(Dimension),void,
javax.swing.plaf.basic.BasicTreeUI.getPreferredMinSize(),Dimension,
javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent),Dimension,
"javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent,boolean)",Dimension,
javax.swing.plaf.basic.BasicTreeUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicTreeUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.basic.BasicTreeUI.completeEditing(),void,
"javax.swing.plaf.basic.BasicTreeUI.completeEditing(boolean,boolean,boolean)",void,
"javax.swing.plaf.basic.BasicTreeUI.startEditing(TreePath,MouseEvent)",boolean,
"javax.swing.plaf.basic.BasicTreeUI.checkForClickInExpandControl(TreePath,int,int)",void,
"javax.swing.plaf.basic.BasicTreeUI.isLocationInExpandControl(TreePath,int,int)",boolean,
"javax.swing.plaf.basic.BasicTreeUI.handleExpandControlClick(TreePath,int,int)",void,
javax.swing.plaf.basic.BasicTreeUI.toggleExpandState(TreePath),void,
javax.swing.plaf.basic.BasicTreeUI.isToggleSelectionEvent(MouseEvent),boolean,
javax.swing.plaf.basic.BasicTreeUI.isMultiSelectEvent(MouseEvent),boolean,
javax.swing.plaf.basic.BasicTreeUI.isToggleEvent(MouseEvent),boolean,
"javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(TreePath,MouseEvent)",void,
javax.swing.plaf.basic.BasicTreeUI.isLeaf(int),boolean,true if the node at row is a leaf.
javax.swing.plaf.basic.BasicTreeUI.updateLeadSelectionRow(),void,
javax.swing.plaf.basic.BasicTreeUI.getLeadSelectionRow(),int,selection lead row
javax.swing.plaf.basic.BasicViewportUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.basic.BasicViewportUI.installUI(JComponent),void,
javax.swing.plaf.basic.BasicViewportUI.uninstallUI(JComponent),void,
javax.swing.plaf.basic.BasicViewportUI.installDefaults(JComponent),void,
javax.swing.plaf.basic.BasicViewportUI.uninstallDefaults(JComponent),void,
javax.swing.plaf.basic.DefaultMenuLayout.preferredLayoutSize(Container),Dimension,the dimensions &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE
javax.swing.plaf.metal.DefaultMetalTheme.getName(),String,the name of this theme.
javax.swing.plaf.metal.DefaultMetalTheme.getPrimary1(),ColorUIResource,the primary 1 color
javax.swing.plaf.metal.DefaultMetalTheme.getPrimary2(),ColorUIResource,the primary 2 color
javax.swing.plaf.metal.DefaultMetalTheme.getPrimary3(),ColorUIResource,the primary 3 color
javax.swing.plaf.metal.DefaultMetalTheme.getSecondary1(),ColorUIResource,the secondary 1 color
javax.swing.plaf.metal.DefaultMetalTheme.getSecondary2(),ColorUIResource,the secondary 2 color
javax.swing.plaf.metal.DefaultMetalTheme.getSecondary3(),ColorUIResource,the secondary 3 color
javax.swing.plaf.metal.DefaultMetalTheme.getControlTextFont(),FontUIResource,the control text font
javax.swing.plaf.metal.DefaultMetalTheme.getSystemTextFont(),FontUIResource,the system text font
javax.swing.plaf.metal.DefaultMetalTheme.getUserTextFont(),FontUIResource,the user text font
javax.swing.plaf.metal.DefaultMetalTheme.getMenuTextFont(),FontUIResource,the menu text font
javax.swing.plaf.metal.DefaultMetalTheme.getWindowTitleFont(),FontUIResource,the window title font
javax.swing.plaf.metal.DefaultMetalTheme.getSubTextFont(),FontUIResource,the sub-text font
javax.swing.plaf.metal.MetalBorders.getButtonBorder(),Border,
javax.swing.plaf.metal.MetalBorders.getTextBorder(),Border,
javax.swing.plaf.metal.MetalBorders.getTextFieldBorder(),Border,
javax.swing.plaf.metal.MetalBorders.getToggleButtonBorder(),Border,
javax.swing.plaf.metal.MetalBorders.getDesktopIconBorder(),Border,
"javax.swing.plaf.metal.MetalBorders.ButtonBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.ButtonBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.Flush3DBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.Flush3DBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.InternalFrameBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.InternalFrameBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.MenuBarBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.MenuBarBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.MenuItemBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.MenuItemBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.OptionDialogBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.OptionDialogBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.PaletteBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.PaletteBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.PopupMenuBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.PopupMenuBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.RolloverButtonBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.ScrollPaneBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.ScrollPaneBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.TableHeaderBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.TableHeaderBorder.getBorderInsets(Component,Insets)",Insets,the insets object
"javax.swing.plaf.metal.MetalBorders.TextFieldBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.ToggleButtonBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.ToolBarBorder.paintBorder(Component,Graphics,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalBorders.ToolBarBorder.getBorderInsets(Component,Insets)",Insets,the insets object
javax.swing.plaf.metal.MetalButtonUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalButtonUI.installDefaults(AbstractButton),void,
javax.swing.plaf.metal.MetalButtonUI.uninstallDefaults(AbstractButton),void,
javax.swing.plaf.metal.MetalButtonUI.createButtonListener(AbstractButton),BasicButtonListener,
javax.swing.plaf.metal.MetalButtonUI.getSelectColor(),Color,
javax.swing.plaf.metal.MetalButtonUI.getDisabledTextColor(),Color,
javax.swing.plaf.metal.MetalButtonUI.getFocusColor(),Color,
"javax.swing.plaf.metal.MetalButtonUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.metal.MetalButtonUI.paintButtonPressed(Graphics,AbstractButton)",void,
"javax.swing.plaf.metal.MetalButtonUI.paintFocus(Graphics,AbstractButton,Rectangle,Rectangle,Rectangle)",void,
"javax.swing.plaf.metal.MetalButtonUI.paintText(Graphics,JComponent,Rectangle,String)",void,
javax.swing.plaf.metal.MetalCheckBoxIcon.getControlSize(),int,
"javax.swing.plaf.metal.MetalCheckBoxIcon.paintIcon(Component,Graphics,int,int)",void,
"javax.swing.plaf.metal.MetalCheckBoxIcon.drawCheck(Component,Graphics,int,int)",void,
javax.swing.plaf.metal.MetalCheckBoxIcon.getIconWidth(),int,an int specifying the fixed width of the icon.
javax.swing.plaf.metal.MetalCheckBoxIcon.getIconHeight(),int,an int specifying the fixed height of the icon.
javax.swing.plaf.metal.MetalCheckBoxUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalCheckBoxUI.getPropertyPrefix(),String,
javax.swing.plaf.metal.MetalCheckBoxUI.installDefaults(AbstractButton),void,
javax.swing.plaf.metal.MetalCheckBoxUI.uninstallDefaults(AbstractButton),void,
javax.swing.plaf.metal.MetalComboBoxButton.getComboBox(),JComboBox,
javax.swing.plaf.metal.MetalComboBoxButton.setComboBox(JComboBox),void,
javax.swing.plaf.metal.MetalComboBoxButton.getComboIcon(),Icon,
javax.swing.plaf.metal.MetalComboBoxButton.setComboIcon(Icon),void,
javax.swing.plaf.metal.MetalComboBoxButton.isIconOnly(),boolean,
javax.swing.plaf.metal.MetalComboBoxButton.setIconOnly(boolean),void,
javax.swing.plaf.metal.MetalComboBoxButton.isFocusTraversable(),boolean,true if this Component is focusable; false otherwise
javax.swing.plaf.metal.MetalComboBoxButton.setEnabled(boolean),void,
javax.swing.plaf.metal.MetalComboBoxButton.paintComponent(Graphics),void,
javax.swing.plaf.metal.MetalComboBoxButton.getMinimumSize(),Dimension,the value of the minimumSize property
"javax.swing.plaf.metal.MetalComboBoxIcon.paintIcon(Component,Graphics,int,int)",void,
javax.swing.plaf.metal.MetalComboBoxIcon.getIconWidth(),int,an int specifying the fixed width of the icon.
javax.swing.plaf.metal.MetalComboBoxIcon.getIconHeight(),int,an int specifying the fixed height of the icon.
javax.swing.plaf.metal.MetalComboBoxUI.createUI(JComponent),ComponentUI,
"javax.swing.plaf.metal.MetalComboBoxUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.metal.MetalComboBoxUI.paintCurrentValue(Graphics,Rectangle,boolean)",void,
"javax.swing.plaf.metal.MetalComboBoxUI.paintCurrentValueBackground(Graphics,Rectangle,boolean)",void,
"javax.swing.plaf.metal.MetalComboBoxUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.metal.MetalComboBoxUI.createEditor(),ComboBoxEditor,a ComboBoxEditor used for the combo box
javax.swing.plaf.metal.MetalComboBoxUI.createPopup(),ComboPopup,an instance of ComboPopup
javax.swing.plaf.metal.MetalComboBoxUI.createArrowButton(),JButton,a button which represents the popup control
javax.swing.plaf.metal.MetalComboBoxUI.createPropertyChangeListener(),PropertyChangeListener,an instance of a PropertyChangeListener or null
javax.swing.plaf.metal.MetalComboBoxUI.editablePropertyChanged(PropertyChangeEvent),void,
javax.swing.plaf.metal.MetalComboBoxUI.createLayoutManager(),LayoutManager,an instance of a layout manager
"javax.swing.plaf.metal.MetalComboBoxUI.layoutComboBox(Container,MetalComboBoxUI.MetalComboBoxLayoutManager)",void,
javax.swing.plaf.metal.MetalComboBoxUI.removeListeners(),void,
javax.swing.plaf.metal.MetalComboBoxUI.configureEditor(),void,
javax.swing.plaf.metal.MetalComboBoxUI.unconfigureEditor(),void,
javax.swing.plaf.metal.MetalComboBoxUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.metal.MetalDesktopIconUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalDesktopIconUI.installDefaults(),void,
javax.swing.plaf.metal.MetalDesktopIconUI.installComponents(),void,
javax.swing.plaf.metal.MetalDesktopIconUI.uninstallComponents(),void,
javax.swing.plaf.metal.MetalDesktopIconUI.installListeners(),void,
javax.swing.plaf.metal.MetalDesktopIconUI.uninstallListeners(),void,
javax.swing.plaf.metal.MetalDesktopIconUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.metal.MetalDesktopIconUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.metal.MetalDesktopIconUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.metal.MetalFileChooserUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalFileChooserUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalFileChooserUI.uninstallComponents(JFileChooser),void,
javax.swing.plaf.metal.MetalFileChooserUI.installComponents(JFileChooser),void,
javax.swing.plaf.metal.MetalFileChooserUI.getButtonPanel(),JPanel,
javax.swing.plaf.metal.MetalFileChooserUI.getBottomPanel(),JPanel,
javax.swing.plaf.metal.MetalFileChooserUI.installStrings(JFileChooser),void,
javax.swing.plaf.metal.MetalFileChooserUI.installListeners(JFileChooser),void,
javax.swing.plaf.metal.MetalFileChooserUI.getActionMap(),ActionMap,
javax.swing.plaf.metal.MetalFileChooserUI.createActionMap(),ActionMap,
javax.swing.plaf.metal.MetalFileChooserUI.createList(JFileChooser),JPanel,
javax.swing.plaf.metal.MetalFileChooserUI.createDetailsView(JFileChooser),JPanel,
javax.swing.plaf.metal.MetalFileChooserUI.createListSelectionListener(JFileChooser),ListSelectionListener,a ListSelectionListener
javax.swing.plaf.metal.MetalFileChooserUI.uninstallUI(JComponent),void,
javax.swing.plaf.metal.MetalFileChooserUI.getPreferredSize(JComponent),Dimension,a Dimension specifying the preferred width and height of the file chooser
javax.swing.plaf.metal.MetalFileChooserUI.getMinimumSize(JComponent),Dimension,a Dimension specifying the minimum width and height of the file chooser
javax.swing.plaf.metal.MetalFileChooserUI.getMaximumSize(JComponent),Dimension,a Dimension specifying the maximum width and height of the file chooser
javax.swing.plaf.metal.MetalFileChooserUI.createPropertyChangeListener(JFileChooser),PropertyChangeListener,
javax.swing.plaf.metal.MetalFileChooserUI.removeControlButtons(),void,
javax.swing.plaf.metal.MetalFileChooserUI.addControlButtons(),void,
"javax.swing.plaf.metal.MetalFileChooserUI.ensureFileIsVisible(JFileChooser,File)",void,
javax.swing.plaf.metal.MetalFileChooserUI.rescanCurrentDirectory(JFileChooser),void,
javax.swing.plaf.metal.MetalFileChooserUI.getFileName(),String,
javax.swing.plaf.metal.MetalFileChooserUI.setFileName(String),void,
javax.swing.plaf.metal.MetalFileChooserUI.setDirectorySelected(boolean),void,
javax.swing.plaf.metal.MetalFileChooserUI.getDirectoryName(),String,
javax.swing.plaf.metal.MetalFileChooserUI.setDirectoryName(String),void,
javax.swing.plaf.metal.MetalFileChooserUI.createDirectoryComboBoxRenderer(JFileChooser),javax.swing.plaf.metal.MetalFileChooserUI.DirectoryComboBoxRenderer,
javax.swing.plaf.metal.MetalFileChooserUI.createDirectoryComboBoxModel(JFileChooser),MetalFileChooserUI.DirectoryComboBoxModel,
javax.swing.plaf.metal.MetalFileChooserUI.createFilterComboBoxRenderer(),MetalFileChooserUI.FilterComboBoxRenderer,
javax.swing.plaf.metal.MetalFileChooserUI.createFilterComboBoxModel(),MetalFileChooserUI.FilterComboBoxModel,
javax.swing.plaf.metal.MetalFileChooserUI.valueChanged(ListSelectionEvent),void,
javax.swing.plaf.metal.MetalFileChooserUI.getApproveButton(JFileChooser),JButton,
javax.swing.plaf.metal.MetalIconFactory.getFileChooserDetailViewIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getFileChooserHomeFolderIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getFileChooserListViewIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getFileChooserNewFolderIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getFileChooserUpFolderIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getInternalFrameAltMaximizeIcon(int),Icon,
javax.swing.plaf.metal.MetalIconFactory.getInternalFrameCloseIcon(int),Icon,
javax.swing.plaf.metal.MetalIconFactory.getInternalFrameDefaultMenuIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getInternalFrameMaximizeIcon(int),Icon,
javax.swing.plaf.metal.MetalIconFactory.getInternalFrameMinimizeIcon(int),Icon,
javax.swing.plaf.metal.MetalIconFactory.getRadioButtonIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getCheckBoxIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getTreeComputerIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getTreeFloppyDriveIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getTreeFolderIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getTreeHardDriveIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getTreeLeafIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getTreeControlIcon(boolean),Icon,
javax.swing.plaf.metal.MetalIconFactory.getMenuArrowIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getMenuItemCheckIcon(),Icon,"the default icon for check box menu items, or null if no default exists"
javax.swing.plaf.metal.MetalIconFactory.getMenuItemArrowIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getCheckBoxMenuItemIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getRadioButtonMenuItemIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getHorizontalSliderThumbIcon(),Icon,
javax.swing.plaf.metal.MetalIconFactory.getVerticalSliderThumbIcon(),Icon,
"javax.swing.plaf.metal.MetalIconFactory.FileIcon16.paintIcon(Component,Graphics,int,int)",void,
javax.swing.plaf.metal.MetalIconFactory.FileIcon16.getShift(),int,
javax.swing.plaf.metal.MetalIconFactory.FileIcon16.getAdditionalHeight(),int,
javax.swing.plaf.metal.MetalIconFactory.FileIcon16.getIconWidth(),int,an int specifying the fixed width of the icon.
javax.swing.plaf.metal.MetalIconFactory.FileIcon16.getIconHeight(),int,an int specifying the fixed height of the icon.
"javax.swing.plaf.metal.MetalIconFactory.FolderIcon16.paintIcon(Component,Graphics,int,int)",void,
javax.swing.plaf.metal.MetalIconFactory.FolderIcon16.getShift(),int,
javax.swing.plaf.metal.MetalIconFactory.FolderIcon16.getAdditionalHeight(),int,
javax.swing.plaf.metal.MetalIconFactory.FolderIcon16.getIconWidth(),int,an int specifying the fixed width of the icon.
javax.swing.plaf.metal.MetalIconFactory.FolderIcon16.getIconHeight(),int,an int specifying the fixed height of the icon.
"javax.swing.plaf.metal.MetalIconFactory.PaletteCloseIcon.paintIcon(Component,Graphics,int,int)",void,
javax.swing.plaf.metal.MetalIconFactory.PaletteCloseIcon.getIconWidth(),int,an int specifying the fixed width of the icon.
javax.swing.plaf.metal.MetalIconFactory.PaletteCloseIcon.getIconHeight(),int,an int specifying the fixed height of the icon.
"javax.swing.plaf.metal.MetalIconFactory.TreeControlIcon.paintIcon(Component,Graphics,int,int)",void,
"javax.swing.plaf.metal.MetalIconFactory.TreeControlIcon.paintMe(Component,Graphics,int,int)",void,
javax.swing.plaf.metal.MetalIconFactory.TreeControlIcon.getIconWidth(),int,an int specifying the fixed width of the icon.
javax.swing.plaf.metal.MetalIconFactory.TreeControlIcon.getIconHeight(),int,an int specifying the fixed height of the icon.
javax.swing.plaf.metal.MetalIconFactory.TreeFolderIcon.getShift(),int,
javax.swing.plaf.metal.MetalIconFactory.TreeFolderIcon.getAdditionalHeight(),int,
javax.swing.plaf.metal.MetalIconFactory.TreeLeafIcon.getShift(),int,
javax.swing.plaf.metal.MetalIconFactory.TreeLeafIcon.getAdditionalHeight(),int,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.addNotify(),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.installDefaults(),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.uninstallDefaults(),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.createButtons(),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.assembleSystemMenu(),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.addSystemMenuItems(JMenu),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.showSystemMenu(),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.addSubComponents(),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.createLayout(),LayoutManager,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.paintPalette(Graphics),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.paintComponent(Graphics),void,
javax.swing.plaf.metal.MetalInternalFrameTitlePane.setPalette(boolean),void,
javax.swing.plaf.metal.MetalInternalFrameUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalInternalFrameUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalInternalFrameUI.uninstallUI(JComponent),void,
javax.swing.plaf.metal.MetalInternalFrameUI.installListeners(),void,
javax.swing.plaf.metal.MetalInternalFrameUI.uninstallListeners(),void,
javax.swing.plaf.metal.MetalInternalFrameUI.installKeyboardActions(),void,
javax.swing.plaf.metal.MetalInternalFrameUI.uninstallKeyboardActions(),void,
javax.swing.plaf.metal.MetalInternalFrameUI.uninstallComponents(),void,
javax.swing.plaf.metal.MetalInternalFrameUI.createNorthPane(JInternalFrame),JComponent,
javax.swing.plaf.metal.MetalInternalFrameUI.setPalette(boolean),void,
javax.swing.plaf.metal.MetalInternalFrameUI.createBorderListener(JInternalFrame),MouseInputAdapter,the MouseInputAdapter that will be installed on the TitlePane.
javax.swing.plaf.metal.MetalLabelUI.createUI(JComponent),ComponentUI,
"javax.swing.plaf.metal.MetalLabelUI.paintDisabledText(JLabel,Graphics,String,int,int)",void,
javax.swing.plaf.metal.MetalLookAndFeel.getName(),String,the name of this look and feel
javax.swing.plaf.metal.MetalLookAndFeel.getID(),String,the identifier of this look and feel
javax.swing.plaf.metal.MetalLookAndFeel.getDescription(),String,a short description for the look and feel
javax.swing.plaf.metal.MetalLookAndFeel.isNativeLookAndFeel(),boolean,false
javax.swing.plaf.metal.MetalLookAndFeel.isSupportedLookAndFeel(),boolean,true
javax.swing.plaf.metal.MetalLookAndFeel.getSupportsWindowDecorations(),boolean,true
javax.swing.plaf.metal.MetalLookAndFeel.initClassDefaults(UIDefaults),void,
javax.swing.plaf.metal.MetalLookAndFeel.initSystemColorDefaults(UIDefaults),void,
javax.swing.plaf.metal.MetalLookAndFeel.initComponentDefaults(UIDefaults),void,
javax.swing.plaf.metal.MetalLookAndFeel.createDefaultTheme(),void,
javax.swing.plaf.metal.MetalLookAndFeel.getDefaults(),UIDefaults,the look and feel defaults
javax.swing.plaf.metal.MetalLookAndFeel.provideErrorFeedback(Component),void,
javax.swing.plaf.metal.MetalLookAndFeel.setCurrentTheme(MetalTheme),void,
javax.swing.plaf.metal.MetalLookAndFeel.getCurrentTheme(),MetalTheme,the current theme
"javax.swing.plaf.metal.MetalLookAndFeel.getDisabledIcon(JComponent,Icon)",Icon,"Disabled icon, or null if a suitable Icon can not be generated."
"javax.swing.plaf.metal.MetalLookAndFeel.getDisabledSelectedIcon(JComponent,Icon)",Icon,"Disabled and Selected icon, or null if a suitable Icon can not be generated."
javax.swing.plaf.metal.MetalLookAndFeel.getControlTextFont(),FontUIResource,the control text font
javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextFont(),FontUIResource,the system text font
javax.swing.plaf.metal.MetalLookAndFeel.getUserTextFont(),FontUIResource,the user text font
javax.swing.plaf.metal.MetalLookAndFeel.getMenuTextFont(),FontUIResource,the menu text font
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleFont(),FontUIResource,the window title font
javax.swing.plaf.metal.MetalLookAndFeel.getSubTextFont(),FontUIResource,the sub-text font
javax.swing.plaf.metal.MetalLookAndFeel.getDesktopColor(),ColorUIResource,the desktop color
javax.swing.plaf.metal.MetalLookAndFeel.getFocusColor(),ColorUIResource,the focus color
javax.swing.plaf.metal.MetalLookAndFeel.getWhite(),ColorUIResource,the white color
javax.swing.plaf.metal.MetalLookAndFeel.getBlack(),ColorUIResource,the black color
javax.swing.plaf.metal.MetalLookAndFeel.getControl(),ColorUIResource,the control color
javax.swing.plaf.metal.MetalLookAndFeel.getControlShadow(),ColorUIResource,the control shadow color
javax.swing.plaf.metal.MetalLookAndFeel.getControlDarkShadow(),ColorUIResource,the control dark shadow color
javax.swing.plaf.metal.MetalLookAndFeel.getControlInfo(),ColorUIResource,the control info color
javax.swing.plaf.metal.MetalLookAndFeel.getControlHighlight(),ColorUIResource,the control highlight color
javax.swing.plaf.metal.MetalLookAndFeel.getControlDisabled(),ColorUIResource,the control disabled color
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControl(),ColorUIResource,the primary control color
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlShadow(),ColorUIResource,the primary control shadow color
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlDarkShadow(),ColorUIResource,the primary control dark shadow color
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlInfo(),ColorUIResource,the primary control info color
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlHighlight(),ColorUIResource,the primary control highlight color
javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextColor(),ColorUIResource,the system text color
javax.swing.plaf.metal.MetalLookAndFeel.getControlTextColor(),ColorUIResource,the control text color
javax.swing.plaf.metal.MetalLookAndFeel.getInactiveControlTextColor(),ColorUIResource,the inactive control text color
javax.swing.plaf.metal.MetalLookAndFeel.getInactiveSystemTextColor(),ColorUIResource,the inactive system text color
javax.swing.plaf.metal.MetalLookAndFeel.getUserTextColor(),ColorUIResource,the user text color
javax.swing.plaf.metal.MetalLookAndFeel.getTextHighlightColor(),ColorUIResource,the text highlight color
javax.swing.plaf.metal.MetalLookAndFeel.getHighlightedTextColor(),ColorUIResource,the highlighted text color
javax.swing.plaf.metal.MetalLookAndFeel.getWindowBackground(),ColorUIResource,the window background color
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleBackground(),ColorUIResource,the window title background color
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleForeground(),ColorUIResource,the window title foreground color
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveBackground(),ColorUIResource,the window title inactive background color
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveForeground(),ColorUIResource,the window title inactive foreground color
javax.swing.plaf.metal.MetalLookAndFeel.getMenuBackground(),ColorUIResource,the menu background color
javax.swing.plaf.metal.MetalLookAndFeel.getMenuForeground(),ColorUIResource,the menu foreground color
javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedBackground(),ColorUIResource,the menu selected background color
javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedForeground(),ColorUIResource,the menu selected foreground color
javax.swing.plaf.metal.MetalLookAndFeel.getMenuDisabledForeground(),ColorUIResource,the menu disabled foreground color
javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorBackground(),ColorUIResource,the separator background color
javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorForeground(),ColorUIResource,the separator foreground color
javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorForeground(),ColorUIResource,the separator accelerator foreground color
javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorSelectedForeground(),ColorUIResource,the accelerator selected foreground color
javax.swing.plaf.metal.MetalLookAndFeel.getLayoutStyle(),LayoutStyle,LayoutStyle implementing the Java look and feel design guidelines
javax.swing.plaf.metal.MetalMenuBarUI.createUI(JComponent),ComponentUI,ComponentUI implementation for x
javax.swing.plaf.metal.MetalMenuBarUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalMenuBarUI.uninstallUI(JComponent),void,
"javax.swing.plaf.metal.MetalMenuBarUI.update(Graphics,JComponent)",void,
javax.swing.plaf.metal.MetalPopupMenuSeparatorUI.createUI(JComponent),ComponentUI,
"javax.swing.plaf.metal.MetalPopupMenuSeparatorUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.metal.MetalPopupMenuSeparatorUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.metal.MetalProgressBarUI.createUI(JComponent),ComponentUI,
"javax.swing.plaf.metal.MetalProgressBarUI.paintDeterminate(Graphics,JComponent)",void,
"javax.swing.plaf.metal.MetalProgressBarUI.paintIndeterminate(Graphics,JComponent)",void,
javax.swing.plaf.metal.MetalRadioButtonUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalRadioButtonUI.installDefaults(AbstractButton),void,
javax.swing.plaf.metal.MetalRadioButtonUI.uninstallDefaults(AbstractButton),void,
javax.swing.plaf.metal.MetalRadioButtonUI.getSelectColor(),Color,
javax.swing.plaf.metal.MetalRadioButtonUI.getDisabledTextColor(),Color,
javax.swing.plaf.metal.MetalRadioButtonUI.getFocusColor(),Color,
"javax.swing.plaf.metal.MetalRadioButtonUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.metal.MetalRadioButtonUI.paintFocus(Graphics,Rectangle,Dimension)",void,
javax.swing.plaf.metal.MetalRootPaneUI.createUI(JComponent),ComponentUI,the RootPaneUI implementation for the passed in JRootPane
javax.swing.plaf.metal.MetalRootPaneUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalRootPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.metal.MetalRootPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.metal.MetalScrollBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalScrollBarUI.installDefaults(),void,
javax.swing.plaf.metal.MetalScrollBarUI.installListeners(),void,
javax.swing.plaf.metal.MetalScrollBarUI.createPropertyChangeListener(),PropertyChangeListener,
javax.swing.plaf.metal.MetalScrollBarUI.configureScrollBarColors(),void,
javax.swing.plaf.metal.MetalScrollBarUI.getPreferredSize(JComponent),Dimension,the preferred size of a Basic JScrollBar
javax.swing.plaf.metal.MetalScrollBarUI.createDecreaseButton(int),JButton,
javax.swing.plaf.metal.MetalScrollBarUI.createIncreaseButton(int),JButton,
"javax.swing.plaf.metal.MetalScrollBarUI.paintTrack(Graphics,JComponent,Rectangle)",void,
"javax.swing.plaf.metal.MetalScrollBarUI.paintThumb(Graphics,JComponent,Rectangle)",void,
javax.swing.plaf.metal.MetalScrollBarUI.getMinimumThumbSize(),Dimension,The smallest acceptable size for the thumb.
"javax.swing.plaf.metal.MetalScrollBarUI.setThumbBounds(int,int,int,int)",void,
javax.swing.plaf.metal.MetalScrollButton.setFreeStanding(boolean),void,
javax.swing.plaf.metal.MetalScrollButton.paint(Graphics),void,
javax.swing.plaf.metal.MetalScrollButton.getPreferredSize(),Dimension,the preferred size
javax.swing.plaf.metal.MetalScrollButton.getMinimumSize(),Dimension,the minimum size
javax.swing.plaf.metal.MetalScrollButton.getMaximumSize(),Dimension,the maximum size
javax.swing.plaf.metal.MetalScrollButton.getButtonWidth(),int,
javax.swing.plaf.metal.MetalScrollPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalScrollPaneUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalScrollPaneUI.uninstallUI(JComponent),void,
javax.swing.plaf.metal.MetalScrollPaneUI.installListeners(JScrollPane),void,
javax.swing.plaf.metal.MetalScrollPaneUI.uninstallListeners(JComponent),void,
javax.swing.plaf.metal.MetalScrollPaneUI.uninstallListeners(JScrollPane),void,
javax.swing.plaf.metal.MetalScrollPaneUI.createScrollBarSwapListener(),PropertyChangeListener,
javax.swing.plaf.metal.MetalSeparatorUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalSeparatorUI.installDefaults(JSeparator),void,
"javax.swing.plaf.metal.MetalSeparatorUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.metal.MetalSeparatorUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.metal.MetalSliderUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalSliderUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalSliderUI.createPropertyChangeListener(JSlider),PropertyChangeListener,
javax.swing.plaf.metal.MetalSliderUI.paintThumb(Graphics),void,
javax.swing.plaf.metal.MetalSliderUI.paintTrack(Graphics),void,
javax.swing.plaf.metal.MetalSliderUI.paintFocus(Graphics),void,
javax.swing.plaf.metal.MetalSliderUI.getThumbSize(),Dimension,
javax.swing.plaf.metal.MetalSliderUI.getTickLength(),int,
javax.swing.plaf.metal.MetalSliderUI.getTrackWidth(),int,
javax.swing.plaf.metal.MetalSliderUI.getTrackLength(),int,
javax.swing.plaf.metal.MetalSliderUI.getThumbOverhang(),int,
javax.swing.plaf.metal.MetalSliderUI.scrollDueToClickInTrack(int),void,
"javax.swing.plaf.metal.MetalSliderUI.paintMinorTickForHorizSlider(Graphics,Rectangle,int)",void,
"javax.swing.plaf.metal.MetalSliderUI.paintMajorTickForHorizSlider(Graphics,Rectangle,int)",void,
"javax.swing.plaf.metal.MetalSliderUI.paintMinorTickForVertSlider(Graphics,Rectangle,int)",void,
"javax.swing.plaf.metal.MetalSliderUI.paintMajorTickForVertSlider(Graphics,Rectangle,int)",void,
javax.swing.plaf.metal.MetalSplitPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalSplitPaneUI.createDefaultDivider(),BasicSplitPaneDivider,
javax.swing.plaf.metal.MetalTabbedPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalTabbedPaneUI.createLayoutManager(),LayoutManager,a layout manager object
javax.swing.plaf.metal.MetalTabbedPaneUI.installDefaults(),void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintTabBorder(Graphics,int,int,int,int,int,int,boolean)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintTopTabBorder(int,Graphics,int,int,int,int,int,int,boolean)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.shouldFillGap(int,int,int,int)",boolean,
"javax.swing.plaf.metal.MetalTabbedPaneUI.getColorForGap(int,int,int)",Color,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintLeftTabBorder(int,Graphics,int,int,int,int,int,int,boolean)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintBottomTabBorder(int,Graphics,int,int,int,int,int,int,boolean)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintRightTabBorder(int,Graphics,int,int,int,int,int,int,boolean)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintTabBackground(Graphics,int,int,int,int,int,int,boolean)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.getTabLabelShiftX(int,int,boolean)",int,
"javax.swing.plaf.metal.MetalTabbedPaneUI.getTabLabelShiftY(int,int,boolean)",int,
javax.swing.plaf.metal.MetalTabbedPaneUI.getBaselineOffset(),int,amount to offset the baseline by
"javax.swing.plaf.metal.MetalTabbedPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.metal.MetalTabbedPaneUI.paintHighlightBelowTab(),void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintFocusIndicator(Graphics,int,Rectangle[],int,Rectangle,Rectangle,boolean)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintContentBorderTopEdge(Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintContentBorderBottomEdge(Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintContentBorderLeftEdge(Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.metal.MetalTabbedPaneUI.paintContentBorderRightEdge(Graphics,int,int,int,int,int,int)",void,
javax.swing.plaf.metal.MetalTabbedPaneUI.calculateMaxTabHeight(int),int,
javax.swing.plaf.metal.MetalTabbedPaneUI.getTabRunOverlay(int),int,
"javax.swing.plaf.metal.MetalTabbedPaneUI.shouldRotateTabRuns(int,int)",boolean,
"javax.swing.plaf.metal.MetalTabbedPaneUI.shouldPadTabRun(int,int)",boolean,
javax.swing.plaf.metal.MetalTextFieldUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalTextFieldUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.metal.MetalTheme.getName(),abstractString,the name of this theme
javax.swing.plaf.metal.MetalTheme.getPrimary1(),abstractColorUIResource,the primary 1 color
javax.swing.plaf.metal.MetalTheme.getPrimary2(),abstractColorUIResource,the primary 2 color
javax.swing.plaf.metal.MetalTheme.getPrimary3(),abstractColorUIResource,the primary 3 color
javax.swing.plaf.metal.MetalTheme.getSecondary1(),abstractColorUIResource,the secondary 1 color
javax.swing.plaf.metal.MetalTheme.getSecondary2(),abstractColorUIResource,the secondary 2 color
javax.swing.plaf.metal.MetalTheme.getSecondary3(),abstractColorUIResource,the secondary 3 color
javax.swing.plaf.metal.MetalTheme.getControlTextFont(),abstractFontUIResource,the control text font
javax.swing.plaf.metal.MetalTheme.getSystemTextFont(),abstractFontUIResource,the system text font
javax.swing.plaf.metal.MetalTheme.getUserTextFont(),abstractFontUIResource,the user text font
javax.swing.plaf.metal.MetalTheme.getMenuTextFont(),abstractFontUIResource,the menu text font
javax.swing.plaf.metal.MetalTheme.getWindowTitleFont(),abstractFontUIResource,the window title font
javax.swing.plaf.metal.MetalTheme.getSubTextFont(),abstractFontUIResource,the sub-text font
javax.swing.plaf.metal.MetalTheme.getWhite(),ColorUIResource,the white color
javax.swing.plaf.metal.MetalTheme.getBlack(),ColorUIResource,the black color
javax.swing.plaf.metal.MetalTheme.getFocusColor(),ColorUIResource,the focus color
javax.swing.plaf.metal.MetalTheme.getDesktopColor(),ColorUIResource,the desktop color
javax.swing.plaf.metal.MetalTheme.getControl(),ColorUIResource,the control color
javax.swing.plaf.metal.MetalTheme.getControlShadow(),ColorUIResource,the control shadow color
javax.swing.plaf.metal.MetalTheme.getControlDarkShadow(),ColorUIResource,the control dark shadow color
javax.swing.plaf.metal.MetalTheme.getControlInfo(),ColorUIResource,the control info color
javax.swing.plaf.metal.MetalTheme.getControlHighlight(),ColorUIResource,the control highlight color
javax.swing.plaf.metal.MetalTheme.getControlDisabled(),ColorUIResource,the control disabled color
javax.swing.plaf.metal.MetalTheme.getPrimaryControl(),ColorUIResource,the primary control color
javax.swing.plaf.metal.MetalTheme.getPrimaryControlShadow(),ColorUIResource,the primary control shadow color
javax.swing.plaf.metal.MetalTheme.getPrimaryControlDarkShadow(),ColorUIResource,the primary control dark shadow color
javax.swing.plaf.metal.MetalTheme.getPrimaryControlInfo(),ColorUIResource,the primary control info color
javax.swing.plaf.metal.MetalTheme.getPrimaryControlHighlight(),ColorUIResource,the primary control highlight color
javax.swing.plaf.metal.MetalTheme.getSystemTextColor(),ColorUIResource,the system text color
javax.swing.plaf.metal.MetalTheme.getControlTextColor(),ColorUIResource,the control text color
javax.swing.plaf.metal.MetalTheme.getInactiveControlTextColor(),ColorUIResource,the inactive control text color
javax.swing.plaf.metal.MetalTheme.getInactiveSystemTextColor(),ColorUIResource,the inactive system text color
javax.swing.plaf.metal.MetalTheme.getUserTextColor(),ColorUIResource,the user text color
javax.swing.plaf.metal.MetalTheme.getTextHighlightColor(),ColorUIResource,the text highlight color
javax.swing.plaf.metal.MetalTheme.getHighlightedTextColor(),ColorUIResource,the highlighted text color
javax.swing.plaf.metal.MetalTheme.getWindowBackground(),ColorUIResource,the window background color
javax.swing.plaf.metal.MetalTheme.getWindowTitleBackground(),ColorUIResource,the window title background color
javax.swing.plaf.metal.MetalTheme.getWindowTitleForeground(),ColorUIResource,the window title foreground color
javax.swing.plaf.metal.MetalTheme.getWindowTitleInactiveBackground(),ColorUIResource,the window title inactive background color
javax.swing.plaf.metal.MetalTheme.getWindowTitleInactiveForeground(),ColorUIResource,the window title inactive foreground color
javax.swing.plaf.metal.MetalTheme.getMenuBackground(),ColorUIResource,the menu background color
javax.swing.plaf.metal.MetalTheme.getMenuForeground(),ColorUIResource,the menu foreground color
javax.swing.plaf.metal.MetalTheme.getMenuSelectedBackground(),ColorUIResource,the menu selected background color
javax.swing.plaf.metal.MetalTheme.getMenuSelectedForeground(),ColorUIResource,the menu selected foreground color
javax.swing.plaf.metal.MetalTheme.getMenuDisabledForeground(),ColorUIResource,the menu disabled foreground color
javax.swing.plaf.metal.MetalTheme.getSeparatorBackground(),ColorUIResource,the separator background color
javax.swing.plaf.metal.MetalTheme.getSeparatorForeground(),ColorUIResource,the separator foreground color
javax.swing.plaf.metal.MetalTheme.getAcceleratorForeground(),ColorUIResource,the accelerator foreground color
javax.swing.plaf.metal.MetalTheme.getAcceleratorSelectedForeground(),ColorUIResource,the accelerator selected foreground color
javax.swing.plaf.metal.MetalTheme.addCustomEntriesToTable(UIDefaults),void,
javax.swing.plaf.metal.MetalToggleButtonUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalToggleButtonUI.installDefaults(AbstractButton),void,
javax.swing.plaf.metal.MetalToggleButtonUI.uninstallDefaults(AbstractButton),void,
javax.swing.plaf.metal.MetalToggleButtonUI.getSelectColor(),Color,
javax.swing.plaf.metal.MetalToggleButtonUI.getDisabledTextColor(),Color,
javax.swing.plaf.metal.MetalToggleButtonUI.getFocusColor(),Color,
"javax.swing.plaf.metal.MetalToggleButtonUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.metal.MetalToggleButtonUI.paintButtonPressed(Graphics,AbstractButton)",void,
"javax.swing.plaf.metal.MetalToggleButtonUI.paintText(Graphics,JComponent,Rectangle,String)",void,
"javax.swing.plaf.metal.MetalToggleButtonUI.paintFocus(Graphics,AbstractButton,Rectangle,Rectangle,Rectangle)",void,
"javax.swing.plaf.metal.MetalToggleButtonUI.paintIcon(Graphics,AbstractButton,Rectangle)",void,
javax.swing.plaf.metal.MetalToolBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalToolBarUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalToolBarUI.uninstallUI(JComponent),void,
javax.swing.plaf.metal.MetalToolBarUI.installListeners(),void,
javax.swing.plaf.metal.MetalToolBarUI.uninstallListeners(),void,
javax.swing.plaf.metal.MetalToolBarUI.createRolloverBorder(),Border,
javax.swing.plaf.metal.MetalToolBarUI.createNonRolloverBorder(),Border,
javax.swing.plaf.metal.MetalToolBarUI.setBorderToNonRollover(Component),void,
javax.swing.plaf.metal.MetalToolBarUI.createContainerListener(),ContainerListener,an instance of a ContainerListener or null
javax.swing.plaf.metal.MetalToolBarUI.createRolloverListener(),PropertyChangeListener,an instance of a PropertyChangeListener or null
javax.swing.plaf.metal.MetalToolBarUI.createDockingListener(),MouseInputListener,
javax.swing.plaf.metal.MetalToolBarUI.setDragOffset(Point),void,
"javax.swing.plaf.metal.MetalToolBarUI.update(Graphics,JComponent)",void,
javax.swing.plaf.metal.MetalToolTipUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalToolTipUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalToolTipUI.uninstallUI(JComponent),void,
"javax.swing.plaf.metal.MetalToolTipUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.metal.MetalToolTipUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.metal.MetalToolTipUI.isAcceleratorHidden(),boolean,
javax.swing.plaf.metal.MetalToolTipUI.getAcceleratorString(),String,
javax.swing.plaf.metal.MetalTreeUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.metal.MetalTreeUI.getHorizontalLegBuffer(),int,
javax.swing.plaf.metal.MetalTreeUI.installUI(JComponent),void,
javax.swing.plaf.metal.MetalTreeUI.uninstallUI(JComponent),void,
javax.swing.plaf.metal.MetalTreeUI.decodeLineStyle(Object),void,
"javax.swing.plaf.metal.MetalTreeUI.isLocationInExpandControl(int,int,int,int)",boolean,
"javax.swing.plaf.metal.MetalTreeUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.metal.MetalTreeUI.paintHorizontalSeparators(Graphics,JComponent)",void,
"javax.swing.plaf.metal.MetalTreeUI.paintVerticalPartOfLeg(Graphics,Rectangle,Insets,TreePath)",void,
"javax.swing.plaf.metal.MetalTreeUI.paintHorizontalPartOfLeg(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)",void,
javax.swing.plaf.metal.OceanTheme.addCustomEntriesToTable(UIDefaults),void,
javax.swing.plaf.metal.OceanTheme.getName(),String,"""Ocean"""
javax.swing.plaf.metal.OceanTheme.getPrimary1(),ColorUIResource,the primary 1 color
javax.swing.plaf.metal.OceanTheme.getPrimary2(),ColorUIResource,the primary 2 color
javax.swing.plaf.metal.OceanTheme.getPrimary3(),ColorUIResource,the primary 3 color
javax.swing.plaf.metal.OceanTheme.getSecondary1(),ColorUIResource,the secondary 1 color
javax.swing.plaf.metal.OceanTheme.getSecondary2(),ColorUIResource,the secondary 2 color
javax.swing.plaf.metal.OceanTheme.getSecondary3(),ColorUIResource,the secondary 3 color
javax.swing.plaf.metal.OceanTheme.getBlack(),ColorUIResource,the black color
javax.swing.plaf.metal.OceanTheme.getDesktopColor(),ColorUIResource,the desktop color
javax.swing.plaf.metal.OceanTheme.getInactiveControlTextColor(),ColorUIResource,the inactive control text color
javax.swing.plaf.metal.OceanTheme.getControlTextColor(),ColorUIResource,the control text color
javax.swing.plaf.metal.OceanTheme.getMenuDisabledForeground(),ColorUIResource,the menu disabled foreground color
javax.swing.plaf.multi.MultiButtonUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiButtonUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiButtonUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiButtonUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiButtonUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiButtonUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiButtonUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiButtonUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiButtonUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiButtonUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiButtonUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiButtonUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiColorChooserUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiColorChooserUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiColorChooserUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiColorChooserUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiColorChooserUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiColorChooserUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiColorChooserUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiColorChooserUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiColorChooserUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiColorChooserUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiColorChooserUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiColorChooserUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiComboBoxUI.getUIs(),ComponentUI[],
javax.swing.plaf.multi.MultiComboBoxUI.isFocusTraversable(JComboBox),boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiComboBoxUI.setPopupVisible(JComboBox,boolean)",void,
javax.swing.plaf.multi.MultiComboBoxUI.isPopupVisible(JComboBox),boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiComboBoxUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiComboBoxUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiComboBoxUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiComboBoxUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiComboBoxUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiComboBoxUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiComboBoxUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiComboBoxUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiComboBoxUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiComboBoxUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiComboBoxUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiDesktopIconUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiDesktopIconUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiDesktopIconUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiDesktopIconUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiDesktopIconUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiDesktopIconUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiDesktopIconUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiDesktopIconUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiDesktopIconUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiDesktopIconUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiDesktopIconUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiDesktopIconUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiDesktopPaneUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiDesktopPaneUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiDesktopPaneUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiDesktopPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiDesktopPaneUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiDesktopPaneUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiDesktopPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiDesktopPaneUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiDesktopPaneUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiDesktopPaneUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiDesktopPaneUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiDesktopPaneUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiFileChooserUI.getUIs(),ComponentUI[],
javax.swing.plaf.multi.MultiFileChooserUI.getAcceptAllFileFilter(JFileChooser),FileFilter,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiFileChooserUI.getFileView(JFileChooser),FileView,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiFileChooserUI.getApproveButtonText(JFileChooser),String,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiFileChooserUI.getDialogTitle(JFileChooser),String,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiFileChooserUI.rescanCurrentDirectory(JFileChooser),void,
"javax.swing.plaf.multi.MultiFileChooserUI.ensureFileIsVisible(JFileChooser,File)",void,
"javax.swing.plaf.multi.MultiFileChooserUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiFileChooserUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiFileChooserUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiFileChooserUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiFileChooserUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiFileChooserUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiFileChooserUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiFileChooserUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiFileChooserUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiFileChooserUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiFileChooserUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiInternalFrameUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiInternalFrameUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiInternalFrameUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiInternalFrameUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiInternalFrameUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiInternalFrameUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiInternalFrameUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiInternalFrameUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiInternalFrameUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiInternalFrameUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiInternalFrameUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiInternalFrameUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiLabelUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiLabelUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiLabelUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiLabelUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiLabelUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiLabelUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiLabelUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiLabelUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiLabelUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiLabelUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiLabelUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiLabelUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiListUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiListUI.locationToIndex(JList,Point)",int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiListUI.indexToLocation(JList,int)",Point,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiListUI.getCellBounds(JList,int,int)",Rectangle,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiListUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiListUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiListUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiListUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiListUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiListUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiListUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiListUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiListUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiListUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiListUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiLookAndFeel.getName(),String,"a string such as ""Multiplexing Look and Feel"""
javax.swing.plaf.multi.MultiLookAndFeel.getID(),String,"""Multiplex"""
javax.swing.plaf.multi.MultiLookAndFeel.getDescription(),String,"a descriptive string such as ""Allows multiple UI instances per component instance"""
javax.swing.plaf.multi.MultiLookAndFeel.isNativeLookAndFeel(),boolean,false
javax.swing.plaf.multi.MultiLookAndFeel.isSupportedLookAndFeel(),boolean,true
javax.swing.plaf.multi.MultiLookAndFeel.getDefaults(),UIDefaults,an initialized UIDefaults object
"javax.swing.plaf.multi.MultiLookAndFeel.createUIs(ComponentUI,Vector,JComponent)",ComponentUI,"mui if the component has any auxiliary UI objects; otherwise, returns the UI object for the default look and feel or null if the default UI object couldn't be found"
javax.swing.plaf.multi.MultiLookAndFeel.uisToArray(Vector),ComponentUI[],an array equivalent to the passed-in vector
javax.swing.plaf.multi.MultiMenuBarUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiMenuBarUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiMenuBarUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiMenuBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiMenuBarUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiMenuBarUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiMenuBarUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiMenuBarUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiMenuBarUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiMenuBarUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiMenuBarUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiMenuBarUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiMenuItemUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiMenuItemUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiMenuItemUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiMenuItemUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiMenuItemUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiMenuItemUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiMenuItemUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiMenuItemUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiMenuItemUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiMenuItemUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiMenuItemUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiMenuItemUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiOptionPaneUI.getUIs(),ComponentUI[],
javax.swing.plaf.multi.MultiOptionPaneUI.selectInitialValue(JOptionPane),void,
javax.swing.plaf.multi.MultiOptionPaneUI.containsCustomComponents(JOptionPane),boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiOptionPaneUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiOptionPaneUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiOptionPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiOptionPaneUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiOptionPaneUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiOptionPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiOptionPaneUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiOptionPaneUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiOptionPaneUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiOptionPaneUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiOptionPaneUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiPanelUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiPanelUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiPanelUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiPanelUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiPanelUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiPanelUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiPanelUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiPanelUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiPanelUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiPanelUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiPanelUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiPanelUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiPopupMenuUI.getUIs(),ComponentUI[],
javax.swing.plaf.multi.MultiPopupMenuUI.isPopupTrigger(MouseEvent),boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiPopupMenuUI.getPopup(JPopupMenu,int,int)",Popup,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiPopupMenuUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiPopupMenuUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiPopupMenuUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiPopupMenuUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiPopupMenuUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiPopupMenuUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiPopupMenuUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiPopupMenuUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiPopupMenuUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiPopupMenuUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiPopupMenuUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiProgressBarUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiProgressBarUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiProgressBarUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiProgressBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiProgressBarUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiProgressBarUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiProgressBarUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiProgressBarUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiProgressBarUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiProgressBarUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiProgressBarUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiProgressBarUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiRootPaneUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiRootPaneUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiRootPaneUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiRootPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiRootPaneUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiRootPaneUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiRootPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiRootPaneUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiRootPaneUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiRootPaneUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiRootPaneUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiRootPaneUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiScrollBarUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiScrollBarUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiScrollBarUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiScrollBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiScrollBarUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiScrollBarUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiScrollBarUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiScrollBarUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiScrollBarUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiScrollBarUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiScrollBarUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiScrollBarUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiScrollPaneUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiScrollPaneUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiScrollPaneUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiScrollPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiScrollPaneUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiScrollPaneUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiScrollPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiScrollPaneUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiScrollPaneUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiScrollPaneUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiScrollPaneUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiScrollPaneUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSeparatorUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiSeparatorUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSeparatorUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiSeparatorUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiSeparatorUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiSeparatorUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiSeparatorUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiSeparatorUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSeparatorUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSeparatorUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSeparatorUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSeparatorUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSliderUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiSliderUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSliderUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiSliderUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiSliderUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiSliderUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiSliderUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiSliderUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSliderUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSliderUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSliderUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSliderUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSpinnerUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiSpinnerUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSpinnerUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiSpinnerUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiSpinnerUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiSpinnerUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiSpinnerUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiSpinnerUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSpinnerUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSpinnerUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSpinnerUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSpinnerUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSplitPaneUI.getUIs(),ComponentUI[],
javax.swing.plaf.multi.MultiSplitPaneUI.resetToPreferredSizes(JSplitPane),void,
"javax.swing.plaf.multi.MultiSplitPaneUI.setDividerLocation(JSplitPane,int)",void,
javax.swing.plaf.multi.MultiSplitPaneUI.getDividerLocation(JSplitPane),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSplitPaneUI.getMinimumDividerLocation(JSplitPane),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSplitPaneUI.getMaximumDividerLocation(JSplitPane),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSplitPaneUI.finishedPaintingChildren(JSplitPane,Graphics)",void,
"javax.swing.plaf.multi.MultiSplitPaneUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSplitPaneUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiSplitPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiSplitPaneUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiSplitPaneUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiSplitPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiSplitPaneUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSplitPaneUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSplitPaneUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiSplitPaneUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiSplitPaneUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTabbedPaneUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiTabbedPaneUI.tabForCoordinate(JTabbedPane,int,int)",int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTabbedPaneUI.getTabBounds(JTabbedPane,int)",Rectangle,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTabbedPaneUI.getTabRunCount(JTabbedPane),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTabbedPaneUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTabbedPaneUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTabbedPaneUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiTabbedPaneUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiTabbedPaneUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiTabbedPaneUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTabbedPaneUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTabbedPaneUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTabbedPaneUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTabbedPaneUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTabbedPaneUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTableHeaderUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiTableHeaderUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTableHeaderUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTableHeaderUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiTableHeaderUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiTableHeaderUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiTableHeaderUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTableHeaderUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTableHeaderUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTableHeaderUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTableHeaderUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTableHeaderUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTableUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiTableUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTableUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTableUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiTableUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiTableUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiTableUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTableUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTableUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTableUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTableUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTableUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTextUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiTextUI.getToolTipText(JTextComponent,Point)",String,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.modelToView(JTextComponent,int)",Rectangle,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.modelToView(JTextComponent,int,Position.Bias)",Rectangle,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.viewToModel(JTextComponent,Point)",int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.viewToModel(JTextComponent,Point,Position.Bias[])",int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])",int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.damageRange(JTextComponent,int,int)",void,
"javax.swing.plaf.multi.MultiTextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)",void,
javax.swing.plaf.multi.MultiTextUI.getEditorKit(JTextComponent),EditorKit,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTextUI.getRootView(JTextComponent),View,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTextUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiTextUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiTextUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiTextUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTextUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTextUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTextUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTextUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTextUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiToolBarUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiToolBarUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiToolBarUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiToolBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiToolBarUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiToolBarUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiToolBarUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiToolBarUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiToolBarUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiToolBarUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiToolBarUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiToolBarUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiToolTipUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiToolTipUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiToolTipUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiToolTipUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiToolTipUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiToolTipUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiToolTipUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiToolTipUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiToolTipUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiToolTipUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiToolTipUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiToolTipUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTreeUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiTreeUI.getPathBounds(JTree,TreePath)",Rectangle,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTreeUI.getPathForRow(JTree,int)",TreePath,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTreeUI.getRowForPath(JTree,TreePath)",int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTreeUI.getRowCount(JTree),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTreeUI.getClosestPathForLocation(JTree,int,int)",TreePath,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTreeUI.isEditing(JTree),boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTreeUI.stopEditing(JTree),boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTreeUI.cancelEditing(JTree),void,
"javax.swing.plaf.multi.MultiTreeUI.startEditingAtPath(JTree,TreePath)",void,
javax.swing.plaf.multi.MultiTreeUI.getEditingPath(JTree),TreePath,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTreeUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTreeUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTreeUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiTreeUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiTreeUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiTreeUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiTreeUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTreeUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTreeUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiTreeUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiTreeUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiViewportUI.getUIs(),ComponentUI[],
"javax.swing.plaf.multi.MultiViewportUI.contains(JComponent,int,int)",boolean,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiViewportUI.update(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiViewportUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.multi.MultiViewportUI.installUI(JComponent),void,
javax.swing.plaf.multi.MultiViewportUI.uninstallUI(JComponent),void,
"javax.swing.plaf.multi.MultiViewportUI.paint(Graphics,JComponent)",void,
javax.swing.plaf.multi.MultiViewportUI.getPreferredSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiViewportUI.getMinimumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiViewportUI.getMaximumSize(JComponent),Dimension,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
javax.swing.plaf.multi.MultiViewportUI.getAccessibleChildrenCount(JComponent),int,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.multi.MultiViewportUI.getAccessibleChild(JComponent,int)",Accessible,"the value obtained from the first UI, which is the UI obtained from the default LookAndFeel"
"javax.swing.plaf.nimbus.AbstractRegionPainter.paint(Graphics2D,JComponent,int,int)",void,
javax.swing.plaf.nimbus.AbstractRegionPainter.getExtendedCacheKeys(JComponent),Object[],Array of extra objects to be included in the cache key
javax.swing.plaf.nimbus.AbstractRegionPainter.getPaintContext(),abstractAbstractRegionPainter.PaintContext,a PaintContext associated with this paint operation.
javax.swing.plaf.nimbus.AbstractRegionPainter.configureGraphics(Graphics2D),void,
"javax.swing.plaf.nimbus.AbstractRegionPainter.doPaint(Graphics2D,JComponent,int,int,Object[])",abstractvoid,
javax.swing.plaf.nimbus.AbstractRegionPainter.decodeX(float),float,the decoded x value
javax.swing.plaf.nimbus.AbstractRegionPainter.decodeY(float),float,the decoded y value
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorX(float,float)",float,the decoded x location of the control point
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorY(float,float)",float,the decoded y position of the control point
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(String,float,float,float,int)",Color,"The derived color, whose color value will change if the parent uiDefault color changes."
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(Color,Color,float)",Color,The derived color
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeGradient(float,float,float,float,float[],Color[])",LinearGradientPaint,a valid LinearGradientPaint. This method never returns null.
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeRadialGradient(float,float,float,float[],Color[])",RadialGradientPaint,a valid RadialGradientPaint. This method never returns null.
"javax.swing.plaf.nimbus.AbstractRegionPainter.getComponentColor(JComponent,String,Color,float,float,int)",Color,The color that was obtained from the component or defaultColor
javax.swing.plaf.nimbus.NimbusLookAndFeel.initialize(),void,
javax.swing.plaf.nimbus.NimbusLookAndFeel.uninitialize(),void,
javax.swing.plaf.nimbus.NimbusLookAndFeel.getDefaults(),UIDefaults,Defaults table.
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getStyle(JComponent,Region)",NimbusStyle,a non-null reference to a NimbusStyle.
javax.swing.plaf.nimbus.NimbusLookAndFeel.getName(),String,a short string identifying this look and feel.
javax.swing.plaf.nimbus.NimbusLookAndFeel.getID(),String,a short string identifying this look and feel.
javax.swing.plaf.nimbus.NimbusLookAndFeel.getDescription(),String,textual description of this look and feel.
javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnAncestorChanged(),boolean,true
javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnEvent(PropertyChangeEvent),boolean,
"javax.swing.plaf.nimbus.NimbusLookAndFeel.register(Region,String)",void,
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getDisabledIcon(JComponent,Icon)",Icon,"disabled Icon, or null if a suitable Icon can not be generated"
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(String,float,float,float,int,boolean)",Color,The stored derived color
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(Color,Color,float,boolean)",Color,The derived color
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(Color,Color,float)",Color,"The derived color, which will be a UIResource"
javax.swing.plaf.nimbus.NimbusStyle.installDefaults(SynthContext),void,
"javax.swing.plaf.nimbus.NimbusStyle.getInsets(SynthContext,Insets)",Insets,Sizing Insets.
"javax.swing.plaf.nimbus.NimbusStyle.getColorForState(SynthContext,ColorType)",Color,
javax.swing.plaf.nimbus.NimbusStyle.getFontForState(SynthContext),Font,Font to render with
javax.swing.plaf.nimbus.NimbusStyle.getPainter(SynthContext),SynthPainter,SynthPainter to use
javax.swing.plaf.nimbus.NimbusStyle.isOpaque(SynthContext),boolean,true if region is opaque.
"javax.swing.plaf.nimbus.NimbusStyle.get(SynthContext,Object)",Object,Value of the named property
javax.swing.plaf.nimbus.NimbusStyle.getBackgroundPainter(SynthContext),Painter,"The background painter associated for the given state, or null if none could be found."
javax.swing.plaf.nimbus.NimbusStyle.getForegroundPainter(SynthContext),Painter,"The foreground painter associated for the given state, or null if none could be found."
javax.swing.plaf.nimbus.NimbusStyle.getBorderPainter(SynthContext),Painter,"The border painter associated for the given state, or null if none could be found."
javax.swing.plaf.nimbus.State.toString(),String,a string representation of the object.
javax.swing.plaf.nimbus.State.isInState(T),abstractboolean,true if c is in the custom state represented by this State instance
javax.swing.plaf.synth.ColorType.getID(),int,"a unique id, as an integer, for this ColorType."
javax.swing.plaf.synth.ColorType.toString(),String,the description of the string
javax.swing.plaf.synth.Region.isSubregion(),boolean,true if the Region is a subregion of a Component.
javax.swing.plaf.synth.Region.getName(),String,name of the Region.
javax.swing.plaf.synth.Region.toString(),String,name of the Region.
javax.swing.plaf.synth.SynthButtonUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthButtonUI.installDefaults(AbstractButton),void,
javax.swing.plaf.synth.SynthButtonUI.installListeners(AbstractButton),void,
javax.swing.plaf.synth.SynthButtonUI.uninstallListeners(AbstractButton),void,
javax.swing.plaf.synth.SynthButtonUI.uninstallDefaults(AbstractButton),void,
javax.swing.plaf.synth.SynthButtonUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthButtonUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
"javax.swing.plaf.synth.SynthButtonUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthButtonUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthButtonUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthButtonUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthButtonUI.getDefaultIcon(AbstractButton),Icon,default icon
javax.swing.plaf.synth.SynthButtonUI.getIcon(AbstractButton),Icon,an icon
javax.swing.plaf.synth.SynthButtonUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.synth.SynthButtonUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.synth.SynthButtonUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.synth.SynthButtonUI.getSizingIcon(AbstractButton),Icon,
javax.swing.plaf.synth.SynthButtonUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthCheckBoxMenuItemUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthCheckBoxMenuItemUI.getPropertyPrefix(),String,
"javax.swing.plaf.synth.SynthCheckBoxMenuItemUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthCheckBoxUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthCheckBoxUI.getPropertyPrefix(),String,
"javax.swing.plaf.synth.SynthCheckBoxUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthColorChooserUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthColorChooserUI.createDefaultChoosers(),AbstractColorChooserPanel[],
javax.swing.plaf.synth.SynthColorChooserUI.installDefaults(),void,
javax.swing.plaf.synth.SynthColorChooserUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthColorChooserUI.installListeners(),void,
javax.swing.plaf.synth.SynthColorChooserUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthColorChooserUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthColorChooserUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthColorChooserUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthColorChooserUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthColorChooserUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthColorChooserUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthComboBoxUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthComboBoxUI.installUI(JComponent),void,
javax.swing.plaf.synth.SynthComboBoxUI.installDefaults(),void,
javax.swing.plaf.synth.SynthComboBoxUI.installListeners(),void,
javax.swing.plaf.synth.SynthComboBoxUI.uninstallUI(JComponent),void,
javax.swing.plaf.synth.SynthComboBoxUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthComboBoxUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthComboBoxUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthComboBoxUI.createPopup(),ComboPopup,an instance of ComboPopup
javax.swing.plaf.synth.SynthComboBoxUI.createRenderer(),ListCellRenderer,a ListCellRender used for the combo box
javax.swing.plaf.synth.SynthComboBoxUI.createEditor(),ComboBoxEditor,a ComboBoxEditor used for the combo box
javax.swing.plaf.synth.SynthComboBoxUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthComboBoxUI.createArrowButton(),JButton,a button which represents the popup control
"javax.swing.plaf.synth.SynthComboBoxUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthComboBoxUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthComboBoxUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthComboBoxUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthComboBoxUI.paintCurrentValue(Graphics,Rectangle,boolean)",void,
javax.swing.plaf.synth.SynthComboBoxUI.getDefaultSize(),Dimension,the size of an empty display area
javax.swing.plaf.synth.SynthContext.getComponent(),JComponent,Hosting Component
javax.swing.plaf.synth.SynthContext.getRegion(),Region,Region of the hosting component
javax.swing.plaf.synth.SynthContext.getStyle(),SynthStyle,SynthStyle associated with the region.
javax.swing.plaf.synth.SynthContext.getComponentState(),int,State of Component
javax.swing.plaf.synth.SynthDesktopIconUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthDesktopIconUI.installComponents(),void,
javax.swing.plaf.synth.SynthDesktopIconUI.installListeners(),void,
javax.swing.plaf.synth.SynthDesktopIconUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthDesktopIconUI.installDefaults(),void,
javax.swing.plaf.synth.SynthDesktopIconUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthDesktopIconUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthDesktopIconUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthDesktopIconUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthDesktopIconUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthDesktopIconUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthDesktopIconUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthDesktopPaneUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthDesktopPaneUI.installListeners(),void,
javax.swing.plaf.synth.SynthDesktopPaneUI.installDefaults(),void,
javax.swing.plaf.synth.SynthDesktopPaneUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthDesktopPaneUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthDesktopPaneUI.installDesktopManager(),void,
javax.swing.plaf.synth.SynthDesktopPaneUI.uninstallDesktopManager(),void,
javax.swing.plaf.synth.SynthDesktopPaneUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthDesktopPaneUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthDesktopPaneUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthDesktopPaneUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthDesktopPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthDesktopPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthEditorPaneUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthEditorPaneUI.installDefaults(),void,
javax.swing.plaf.synth.SynthEditorPaneUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthEditorPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthEditorPaneUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthEditorPaneUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthEditorPaneUI.paint(SynthContext,Graphics)",void,
javax.swing.plaf.synth.SynthEditorPaneUI.paintBackground(Graphics),void,
"javax.swing.plaf.synth.SynthEditorPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthFormattedTextFieldUI.createUI(JComponent),ComponentUI,the UI
javax.swing.plaf.synth.SynthFormattedTextFieldUI.getPropertyPrefix(),String,"the name ""FormattedTextField"""
"javax.swing.plaf.synth.SynthFormattedTextFieldUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(SynthContext,Object,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(SynthContext,Object,Graphics,int,int,int,int,Object)",void,
"javax.swing.plaf.synth.SynthGraphicsUtils.layoutText(SynthContext,FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)",String,
"javax.swing.plaf.synth.SynthGraphicsUtils.computeStringWidth(SynthContext,Font,FontMetrics,String)",int,
"javax.swing.plaf.synth.SynthGraphicsUtils.getMinimumSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)",Dimension,
"javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)",Dimension,
javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumCharHeight(SynthContext),int,maximum height of the characters for the font from the passed in context.
"javax.swing.plaf.synth.SynthGraphicsUtils.getPreferredSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)",Dimension,
"javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,Rectangle,int)",void,
"javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,int,int,int)",void,
"javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,Icon,int,int,int,int,int,int,int)",void,
javax.swing.plaf.synth.SynthInternalFrameUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthInternalFrameUI.installDefaults(),void,
javax.swing.plaf.synth.SynthInternalFrameUI.installListeners(),void,
javax.swing.plaf.synth.SynthInternalFrameUI.uninstallComponents(),void,
javax.swing.plaf.synth.SynthInternalFrameUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthInternalFrameUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthInternalFrameUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthInternalFrameUI.createNorthPane(JInternalFrame),JComponent,
javax.swing.plaf.synth.SynthInternalFrameUI.createComponentListener(),ComponentListener,
"javax.swing.plaf.synth.SynthInternalFrameUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthInternalFrameUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthInternalFrameUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthInternalFrameUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthInternalFrameUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthLabelUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthLabelUI.installDefaults(JLabel),void,
javax.swing.plaf.synth.SynthLabelUI.uninstallDefaults(JLabel),void,
javax.swing.plaf.synth.SynthLabelUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthLabelUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
"javax.swing.plaf.synth.SynthLabelUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthLabelUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthLabelUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthLabelUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthLabelUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.synth.SynthLabelUI.getMinimumSize(JComponent),Dimension,getPreferredSize(c)
javax.swing.plaf.synth.SynthLabelUI.getMaximumSize(JComponent),Dimension,getPreferredSize(c)
javax.swing.plaf.synth.SynthLabelUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthListUI.createUI(JComponent),ComponentUI,the UI object
"javax.swing.plaf.synth.SynthListUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthListUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthListUI.installListeners(),void,
javax.swing.plaf.synth.SynthListUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthListUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthListUI.installDefaults(),void,
javax.swing.plaf.synth.SynthListUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthListUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthLookAndFeel.setStyleFactory(SynthStyleFactory),void,
javax.swing.plaf.synth.SynthLookAndFeel.getStyleFactory(),SynthStyleFactory,SynthStyleFactory
"javax.swing.plaf.synth.SynthLookAndFeel.getStyle(JComponent,Region)",SynthStyle,SynthStyle to use.
javax.swing.plaf.synth.SynthLookAndFeel.updateStyles(Component),void,
javax.swing.plaf.synth.SynthLookAndFeel.getRegion(JComponent),Region,Region corresponding to c
javax.swing.plaf.synth.SynthLookAndFeel.createUI(JComponent),ComponentUI,ComponentUI to use for c
"javax.swing.plaf.synth.SynthLookAndFeel.load(InputStream,Class&lt;?&gt;)",void,
javax.swing.plaf.synth.SynthLookAndFeel.load(URL),void,
javax.swing.plaf.synth.SynthLookAndFeel.initialize(),void,
javax.swing.plaf.synth.SynthLookAndFeel.uninitialize(),void,
javax.swing.plaf.synth.SynthLookAndFeel.getDefaults(),UIDefaults,Defaults table.
javax.swing.plaf.synth.SynthLookAndFeel.isSupportedLookAndFeel(),boolean,true.
javax.swing.plaf.synth.SynthLookAndFeel.isNativeLookAndFeel(),boolean,false
javax.swing.plaf.synth.SynthLookAndFeel.getDescription(),String,textual description of synth.
javax.swing.plaf.synth.SynthLookAndFeel.getName(),String,a short string identifying this look and feel.
javax.swing.plaf.synth.SynthLookAndFeel.getID(),String,a short string identifying this look and feel.
javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnAncestorChanged(),boolean,whether or not the UIs should update their SynthStyles from the SynthStyleFactory when the ancestor changed.
javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnEvent(PropertyChangeEvent),boolean,whether or not the UIs should update their styles
javax.swing.plaf.synth.SynthMenuBarUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthMenuBarUI.installDefaults(),void,
javax.swing.plaf.synth.SynthMenuBarUI.installListeners(),void,
javax.swing.plaf.synth.SynthMenuBarUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthMenuBarUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthMenuBarUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthMenuBarUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthMenuBarUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthMenuBarUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthMenuBarUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthMenuBarUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthMenuItemUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthMenuItemUI.uninstallUI(JComponent),void,
javax.swing.plaf.synth.SynthMenuItemUI.installDefaults(),void,
javax.swing.plaf.synth.SynthMenuItemUI.installListeners(),void,
javax.swing.plaf.synth.SynthMenuItemUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthMenuItemUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthMenuItemUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthMenuItemUI.getPreferredMenuItemSize(JComponent,Icon,Icon,int)",Dimension,
"javax.swing.plaf.synth.SynthMenuItemUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthMenuItemUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthMenuItemUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthMenuItemUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthMenuItemUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthMenuUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthMenuUI.installDefaults(),void,
javax.swing.plaf.synth.SynthMenuUI.installListeners(),void,
javax.swing.plaf.synth.SynthMenuUI.uninstallUI(JComponent),void,
javax.swing.plaf.synth.SynthMenuUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthMenuUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthMenuUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthMenuUI.getPreferredMenuItemSize(JComponent,Icon,Icon,int)",Dimension,
"javax.swing.plaf.synth.SynthMenuUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthMenuUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthMenuUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthMenuUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthMenuUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthOptionPaneUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthOptionPaneUI.installDefaults(),void,
javax.swing.plaf.synth.SynthOptionPaneUI.installListeners(),void,
javax.swing.plaf.synth.SynthOptionPaneUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthOptionPaneUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthOptionPaneUI.installComponents(),void,
javax.swing.plaf.synth.SynthOptionPaneUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthOptionPaneUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthOptionPaneUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthOptionPaneUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthOptionPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthOptionPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthOptionPaneUI.getSizeButtonsToSameWidth(),boolean,
javax.swing.plaf.synth.SynthOptionPaneUI.createMessageArea(),Container,
javax.swing.plaf.synth.SynthOptionPaneUI.createSeparator(),Container,
"javax.swing.plaf.synth.SynthPainter.paintArrowButtonBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintArrowButtonBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintArrowButtonForeground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintButtonBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintButtonBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintCheckBoxMenuItemBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintCheckBoxMenuItemBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintCheckBoxBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintCheckBoxBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintColorChooserBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintColorChooserBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintComboBoxBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintComboBoxBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintDesktopIconBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintDesktopIconBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintDesktopPaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintDesktopPaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintEditorPaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintEditorPaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintFileChooserBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintFileChooserBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintFormattedTextFieldBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintFormattedTextFieldBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintInternalFrameTitlePaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintInternalFrameTitlePaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintInternalFrameBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintInternalFrameBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintLabelBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintLabelBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintListBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintListBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintMenuBarBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintMenuBarBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintMenuItemBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintMenuItemBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintMenuBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintMenuBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintOptionPaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintOptionPaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintPanelBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintPanelBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintPasswordFieldBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintPasswordFieldBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintPopupMenuBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintPopupMenuBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintProgressBarBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintProgressBarBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintProgressBarBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintProgressBarBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintProgressBarForeground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintRadioButtonMenuItemBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintRadioButtonMenuItemBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintRadioButtonBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintRadioButtonBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintRootPaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintRootPaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarThumbBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarThumbBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollPaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintScrollPaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSeparatorBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSeparatorBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSeparatorBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSeparatorBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSeparatorForeground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderThumbBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderThumbBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderTrackBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderTrackBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderTrackBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSliderTrackBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSpinnerBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSpinnerBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerForeground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneDragDivider(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBackground(SynthContext,Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBorder(SynthContext,Graphics,int,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneContentBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneContentBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTableHeaderBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTableHeaderBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTableBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTableBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTextAreaBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTextAreaBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTextPaneBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTextPaneBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTextFieldBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTextFieldBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToggleButtonBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToggleButtonBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarContentBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarContentBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarContentBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarContentBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBackground(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBorder(SynthContext,Graphics,int,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolTipBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintToolTipBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTreeBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTreeBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTreeCellBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTreeCellBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintTreeCellFocus(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintViewportBackground(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthPainter.paintViewportBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthPanelUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthPanelUI.installUI(JComponent),void,
javax.swing.plaf.synth.SynthPanelUI.uninstallUI(JComponent),void,
javax.swing.plaf.synth.SynthPanelUI.installListeners(JPanel),void,
javax.swing.plaf.synth.SynthPanelUI.uninstallListeners(JPanel),void,
javax.swing.plaf.synth.SynthPanelUI.installDefaults(JPanel),void,
javax.swing.plaf.synth.SynthPanelUI.uninstallDefaults(JPanel),void,
javax.swing.plaf.synth.SynthPanelUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthPanelUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthPanelUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthPanelUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthPanelUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthPanelUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthPasswordFieldUI.createUI(JComponent),ComponentUI,the UI
javax.swing.plaf.synth.SynthPasswordFieldUI.getPropertyPrefix(),String,"the name (""PasswordField"")"
javax.swing.plaf.synth.SynthPasswordFieldUI.create(Element),View,the view
"javax.swing.plaf.synth.SynthPasswordFieldUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthPasswordFieldUI.installKeyboardActions(),void,
javax.swing.plaf.synth.SynthPopupMenuUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthPopupMenuUI.installDefaults(),void,
javax.swing.plaf.synth.SynthPopupMenuUI.installListeners(),void,
javax.swing.plaf.synth.SynthPopupMenuUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthPopupMenuUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthPopupMenuUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthPopupMenuUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthPopupMenuUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthPopupMenuUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthPopupMenuUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthPopupMenuUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthProgressBarUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthProgressBarUI.installListeners(),void,
javax.swing.plaf.synth.SynthProgressBarUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthProgressBarUI.installDefaults(),void,
javax.swing.plaf.synth.SynthProgressBarUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthProgressBarUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthProgressBarUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.synth.SynthProgressBarUI.getBox(Rectangle),Rectangle,"null if no box should be drawn; otherwise, returns the passed-in rectangle (if non-null) or a new rectangle"
javax.swing.plaf.synth.SynthProgressBarUI.setAnimationIndex(int),void,
"javax.swing.plaf.synth.SynthProgressBarUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthProgressBarUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthProgressBarUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthProgressBarUI.paintText(SynthContext,Graphics,String)",void,
"javax.swing.plaf.synth.SynthProgressBarUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthProgressBarUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthProgressBarUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.synth.SynthRadioButtonMenuItemUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthRadioButtonMenuItemUI.getPropertyPrefix(),String,
"javax.swing.plaf.synth.SynthRadioButtonMenuItemUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthRadioButtonUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthRadioButtonUI.getPropertyPrefix(),String,
javax.swing.plaf.synth.SynthRadioButtonUI.getSizingIcon(AbstractButton),Icon,
"javax.swing.plaf.synth.SynthRadioButtonUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthRootPaneUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthRootPaneUI.installDefaults(JRootPane),void,
javax.swing.plaf.synth.SynthRootPaneUI.uninstallDefaults(JRootPane),void,
javax.swing.plaf.synth.SynthRootPaneUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthRootPaneUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthRootPaneUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthRootPaneUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthRootPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthRootPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthScrollBarUI.createUI(JComponent),ComponentUI,
javax.swing.plaf.synth.SynthScrollBarUI.installDefaults(),void,
javax.swing.plaf.synth.SynthScrollBarUI.configureScrollBarColors(),void,
javax.swing.plaf.synth.SynthScrollBarUI.installListeners(),void,
javax.swing.plaf.synth.SynthScrollBarUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthScrollBarUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthScrollBarUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthScrollBarUI.getSupportsAbsolutePositioning(),boolean,true if a mouse gesture can absolutely position the thumb
"javax.swing.plaf.synth.SynthScrollBarUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthScrollBarUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthScrollBarUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthScrollBarUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthScrollBarUI.paintTrack(SynthContext,Graphics,Rectangle)",void,
"javax.swing.plaf.synth.SynthScrollBarUI.paintThumb(SynthContext,Graphics,Rectangle)",void,
javax.swing.plaf.synth.SynthScrollBarUI.getPreferredSize(JComponent),Dimension,the preferred size of a Basic JScrollBar
javax.swing.plaf.synth.SynthScrollBarUI.getMinimumThumbSize(),Dimension,The smallest acceptable size for the thumb.
javax.swing.plaf.synth.SynthScrollBarUI.createDecreaseButton(int),JButton,
javax.swing.plaf.synth.SynthScrollBarUI.createIncreaseButton(int),JButton,
javax.swing.plaf.synth.SynthScrollBarUI.setThumbRollover(boolean),void,
javax.swing.plaf.synth.SynthScrollBarUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthScrollPaneUI.createUI(JComponent),ComponentUI,the UI object
"javax.swing.plaf.synth.SynthScrollPaneUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthScrollPaneUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthScrollPaneUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthScrollPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthScrollPaneUI.installDefaults(JScrollPane),void,
javax.swing.plaf.synth.SynthScrollPaneUI.installListeners(JScrollPane),void,
javax.swing.plaf.synth.SynthScrollPaneUI.uninstallDefaults(JScrollPane),void,
javax.swing.plaf.synth.SynthScrollPaneUI.uninstallListeners(JComponent),void,
javax.swing.plaf.synth.SynthScrollPaneUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthScrollPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthSeparatorUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthSeparatorUI.installUI(JComponent),void,
javax.swing.plaf.synth.SynthSeparatorUI.uninstallUI(JComponent),void,
javax.swing.plaf.synth.SynthSeparatorUI.installDefaults(JSeparator),void,
javax.swing.plaf.synth.SynthSeparatorUI.uninstallDefaults(JSeparator),void,
javax.swing.plaf.synth.SynthSeparatorUI.installListeners(JSeparator),void,
javax.swing.plaf.synth.SynthSeparatorUI.uninstallListeners(JSeparator),void,
"javax.swing.plaf.synth.SynthSeparatorUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthSeparatorUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthSeparatorUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthSeparatorUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthSeparatorUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.synth.SynthSeparatorUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.synth.SynthSeparatorUI.getMaximumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.synth.SynthSeparatorUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthSeparatorUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthSliderUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthSliderUI.installDefaults(JSlider),void,
javax.swing.plaf.synth.SynthSliderUI.uninstallDefaults(JSlider),void,
javax.swing.plaf.synth.SynthSliderUI.installListeners(JSlider),void,
javax.swing.plaf.synth.SynthSliderUI.uninstallListeners(JSlider),void,
javax.swing.plaf.synth.SynthSliderUI.createTrackListener(JSlider),BasicSliderUI.TrackListener,
"javax.swing.plaf.synth.SynthSliderUI.getBaseline(JComponent,int,int)",int,baseline or a value &lt; 0 indicating there is no reasonable baseline
javax.swing.plaf.synth.SynthSliderUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.synth.SynthSliderUI.getMinimumSize(JComponent),Dimension,a Dimension object or null
javax.swing.plaf.synth.SynthSliderUI.calculateGeometry(),void,
javax.swing.plaf.synth.SynthSliderUI.layout(),void,
javax.swing.plaf.synth.SynthSliderUI.calculateThumbLocation(),void,
"javax.swing.plaf.synth.SynthSliderUI.setThumbLocation(int,int)",void,
javax.swing.plaf.synth.SynthSliderUI.xPositionForValue(int),int,
"javax.swing.plaf.synth.SynthSliderUI.yPositionForValue(int,int,int)",int,
javax.swing.plaf.synth.SynthSliderUI.valueForYPosition(int),int,
javax.swing.plaf.synth.SynthSliderUI.valueForXPosition(int),int,
javax.swing.plaf.synth.SynthSliderUI.getThumbSize(),Dimension,
javax.swing.plaf.synth.SynthSliderUI.recalculateIfInsetsChanged(),void,
javax.swing.plaf.synth.SynthSliderUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthSliderUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthSliderUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthSliderUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthSliderUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthSliderUI.paintThumb(SynthContext,Graphics,Rectangle)",void,
"javax.swing.plaf.synth.SynthSliderUI.paintTrack(SynthContext,Graphics,Rectangle)",void,
javax.swing.plaf.synth.SynthSliderUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthSpinnerUI.createUI(JComponent),ComponentUI,a new SynthSpinnerUI object
javax.swing.plaf.synth.SynthSpinnerUI.installListeners(),void,
javax.swing.plaf.synth.SynthSpinnerUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthSpinnerUI.installDefaults(),void,
javax.swing.plaf.synth.SynthSpinnerUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthSpinnerUI.createLayout(),LayoutManager,"a LayoutManager for the editor, next button, and previous button."
javax.swing.plaf.synth.SynthSpinnerUI.createPreviousButton(),Component,"a component that will replace the spinner's value with the previous value in the sequence, or null"
javax.swing.plaf.synth.SynthSpinnerUI.createNextButton(),Component,"a component that will replace the spinner's value with the next value in the sequence, or null"
javax.swing.plaf.synth.SynthSpinnerUI.createEditor(),JComponent,"the JSpinners editor JComponent, spinner.getEditor() by default"
"javax.swing.plaf.synth.SynthSpinnerUI.replaceEditor(JComponent,JComponent)",void,
javax.swing.plaf.synth.SynthSpinnerUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthSpinnerUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthSpinnerUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthSpinnerUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthSpinnerUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthSpinnerUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthSplitPaneUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthSplitPaneUI.installDefaults(),void,
javax.swing.plaf.synth.SynthSplitPaneUI.installListeners(),void,
javax.swing.plaf.synth.SynthSplitPaneUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthSplitPaneUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthSplitPaneUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthSplitPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthSplitPaneUI.createDefaultDivider(),BasicSplitPaneDivider,
javax.swing.plaf.synth.SynthSplitPaneUI.createDefaultNonContinuousLayoutDivider(),Component,
"javax.swing.plaf.synth.SynthSplitPaneUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthSplitPaneUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthSplitPaneUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthSplitPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthSplitPaneUI.finishedPaintingChildren(JSplitPane,Graphics)",void,
javax.swing.plaf.synth.SynthStyle.getGraphicsUtils(SynthContext),SynthGraphicsUtils,SynthGraphicsUtils
"javax.swing.plaf.synth.SynthStyle.getColor(SynthContext,ColorType)",Color,Color
"javax.swing.plaf.synth.SynthStyle.getColorForState(SynthContext,ColorType)",abstractColor,Color to render with
javax.swing.plaf.synth.SynthStyle.getFont(SynthContext),Font,Font to render with
javax.swing.plaf.synth.SynthStyle.getFontForState(SynthContext),abstractFont,Font to render with
"javax.swing.plaf.synth.SynthStyle.getInsets(SynthContext,Insets)",Insets,Sizing Insets.
javax.swing.plaf.synth.SynthStyle.getPainter(SynthContext),SynthPainter,SynthPainter to use
javax.swing.plaf.synth.SynthStyle.isOpaque(SynthContext),boolean,true if region is opaque.
"javax.swing.plaf.synth.SynthStyle.get(SynthContext,Object)",Object,Value of the named property
javax.swing.plaf.synth.SynthStyle.installDefaults(SynthContext),void,
javax.swing.plaf.synth.SynthStyle.uninstallDefaults(SynthContext),void,
"javax.swing.plaf.synth.SynthStyle.getInt(SynthContext,Object,int)",int,Value of the named property
"javax.swing.plaf.synth.SynthStyle.getBoolean(SynthContext,Object,boolean)",boolean,Value of the named property
"javax.swing.plaf.synth.SynthStyle.getIcon(SynthContext,Object)",Icon,"Value of the named property, or null if not specified"
"javax.swing.plaf.synth.SynthStyle.getString(SynthContext,Object,String)",String,Value of the named property
"javax.swing.plaf.synth.SynthStyleFactory.getStyle(JComponent,Region)",abstractSynthStyle,SynthStyle for region.
javax.swing.plaf.synth.SynthTabbedPaneUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthTabbedPaneUI.installDefaults(),void,
javax.swing.plaf.synth.SynthTabbedPaneUI.installListeners(),void,
javax.swing.plaf.synth.SynthTabbedPaneUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthTabbedPaneUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthTabbedPaneUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthTabbedPaneUI.createScrollButton(int),JButton,Widget for user to
javax.swing.plaf.synth.SynthTabbedPaneUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthTabbedPaneUI.createMouseListener(),MouseListener,
"javax.swing.plaf.synth.SynthTabbedPaneUI.getTabLabelShiftX(int,int,boolean)",int,
"javax.swing.plaf.synth.SynthTabbedPaneUI.getTabLabelShiftY(int,int,boolean)",int,
"javax.swing.plaf.synth.SynthTabbedPaneUI.update(Graphics,JComponent)",void,
javax.swing.plaf.synth.SynthTabbedPaneUI.getBaseline(int),int,baseline or a value &lt; 0 indicating there is no reasonable baseline
"javax.swing.plaf.synth.SynthTabbedPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthTabbedPaneUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTabbedPaneUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthTabbedPaneUI.paintTabArea(Graphics,int,int)",void,
javax.swing.plaf.synth.SynthTabbedPaneUI.setRolloverTab(int),void,
javax.swing.plaf.synth.SynthTabbedPaneUI.calculateMaxTabHeight(int),int,
"javax.swing.plaf.synth.SynthTabbedPaneUI.calculateTabWidth(int,int,FontMetrics)",int,
javax.swing.plaf.synth.SynthTabbedPaneUI.calculateMaxTabWidth(int),int,
"javax.swing.plaf.synth.SynthTabbedPaneUI.getTabInsets(int,int)",Insets,
javax.swing.plaf.synth.SynthTabbedPaneUI.getFontMetrics(),FontMetrics,
javax.swing.plaf.synth.SynthTabbedPaneUI.createLayoutManager(),LayoutManager,a layout manager object
javax.swing.plaf.synth.SynthTableHeaderUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthTableHeaderUI.installDefaults(),void,
javax.swing.plaf.synth.SynthTableHeaderUI.installListeners(),void,
javax.swing.plaf.synth.SynthTableHeaderUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthTableHeaderUI.uninstallListeners(),void,
"javax.swing.plaf.synth.SynthTableHeaderUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTableHeaderUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTableHeaderUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthTableHeaderUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthTableHeaderUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthTableHeaderUI.rolloverColumnUpdated(int,int)",void,
javax.swing.plaf.synth.SynthTableHeaderUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthTableUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthTableUI.installDefaults(),void,
javax.swing.plaf.synth.SynthTableUI.installListeners(),void,
javax.swing.plaf.synth.SynthTableUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthTableUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthTableUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthTableUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTableUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthTableUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTableUI.paint(SynthContext,Graphics)",void,
javax.swing.plaf.synth.SynthTableUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthTextAreaUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthTextAreaUI.installDefaults(),void,
javax.swing.plaf.synth.SynthTextAreaUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthTextAreaUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthTextAreaUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTextAreaUI.paint(SynthContext,Graphics)",void,
javax.swing.plaf.synth.SynthTextAreaUI.paintBackground(Graphics),void,
"javax.swing.plaf.synth.SynthTextAreaUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthTextAreaUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthTextFieldUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthTextFieldUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthTextFieldUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTextFieldUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthTextFieldUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthTextFieldUI.paintBackground(Graphics),void,
javax.swing.plaf.synth.SynthTextFieldUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthTextFieldUI.installDefaults(),void,
javax.swing.plaf.synth.SynthTextFieldUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthTextPaneUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthTextPaneUI.getPropertyPrefix(),String,"the name (""TextPane"")"
javax.swing.plaf.synth.SynthTextPaneUI.installUI(JComponent),void,
javax.swing.plaf.synth.SynthTextPaneUI.propertyChange(PropertyChangeEvent),void,
"javax.swing.plaf.synth.SynthTextPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthToggleButtonUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthToggleButtonUI.getPropertyPrefix(),String,
"javax.swing.plaf.synth.SynthToggleButtonUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthToolBarUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthToolBarUI.installDefaults(),void,
javax.swing.plaf.synth.SynthToolBarUI.installListeners(),void,
javax.swing.plaf.synth.SynthToolBarUI.uninstallListeners(),void,
javax.swing.plaf.synth.SynthToolBarUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthToolBarUI.installComponents(),void,
javax.swing.plaf.synth.SynthToolBarUI.uninstallComponents(),void,
javax.swing.plaf.synth.SynthToolBarUI.createLayout(),LayoutManager,a LayoutManager instance
javax.swing.plaf.synth.SynthToolBarUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthToolBarUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthToolBarUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthToolBarUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
javax.swing.plaf.synth.SynthToolBarUI.setBorderToNonRollover(Component),void,
javax.swing.plaf.synth.SynthToolBarUI.setBorderToRollover(Component),void,
javax.swing.plaf.synth.SynthToolBarUI.setBorderToNormal(Component),void,
"javax.swing.plaf.synth.SynthToolBarUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthToolBarUI.paintContent(SynthContext,Graphics,Rectangle)",void,
javax.swing.plaf.synth.SynthToolBarUI.paintDragWindow(Graphics),void,
javax.swing.plaf.synth.SynthToolBarUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthToolTipUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthToolTipUI.installDefaults(JComponent),void,
javax.swing.plaf.synth.SynthToolTipUI.uninstallDefaults(JComponent),void,
javax.swing.plaf.synth.SynthToolTipUI.installListeners(JComponent),void,
javax.swing.plaf.synth.SynthToolTipUI.uninstallListeners(JComponent),void,
javax.swing.plaf.synth.SynthToolTipUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthToolTipUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthToolTipUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthToolTipUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthToolTipUI.paint(SynthContext,Graphics)",void,
javax.swing.plaf.synth.SynthToolTipUI.getPreferredSize(JComponent),Dimension,
javax.swing.plaf.synth.SynthToolTipUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthTreeUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthTreeUI.getExpandedIcon(),Icon,
javax.swing.plaf.synth.SynthTreeUI.installDefaults(),void,
javax.swing.plaf.synth.SynthTreeUI.installListeners(),void,
javax.swing.plaf.synth.SynthTreeUI.getContext(JComponent),SynthContext,SynthContext describing component.
javax.swing.plaf.synth.SynthTreeUI.createDefaultCellEditor(),TreeCellEditor,
javax.swing.plaf.synth.SynthTreeUI.createDefaultCellRenderer(),TreeCellRenderer,
javax.swing.plaf.synth.SynthTreeUI.uninstallDefaults(),void,
javax.swing.plaf.synth.SynthTreeUI.uninstallListeners(),void,
"javax.swing.plaf.synth.SynthTreeUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTreeUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthTreeUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthTreeUI.paint(SynthContext,Graphics)",void,
"javax.swing.plaf.synth.SynthTreeUI.paintHorizontalPartOfLeg(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)",void,
"javax.swing.plaf.synth.SynthTreeUI.paintHorizontalLine(Graphics,JComponent,int,int,int)",void,
"javax.swing.plaf.synth.SynthTreeUI.paintVerticalPartOfLeg(Graphics,Rectangle,Insets,TreePath)",void,
"javax.swing.plaf.synth.SynthTreeUI.paintVerticalLine(Graphics,JComponent,int,int,int)",void,
"javax.swing.plaf.synth.SynthTreeUI.paintExpandControl(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)",void,
"javax.swing.plaf.synth.SynthTreeUI.drawCentered(Component,Graphics,Icon,int,int)",void,
javax.swing.plaf.synth.SynthTreeUI.propertyChange(PropertyChangeEvent),void,
javax.swing.plaf.synth.SynthTreeUI.paintDropLine(Graphics),void,
"javax.swing.plaf.synth.SynthTreeUI.getRowX(int,int)",int,amount to indent the given row.
javax.swing.plaf.synth.SynthViewportUI.createUI(JComponent),ComponentUI,the UI object
javax.swing.plaf.synth.SynthViewportUI.installUI(JComponent),void,
javax.swing.plaf.synth.SynthViewportUI.uninstallUI(JComponent),void,
javax.swing.plaf.synth.SynthViewportUI.installDefaults(JComponent),void,
javax.swing.plaf.synth.SynthViewportUI.installListeners(JComponent),void,
javax.swing.plaf.synth.SynthViewportUI.uninstallListeners(JComponent),void,
javax.swing.plaf.synth.SynthViewportUI.uninstallDefaults(JComponent),void,
javax.swing.plaf.synth.SynthViewportUI.getContext(JComponent),SynthContext,SynthContext describing component.
"javax.swing.plaf.synth.SynthViewportUI.update(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthViewportUI.paintBorder(SynthContext,Graphics,int,int,int,int)",void,
"javax.swing.plaf.synth.SynthViewportUI.paint(Graphics,JComponent)",void,
"javax.swing.plaf.synth.SynthViewportUI.paint(SynthContext,Graphics)",void,
javax.swing.plaf.synth.SynthViewportUI.propertyChange(PropertyChangeEvent),void,
javax.swing.table.AbstractTableModel.getColumnName(int),String,a string containing the default name of column
javax.swing.table.AbstractTableModel.findColumn(String),int,"the column with columnName, or -1 if not found"
javax.swing.table.AbstractTableModel.getColumnClass(int),Class&lt;?&gt;,the Object.class
"javax.swing.table.AbstractTableModel.isCellEditable(int,int)",boolean,false
"javax.swing.table.AbstractTableModel.setValueAt(Object,int,int)",void,
javax.swing.table.AbstractTableModel.addTableModelListener(TableModelListener),void,
javax.swing.table.AbstractTableModel.removeTableModelListener(TableModelListener),void,
javax.swing.table.AbstractTableModel.getTableModelListeners(),TableModelListener[],all of this model's TableModelListeners or an empty array if no table model listeners are currently registered
javax.swing.table.AbstractTableModel.fireTableDataChanged(),void,
javax.swing.table.AbstractTableModel.fireTableStructureChanged(),void,
"javax.swing.table.AbstractTableModel.fireTableRowsInserted(int,int)",void,
"javax.swing.table.AbstractTableModel.fireTableRowsUpdated(int,int)",void,
"javax.swing.table.AbstractTableModel.fireTableRowsDeleted(int,int)",void,
"javax.swing.table.AbstractTableModel.fireTableCellUpdated(int,int)",void,
javax.swing.table.AbstractTableModel.fireTableChanged(TableModelEvent),void,
javax.swing.table.AbstractTableModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added"
javax.swing.table.DefaultTableCellRenderer.setForeground(Color),void,
javax.swing.table.DefaultTableCellRenderer.setBackground(Color),void,
javax.swing.table.DefaultTableCellRenderer.updateUI(),void,
"javax.swing.table.DefaultTableCellRenderer.getTableCellRendererComponent(JTable,Object,boolean,boolean,int,int)",Component,the default table cell renderer
javax.swing.table.DefaultTableCellRenderer.isOpaque(),boolean,true if this component is completely opaque
javax.swing.table.DefaultTableCellRenderer.invalidate(),void,
javax.swing.table.DefaultTableCellRenderer.validate(),void,
javax.swing.table.DefaultTableCellRenderer.revalidate(),void,
"javax.swing.table.DefaultTableCellRenderer.repaint(long,int,int,int,int)",void,
javax.swing.table.DefaultTableCellRenderer.repaint(Rectangle),void,
javax.swing.table.DefaultTableCellRenderer.repaint(),void,
"javax.swing.table.DefaultTableCellRenderer.firePropertyChange(String,Object,Object)",void,
"javax.swing.table.DefaultTableCellRenderer.firePropertyChange(String,boolean,boolean)",void,
javax.swing.table.DefaultTableCellRenderer.setValue(Object),void,
javax.swing.table.DefaultTableColumnModel.addColumn(TableColumn),void,
javax.swing.table.DefaultTableColumnModel.removeColumn(TableColumn),void,
"javax.swing.table.DefaultTableColumnModel.moveColumn(int,int)",void,
javax.swing.table.DefaultTableColumnModel.setColumnMargin(int),void,
javax.swing.table.DefaultTableColumnModel.getColumnCount(),int,the number of columns in the tableColumns array
javax.swing.table.DefaultTableColumnModel.getColumns(),Enumeration&lt;TableColumn&gt;,an Enumeration of the columns in the model
javax.swing.table.DefaultTableColumnModel.getColumnIndex(Object),int,the index of the first column in the tableColumns array whose identifier is equal to identifier
javax.swing.table.DefaultTableColumnModel.getColumn(int),TableColumn,the TableColumn object for the column at columnIndex
javax.swing.table.DefaultTableColumnModel.getColumnMargin(),int,the maximum width for the TableColumn
javax.swing.table.DefaultTableColumnModel.getColumnIndexAtX(int),int,the index of the column or -1 if no column is found
javax.swing.table.DefaultTableColumnModel.getTotalColumnWidth(),int,the totalColumnWidth property
javax.swing.table.DefaultTableColumnModel.setSelectionModel(ListSelectionModel),void,
javax.swing.table.DefaultTableColumnModel.getSelectionModel(),ListSelectionModel,the object that provides column selection state. Or null if row selection is not allowed.
javax.swing.table.DefaultTableColumnModel.setColumnSelectionAllowed(boolean),void,
javax.swing.table.DefaultTableColumnModel.getColumnSelectionAllowed(),boolean,the columnSelectionAllowed property
javax.swing.table.DefaultTableColumnModel.getSelectedColumns(),int[],an array of selected columns or an empty array if nothing is selected or the selectionModel is null
javax.swing.table.DefaultTableColumnModel.getSelectedColumnCount(),int,the number of columns selected
javax.swing.table.DefaultTableColumnModel.addColumnModelListener(TableColumnModelListener),void,
javax.swing.table.DefaultTableColumnModel.removeColumnModelListener(TableColumnModelListener),void,
javax.swing.table.DefaultTableColumnModel.getColumnModelListeners(),TableColumnModelListener[],all of this default table column model's ColumnModelListeners or an empty array if no column model listeners are currently registered
javax.swing.table.DefaultTableColumnModel.fireColumnAdded(TableColumnModelEvent),void,
javax.swing.table.DefaultTableColumnModel.fireColumnRemoved(TableColumnModelEvent),void,
javax.swing.table.DefaultTableColumnModel.fireColumnMoved(TableColumnModelEvent),void,
javax.swing.table.DefaultTableColumnModel.fireColumnSelectionChanged(ListSelectionEvent),void,
javax.swing.table.DefaultTableColumnModel.fireColumnMarginChanged(),void,
javax.swing.table.DefaultTableColumnModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this model, or an empty array if no such listeners have been added"
javax.swing.table.DefaultTableColumnModel.propertyChange(PropertyChangeEvent),void,
javax.swing.table.DefaultTableColumnModel.valueChanged(ListSelectionEvent),void,
javax.swing.table.DefaultTableColumnModel.createSelectionModel(),ListSelectionModel,
javax.swing.table.DefaultTableColumnModel.recalcWidthCache(),void,
javax.swing.table.DefaultTableModel.getDataVector(),Vector,the vector of vectors containing the tables data values
"javax.swing.table.DefaultTableModel.setDataVector(Vector,Vector)",void,
"javax.swing.table.DefaultTableModel.setDataVector(Object[][],Object[])",void,
javax.swing.table.DefaultTableModel.newDataAvailable(TableModelEvent),void,
javax.swing.table.DefaultTableModel.newRowsAdded(TableModelEvent),void,
javax.swing.table.DefaultTableModel.rowsRemoved(TableModelEvent),void,
javax.swing.table.DefaultTableModel.setNumRows(int),void,
javax.swing.table.DefaultTableModel.setRowCount(int),void,
javax.swing.table.DefaultTableModel.addRow(Vector),void,
javax.swing.table.DefaultTableModel.addRow(Object[]),void,
"javax.swing.table.DefaultTableModel.insertRow(int,Vector)",void,
"javax.swing.table.DefaultTableModel.insertRow(int,Object[])",void,
"javax.swing.table.DefaultTableModel.moveRow(int,int,int)",void,
javax.swing.table.DefaultTableModel.removeRow(int),void,
javax.swing.table.DefaultTableModel.setColumnIdentifiers(Vector),void,
javax.swing.table.DefaultTableModel.setColumnIdentifiers(Object[]),void,
javax.swing.table.DefaultTableModel.setColumnCount(int),void,
javax.swing.table.DefaultTableModel.addColumn(Object),void,
"javax.swing.table.DefaultTableModel.addColumn(Object,Vector)",void,
"javax.swing.table.DefaultTableModel.addColumn(Object,Object[])",void,
javax.swing.table.DefaultTableModel.getRowCount(),int,the number of rows in the model
javax.swing.table.DefaultTableModel.getColumnCount(),int,the number of columns in the model
javax.swing.table.DefaultTableModel.getColumnName(int),String,"a name for this column using the string value of the appropriate member in columnIdentifiers. If columnIdentifiers does not have an entry for this index, returns the default name provided by the superclass."
"javax.swing.table.DefaultTableModel.isCellEditable(int,int)",boolean,true
"javax.swing.table.DefaultTableModel.getValueAt(int,int)",Object,the value Object at the specified cell
"javax.swing.table.DefaultTableModel.setValueAt(Object,int,int)",void,
javax.swing.table.DefaultTableModel.convertToVector(Object[]),Vector,"the new vector; if anArray is null, returns null"
javax.swing.table.DefaultTableModel.convertToVector(Object[][]),Vector,"the new vector of vectors; if anArray is null, returns null"
javax.swing.table.JTableHeader.setTable(JTable),void,
javax.swing.table.JTableHeader.getTable(),JTable,the table property
javax.swing.table.JTableHeader.setReorderingAllowed(boolean),void,
javax.swing.table.JTableHeader.getReorderingAllowed(),boolean,the reorderingAllowed property
javax.swing.table.JTableHeader.setResizingAllowed(boolean),void,
javax.swing.table.JTableHeader.getResizingAllowed(),boolean,the resizingAllowed property
javax.swing.table.JTableHeader.getDraggedColumn(),TableColumn,"the dragged column, if a drag is in process, otherwise returns null"
javax.swing.table.JTableHeader.getDraggedDistance(),int,"the column's horizontal distance from its original position, if a drag is in process, otherwise the return value is meaningless"
javax.swing.table.JTableHeader.getResizingColumn(),TableColumn,"the resizing column, if a resize is in process, otherwise returns null"
javax.swing.table.JTableHeader.setUpdateTableInRealTime(boolean),void,
javax.swing.table.JTableHeader.getUpdateTableInRealTime(),boolean,
javax.swing.table.JTableHeader.setDefaultRenderer(TableCellRenderer),void,
javax.swing.table.JTableHeader.getDefaultRenderer(),TableCellRenderer,the default renderer
javax.swing.table.JTableHeader.columnAtPoint(Point),int,"the index of the column that point lies in, or -1 if it lies out of bounds"
javax.swing.table.JTableHeader.getHeaderRect(int),Rectangle,the rectangle containing the header tile at column
javax.swing.table.JTableHeader.getToolTipText(MouseEvent),String,the tool tip for this component
javax.swing.table.JTableHeader.getUI(),TableHeaderUI,the TableHeaderUI object that renders this component
javax.swing.table.JTableHeader.setUI(TableHeaderUI),void,
javax.swing.table.JTableHeader.updateUI(),void,
javax.swing.table.JTableHeader.getUIClassID(),String,"the string ""TableHeaderUI"""
javax.swing.table.JTableHeader.setColumnModel(TableColumnModel),void,
javax.swing.table.JTableHeader.getColumnModel(),TableColumnModel,the columnModel property
javax.swing.table.JTableHeader.columnAdded(TableColumnModelEvent),void,
javax.swing.table.JTableHeader.columnRemoved(TableColumnModelEvent),void,
javax.swing.table.JTableHeader.columnMoved(TableColumnModelEvent),void,
javax.swing.table.JTableHeader.columnMarginChanged(ChangeEvent),void,
javax.swing.table.JTableHeader.columnSelectionChanged(ListSelectionEvent),void,
javax.swing.table.JTableHeader.createDefaultColumnModel(),TableColumnModel,the default column model object
javax.swing.table.JTableHeader.createDefaultRenderer(),TableCellRenderer,the default table column renderer
javax.swing.table.JTableHeader.initializeLocalVars(),void,
javax.swing.table.JTableHeader.resizeAndRepaint(),void,
javax.swing.table.JTableHeader.setDraggedColumn(TableColumn),void,
javax.swing.table.JTableHeader.setDraggedDistance(int),void,
javax.swing.table.JTableHeader.setResizingColumn(TableColumn),void,
javax.swing.table.JTableHeader.paramString(),String,a string representation of this JTableHeader
javax.swing.table.JTableHeader.getAccessibleContext(),AccessibleContext,an AccessibleJTableHeader that serves as the AccessibleContext of this JTableHeader
javax.swing.table.TableColumn.setModelIndex(int),void,
javax.swing.table.TableColumn.getModelIndex(),int,the modelIndex property
javax.swing.table.TableColumn.setIdentifier(Object),void,
javax.swing.table.TableColumn.getIdentifier(),Object,the identifier property
javax.swing.table.TableColumn.setHeaderValue(Object),void,
javax.swing.table.TableColumn.getHeaderValue(),Object,the headerValue property
javax.swing.table.TableColumn.setHeaderRenderer(TableCellRenderer),void,
javax.swing.table.TableColumn.getHeaderRenderer(),TableCellRenderer,the headerRenderer property
javax.swing.table.TableColumn.setCellRenderer(TableCellRenderer),void,
javax.swing.table.TableColumn.getCellRenderer(),TableCellRenderer,the cellRenderer property
javax.swing.table.TableColumn.setCellEditor(TableCellEditor),void,
javax.swing.table.TableColumn.getCellEditor(),TableCellEditor,the cellEditor property
javax.swing.table.TableColumn.setWidth(int),void,
javax.swing.table.TableColumn.getWidth(),int,the width property
javax.swing.table.TableColumn.setPreferredWidth(int),void,
javax.swing.table.TableColumn.getPreferredWidth(),int,the preferredWidth property
javax.swing.table.TableColumn.setMinWidth(int),void,
javax.swing.table.TableColumn.getMinWidth(),int,the minWidth property
javax.swing.table.TableColumn.setMaxWidth(int),void,
javax.swing.table.TableColumn.getMaxWidth(),int,the maxWidth property
javax.swing.table.TableColumn.setResizable(boolean),void,
javax.swing.table.TableColumn.getResizable(),boolean,the isResizable property
javax.swing.table.TableColumn.sizeWidthToFit(),void,
javax.swing.table.TableColumn.disableResizedPosting(),void,
javax.swing.table.TableColumn.enableResizedPosting(),void,
javax.swing.table.TableColumn.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.table.TableColumn.removePropertyChangeListener(PropertyChangeListener),void,
javax.swing.table.TableColumn.getPropertyChangeListeners(),PropertyChangeListener[],all of the PropertyChangeListeners added or an empty array if no listeners have been added
javax.swing.table.TableColumn.createDefaultHeaderRenderer(),TableCellRenderer,the default header renderer
javax.swing.table.TableRowSorter.setModel(M),void,
javax.swing.table.TableRowSorter.setStringConverter(TableStringConverter),void,
javax.swing.table.TableRowSorter.getStringConverter(),TableStringConverter,object responsible for converting values to strings.
javax.swing.table.TableRowSorter.getComparator(int),Comparator&lt;?&gt;,the Comparator for the specified column
javax.swing.table.TableRowSorter.useToString(int),boolean,
"javax.swing.table.TableStringConverter.toString(TableModel,int,int)",abstractString,the string representation. This should never return null.
javax.swing.text.AbstractDocument.getDocumentProperties(),"Dictionary&lt;Object,Object&gt;",a non-null Dictionary
"javax.swing.text.AbstractDocument.setDocumentProperties(Dictionary&lt;Object,Object&gt;)",void,
javax.swing.text.AbstractDocument.fireInsertUpdate(DocumentEvent),void,
javax.swing.text.AbstractDocument.fireChangedUpdate(DocumentEvent),void,
javax.swing.text.AbstractDocument.fireRemoveUpdate(DocumentEvent),void,
javax.swing.text.AbstractDocument.fireUndoableEditUpdate(UndoableEditEvent),void,
javax.swing.text.AbstractDocument.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added"
javax.swing.text.AbstractDocument.getAsynchronousLoadPriority(),int,"the asynchronous loading priority, or -1 if the document should not be loaded asynchronously"
javax.swing.text.AbstractDocument.setAsynchronousLoadPriority(int),void,
javax.swing.text.AbstractDocument.setDocumentFilter(DocumentFilter),void,
javax.swing.text.AbstractDocument.getDocumentFilter(),DocumentFilter,the DocumentFilter
javax.swing.text.AbstractDocument.render(Runnable),void,
javax.swing.text.AbstractDocument.getLength(),int,the length &gt;= 0
javax.swing.text.AbstractDocument.addDocumentListener(DocumentListener),void,
javax.swing.text.AbstractDocument.removeDocumentListener(DocumentListener),void,
javax.swing.text.AbstractDocument.getDocumentListeners(),DocumentListener[],all of this document's DocumentListeners or an empty array if no document listeners are currently registered
javax.swing.text.AbstractDocument.addUndoableEditListener(UndoableEditListener),void,
javax.swing.text.AbstractDocument.removeUndoableEditListener(UndoableEditListener),void,
javax.swing.text.AbstractDocument.getUndoableEditListeners(),UndoableEditListener[],all of this document's UndoableEditListeners or an empty array if no undoable edit listeners are currently registered
javax.swing.text.AbstractDocument.getProperty(Object),Object,the value of this property or null
"javax.swing.text.AbstractDocument.putProperty(Object,Object)",void,
"javax.swing.text.AbstractDocument.remove(int,int)",void,
"javax.swing.text.AbstractDocument.replace(int,int,String,AttributeSet)",void,
"javax.swing.text.AbstractDocument.insertString(int,String,AttributeSet)",void,
"javax.swing.text.AbstractDocument.getText(int,int)",String,the text
"javax.swing.text.AbstractDocument.getText(int,int,Segment)",void,
javax.swing.text.AbstractDocument.createPosition(int),Position,the position
javax.swing.text.AbstractDocument.getStartPosition(),Position,the position
javax.swing.text.AbstractDocument.getEndPosition(),Position,the position
javax.swing.text.AbstractDocument.getRootElements(),Element[],the root element
javax.swing.text.AbstractDocument.getDefaultRootElement(),abstractElement,the root element
javax.swing.text.AbstractDocument.getBidiRootElement(),Element,
javax.swing.text.AbstractDocument.getParagraphElement(int),abstractElement,the element
javax.swing.text.AbstractDocument.getAttributeContext(),AbstractDocument.AttributeContext,the context
"javax.swing.text.AbstractDocument.insertUpdate(AbstractDocument.DefaultDocumentEvent,AttributeSet)",void,
javax.swing.text.AbstractDocument.removeUpdate(AbstractDocument.DefaultDocumentEvent),void,
javax.swing.text.AbstractDocument.postRemoveUpdate(AbstractDocument.DefaultDocumentEvent),void,
javax.swing.text.AbstractDocument.dump(PrintStream),void,
javax.swing.text.AbstractDocument.getContent(),AbstractDocument.Content,the content
"javax.swing.text.AbstractDocument.createLeafElement(Element,AttributeSet,int,int)",Element,the new element
"javax.swing.text.AbstractDocument.createBranchElement(Element,AttributeSet)",Element,the element
javax.swing.text.AbstractDocument.getCurrentWriter(),Thread,the thread actively modifying the document or null if there are no modifications in progress
javax.swing.text.AbstractDocument.writeLock(),void,
javax.swing.text.AbstractDocument.writeUnlock(),void,
javax.swing.text.AbstractDocument.readLock(),void,
javax.swing.text.AbstractDocument.readUnlock(),void,
javax.swing.text.AbstractDocument.ElementEdit.getElement(),Element,the element
javax.swing.text.AbstractDocument.ElementEdit.getIndex(),int,the index &gt;= 0
javax.swing.text.AbstractDocument.ElementEdit.getChildrenRemoved(),Element[],the list
javax.swing.text.AbstractDocument.ElementEdit.getChildrenAdded(),Element[],the list
javax.swing.text.AbstractDocument.ElementEdit.redo(),void,
javax.swing.text.AbstractDocument.ElementEdit.undo(),void,
javax.swing.text.AbstractWriter.getStartOffset(),int,
javax.swing.text.AbstractWriter.getEndOffset(),int,
javax.swing.text.AbstractWriter.getElementIterator(),ElementIterator,the ElementIterator.
javax.swing.text.AbstractWriter.getWriter(),Writer,
javax.swing.text.AbstractWriter.getDocument(),Document,the Document.
javax.swing.text.AbstractWriter.inRange(Element),boolean,boolean that indicates whether the element is in the range.
javax.swing.text.AbstractWriter.write(),abstractvoid,
javax.swing.text.AbstractWriter.getText(Element),String,the text as a String
javax.swing.text.AbstractWriter.text(Element),void,
javax.swing.text.AbstractWriter.setLineLength(int),void,
javax.swing.text.AbstractWriter.getLineLength(),int,
javax.swing.text.AbstractWriter.setCurrentLineLength(int),void,
javax.swing.text.AbstractWriter.getCurrentLineLength(),int,
javax.swing.text.AbstractWriter.isLineEmpty(),boolean,
javax.swing.text.AbstractWriter.setCanWrapLines(boolean),void,
javax.swing.text.AbstractWriter.getCanWrapLines(),boolean,
javax.swing.text.AbstractWriter.setIndentSpace(int),void,
javax.swing.text.AbstractWriter.getIndentSpace(),int,
javax.swing.text.AbstractWriter.setLineSeparator(String),void,
javax.swing.text.AbstractWriter.getLineSeparator(),String,
javax.swing.text.AbstractWriter.incrIndent(),void,
javax.swing.text.AbstractWriter.decrIndent(),void,
javax.swing.text.AbstractWriter.getIndentLevel(),int,
javax.swing.text.AbstractWriter.indent(),void,
javax.swing.text.AbstractWriter.write(char),void,
javax.swing.text.AbstractWriter.write(String),void,
javax.swing.text.AbstractWriter.writeLineSeparator(),void,
"javax.swing.text.AbstractWriter.write(char[],int,int)",void,
javax.swing.text.AbstractWriter.writeAttributes(AttributeSet),void,
"javax.swing.text.AbstractWriter.output(char[],int,int)",void,
javax.swing.text.AsyncBoxView.getMajorAxis(),int,
javax.swing.text.AsyncBoxView.getMinorAxis(),int,
javax.swing.text.AsyncBoxView.getTopInset(),float,
javax.swing.text.AsyncBoxView.setTopInset(float),void,
javax.swing.text.AsyncBoxView.getBottomInset(),float,
javax.swing.text.AsyncBoxView.setBottomInset(float),void,
javax.swing.text.AsyncBoxView.getLeftInset(),float,
javax.swing.text.AsyncBoxView.setLeftInset(float),void,
javax.swing.text.AsyncBoxView.getRightInset(),float,
javax.swing.text.AsyncBoxView.setRightInset(float),void,
javax.swing.text.AsyncBoxView.getInsetSpan(int),float,
javax.swing.text.AsyncBoxView.setEstimatedMajorSpan(boolean),void,
javax.swing.text.AsyncBoxView.getEstimatedMajorSpan(),boolean,
javax.swing.text.AsyncBoxView.getChildState(int),AsyncBoxView.ChildState,
javax.swing.text.AsyncBoxView.getLayoutQueue(),LayoutQueue,
javax.swing.text.AsyncBoxView.createChildState(View),AsyncBoxView.ChildState,
"javax.swing.text.AsyncBoxView.majorRequirementChange(AsyncBoxView.ChildState,float)",void,
javax.swing.text.AsyncBoxView.minorRequirementChange(AsyncBoxView.ChildState),void,
javax.swing.text.AsyncBoxView.flushRequirementChanges(),void,
"javax.swing.text.AsyncBoxView.replace(int,int,View[])",void,
javax.swing.text.AsyncBoxView.loadChildren(ViewFactory),void,
"javax.swing.text.AsyncBoxView.getViewIndexAtPosition(int,Position.Bias)",int,"index of the view representing the given position, or -1 if no view represents that position"
"javax.swing.text.AsyncBoxView.updateLayout(DocumentEvent.ElementChange,DocumentEvent,Shape)",void,
javax.swing.text.AsyncBoxView.setParent(View),void,
"javax.swing.text.AsyncBoxView.preferenceChanged(View,boolean,boolean)",void,
"javax.swing.text.AsyncBoxView.setSize(float,float)",void,
"javax.swing.text.AsyncBoxView.paint(Graphics,Shape)",void,
javax.swing.text.AsyncBoxView.getPreferredSpan(int),float,"the span the view would like to be rendered into &gt;= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.AsyncBoxView.getMinimumSpan(int),float,"the span the view would like to be rendered into &gt;= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.AsyncBoxView.getMaximumSpan(int),float,"the span the view would like to be rendered into &gt;= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.AsyncBoxView.getViewCount(),int,the number of views &gt;= 0
javax.swing.text.AsyncBoxView.getView(int),View,the view
"javax.swing.text.AsyncBoxView.getChildAllocation(int,Shape)",Shape,the allocation to the child
"javax.swing.text.AsyncBoxView.getViewIndex(int,Position.Bias)",int,"index of the view representing the given position, or -1 if no view represents that position"
"javax.swing.text.AsyncBoxView.modelToView(int,Shape,Position.Bias)",Shape,the bounding box of the given position is returned
"javax.swing.text.AsyncBoxView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point in the view &gt;= 0. The biasReturn argument will be filled in to indicate that the point given is closer to the next character in the model or the previous character in the model.
"javax.swing.text.AsyncBoxView.getNextVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])",int,
javax.swing.text.BoxView.getAxis(),int,"the major axis of the box, either View.X_AXIS or View.Y_AXIS"
javax.swing.text.BoxView.setAxis(int),void,
javax.swing.text.BoxView.layoutChanged(int),void,
javax.swing.text.BoxView.isLayoutValid(int),boolean,
"javax.swing.text.BoxView.paintChild(Graphics,Rectangle,int)",void,
"javax.swing.text.BoxView.replace(int,int,View[])",void,
"javax.swing.text.BoxView.forwardUpdate(DocumentEvent.ElementChange,DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.BoxView.preferenceChanged(View,boolean,boolean)",void,
javax.swing.text.BoxView.getResizeWeight(int),int,the weight
"javax.swing.text.BoxView.setSize(float,float)",void,
"javax.swing.text.BoxView.paint(Graphics,Shape)",void,
"javax.swing.text.BoxView.getChildAllocation(int,Shape)",Shape,the allocation to the child; or null if a is null; or null if the layout is invalid
"javax.swing.text.BoxView.modelToView(int,Shape,Position.Bias)",Shape,the bounding box of the given position
"javax.swing.text.BoxView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point in the view &gt;= 0
javax.swing.text.BoxView.getAlignment(int),float,the desired alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f; this should be a value between 0.0 and 1.0 where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin; an alignment of 0.5 would be the center of the view
javax.swing.text.BoxView.getPreferredSpan(int),float,"the span the view would like to be rendered into &gt;= 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
javax.swing.text.BoxView.getMinimumSpan(int),float,"the span the view would like to be rendered into &gt;= 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
javax.swing.text.BoxView.getMaximumSpan(int),float,"the span the view would like to be rendered into &gt;= 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
javax.swing.text.BoxView.isAllocationValid(),boolean,true if allocations still valid
"javax.swing.text.BoxView.isBefore(int,int,Rectangle)",boolean,true if the point lies before the region else false
"javax.swing.text.BoxView.isAfter(int,int,Rectangle)",boolean,true if the point lies after the region else false
"javax.swing.text.BoxView.getViewAtPoint(int,int,Rectangle)",View,the view
"javax.swing.text.BoxView.childAllocation(int,Rectangle)",void,
"javax.swing.text.BoxView.layout(int,int)",void,
javax.swing.text.BoxView.getWidth(),int,the current width of the box
javax.swing.text.BoxView.getHeight(),int,the current height of the box
"javax.swing.text.BoxView.layoutMajorAxis(int,int,int[],int[])",void,
"javax.swing.text.BoxView.layoutMinorAxis(int,int,int[],int[])",void,
"javax.swing.text.BoxView.calculateMajorAxisRequirements(int,SizeRequirements)",SizeRequirements,the newly initialized SizeRequirements object
"javax.swing.text.BoxView.calculateMinorAxisRequirements(int,SizeRequirements)",SizeRequirements,the newly initialized SizeRequirements object
"javax.swing.text.BoxView.baselineLayout(int,int,int[],int[])",void,
"javax.swing.text.BoxView.baselineRequirements(int,SizeRequirements)",SizeRequirements,the newly initialized SizeRequirements object
"javax.swing.text.BoxView.getOffset(int,int)",int,the offset (location) for the specified child
"javax.swing.text.BoxView.getSpan(int,int)",int,the span (width or height) of the specified child
"javax.swing.text.BoxView.flipEastAndWestAtEnds(int,Position.Bias)",boolean,true if the Views surrounding the View responding for rendering position and bias are layed out in descending order; otherwise false
javax.swing.text.ComponentView.createComponent(),Component,
javax.swing.text.ComponentView.getComponent(),Component,
"javax.swing.text.ComponentView.paint(Graphics,Shape)",void,
javax.swing.text.ComponentView.getPreferredSpan(int),float,"the span the view would like to be rendered into &gt;=0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.ComponentView.getMinimumSpan(int),float,"the span the view would like to be rendered into &gt;=0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.ComponentView.getMaximumSpan(int),float,"the span the view would like to be rendered into &gt;=0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.ComponentView.getAlignment(int),float,the desired alignment. This should be a value between 0.0 and 1.0 where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin. An alignment of 0.5 would be the center of the view.
javax.swing.text.ComponentView.setParent(View),void,
"javax.swing.text.ComponentView.modelToView(int,Shape,Position.Bias)",Shape,
"javax.swing.text.ComponentView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point in the view
javax.swing.text.CompositeView.loadChildren(ViewFactory),void,
javax.swing.text.CompositeView.setParent(View),void,
javax.swing.text.CompositeView.getViewCount(),int,the number of views &gt;= 0
javax.swing.text.CompositeView.getView(int),View,the view at index n
"javax.swing.text.CompositeView.replace(int,int,View[])",void,
"javax.swing.text.CompositeView.getChildAllocation(int,Shape)",Shape,the allocation to the child
"javax.swing.text.CompositeView.modelToView(int,Shape,Position.Bias)",Shape,the bounding box of the given position
"javax.swing.text.CompositeView.modelToView(int,Position.Bias,int,Position.Bias,Shape)",Shape,the bounding box of the given position is returned
"javax.swing.text.CompositeView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point in the view &gt;= 0
"javax.swing.text.CompositeView.getNextVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])",int,
"javax.swing.text.CompositeView.getViewIndex(int,Position.Bias)",int,"index of the view representing the given position, or -1 if no view represents that position"
"javax.swing.text.CompositeView.isBefore(int,int,Rectangle)",abstractboolean,true if the point is before the specified range
"javax.swing.text.CompositeView.isAfter(int,int,Rectangle)",abstractboolean,true if the point is after the specified range
"javax.swing.text.CompositeView.getViewAtPoint(int,int,Rectangle)",abstractView,the child view
"javax.swing.text.CompositeView.childAllocation(int,Rectangle)",abstractvoid,
"javax.swing.text.CompositeView.getViewAtPosition(int,Rectangle)",View,"the view representing the given position, or null if there isn't one"
javax.swing.text.CompositeView.getViewIndexAtPosition(int),int,"index of the view representing the given position, or -1 if no view represents that position"
javax.swing.text.CompositeView.getInsideAllocation(Shape),Rectangle,"the allocation that represents the inside of the view after the margins have all been removed; if the given allocation was null, the return value is null"
javax.swing.text.CompositeView.setParagraphInsets(AttributeSet),void,
"javax.swing.text.CompositeView.setInsets(short,short,short,short)",void,
javax.swing.text.CompositeView.getLeftInset(),short,the inset &gt;= 0
javax.swing.text.CompositeView.getRightInset(),short,the inset &gt;= 0
javax.swing.text.CompositeView.getTopInset(),short,the inset &gt;= 0
javax.swing.text.CompositeView.getBottomInset(),short,the inset &gt;= 0
"javax.swing.text.CompositeView.getNextNorthSouthVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])",int,
"javax.swing.text.CompositeView.getNextEastWestVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])",int,
"javax.swing.text.CompositeView.flipEastAndWestAtEnds(int,Position.Bias)",boolean,false
javax.swing.text.DateFormatter.setFormat(DateFormat),void,
javax.swing.text.DefaultCaret.setUpdatePolicy(int),void,
javax.swing.text.DefaultCaret.getUpdatePolicy(),int,"one of the following values : UPDATE_WHEN_ON_EDT, NEVER_UPDATE, ALWAYS_UPDATE"
javax.swing.text.DefaultCaret.getComponent(),JTextComponent,the component
javax.swing.text.DefaultCaret.repaint(),void,
javax.swing.text.DefaultCaret.damage(Rectangle),void,
javax.swing.text.DefaultCaret.adjustVisibility(Rectangle),void,
javax.swing.text.DefaultCaret.getSelectionPainter(),Highlighter.HighlightPainter,the painter
javax.swing.text.DefaultCaret.positionCaret(MouseEvent),void,
javax.swing.text.DefaultCaret.moveCaret(MouseEvent),void,
javax.swing.text.DefaultCaret.focusGained(FocusEvent),void,
javax.swing.text.DefaultCaret.focusLost(FocusEvent),void,
javax.swing.text.DefaultCaret.mouseClicked(MouseEvent),void,
javax.swing.text.DefaultCaret.mousePressed(MouseEvent),void,
javax.swing.text.DefaultCaret.mouseReleased(MouseEvent),void,
javax.swing.text.DefaultCaret.mouseEntered(MouseEvent),void,
javax.swing.text.DefaultCaret.mouseExited(MouseEvent),void,
javax.swing.text.DefaultCaret.mouseDragged(MouseEvent),void,
javax.swing.text.DefaultCaret.mouseMoved(MouseEvent),void,
javax.swing.text.DefaultCaret.paint(Graphics),void,
javax.swing.text.DefaultCaret.install(JTextComponent),void,
javax.swing.text.DefaultCaret.deinstall(JTextComponent),void,
javax.swing.text.DefaultCaret.addChangeListener(ChangeListener),void,
javax.swing.text.DefaultCaret.removeChangeListener(ChangeListener),void,
javax.swing.text.DefaultCaret.getChangeListeners(),ChangeListener[],all of this caret's ChangeListeners or an empty array if no change listeners are currently registered
javax.swing.text.DefaultCaret.fireStateChanged(),void,
javax.swing.text.DefaultCaret.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added"
javax.swing.text.DefaultCaret.setSelectionVisible(boolean),void,
javax.swing.text.DefaultCaret.isSelectionVisible(),boolean,true if the selection is visible
javax.swing.text.DefaultCaret.isActive(),boolean,true if active else false
javax.swing.text.DefaultCaret.isVisible(),boolean,true if visible else false
javax.swing.text.DefaultCaret.setVisible(boolean),void,
javax.swing.text.DefaultCaret.setBlinkRate(int),void,
javax.swing.text.DefaultCaret.getBlinkRate(),int,the delay in milliseconds. If this is zero the caret will not blink.
javax.swing.text.DefaultCaret.getDot(),int,the position &gt;= 0
javax.swing.text.DefaultCaret.getMark(),int,the position &gt;= 0
javax.swing.text.DefaultCaret.setDot(int),void,
javax.swing.text.DefaultCaret.moveDot(int),void,
"javax.swing.text.DefaultCaret.moveDot(int,Position.Bias)",void,
"javax.swing.text.DefaultCaret.setDot(int,Position.Bias)",void,
javax.swing.text.DefaultCaret.getDotBias(),Position.Bias,the bias of the caret position
javax.swing.text.DefaultCaret.getMarkBias(),Position.Bias,the bias of the mark
javax.swing.text.DefaultCaret.setMagicCaretPosition(Point),void,
javax.swing.text.DefaultCaret.getMagicCaretPosition(),Point,the position see #setMagicCaretPosition
javax.swing.text.DefaultCaret.equals(Object),boolean,true if the objects are equal; false otherwise
javax.swing.text.DefaultCaret.toString(),String,a String representing this Rectangle object's coordinate and size values.
javax.swing.text.DefaultEditorKit.getContentType(),String,the type
javax.swing.text.DefaultEditorKit.getViewFactory(),ViewFactory,the view factory
javax.swing.text.DefaultEditorKit.getActions(),Action[],the command list
javax.swing.text.DefaultEditorKit.createCaret(),Caret,the caret
javax.swing.text.DefaultEditorKit.createDefaultDocument(),Document,the model
"javax.swing.text.DefaultEditorKit.read(InputStream,Document,int)",void,
"javax.swing.text.DefaultEditorKit.write(OutputStream,Document,int,int)",void,
"javax.swing.text.DefaultEditorKit.read(Reader,Document,int)",void,
"javax.swing.text.DefaultEditorKit.write(Writer,Document,int,int)",void,
javax.swing.text.DefaultEditorKit.BeepAction.actionPerformed(ActionEvent),void,
javax.swing.text.DefaultEditorKit.CopyAction.actionPerformed(ActionEvent),void,
javax.swing.text.DefaultEditorKit.CutAction.actionPerformed(ActionEvent),void,
javax.swing.text.DefaultEditorKit.DefaultKeyTypedAction.actionPerformed(ActionEvent),void,
javax.swing.text.DefaultEditorKit.InsertBreakAction.actionPerformed(ActionEvent),void,
javax.swing.text.DefaultEditorKit.InsertContentAction.actionPerformed(ActionEvent),void,
javax.swing.text.DefaultEditorKit.InsertTabAction.actionPerformed(ActionEvent),void,
javax.swing.text.DefaultEditorKit.PasteAction.actionPerformed(ActionEvent),void,
javax.swing.text.DefaultFormatter.install(JFormattedTextField),void,
javax.swing.text.DefaultFormatter.setCommitsOnValidEdit(boolean),void,
javax.swing.text.DefaultFormatter.getCommitsOnValidEdit(),boolean,true if edits are committed after every valid edit
javax.swing.text.DefaultFormatter.setOverwriteMode(boolean),void,
javax.swing.text.DefaultFormatter.getOverwriteMode(),boolean,true if newly inserted characters overwrite existing characters
javax.swing.text.DefaultFormatter.setAllowsInvalid(boolean),void,
javax.swing.text.DefaultFormatter.getAllowsInvalid(),boolean,false if the edited value must always be valid
javax.swing.text.DefaultFormatter.setValueClass(Class&lt;?&gt;),void,
javax.swing.text.DefaultFormatter.getValueClass(),Class&lt;?&gt;,Class used to construct return value from stringToValue
javax.swing.text.DefaultFormatter.stringToValue(String),Object,Object representation of text
javax.swing.text.DefaultFormatter.valueToString(Object),String,String representation of value
javax.swing.text.DefaultFormatter.getDocumentFilter(),DocumentFilter,DocumentFilter to restrict edits
javax.swing.text.DefaultFormatter.getNavigationFilter(),NavigationFilter,NavigationFilter to restrict navigation
javax.swing.text.DefaultFormatter.clone(),Object,copy of the DefaultFormatter
javax.swing.text.DefaultFormatterFactory.setDefaultFormatter(JFormattedTextField.AbstractFormatter),void,
javax.swing.text.DefaultFormatterFactory.getDefaultFormatter(),JFormattedTextField.AbstractFormatter,JFormattedTextField.AbstractFormatter used if a more specific one is not specified.
javax.swing.text.DefaultFormatterFactory.setDisplayFormatter(JFormattedTextField.AbstractFormatter),void,
javax.swing.text.DefaultFormatterFactory.getDisplayFormatter(),JFormattedTextField.AbstractFormatter,JFormattedTextField.AbstractFormatter to use when the JFormattedTextField does not have focus
javax.swing.text.DefaultFormatterFactory.setEditFormatter(JFormattedTextField.AbstractFormatter),void,
javax.swing.text.DefaultFormatterFactory.getEditFormatter(),JFormattedTextField.AbstractFormatter,JFormattedTextField.AbstractFormatter to use when the component has focus
javax.swing.text.DefaultFormatterFactory.setNullFormatter(JFormattedTextField.AbstractFormatter),void,
javax.swing.text.DefaultFormatterFactory.getNullFormatter(),JFormattedTextField.AbstractFormatter,JFormattedTextField.AbstractFormatter to use when the value is null
javax.swing.text.DefaultFormatterFactory.getFormatter(JFormattedTextField),JFormattedTextField.AbstractFormatter,JFormattedTextField.AbstractFormatter to handle formatting duties.
javax.swing.text.DefaultHighlighter.paint(Graphics),void,
javax.swing.text.DefaultHighlighter.install(JTextComponent),void,
javax.swing.text.DefaultHighlighter.deinstall(JTextComponent),void,
"javax.swing.text.DefaultHighlighter.addHighlight(int,int,Highlighter.HighlightPainter)",Object,an object that can be used as a tag to refer to the highlight
javax.swing.text.DefaultHighlighter.removeHighlight(Object),void,
javax.swing.text.DefaultHighlighter.removeAllHighlights(),void,
"javax.swing.text.DefaultHighlighter.changeHighlight(Object,int,int)",void,
javax.swing.text.DefaultHighlighter.getHighlights(),Highlighter.Highlight[],the copy
"javax.swing.text.DefaultHighlighter.paintLayeredHighlights(Graphics,int,int,Shape,JTextComponent,View)",void,
javax.swing.text.DefaultHighlighter.setDrawsLayeredHighlights(boolean),void,
javax.swing.text.DefaultHighlighter.getDrawsLayeredHighlights(),boolean,
javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.getColor(),Color,the color
"javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.paint(Graphics,int,int,Shape,JTextComponent)",void,
"javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.paintLayer(Graphics,int,int,Shape,JTextComponent,View)",Shape,region drawing occurred in
javax.swing.text.DefaultStyledDocument.getDefaultRootElement(),Element,the root
javax.swing.text.DefaultStyledDocument.create(DefaultStyledDocument.ElementSpec[]),void,
"javax.swing.text.DefaultStyledDocument.insert(int,DefaultStyledDocument.ElementSpec[])",void,
javax.swing.text.DefaultStyledDocument.removeElement(Element),void,
"javax.swing.text.DefaultStyledDocument.addStyle(String,Style)",Style,the style
javax.swing.text.DefaultStyledDocument.removeStyle(String),void,
javax.swing.text.DefaultStyledDocument.getStyle(String),Style,the style
javax.swing.text.DefaultStyledDocument.getStyleNames(),Enumeration&lt;?&gt;,all the style names
"javax.swing.text.DefaultStyledDocument.setLogicalStyle(int,Style)",void,
javax.swing.text.DefaultStyledDocument.getLogicalStyle(int),Style,"the style, null if none"
"javax.swing.text.DefaultStyledDocument.setCharacterAttributes(int,int,AttributeSet,boolean)",void,
"javax.swing.text.DefaultStyledDocument.setParagraphAttributes(int,int,AttributeSet,boolean)",void,
javax.swing.text.DefaultStyledDocument.getParagraphElement(int),Element,the element
javax.swing.text.DefaultStyledDocument.getCharacterElement(int),Element,the element
"javax.swing.text.DefaultStyledDocument.insertUpdate(AbstractDocument.DefaultDocumentEvent,AttributeSet)",void,
javax.swing.text.DefaultStyledDocument.removeUpdate(AbstractDocument.DefaultDocumentEvent),void,
javax.swing.text.DefaultStyledDocument.createDefaultRoot(),AbstractDocument.AbstractElement,the element base
javax.swing.text.DefaultStyledDocument.getForeground(AttributeSet),Color,the color
javax.swing.text.DefaultStyledDocument.getBackground(AttributeSet),Color,the color
javax.swing.text.DefaultStyledDocument.getFont(AttributeSet),Font,the font
javax.swing.text.DefaultStyledDocument.styleChanged(Style),void,
javax.swing.text.DefaultStyledDocument.addDocumentListener(DocumentListener),void,
javax.swing.text.DefaultStyledDocument.removeDocumentListener(DocumentListener),void,
javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit.redo(),void,
javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit.undo(),void,
javax.swing.text.DefaultStyledDocument.ElementSpec.setType(short),void,
javax.swing.text.DefaultStyledDocument.ElementSpec.getType(),short,"the type of the element (StartTagType, EndTagType, ContentType)"
javax.swing.text.DefaultStyledDocument.ElementSpec.setDirection(short),void,
javax.swing.text.DefaultStyledDocument.ElementSpec.getDirection(),short,"the direction (JoinPreviousDirection, JoinNextDirection)"
javax.swing.text.DefaultStyledDocument.ElementSpec.getAttributes(),AttributeSet,the attribute set
javax.swing.text.DefaultStyledDocument.ElementSpec.getArray(),char[],the array
javax.swing.text.DefaultStyledDocument.ElementSpec.getOffset(),int,the offset &gt;= 0
javax.swing.text.DefaultStyledDocument.ElementSpec.getLength(),int,the length &gt;= 0
javax.swing.text.DefaultStyledDocument.ElementSpec.toString(),String,the string
"javax.swing.text.DocumentFilter.remove(DocumentFilter.FilterBypass,int,int)",void,
"javax.swing.text.DocumentFilter.insertString(DocumentFilter.FilterBypass,int,String,AttributeSet)",void,
"javax.swing.text.DocumentFilter.replace(DocumentFilter.FilterBypass,int,int,String,AttributeSet)",void,
javax.swing.text.DocumentFilter.FilterBypass.getDocument(),abstractDocument,Document that remove/insertString will operate on
"javax.swing.text.DocumentFilter.FilterBypass.remove(int,int)",abstractvoid,
"javax.swing.text.DocumentFilter.FilterBypass.insertString(int,String,AttributeSet)",abstractvoid,
"javax.swing.text.DocumentFilter.FilterBypass.replace(int,int,String,AttributeSet)",abstractvoid,
javax.swing.text.EditorKit.clone(),Object,the copy
javax.swing.text.EditorKit.install(JEditorPane),void,
javax.swing.text.EditorKit.deinstall(JEditorPane),void,
javax.swing.text.EditorKit.getContentType(),abstractString,the type
javax.swing.text.EditorKit.getViewFactory(),abstractViewFactory,the factory
javax.swing.text.EditorKit.getActions(),abstractAction[],the set of actions
javax.swing.text.EditorKit.createCaret(),abstractCaret,the caret
javax.swing.text.EditorKit.createDefaultDocument(),abstractDocument,the model
"javax.swing.text.EditorKit.read(InputStream,Document,int)",abstractvoid,
"javax.swing.text.EditorKit.write(OutputStream,Document,int,int)",abstractvoid,
"javax.swing.text.EditorKit.read(Reader,Document,int)",abstractvoid,
"javax.swing.text.EditorKit.write(Writer,Document,int,int)",abstractvoid,
javax.swing.text.ElementIterator.clone(),Object,a cloned ElementIterator Object.
javax.swing.text.ElementIterator.first(),Element,an Element.
javax.swing.text.ElementIterator.depth(),int,the depth.
javax.swing.text.ElementIterator.current(),Element,element on top of the stack or null if the root element is null
javax.swing.text.ElementIterator.next(),Element,the next element or null at the end of the list.
javax.swing.text.ElementIterator.previous(),Element,previous Element if available
javax.swing.text.FieldView.getFontMetrics(),FontMetrics,the metrics
javax.swing.text.FieldView.adjustAllocation(Shape),Shape,the allocation that the superclass should use.
"javax.swing.text.FieldView.paint(Graphics,Shape)",void,
javax.swing.text.FieldView.getPreferredSpan(int),float,"the span the view would like to be rendered into &gt;= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.FieldView.getResizeWeight(int),int,"the weight -&gt; 1 for View.X_AXIS, else 0"
"javax.swing.text.FieldView.modelToView(int,Shape,Position.Bias)",Shape,
"javax.swing.text.FieldView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point in the view
"javax.swing.text.FieldView.insertUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.FieldView.removeUpdate(DocumentEvent,Shape,ViewFactory)",void,
javax.swing.text.FlowView.getFlowAxis(),int,
javax.swing.text.FlowView.getFlowSpan(int),int,
javax.swing.text.FlowView.getFlowStart(int),int,
javax.swing.text.FlowView.createRow(),abstractView,
javax.swing.text.FlowView.loadChildren(ViewFactory),void,
javax.swing.text.FlowView.getViewIndexAtPosition(int),int,"index of the view representing the given position, or -1 if no view represents that position"
"javax.swing.text.FlowView.layout(int,int)",void,
"javax.swing.text.FlowView.calculateMinorAxisRequirements(int,SizeRequirements)",SizeRequirements,the newly initialized SizeRequirements object
"javax.swing.text.FlowView.insertUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.FlowView.removeUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.FlowView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
javax.swing.text.FlowView.setParent(View),void,
"javax.swing.text.FlowView.FlowStrategy.insertUpdate(FlowView,DocumentEvent,Rectangle)",void,
"javax.swing.text.FlowView.FlowStrategy.removeUpdate(FlowView,DocumentEvent,Rectangle)",void,
"javax.swing.text.FlowView.FlowStrategy.changedUpdate(FlowView,DocumentEvent,Rectangle)",void,
javax.swing.text.FlowView.FlowStrategy.getLogicalView(FlowView),View,
javax.swing.text.FlowView.FlowStrategy.layout(FlowView),void,
"javax.swing.text.FlowView.FlowStrategy.layoutRow(FlowView,int,int)",int,the position to start the next row
"javax.swing.text.FlowView.FlowStrategy.adjustRow(FlowView,int,int,int)",void,
"javax.swing.text.FlowView.FlowStrategy.createView(FlowView,int,int,int)",View,
javax.swing.text.GapContent.allocateArray(int),Object,
javax.swing.text.GapContent.getArrayLength(),int,
javax.swing.text.GapContent.length(),int,the length &gt;= 1
"javax.swing.text.GapContent.insertString(int,String)",UndoableEdit,an UndoableEdit object for undoing
"javax.swing.text.GapContent.remove(int,int)",UndoableEdit,an UndoableEdit object for undoing
"javax.swing.text.GapContent.getString(int,int)",String,a string representing the content
"javax.swing.text.GapContent.getChars(int,int,Segment)",void,
javax.swing.text.GapContent.createPosition(int),Position,the position
javax.swing.text.GapContent.shiftEnd(int),void,
javax.swing.text.GapContent.shiftGap(int),void,
javax.swing.text.GapContent.resetMarksAtZero(),void,
javax.swing.text.GapContent.shiftGapStartDown(int),void,
javax.swing.text.GapContent.shiftGapEndUp(int),void,
"javax.swing.text.GapContent.getPositionsInRange(Vector,int,int)",Vector,the set of instances
"javax.swing.text.GapContent.updateUndoPositions(Vector,int,int)",void,
javax.swing.text.GapContent.getArray(),Object,
javax.swing.text.GapContent.getGapStart(),int,
javax.swing.text.GapContent.getGapEnd(),int,
"javax.swing.text.GapContent.replace(int,int,Object,int)",void,
javax.swing.text.GlyphView.clone(),Object,the copy
javax.swing.text.GlyphView.getGlyphPainter(),GlyphView.GlyphPainter,
javax.swing.text.GlyphView.setGlyphPainter(GlyphView.GlyphPainter),void,
"javax.swing.text.GlyphView.getText(int,int)",Segment,the Segment containing the text
javax.swing.text.GlyphView.getBackground(),Color,
javax.swing.text.GlyphView.getForeground(),Color,
javax.swing.text.GlyphView.getFont(),Font,
javax.swing.text.GlyphView.isUnderline(),boolean,
javax.swing.text.GlyphView.isStrikeThrough(),boolean,
javax.swing.text.GlyphView.isSubscript(),boolean,
javax.swing.text.GlyphView.isSuperscript(),boolean,
javax.swing.text.GlyphView.getTabExpander(),TabExpander,
javax.swing.text.GlyphView.checkPainter(),void,
"javax.swing.text.GlyphView.getTabbedSpan(float,TabExpander)",float,the desired span &gt;= 0
"javax.swing.text.GlyphView.getPartialSpan(int,int)",float,the span &gt;= 0
javax.swing.text.GlyphView.getStartOffset(),int,the starting offset into the model
javax.swing.text.GlyphView.getEndOffset(),int,the ending offset into the model
"javax.swing.text.GlyphView.paint(Graphics,Shape)",void,
javax.swing.text.GlyphView.getMinimumSpan(int),float,the minimum span the view can be rendered into
javax.swing.text.GlyphView.getPreferredSpan(int),float,"the span the view would like to be rendered into &gt;= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.GlyphView.getAlignment(int),float,"the desired alignment. This should be a value between 0.0 and 1.0 inclusive, where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin. An alignment of 0.5 would be the center of the view."
"javax.swing.text.GlyphView.modelToView(int,Shape,Position.Bias)",Shape,the bounding box of the given position
"javax.swing.text.GlyphView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point of view &gt;= 0
"javax.swing.text.GlyphView.getBreakWeight(int,float,float)",int,"the weight, which should be a value between View.ForcedBreakWeight and View.BadBreakWeight."
"javax.swing.text.GlyphView.breakView(int,int,float,float)",View,"the fragment of the view that represents the given span, if the view can be broken. If the view doesn't support breaking behavior, the view itself is returned."
"javax.swing.text.GlyphView.createFragment(int,int)",View,"the view fragment, or itself if the view doesn't support breaking into fragments"
"javax.swing.text.GlyphView.getNextVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])",int,the location within the model that best represents the next location visual position.
"javax.swing.text.GlyphView.insertUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.GlyphView.removeUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.GlyphView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.GlyphView.GlyphPainter.getSpan(GlyphView,int,int,TabExpander,float)",abstractfloat,
javax.swing.text.GlyphView.GlyphPainter.getHeight(GlyphView),abstractfloat,
javax.swing.text.GlyphView.GlyphPainter.getAscent(GlyphView),abstractfloat,
javax.swing.text.GlyphView.GlyphPainter.getDescent(GlyphView),abstractfloat,
"javax.swing.text.GlyphView.GlyphPainter.paint(GlyphView,Graphics,Shape,int,int)",abstractvoid,
"javax.swing.text.GlyphView.GlyphPainter.modelToView(GlyphView,int,Position.Bias,Shape)",abstractShape,the bounding box of the given position
"javax.swing.text.GlyphView.GlyphPainter.viewToModel(GlyphView,float,float,Shape,Position.Bias[])",abstractint,the location within the model that best represents the given point of view
"javax.swing.text.GlyphView.GlyphPainter.getBoundedPosition(GlyphView,int,float,float)",abstractint,the maximum model location possible for a break.
"javax.swing.text.GlyphView.GlyphPainter.getPainter(GlyphView,int,int)",GlyphView.GlyphPainter,
"javax.swing.text.GlyphView.GlyphPainter.getNextVisualPositionFrom(GlyphView,int,Position.Bias,Shape,int,Position.Bias[])",int,the location within the model that best represents the next location visual position.
"javax.swing.text.IconView.paint(Graphics,Shape)",void,
javax.swing.text.IconView.getPreferredSpan(int),float,"the span the view would like to be rendered into Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.IconView.getAlignment(int),float,the desired alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f. This should be a value between 0.0 and 1.0 where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin. An alignment of 0.5 would be the center of the view.
"javax.swing.text.IconView.modelToView(int,Shape,Position.Bias)",Shape,
"javax.swing.text.IconView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point of view &gt;= 0
javax.swing.text.InternationalFormatter.setFormat(Format),void,
javax.swing.text.InternationalFormatter.getFormat(),Format,Format instance used for converting from/to Strings
javax.swing.text.InternationalFormatter.setMinimum(Comparable),void,
javax.swing.text.InternationalFormatter.getMinimum(),Comparable,Minimum legal value that can be input
javax.swing.text.InternationalFormatter.setMaximum(Comparable),void,
javax.swing.text.InternationalFormatter.getMaximum(),Comparable,Maximum legal value that can be input
javax.swing.text.InternationalFormatter.install(JFormattedTextField),void,
javax.swing.text.InternationalFormatter.valueToString(Object),String,String representation of value
javax.swing.text.InternationalFormatter.stringToValue(String),Object,Object representation of text
javax.swing.text.InternationalFormatter.getFields(int),Format.Field[],Format.Field constants associated with the text at the given position.
javax.swing.text.InternationalFormatter.clone(),Object,copy of the DefaultFormatter
javax.swing.text.InternationalFormatter.getActions(),Action[],Array of Actions to install on JFormattedTextField
javax.swing.text.JTextComponent.getUI(),TextUI,the factory
javax.swing.text.JTextComponent.setUI(TextUI),void,
javax.swing.text.JTextComponent.updateUI(),void,
javax.swing.text.JTextComponent.addCaretListener(CaretListener),void,
javax.swing.text.JTextComponent.removeCaretListener(CaretListener),void,
javax.swing.text.JTextComponent.getCaretListeners(),CaretListener[],all of this component's CaretListeners or an empty array if no caret listeners are currently registered
javax.swing.text.JTextComponent.fireCaretUpdate(CaretEvent),void,
javax.swing.text.JTextComponent.setDocument(Document),void,
javax.swing.text.JTextComponent.getDocument(),Document,the model
javax.swing.text.JTextComponent.setComponentOrientation(ComponentOrientation),void,
javax.swing.text.JTextComponent.getActions(),Action[],the command list
javax.swing.text.JTextComponent.setMargin(Insets),void,
javax.swing.text.JTextComponent.getMargin(),Insets,the margin
javax.swing.text.JTextComponent.setNavigationFilter(NavigationFilter),void,
javax.swing.text.JTextComponent.getNavigationFilter(),NavigationFilter,the NavigationFilter
javax.swing.text.JTextComponent.getCaret(),Caret,the caret
javax.swing.text.JTextComponent.setCaret(Caret),void,
javax.swing.text.JTextComponent.getHighlighter(),Highlighter,the highlighter
javax.swing.text.JTextComponent.setHighlighter(Highlighter),void,
javax.swing.text.JTextComponent.setKeymap(Keymap),void,
javax.swing.text.JTextComponent.setDragEnabled(boolean),void,
javax.swing.text.JTextComponent.getDragEnabled(),boolean,the value of the dragEnabled property
javax.swing.text.JTextComponent.setDropMode(DropMode),void,
javax.swing.text.JTextComponent.getDropMode(),DropMode,the drop mode for this component
javax.swing.text.JTextComponent.getDropLocation(),JTextComponent.DropLocation,the drop location
javax.swing.text.JTextComponent.getKeymap(),Keymap,the keymap
"javax.swing.text.JTextComponent.addKeymap(String,Keymap)",Keymap,the keymap
javax.swing.text.JTextComponent.removeKeymap(String),Keymap,the keymap that was removed
javax.swing.text.JTextComponent.getKeymap(String),Keymap,the keymap
"javax.swing.text.JTextComponent.loadKeymap(Keymap,JTextComponent.KeyBinding[],Action[])",void,
javax.swing.text.JTextComponent.getCaretColor(),Color,the color
javax.swing.text.JTextComponent.setCaretColor(Color),void,
javax.swing.text.JTextComponent.getSelectionColor(),Color,the color
javax.swing.text.JTextComponent.setSelectionColor(Color),void,
javax.swing.text.JTextComponent.getSelectedTextColor(),Color,the color
javax.swing.text.JTextComponent.setSelectedTextColor(Color),void,
javax.swing.text.JTextComponent.getDisabledTextColor(),Color,the color
javax.swing.text.JTextComponent.setDisabledTextColor(Color),void,
javax.swing.text.JTextComponent.replaceSelection(String),void,
"javax.swing.text.JTextComponent.getText(int,int)",String,the text
javax.swing.text.JTextComponent.modelToView(int),Rectangle,"the coordinates as a rectangle, with (r.x, r.y) as the location in the coordinate system, or null if the component does not yet have a positive size."
javax.swing.text.JTextComponent.viewToModel(Point),int,"the offset ≥ 0 from the start of the document, or -1 if the component does not yet have a positive size."
javax.swing.text.JTextComponent.cut(),void,
javax.swing.text.JTextComponent.copy(),void,
javax.swing.text.JTextComponent.paste(),void,
javax.swing.text.JTextComponent.moveCaretPosition(int),void,
javax.swing.text.JTextComponent.setFocusAccelerator(char),void,
javax.swing.text.JTextComponent.getFocusAccelerator(),char,the key
"javax.swing.text.JTextComponent.read(Reader,Object)",void,
javax.swing.text.JTextComponent.write(Writer),void,
javax.swing.text.JTextComponent.removeNotify(),void,
javax.swing.text.JTextComponent.setCaretPosition(int),void,
javax.swing.text.JTextComponent.getCaretPosition(),int,the position of the text insertion caret for the text component ≥ 0
javax.swing.text.JTextComponent.setText(String),void,
javax.swing.text.JTextComponent.getText(),String,the text
javax.swing.text.JTextComponent.getSelectedText(),String,the text
javax.swing.text.JTextComponent.isEditable(),boolean,the boolean value
javax.swing.text.JTextComponent.setEditable(boolean),void,
javax.swing.text.JTextComponent.getSelectionStart(),int,the start position ≥ 0
javax.swing.text.JTextComponent.setSelectionStart(int),void,
javax.swing.text.JTextComponent.getSelectionEnd(),int,the end position ≥ 0
javax.swing.text.JTextComponent.setSelectionEnd(int),void,
"javax.swing.text.JTextComponent.select(int,int)",void,
javax.swing.text.JTextComponent.selectAll(),void,
javax.swing.text.JTextComponent.getToolTipText(MouseEvent),String,
javax.swing.text.JTextComponent.getPreferredScrollableViewportSize(),Dimension,the preferredSize of a JViewport whose view is this Scrollable
"javax.swing.text.JTextComponent.getScrollableUnitIncrement(Rectangle,int,int)",int,"the ""unit"" increment for scrolling in the specified direction"
"javax.swing.text.JTextComponent.getScrollableBlockIncrement(Rectangle,int,int)",int,"the ""block"" increment for scrolling in the specified direction"
javax.swing.text.JTextComponent.getScrollableTracksViewportWidth(),boolean,true if a viewport should force the Scrollables width to match its own
javax.swing.text.JTextComponent.getScrollableTracksViewportHeight(),boolean,true if a viewport should force the Scrollables height to match its own
javax.swing.text.JTextComponent.print(),boolean,"true, unless printing is canceled by the user"
"javax.swing.text.JTextComponent.print(MessageFormat,MessageFormat)",boolean,"true, unless printing is canceled by the user"
"javax.swing.text.JTextComponent.print(MessageFormat,MessageFormat,boolean,PrintService,PrintRequestAttributeSet,boolean)",boolean,"true, unless printing is canceled by the user"
"javax.swing.text.JTextComponent.getPrintable(MessageFormat,MessageFormat)",Printable,a Printable for use in printing content of this JTextComponent
javax.swing.text.JTextComponent.getAccessibleContext(),AccessibleContext,an AccessibleJTextComponent that serves as the AccessibleContext of this JTextComponent
javax.swing.text.JTextComponent.paramString(),String,a string representation of this JTextComponent
javax.swing.text.JTextComponent.processInputMethodEvent(InputMethodEvent),void,
javax.swing.text.JTextComponent.getInputMethodRequests(),InputMethodRequests,"the input method request handler for this component, null by default"
javax.swing.text.JTextComponent.addInputMethodListener(InputMethodListener),void,
javax.swing.text.JTextComponent.saveComposedText(int),boolean,"true if the composed text exists and is saved, false otherwise"
javax.swing.text.JTextComponent.restoreComposedText(),void,
javax.swing.text.JTextComponent.DropLocation.getIndex(),int,the drop index
javax.swing.text.JTextComponent.DropLocation.getBias(),Position.Bias,the drop bias
javax.swing.text.JTextComponent.DropLocation.toString(),String,a string representation of this drop location
javax.swing.text.LabelView.setUnderline(boolean),void,
javax.swing.text.LabelView.setStrikeThrough(boolean),void,
javax.swing.text.LabelView.setSuperscript(boolean),void,
javax.swing.text.LabelView.setSubscript(boolean),void,
javax.swing.text.LabelView.setBackground(Color),void,
javax.swing.text.LabelView.setPropertiesFromAttributes(),void,
javax.swing.text.LabelView.getFontMetrics(),FontMetrics,
javax.swing.text.LabelView.getBackground(),Color,the cached background color
javax.swing.text.LabelView.getForeground(),Color,the cached foreground color
javax.swing.text.LabelView.getFont(),Font,the cached font
javax.swing.text.LabelView.isUnderline(),boolean,the value of the cached underline property
javax.swing.text.LabelView.isStrikeThrough(),boolean,the value of the cached strikeThrough property
javax.swing.text.LabelView.isSubscript(),boolean,"the value of the cached subscript property When you request this property, LabelView re-syncs its state with the properties of the Element's AttributeSet. If Element's AttributeSet does not have this property set, it will revert to false."
javax.swing.text.LabelView.isSuperscript(),boolean,the value of the cached superscript property
"javax.swing.text.LabelView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.LayeredHighlighter.paintLayeredHighlights(Graphics,int,int,Shape,JTextComponent,View)",abstractvoid,
"javax.swing.text.LayeredHighlighter.LayerPainter.paintLayer(Graphics,int,int,Shape,JTextComponent,View)",abstractShape,
javax.swing.text.LayoutQueue.getDefaultQueue(),LayoutQueue,
javax.swing.text.LayoutQueue.setDefaultQueue(LayoutQueue),void,
javax.swing.text.LayoutQueue.addTask(Runnable),void,
javax.swing.text.LayoutQueue.waitForWork(),Runnable,
javax.swing.text.MaskFormatter.setMask(String),void,
javax.swing.text.MaskFormatter.getMask(),String,Mask dictating legal character values.
javax.swing.text.MaskFormatter.setValidCharacters(String),void,
javax.swing.text.MaskFormatter.getValidCharacters(),String,Legal characters
javax.swing.text.MaskFormatter.setInvalidCharacters(String),void,
javax.swing.text.MaskFormatter.getInvalidCharacters(),String,illegal characters.
javax.swing.text.MaskFormatter.setPlaceholder(String),void,
javax.swing.text.MaskFormatter.getPlaceholder(),String,String used when formatting if the value does not completely fill the mask
javax.swing.text.MaskFormatter.setPlaceholderCharacter(char),void,
javax.swing.text.MaskFormatter.getPlaceholderCharacter(),char,Character used when formatting if the value does not completely fill the mask
javax.swing.text.MaskFormatter.setValueContainsLiteralCharacters(boolean),void,
javax.swing.text.MaskFormatter.getValueContainsLiteralCharacters(),boolean,True if literal characters in mask should be returned in stringToValue
javax.swing.text.MaskFormatter.stringToValue(String),Object,Object representation of text
javax.swing.text.MaskFormatter.valueToString(Object),String,String representation of value
javax.swing.text.MaskFormatter.install(JFormattedTextField),void,
"javax.swing.text.NavigationFilter.setDot(NavigationFilter.FilterBypass,int,Position.Bias)",void,
"javax.swing.text.NavigationFilter.moveDot(NavigationFilter.FilterBypass,int,Position.Bias)",void,
"javax.swing.text.NavigationFilter.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])",int,
javax.swing.text.NavigationFilter.FilterBypass.getCaret(),abstractCaret,Caret that is changing
"javax.swing.text.NavigationFilter.FilterBypass.setDot(int,Position.Bias)",abstractvoid,
"javax.swing.text.NavigationFilter.FilterBypass.moveDot(int,Position.Bias)",abstractvoid,
javax.swing.text.NumberFormatter.setFormat(Format),void,
javax.swing.text.ParagraphView.setJustification(int),void,
javax.swing.text.ParagraphView.setLineSpacing(float),void,
javax.swing.text.ParagraphView.setFirstLineIndent(float),void,
javax.swing.text.ParagraphView.setPropertiesFromAttributes(),void,
javax.swing.text.ParagraphView.getLayoutViewCount(),int,the number of views that this ParagraphView is responsible for
javax.swing.text.ParagraphView.getLayoutView(int),View,the view at index
"javax.swing.text.ParagraphView.getNextNorthSouthVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])",int,the location in the model that represents the next location visual position
"javax.swing.text.ParagraphView.getClosestPositionTo(int,Position.Bias,Shape,int,Position.Bias[],int,int)",int,
"javax.swing.text.ParagraphView.flipEastAndWestAtEnds(int,Position.Bias)",boolean,"true if the text is layed out right to left at position, otherwise false."
javax.swing.text.ParagraphView.getFlowSpan(int),int,the constraining span for the given view at index
javax.swing.text.ParagraphView.getFlowStart(int),int,the location for the given view at index
javax.swing.text.ParagraphView.createRow(),View,the new View
"javax.swing.text.ParagraphView.nextTabStop(float,int)",float,the trailing end of the tab expansion &gt;= 0
javax.swing.text.ParagraphView.getTabSet(),TabSet,the TabSet
"javax.swing.text.ParagraphView.getPartialSize(int,int)",float,the size &gt;= 0
"javax.swing.text.ParagraphView.findOffsetToCharactersInString(char[],int)",int,"the document offset, or -1 if no characters found"
javax.swing.text.ParagraphView.getTabBase(),float,where tabs are calculated from
"javax.swing.text.ParagraphView.paint(Graphics,Shape)",void,
javax.swing.text.ParagraphView.getAlignment(int),float,"the desired alignment. This should be a value between 0.0 and 1.0 inclusive, where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin. An alignment of 0.5 would be the center of the view."
"javax.swing.text.ParagraphView.breakView(int,float,Shape)",View,"the fragment of the view that represents the given span, if the view can be broken; if the view doesn't support breaking behavior, the view itself is returned"
"javax.swing.text.ParagraphView.getBreakWeight(int,float)",int,a value indicating the attractiveness of breaking here; either GoodBreakWeight or BadBreakWeight
"javax.swing.text.ParagraphView.calculateMinorAxisRequirements(int,SizeRequirements)",SizeRequirements,the new or adjusted SizeRequirements object
"javax.swing.text.ParagraphView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.PasswordView.drawUnselectedText(Graphics,int,int,int,int)",int,the X location of the end of the range &gt;= 0
"javax.swing.text.PasswordView.drawSelectedText(Graphics,int,int,int,int)",int,the X location of the end of the range &gt;= 0
"javax.swing.text.PasswordView.drawEchoCharacter(Graphics,int,int,char)",int,the updated X position &gt;= 0
"javax.swing.text.PasswordView.modelToView(int,Shape,Position.Bias)",Shape,
"javax.swing.text.PasswordView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point in the view
javax.swing.text.PasswordView.getPreferredSpan(int),float,"the span the view would like to be rendered into &gt;= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
"javax.swing.text.PlainDocument.insertString(int,String,AttributeSet)",void,
javax.swing.text.PlainDocument.getDefaultRootElement(),Element,the root
javax.swing.text.PlainDocument.createDefaultRoot(),AbstractDocument.AbstractElement,the element base
javax.swing.text.PlainDocument.getParagraphElement(int),Element,the element
"javax.swing.text.PlainDocument.insertUpdate(AbstractDocument.DefaultDocumentEvent,AttributeSet)",void,
javax.swing.text.PlainDocument.removeUpdate(AbstractDocument.DefaultDocumentEvent),void,
javax.swing.text.PlainView.getTabSize(),int,the tab size
"javax.swing.text.PlainView.drawLine(int,Graphics,int,int)",void,
"javax.swing.text.PlainView.drawUnselectedText(Graphics,int,int,int,int)",int,the X location of the end of the range &gt;= 0
"javax.swing.text.PlainView.drawSelectedText(Graphics,int,int,int,int)",int,the location of the end of the range
javax.swing.text.PlainView.getLineBuffer(),Segment,the buffer
javax.swing.text.PlainView.updateMetrics(),void,
javax.swing.text.PlainView.getPreferredSpan(int),float,"the span the view would like to be rendered into &gt;= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
"javax.swing.text.PlainView.paint(Graphics,Shape)",void,
"javax.swing.text.PlainView.modelToView(int,Shape,Position.Bias)",Shape,
"javax.swing.text.PlainView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point in the view &gt;= 0
"javax.swing.text.PlainView.insertUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.PlainView.removeUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.PlainView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.PlainView.setSize(float,float)",void,
"javax.swing.text.PlainView.nextTabStop(float,int)",float,"the tab stop, measured in points &gt;= 0"
"javax.swing.text.PlainView.updateDamage(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.PlainView.damageLineRange(int,int,Shape,Component)",void,
"javax.swing.text.PlainView.lineToRect(Shape,int)",Rectangle,
javax.swing.text.Position.Bias.toString(),String,a string representation of the object.
javax.swing.text.Segment.setPartialReturn(boolean),void,
javax.swing.text.Segment.isPartialReturn(),boolean,whether or not partial returns are valid.
javax.swing.text.Segment.toString(),String,the string
javax.swing.text.Segment.first(),char,"the first character in the text, or DONE if the text is empty"
javax.swing.text.Segment.last(),char,"the last character in the text, or DONE if the text is empty"
javax.swing.text.Segment.current(),char,the character at the current position or DONE if the current position is off the end of the text.
javax.swing.text.Segment.next(),char,the character at the new position or DONE if the new position is off the end of the text range.
javax.swing.text.Segment.previous(),char,the character at the new position or DONE if the current position is equal to getBeginIndex().
javax.swing.text.Segment.setIndex(int),char,the character at the specified position or DONE if the specified position is equal to getEndIndex()
javax.swing.text.Segment.getBeginIndex(),int,the index at which the text begins.
javax.swing.text.Segment.getEndIndex(),int,the index after the last character in the text
javax.swing.text.Segment.getIndex(),int,the current index.
javax.swing.text.Segment.charAt(int),char,the specified char value
javax.swing.text.Segment.length(),int,the number of chars in this sequence
"javax.swing.text.Segment.subSequence(int,int)",CharSequence,the specified subsequence
javax.swing.text.Segment.clone(),Object,the copy
javax.swing.text.SimpleAttributeSet.isEmpty(),boolean,true if the set is empty else false
javax.swing.text.SimpleAttributeSet.getAttributeCount(),int,the count
javax.swing.text.SimpleAttributeSet.isDefined(Object),boolean,true if the attribute is defined
javax.swing.text.SimpleAttributeSet.isEqual(AttributeSet),boolean,"true if the sets are equal, false otherwise"
javax.swing.text.SimpleAttributeSet.copyAttributes(),AttributeSet,the copy
javax.swing.text.SimpleAttributeSet.getAttributeNames(),Enumeration&lt;?&gt;,the names as an Enumeration
javax.swing.text.SimpleAttributeSet.getAttribute(Object),Object,the value
"javax.swing.text.SimpleAttributeSet.containsAttribute(Object,Object)",boolean,true if the name/value pair is in the list
javax.swing.text.SimpleAttributeSet.containsAttributes(AttributeSet),boolean,true if the list contains all the name/value pairs
"javax.swing.text.SimpleAttributeSet.addAttribute(Object,Object)",void,
javax.swing.text.SimpleAttributeSet.addAttributes(AttributeSet),void,
javax.swing.text.SimpleAttributeSet.removeAttribute(Object),void,
javax.swing.text.SimpleAttributeSet.removeAttributes(Enumeration&lt;?&gt;),void,
javax.swing.text.SimpleAttributeSet.removeAttributes(AttributeSet),void,
javax.swing.text.SimpleAttributeSet.getResolveParent(),AttributeSet,the parent
javax.swing.text.SimpleAttributeSet.setResolveParent(AttributeSet),void,
javax.swing.text.SimpleAttributeSet.clone(),Object,the new set of attributes
javax.swing.text.SimpleAttributeSet.hashCode(),int,a hashcode value for this set of attributes.
javax.swing.text.SimpleAttributeSet.equals(Object),boolean,true if the objects are equal; false otherwise
javax.swing.text.SimpleAttributeSet.toString(),String,the string
javax.swing.text.StringContent.length(),int,the length &gt;= 1
"javax.swing.text.StringContent.insertString(int,String)",UndoableEdit,an UndoableEdit object for undoing
"javax.swing.text.StringContent.remove(int,int)",UndoableEdit,an UndoableEdit object for undoing
"javax.swing.text.StringContent.getString(int,int)",String,a string representing the content; may be empty
"javax.swing.text.StringContent.getChars(int,int,Segment)",void,
javax.swing.text.StringContent.createPosition(int),Position,the position
"javax.swing.text.StringContent.getPositionsInRange(Vector,int,int)",Vector,the set of instances
javax.swing.text.StringContent.updateUndoPositions(Vector),void,
javax.swing.text.StyleConstants.toString(),String,the string
javax.swing.text.StyleConstants.getBidiLevel(AttributeSet),int,the value
"javax.swing.text.StyleConstants.setBidiLevel(MutableAttributeSet,int)",void,
javax.swing.text.StyleConstants.getComponent(AttributeSet),Component,"the component, null if none"
"javax.swing.text.StyleConstants.setComponent(MutableAttributeSet,Component)",void,
javax.swing.text.StyleConstants.getIcon(AttributeSet),Icon,"the icon, null if none"
"javax.swing.text.StyleConstants.setIcon(MutableAttributeSet,Icon)",void,
javax.swing.text.StyleConstants.getFontFamily(AttributeSet),String,"the font family, ""Monospaced"" as the default"
"javax.swing.text.StyleConstants.setFontFamily(MutableAttributeSet,String)",void,
javax.swing.text.StyleConstants.getFontSize(AttributeSet),int,"the font size, 12 as the default"
"javax.swing.text.StyleConstants.setFontSize(MutableAttributeSet,int)",void,
javax.swing.text.StyleConstants.isBold(AttributeSet),boolean,true if set else false
"javax.swing.text.StyleConstants.setBold(MutableAttributeSet,boolean)",void,
javax.swing.text.StyleConstants.isItalic(AttributeSet),boolean,true if set else false
"javax.swing.text.StyleConstants.setItalic(MutableAttributeSet,boolean)",void,
javax.swing.text.StyleConstants.isUnderline(AttributeSet),boolean,true if set else false
javax.swing.text.StyleConstants.isStrikeThrough(AttributeSet),boolean,true if set else false
javax.swing.text.StyleConstants.isSuperscript(AttributeSet),boolean,true if set else false
javax.swing.text.StyleConstants.isSubscript(AttributeSet),boolean,true if set else false
"javax.swing.text.StyleConstants.setUnderline(MutableAttributeSet,boolean)",void,
"javax.swing.text.StyleConstants.setStrikeThrough(MutableAttributeSet,boolean)",void,
"javax.swing.text.StyleConstants.setSuperscript(MutableAttributeSet,boolean)",void,
"javax.swing.text.StyleConstants.setSubscript(MutableAttributeSet,boolean)",void,
javax.swing.text.StyleConstants.getForeground(AttributeSet),Color,"the color, Color.black as the default"
"javax.swing.text.StyleConstants.setForeground(MutableAttributeSet,Color)",void,
javax.swing.text.StyleConstants.getBackground(AttributeSet),Color,"the color, Color.black as the default"
"javax.swing.text.StyleConstants.setBackground(MutableAttributeSet,Color)",void,
javax.swing.text.StyleConstants.getFirstLineIndent(AttributeSet),float,"the value, 0 if not set"
"javax.swing.text.StyleConstants.setFirstLineIndent(MutableAttributeSet,float)",void,
javax.swing.text.StyleConstants.getRightIndent(AttributeSet),float,"the value, 0 if not set"
"javax.swing.text.StyleConstants.setRightIndent(MutableAttributeSet,float)",void,
javax.swing.text.StyleConstants.getLeftIndent(AttributeSet),float,"the value, 0 if not set"
"javax.swing.text.StyleConstants.setLeftIndent(MutableAttributeSet,float)",void,
javax.swing.text.StyleConstants.getLineSpacing(AttributeSet),float,"the value, 0 if not set"
"javax.swing.text.StyleConstants.setLineSpacing(MutableAttributeSet,float)",void,
javax.swing.text.StyleConstants.getSpaceAbove(AttributeSet),float,"the value, 0 if not set"
"javax.swing.text.StyleConstants.setSpaceAbove(MutableAttributeSet,float)",void,
javax.swing.text.StyleConstants.getSpaceBelow(AttributeSet),float,"the value, 0 if not set"
"javax.swing.text.StyleConstants.setSpaceBelow(MutableAttributeSet,float)",void,
javax.swing.text.StyleConstants.getAlignment(AttributeSet),int,the value StyleConstants.ALIGN_LEFT if not set
"javax.swing.text.StyleConstants.setAlignment(MutableAttributeSet,int)",void,
javax.swing.text.StyleConstants.getTabSet(AttributeSet),TabSet,the TabSet
"javax.swing.text.StyleConstants.setTabSet(MutableAttributeSet,TabSet)",void,
javax.swing.text.StyleContext.getDefaultStyleContext(),StyleContext,the context
"javax.swing.text.StyleContext.addStyle(String,Style)",Style,the created style
javax.swing.text.StyleContext.removeStyle(String),void,
javax.swing.text.StyleContext.getStyle(String),Style,the style
javax.swing.text.StyleContext.getStyleNames(),Enumeration&lt;?&gt;,the list of names as an enumeration
javax.swing.text.StyleContext.addChangeListener(ChangeListener),void,
javax.swing.text.StyleContext.removeChangeListener(ChangeListener),void,
javax.swing.text.StyleContext.getChangeListeners(),ChangeListener[],all of the ChangeListeners added or an empty array if no listeners have been added
javax.swing.text.StyleContext.getFont(AttributeSet),Font,the font
javax.swing.text.StyleContext.getForeground(AttributeSet),Color,the color
javax.swing.text.StyleContext.getBackground(AttributeSet),Color,the color
"javax.swing.text.StyleContext.getFont(String,int,int)",Font,the new font
javax.swing.text.StyleContext.getFontMetrics(Font),FontMetrics,the metrics
"javax.swing.text.StyleContext.addAttribute(AttributeSet,Object,Object)",AttributeSet,the updated attribute set
"javax.swing.text.StyleContext.addAttributes(AttributeSet,AttributeSet)",AttributeSet,the updated attribute set
"javax.swing.text.StyleContext.removeAttribute(AttributeSet,Object)",AttributeSet,the updated attribute set
"javax.swing.text.StyleContext.removeAttributes(AttributeSet,Enumeration&lt;?&gt;)",AttributeSet,the updated attribute set
"javax.swing.text.StyleContext.removeAttributes(AttributeSet,AttributeSet)",AttributeSet,the updated attribute set
javax.swing.text.StyleContext.getEmptySet(),AttributeSet,the set
javax.swing.text.StyleContext.reclaim(AttributeSet),void,
javax.swing.text.StyleContext.getCompressionThreshold(),int,the threshold
javax.swing.text.StyleContext.createSmallAttributeSet(AttributeSet),StyleContext.SmallAttributeSet,
javax.swing.text.StyleContext.createLargeAttributeSet(AttributeSet),MutableAttributeSet,
javax.swing.text.StyleContext.toString(),String,the string
"javax.swing.text.StyleContext.writeAttributes(ObjectOutputStream,AttributeSet)",void,
"javax.swing.text.StyleContext.readAttributes(ObjectInputStream,MutableAttributeSet)",void,
"javax.swing.text.StyleContext.writeAttributeSet(ObjectOutputStream,AttributeSet)",void,
"javax.swing.text.StyleContext.readAttributeSet(ObjectInputStream,MutableAttributeSet)",void,
javax.swing.text.StyleContext.registerStaticAttributeKey(Object),void,
javax.swing.text.StyleContext.getStaticAttribute(Object),Object,
javax.swing.text.StyleContext.getStaticAttributeKey(Object),Object,
javax.swing.text.StyledEditorKit.getInputAttributes(),MutableAttributeSet,the attribute set
javax.swing.text.StyledEditorKit.getCharacterAttributeRun(),Element,the element
javax.swing.text.StyledEditorKit.getActions(),Action[],the command list
javax.swing.text.StyledEditorKit.createDefaultDocument(),Document,the model
javax.swing.text.StyledEditorKit.install(JEditorPane),void,
javax.swing.text.StyledEditorKit.deinstall(JEditorPane),void,
javax.swing.text.StyledEditorKit.getViewFactory(),ViewFactory,
javax.swing.text.StyledEditorKit.clone(),Object,the copy
"javax.swing.text.StyledEditorKit.createInputAttributes(Element,MutableAttributeSet)",void,
javax.swing.text.StyledEditorKit.AlignmentAction.actionPerformed(ActionEvent),void,
javax.swing.text.StyledEditorKit.BoldAction.actionPerformed(ActionEvent),void,
javax.swing.text.StyledEditorKit.FontFamilyAction.actionPerformed(ActionEvent),void,
javax.swing.text.StyledEditorKit.FontSizeAction.actionPerformed(ActionEvent),void,
javax.swing.text.StyledEditorKit.ForegroundAction.actionPerformed(ActionEvent),void,
javax.swing.text.StyledEditorKit.ItalicAction.actionPerformed(ActionEvent),void,
javax.swing.text.StyledEditorKit.StyledTextAction.getEditor(ActionEvent),JEditorPane,the editor
javax.swing.text.StyledEditorKit.StyledTextAction.getStyledDocument(JEditorPane),StyledDocument,the document
javax.swing.text.StyledEditorKit.StyledTextAction.getStyledEditorKit(JEditorPane),StyledEditorKit,the kit
"javax.swing.text.StyledEditorKit.StyledTextAction.setCharacterAttributes(JEditorPane,AttributeSet,boolean)",void,
"javax.swing.text.StyledEditorKit.StyledTextAction.setParagraphAttributes(JEditorPane,AttributeSet,boolean)",void,
javax.swing.text.StyledEditorKit.UnderlineAction.actionPerformed(ActionEvent),void,
javax.swing.text.TableView.createTableRow(Element),TableView.TableRow,the row
javax.swing.text.TableView.createTableCell(Element),TableView.TableCell,the cell
"javax.swing.text.TableView.forwardUpdate(DocumentEvent.ElementChange,DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.TableView.replace(int,int,View[])",void,
"javax.swing.text.TableView.layoutColumns(int,int[],int[],SizeRequirements[])",void,
"javax.swing.text.TableView.layoutMinorAxis(int,int,int[],int[])",void,
"javax.swing.text.TableView.calculateMinorAxisRequirements(int,SizeRequirements)",SizeRequirements,the newly initialized SizeRequirements object
"javax.swing.text.TableView.getViewAtPosition(int,Rectangle)",View,"the view representing the given position, or null if there isn't one"
javax.swing.text.TabSet.getTabCount(),int,
javax.swing.text.TabSet.getTab(int),TabStop,
javax.swing.text.TabSet.getTabAfter(float),TabStop,
javax.swing.text.TabSet.getTabIndex(TabStop),int,"the index of the TabStop tab, or -1 if tab is not contained in the receiver."
javax.swing.text.TabSet.getTabIndexAfter(float),int,
javax.swing.text.TabSet.equals(Object),boolean,"true if o is the instance of TabSet, has the same number of TabStops and they are all equal, false otherwise."
javax.swing.text.TabSet.hashCode(),int,a hashcode value for this set of TabStops.
javax.swing.text.TabSet.toString(),String,a string representation of the object.
javax.swing.text.TabStop.getPosition(),float,the position of the tab
javax.swing.text.TabStop.getAlignment(),int,the alignment of the tab
javax.swing.text.TabStop.getLeader(),int,the leader of the tab
javax.swing.text.TabStop.equals(Object),boolean,"true if the tabs are equal, otherwise false"
javax.swing.text.TabStop.hashCode(),int,the hashCode for the object
javax.swing.text.TabStop.toString(),String,a string representation of the object.
javax.swing.text.TextAction.getTextComponent(ActionEvent),JTextComponent,the component
"javax.swing.text.TextAction.augmentList(Action[],Action[])",Action[],the augmented list
javax.swing.text.TextAction.getFocusedComponent(),JTextComponent,the component
"javax.swing.text.Utilities.drawTabbedText(Segment,int,int,Graphics,TabExpander,int)",int,the X location at the end of the rendered text
"javax.swing.text.Utilities.getTabbedTextWidth(Segment,FontMetrics,int,TabExpander,int)",int,the width of the text
"javax.swing.text.Utilities.getTabbedTextOffset(Segment,FontMetrics,int,int,TabExpander,int)",int,the offset into the text &gt;= 0
"javax.swing.text.Utilities.getTabbedTextOffset(Segment,FontMetrics,int,int,TabExpander,int,boolean)",int,
"javax.swing.text.Utilities.getBreakLocation(Segment,FontMetrics,int,int,TabExpander,int)",int,the offset into the given text
"javax.swing.text.Utilities.getRowStart(JTextComponent,int)",int,"the position &gt;= 0 if the request can be computed, otherwise a value of -1 will be returned."
"javax.swing.text.Utilities.getRowEnd(JTextComponent,int)",int,"the position &gt;= 0 if the request can be computed, otherwise a value of -1 will be returned."
"javax.swing.text.Utilities.getPositionAbove(JTextComponent,int,int)",int,"the position &gt;= 0 if the request can be computed, otherwise a value of -1 will be returned."
"javax.swing.text.Utilities.getPositionBelow(JTextComponent,int,int)",int,"the position &gt;= 0 if the request can be computed, otherwise a value of -1 will be returned."
"javax.swing.text.Utilities.getWordStart(JTextComponent,int)",int,the location in the model of the word start &gt;= 0
"javax.swing.text.Utilities.getWordEnd(JTextComponent,int)",int,the location in the model of the word end &gt;= 0
"javax.swing.text.Utilities.getNextWord(JTextComponent,int)",int,the location in the model of the word start &gt;= 0
"javax.swing.text.Utilities.getPreviousWord(JTextComponent,int)",int,the location in the model of the word start &gt;= 0
"javax.swing.text.Utilities.getParagraphElement(JTextComponent,int)",Element,the element
javax.swing.text.View.getParent(),View,"the parent, or null if none exists"
javax.swing.text.View.isVisible(),boolean,always returns true
javax.swing.text.View.getPreferredSpan(int),abstractfloat,"the span the view would like to be rendered into. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view"
javax.swing.text.View.getMinimumSpan(int),float,the minimum span the view can be rendered into
javax.swing.text.View.getMaximumSpan(int),float,the maximum span the view can be rendered into
"javax.swing.text.View.preferenceChanged(View,boolean,boolean)",void,
javax.swing.text.View.getAlignment(int),float,the value 0.5
"javax.swing.text.View.paint(Graphics,Shape)",abstractvoid,
javax.swing.text.View.setParent(View),void,
javax.swing.text.View.getViewCount(),int,the number of views &gt;= 0
javax.swing.text.View.getView(int),View,the view
javax.swing.text.View.removeAll(),void,
javax.swing.text.View.remove(int),void,
"javax.swing.text.View.insert(int,View)",void,
javax.swing.text.View.append(View),void,
"javax.swing.text.View.replace(int,int,View[])",void,
"javax.swing.text.View.getViewIndex(int,Position.Bias)",int,"index of the view representing the given position, or -1 if no view represents that position"
"javax.swing.text.View.getChildAllocation(int,Shape)",Shape,the allocation to the child
"javax.swing.text.View.getNextVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])",int,
"javax.swing.text.View.modelToView(int,Shape,Position.Bias)",abstractShape,
"javax.swing.text.View.modelToView(int,Position.Bias,int,Position.Bias,Shape)",Shape,
"javax.swing.text.View.viewToModel(float,float,Shape,Position.Bias[])",abstractint,the location within the model that best represents the given point in the view &gt;= 0. The biasReturn argument will be filled in to indicate that the point given is closer to the next character in the model or the previous character in the model.
"javax.swing.text.View.insertUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.View.removeUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.View.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
javax.swing.text.View.getDocument(),Document,"the view model, null if none"
javax.swing.text.View.getStartOffset(),int,the starting offset into the model &gt;= 0
javax.swing.text.View.getEndOffset(),int,the ending offset into the model &gt;= 0
javax.swing.text.View.getElement(),Element,the subject
javax.swing.text.View.getGraphics(),Graphics,a Graphics object for rendering
javax.swing.text.View.getAttributes(),AttributeSet,
"javax.swing.text.View.breakView(int,int,float,float)",View,"the fragment of the view that represents the given span, if the view can be broken. If the view doesn't support breaking behavior, the view itself is returned."
"javax.swing.text.View.createFragment(int,int)",View,"the view fragment, or itself if the view doesn't support breaking into fragments"
"javax.swing.text.View.getBreakWeight(int,float,float)",int,"the weight, which should be a value between ForcedBreakWeight and BadBreakWeight"
javax.swing.text.View.getResizeWeight(int),int,the weight
"javax.swing.text.View.setSize(float,float)",void,
javax.swing.text.View.getContainer(),Container,"the container, null if none"
javax.swing.text.View.getViewFactory(),ViewFactory,"the factory, null if none"
"javax.swing.text.View.getToolTipText(float,float,Shape)",String,
"javax.swing.text.View.getViewIndex(float,float,Shape)",int,"index of the view representing the given location, or -1 if no view represents that position"
"javax.swing.text.View.updateChildren(DocumentEvent.ElementChange,DocumentEvent,ViewFactory)",boolean,"whether or not the child views represent the child elements of the element this view is responsible for. Some views create children that represent a portion of the element they are responsible for, and should return false. This information is used to determine if views in the range of the added elements should be forwarded to or not"
"javax.swing.text.View.forwardUpdate(DocumentEvent.ElementChange,DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.View.forwardUpdateToView(View,DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.View.updateLayout(DocumentEvent.ElementChange,DocumentEvent,Shape)",void,
"javax.swing.text.View.modelToView(int,Shape)",Shape,the bounding box of the given position is returned
"javax.swing.text.View.viewToModel(float,float,Shape)",int,the location within the model that best represents the given point in the view &gt;= 0
javax.swing.text.WrappedPlainView.getTabSize(),int,the tab size
"javax.swing.text.WrappedPlainView.drawLine(int,int,Graphics,int,int)",void,
"javax.swing.text.WrappedPlainView.drawUnselectedText(Graphics,int,int,int,int)",int,the X location of the end of the range &gt;= 0
"javax.swing.text.WrappedPlainView.drawSelectedText(Graphics,int,int,int,int)",int,the location of the end of the range.
javax.swing.text.WrappedPlainView.getLineBuffer(),Segment,the buffer
"javax.swing.text.WrappedPlainView.calculateBreakPosition(int,int)",int,
javax.swing.text.WrappedPlainView.loadChildren(ViewFactory),void,
"javax.swing.text.WrappedPlainView.nextTabStop(float,int)",float,"the tab stop, measured in points &gt;= 0"
"javax.swing.text.WrappedPlainView.paint(Graphics,Shape)",void,
"javax.swing.text.WrappedPlainView.setSize(float,float)",void,
javax.swing.text.WrappedPlainView.getPreferredSpan(int),float,"the span the view would like to be rendered into. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.WrappedPlainView.getMinimumSpan(int),float,"the span the view would like to be rendered into. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.WrappedPlainView.getMaximumSpan(int),float,"the span the view would like to be rendered into. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
"javax.swing.text.WrappedPlainView.insertUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.WrappedPlainView.removeUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.WrappedPlainView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
javax.swing.text.ZoneView.getMaximumZoneSize(),int,
javax.swing.text.ZoneView.setMaximumZoneSize(int),void,
javax.swing.text.ZoneView.getMaxZonesLoaded(),int,
javax.swing.text.ZoneView.setMaxZonesLoaded(int),void,
javax.swing.text.ZoneView.zoneWasLoaded(View),void,
javax.swing.text.ZoneView.unloadZone(View),void,
javax.swing.text.ZoneView.isZoneLoaded(View),boolean,
"javax.swing.text.ZoneView.createZone(int,int)",View,
javax.swing.text.ZoneView.loadChildren(ViewFactory),void,
javax.swing.text.ZoneView.getViewIndexAtPosition(int),int,"index of the view representing the given position, or -1 if no view represents that position"
"javax.swing.text.ZoneView.updateChildren(DocumentEvent.ElementChange,DocumentEvent,ViewFactory)",boolean,"whether or not the child views represent the child elements of the element this view is responsible for. Some views create children that represent a portion of the element they are responsible for, and should return false. This information is used to determine if views in the range of the added elements should be forwarded to or not"
"javax.swing.text.ZoneView.insertUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.ZoneView.removeUpdate(DocumentEvent,Shape,ViewFactory)",void,
javax.swing.text.html.BlockView.setParent(View),void,
"javax.swing.text.html.BlockView.calculateMajorAxisRequirements(int,SizeRequirements)",SizeRequirements,the newly initialized SizeRequirements object
"javax.swing.text.html.BlockView.calculateMinorAxisRequirements(int,SizeRequirements)",SizeRequirements,the newly initialized SizeRequirements object
"javax.swing.text.html.BlockView.layoutMinorAxis(int,int,int[],int[])",void,
"javax.swing.text.html.BlockView.paint(Graphics,Shape)",void,
javax.swing.text.html.BlockView.getAttributes(),AttributeSet,
javax.swing.text.html.BlockView.getResizeWeight(int),int,the weight
javax.swing.text.html.BlockView.getAlignment(int),float,the alignment
"javax.swing.text.html.BlockView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
javax.swing.text.html.BlockView.getPreferredSpan(int),float,"the span the view would like to be rendered into &gt;= 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
javax.swing.text.html.BlockView.getMinimumSpan(int),float,"the span the view would like to be rendered into &gt;= 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
javax.swing.text.html.BlockView.getMaximumSpan(int),float,"the span the view would like to be rendered into &gt;= 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
javax.swing.text.html.BlockView.setPropertiesFromAttributes(),void,
javax.swing.text.html.BlockView.getStyleSheet(),StyleSheet,
javax.swing.text.html.CSS.getAllAttributeKeys(),CSS.Attribute[],
javax.swing.text.html.CSS.getAttribute(String),CSS.Attribute,"the CSS.Attribute object, or null if the string doesn't represent a valid attribute key"
javax.swing.text.html.CSS.Attribute.toString(),String,a string representation of the object.
javax.swing.text.html.CSS.Attribute.getDefaultValue(),String,
javax.swing.text.html.CSS.Attribute.isInherited(),boolean,
javax.swing.text.html.FormSubmitEvent.getMethod(),FormSubmitEvent.MethodType,"the form method type, either Method.GET or Method.POST."
javax.swing.text.html.FormSubmitEvent.getData(),String,the string representing the form submission data.
javax.swing.text.html.FormView.createComponent(),Component,
javax.swing.text.html.FormView.getMaximumSpan(int),float,"the span the view would like to be rendered into &gt;= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
javax.swing.text.html.FormView.actionPerformed(ActionEvent),void,
javax.swing.text.html.FormView.submitData(String),void,
javax.swing.text.html.FormView.imageSubmit(String),void,
javax.swing.text.html.HTML.getAllTags(),HTML.Tag[],
javax.swing.text.html.HTML.getTag(String),HTML.Tag,"a tag constant corresponding to the tagName, or null if not found"
"javax.swing.text.html.HTML.getIntegerAttributeValue(AttributeSet,HTML.Attribute,int)",int,
javax.swing.text.html.HTML.getAllAttributeKeys(),HTML.Attribute[],the set of HTML attributes recognized
javax.swing.text.html.HTML.getAttributeKey(String),HTML.Attribute,the Attribute corresponding to attName
javax.swing.text.html.HTML.Attribute.toString(),String,the string representation of this attribute
javax.swing.text.html.HTML.Tag.isBlock(),boolean,"true if this tag is a block tag, otherwise returns false"
javax.swing.text.html.HTML.Tag.breaksFlow(),boolean,"true if this tag causes a line break to the flow of data, otherwise returns false"
javax.swing.text.html.HTML.Tag.isPreformatted(),boolean,"true if this tag is pre-formatted, otherwise returns false"
javax.swing.text.html.HTML.Tag.toString(),String,the String representation of the tag
javax.swing.text.html.HTML.UnknownTag.hashCode(),int,a hash code value for this object.
javax.swing.text.html.HTML.UnknownTag.equals(Object),boolean,true if the objects are equal; false otherwise
javax.swing.text.html.HTMLDocument.getReader(int),HTMLEditorKit.ParserCallback,the reader used by the parser to load the document
"javax.swing.text.html.HTMLDocument.getReader(int,int,int,HTML.Tag)",HTMLEditorKit.ParserCallback,the reader used by the parser to load the document
javax.swing.text.html.HTMLDocument.getBase(),URL,the base location
javax.swing.text.html.HTMLDocument.setBase(URL),void,
"javax.swing.text.html.HTMLDocument.insert(int,DefaultStyledDocument.ElementSpec[])",void,
"javax.swing.text.html.HTMLDocument.insertUpdate(AbstractDocument.DefaultDocumentEvent,AttributeSet)",void,
javax.swing.text.html.HTMLDocument.create(DefaultStyledDocument.ElementSpec[]),void,
"javax.swing.text.html.HTMLDocument.setParagraphAttributes(int,int,AttributeSet,boolean)",void,
javax.swing.text.html.HTMLDocument.getStyleSheet(),StyleSheet,the StyleSheet
javax.swing.text.html.HTMLDocument.getIterator(HTML.Tag),HTMLDocument.Iterator,the Iterator for the given HTML tag
"javax.swing.text.html.HTMLDocument.createLeafElement(Element,AttributeSet,int,int)",Element,the new element
"javax.swing.text.html.HTMLDocument.createBranchElement(Element,AttributeSet)",Element,the element
javax.swing.text.html.HTMLDocument.createDefaultRoot(),AbstractDocument.AbstractElement,the element base
javax.swing.text.html.HTMLDocument.setTokenThreshold(int),void,
javax.swing.text.html.HTMLDocument.getTokenThreshold(),int,the number of tokens to buffer
javax.swing.text.html.HTMLDocument.setPreservesUnknownTags(boolean),void,
javax.swing.text.html.HTMLDocument.getPreservesUnknownTags(),boolean,true if unknown tags are to be preserved when parsing
javax.swing.text.html.HTMLDocument.processHTMLFrameHyperlinkEvent(HTMLFrameHyperlinkEvent),void,
javax.swing.text.html.HTMLDocument.setParser(HTMLEditorKit.Parser),void,
javax.swing.text.html.HTMLDocument.getParser(),HTMLEditorKit.Parser,the parser used for text insertion
"javax.swing.text.html.HTMLDocument.setInnerHTML(Element,String)",void,
"javax.swing.text.html.HTMLDocument.setOuterHTML(Element,String)",void,
"javax.swing.text.html.HTMLDocument.insertAfterStart(Element,String)",void,
"javax.swing.text.html.HTMLDocument.insertBeforeEnd(Element,String)",void,
"javax.swing.text.html.HTMLDocument.insertBeforeStart(Element,String)",void,
"javax.swing.text.html.HTMLDocument.insertAfterEnd(Element,String)",void,
javax.swing.text.html.HTMLDocument.getElement(String),Element,"the element with the specified Attribute or null if it can't be found, or null if id is null"
"javax.swing.text.html.HTMLDocument.getElement(Element,Object,Object)",Element,"the element with the specified Attribute and the specified value, or null if it can't be found"
javax.swing.text.html.HTMLDocument.fireChangedUpdate(DocumentEvent),void,
javax.swing.text.html.HTMLDocument.fireUndoableEditUpdate(UndoableEditEvent),void,
javax.swing.text.html.HTMLDocument.Iterator.getAttributes(),abstractAttributeSet,"the AttributeSet for this tag, or null if none can be found"
javax.swing.text.html.HTMLDocument.Iterator.getStartOffset(),abstractint,"the start of the range, or -1 if it can't be found"
javax.swing.text.html.HTMLDocument.Iterator.getEndOffset(),abstractint,the end of the range
javax.swing.text.html.HTMLDocument.Iterator.next(),abstractvoid,
javax.swing.text.html.HTMLDocument.Iterator.isValid(),abstractboolean,"true if the iterator is currently representing an occurrence of a tag, otherwise returns false"
javax.swing.text.html.HTMLDocument.Iterator.getTag(),abstractHTML.Tag,
javax.swing.text.html.HTMLEditorKit.getContentType(),String,the type
javax.swing.text.html.HTMLEditorKit.getViewFactory(),ViewFactory,the factory
javax.swing.text.html.HTMLEditorKit.createDefaultDocument(),Document,the model
"javax.swing.text.html.HTMLEditorKit.read(Reader,Document,int)",void,
"javax.swing.text.html.HTMLEditorKit.insertHTML(HTMLDocument,int,String,int,int,HTML.Tag)",void,
"javax.swing.text.html.HTMLEditorKit.write(Writer,Document,int,int)",void,
javax.swing.text.html.HTMLEditorKit.install(JEditorPane),void,
javax.swing.text.html.HTMLEditorKit.deinstall(JEditorPane),void,
javax.swing.text.html.HTMLEditorKit.setStyleSheet(StyleSheet),void,
javax.swing.text.html.HTMLEditorKit.getStyleSheet(),StyleSheet,
javax.swing.text.html.HTMLEditorKit.getActions(),Action[],the command list
"javax.swing.text.html.HTMLEditorKit.createInputAttributes(Element,MutableAttributeSet)",void,
javax.swing.text.html.HTMLEditorKit.getInputAttributes(),MutableAttributeSet,the attribute set
javax.swing.text.html.HTMLEditorKit.setDefaultCursor(Cursor),void,
javax.swing.text.html.HTMLEditorKit.getDefaultCursor(),Cursor,
javax.swing.text.html.HTMLEditorKit.setLinkCursor(Cursor),void,
javax.swing.text.html.HTMLEditorKit.getLinkCursor(),Cursor,
javax.swing.text.html.HTMLEditorKit.isAutoFormSubmission(),boolean,"true if html form submission is processed automatically, false otherwise."
javax.swing.text.html.HTMLEditorKit.setAutoFormSubmission(boolean),void,
javax.swing.text.html.HTMLEditorKit.clone(),Object,the copy
javax.swing.text.html.HTMLEditorKit.getParser(),HTMLEditorKit.Parser,
javax.swing.text.html.HTMLEditorKit.getAccessibleContext(),AccessibleContext,the AccessibleContext associated with this editor kit
javax.swing.text.html.HTMLEditorKit.HTMLFactory.create(Element),View,the view
javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getHTMLDocument(JEditorPane),HTMLDocument,HTMLDocument of e.
javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getHTMLEditorKit(JEditorPane),HTMLEditorKit,HTMLEditorKit for e.
"javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getElementsAt(HTMLDocument,int)",Element[],
"javax.swing.text.html.HTMLEditorKit.HTMLTextAction.elementCountToTag(HTMLDocument,int,HTML.Tag)",int,
"javax.swing.text.html.HTMLEditorKit.HTMLTextAction.findElementMatchingTag(HTMLDocument,int,HTML.Tag)",Element,
"javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.insertHTML(JEditorPane,HTMLDocument,int,String,int,int,HTML.Tag)",void,
"javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.insertAtBoundary(JEditorPane,HTMLDocument,int,Element,String,HTML.Tag,HTML.Tag)",void,
"javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.insertAtBoundry(JEditorPane,HTMLDocument,int,Element,String,HTML.Tag,HTML.Tag)",void,
javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.actionPerformed(ActionEvent),void,
javax.swing.text.html.HTMLEditorKit.LinkController.mouseClicked(MouseEvent),void,
javax.swing.text.html.HTMLEditorKit.LinkController.mouseDragged(MouseEvent),void,
javax.swing.text.html.HTMLEditorKit.LinkController.mouseMoved(MouseEvent),void,
"javax.swing.text.html.HTMLEditorKit.LinkController.activateLink(int,JEditorPane)",void,
"javax.swing.text.html.HTMLEditorKit.Parser.parse(Reader,HTMLEditorKit.ParserCallback,boolean)",abstractvoid,
javax.swing.text.html.HTMLEditorKit.ParserCallback.flush(),void,
"javax.swing.text.html.HTMLEditorKit.ParserCallback.handleText(char[],int)",void,
"javax.swing.text.html.HTMLEditorKit.ParserCallback.handleComment(char[],int)",void,
"javax.swing.text.html.HTMLEditorKit.ParserCallback.handleStartTag(HTML.Tag,MutableAttributeSet,int)",void,
"javax.swing.text.html.HTMLEditorKit.ParserCallback.handleEndTag(HTML.Tag,int)",void,
"javax.swing.text.html.HTMLEditorKit.ParserCallback.handleSimpleTag(HTML.Tag,MutableAttributeSet,int)",void,
"javax.swing.text.html.HTMLEditorKit.ParserCallback.handleError(String,int)",void,
javax.swing.text.html.HTMLEditorKit.ParserCallback.handleEndOfLineString(String),void,
javax.swing.text.html.HTMLFrameHyperlinkEvent.getTarget(),String,
javax.swing.text.html.HTMLWriter.write(),void,
javax.swing.text.html.HTMLWriter.writeAttributes(AttributeSet),void,
javax.swing.text.html.HTMLWriter.emptyTag(Element),void,
javax.swing.text.html.HTMLWriter.isBlockTag(AttributeSet),boolean,"true if tag is block tag, false otherwise."
javax.swing.text.html.HTMLWriter.startTag(Element),void,
javax.swing.text.html.HTMLWriter.textAreaContent(AttributeSet),void,
javax.swing.text.html.HTMLWriter.text(Element),void,
javax.swing.text.html.HTMLWriter.selectContent(AttributeSet),void,
javax.swing.text.html.HTMLWriter.writeOption(Option),void,
javax.swing.text.html.HTMLWriter.endTag(Element),void,
javax.swing.text.html.HTMLWriter.comment(Element),void,
javax.swing.text.html.HTMLWriter.synthesizedElement(Element),boolean,
"javax.swing.text.html.HTMLWriter.matchNameAttribute(AttributeSet,HTML.Tag)",boolean,
javax.swing.text.html.HTMLWriter.writeEmbeddedTags(AttributeSet),void,
javax.swing.text.html.HTMLWriter.closeOutUnwantedEmbeddedTags(AttributeSet),void,
javax.swing.text.html.HTMLWriter.writeLineSeparator(),void,
"javax.swing.text.html.HTMLWriter.output(char[],int,int)",void,
javax.swing.text.html.ImageView.getAltText(),String,
javax.swing.text.html.ImageView.getImageURL(),URL,
javax.swing.text.html.ImageView.getNoImageIcon(),Icon,
javax.swing.text.html.ImageView.getLoadingImageIcon(),Icon,
javax.swing.text.html.ImageView.getImage(),Image,
javax.swing.text.html.ImageView.setLoadsSynchronously(boolean),void,
javax.swing.text.html.ImageView.getLoadsSynchronously(),boolean,
javax.swing.text.html.ImageView.getStyleSheet(),StyleSheet,
javax.swing.text.html.ImageView.getAttributes(),AttributeSet,
"javax.swing.text.html.ImageView.getToolTipText(float,float,Shape)",String,
javax.swing.text.html.ImageView.setPropertiesFromAttributes(),void,
javax.swing.text.html.ImageView.setParent(View),void,
"javax.swing.text.html.ImageView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.html.ImageView.paint(Graphics,Shape)",void,
javax.swing.text.html.ImageView.getPreferredSpan(int),float,"the span the view would like to be rendered into; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
javax.swing.text.html.ImageView.getAlignment(int),float,the desired alignment; this should be a value between 0.0 and 1.0 where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin; an alignment of 0.5 would be the center of the view
"javax.swing.text.html.ImageView.modelToView(int,Shape,Position.Bias)",Shape,
"javax.swing.text.html.ImageView.viewToModel(float,float,Shape,Position.Bias[])",int,the location within the model that best represents the given point of view
"javax.swing.text.html.ImageView.setSize(float,float)",void,
"javax.swing.text.html.InlineView.insertUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.html.InlineView.removeUpdate(DocumentEvent,Shape,ViewFactory)",void,
"javax.swing.text.html.InlineView.changedUpdate(DocumentEvent,Shape,ViewFactory)",void,
javax.swing.text.html.InlineView.getAttributes(),AttributeSet,
"javax.swing.text.html.InlineView.getBreakWeight(int,float,float)",int,"the weight, which should be a value between ForcedBreakWeight and BadBreakWeight."
"javax.swing.text.html.InlineView.breakView(int,int,float,float)",View,the fragment of the view that represents the given span.
javax.swing.text.html.InlineView.setPropertiesFromAttributes(),void,
javax.swing.text.html.InlineView.getStyleSheet(),StyleSheet,
javax.swing.text.html.ListView.getAlignment(int),float,the desired span
"javax.swing.text.html.ListView.paint(Graphics,Shape)",void,
"javax.swing.text.html.ListView.paintChild(Graphics,Rectangle,int)",void,
javax.swing.text.html.ListView.setPropertiesFromAttributes(),void,
javax.swing.text.html.MinimalHTMLWriter.write(),void,
javax.swing.text.html.MinimalHTMLWriter.writeAttributes(AttributeSet),void,
javax.swing.text.html.MinimalHTMLWriter.text(Element),void,
javax.swing.text.html.MinimalHTMLWriter.writeStartTag(String),void,
javax.swing.text.html.MinimalHTMLWriter.writeEndTag(String),void,
javax.swing.text.html.MinimalHTMLWriter.writeHeader(),void,
javax.swing.text.html.MinimalHTMLWriter.writeStyles(),void,
javax.swing.text.html.MinimalHTMLWriter.writeBody(),void,
javax.swing.text.html.MinimalHTMLWriter.writeEndParagraph(),void,
javax.swing.text.html.MinimalHTMLWriter.writeStartParagraph(Element),void,
javax.swing.text.html.MinimalHTMLWriter.writeLeaf(Element),void,
javax.swing.text.html.MinimalHTMLWriter.writeImage(Element),void,
javax.swing.text.html.MinimalHTMLWriter.writeComponent(Element),void,
javax.swing.text.html.MinimalHTMLWriter.isText(Element),boolean,
"javax.swing.text.html.MinimalHTMLWriter.writeContent(Element,boolean)",void,
javax.swing.text.html.MinimalHTMLWriter.writeHTMLTags(AttributeSet),void,
javax.swing.text.html.MinimalHTMLWriter.writeNonHTMLAttributes(AttributeSet),void,
javax.swing.text.html.MinimalHTMLWriter.inFontTag(),boolean,
javax.swing.text.html.MinimalHTMLWriter.endFontTag(),void,
javax.swing.text.html.MinimalHTMLWriter.startFontTag(String),void,
javax.swing.text.html.ObjectView.createComponent(),Component,
javax.swing.text.html.Option.setLabel(String),void,
javax.swing.text.html.Option.getLabel(),String,
javax.swing.text.html.Option.getAttributes(),AttributeSet,
javax.swing.text.html.Option.toString(),String,a string representation of the object.
javax.swing.text.html.Option.setSelection(boolean),void,
javax.swing.text.html.Option.isSelected(),boolean,
javax.swing.text.html.Option.getValue(),String,
javax.swing.text.html.ParagraphView.setParent(View),void,
javax.swing.text.html.ParagraphView.getAttributes(),AttributeSet,
javax.swing.text.html.ParagraphView.setPropertiesFromAttributes(),void,
javax.swing.text.html.ParagraphView.getStyleSheet(),StyleSheet,
"javax.swing.text.html.ParagraphView.calculateMinorAxisRequirements(int,SizeRequirements)",SizeRequirements,the new or adjusted SizeRequirements object
javax.swing.text.html.ParagraphView.isVisible(),boolean,true if the paragraph should be displayed
"javax.swing.text.html.ParagraphView.paint(Graphics,Shape)",void,
javax.swing.text.html.ParagraphView.getPreferredSpan(int),float,"the span the view would like to be rendered into; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
javax.swing.text.html.ParagraphView.getMinimumSpan(int),float,the minimum span the view can be rendered into
javax.swing.text.html.ParagraphView.getMaximumSpan(int),float,the maximum span the view can be rendered into
"javax.swing.text.html.StyleSheet.getRule(HTML.Tag,Element)",Style,the set of CSS attributes to use to render the tag
javax.swing.text.html.StyleSheet.getRule(String),Style,
javax.swing.text.html.StyleSheet.addRule(String),void,
javax.swing.text.html.StyleSheet.getDeclaration(String),AttributeSet,
"javax.swing.text.html.StyleSheet.loadRules(Reader,URL)",void,
javax.swing.text.html.StyleSheet.getViewAttributes(View),AttributeSet,
javax.swing.text.html.StyleSheet.removeStyle(String),void,
javax.swing.text.html.StyleSheet.addStyleSheet(StyleSheet),void,
javax.swing.text.html.StyleSheet.removeStyleSheet(StyleSheet),void,
javax.swing.text.html.StyleSheet.getStyleSheets(),StyleSheet[],
javax.swing.text.html.StyleSheet.importStyleSheet(URL),void,
javax.swing.text.html.StyleSheet.setBase(URL),void,
javax.swing.text.html.StyleSheet.getBase(),URL,
"javax.swing.text.html.StyleSheet.addCSSAttribute(MutableAttributeSet,CSS.Attribute,String)",void,
"javax.swing.text.html.StyleSheet.addCSSAttributeFromHTML(MutableAttributeSet,CSS.Attribute,String)",boolean,
javax.swing.text.html.StyleSheet.translateHTMLToCSS(AttributeSet),AttributeSet,
"javax.swing.text.html.StyleSheet.addAttribute(AttributeSet,Object,Object)",AttributeSet,the updated attribute set
"javax.swing.text.html.StyleSheet.addAttributes(AttributeSet,AttributeSet)",AttributeSet,the updated attribute set
"javax.swing.text.html.StyleSheet.removeAttribute(AttributeSet,Object)",AttributeSet,the updated attribute set
"javax.swing.text.html.StyleSheet.removeAttributes(AttributeSet,Enumeration&lt;?&gt;)",AttributeSet,the updated attribute set
"javax.swing.text.html.StyleSheet.removeAttributes(AttributeSet,AttributeSet)",AttributeSet,the updated attribute set
javax.swing.text.html.StyleSheet.createSmallAttributeSet(AttributeSet),StyleContext.SmallAttributeSet,
javax.swing.text.html.StyleSheet.createLargeAttributeSet(AttributeSet),MutableAttributeSet,
javax.swing.text.html.StyleSheet.getFont(AttributeSet),Font,the font
javax.swing.text.html.StyleSheet.getForeground(AttributeSet),Color,the color
javax.swing.text.html.StyleSheet.getBackground(AttributeSet),Color,the color
javax.swing.text.html.StyleSheet.getBoxPainter(AttributeSet),StyleSheet.BoxPainter,
javax.swing.text.html.StyleSheet.getListPainter(AttributeSet),StyleSheet.ListPainter,
javax.swing.text.html.StyleSheet.setBaseFontSize(int),void,
javax.swing.text.html.StyleSheet.setBaseFontSize(String),void,
javax.swing.text.html.StyleSheet.getIndexOfSize(float),int,
javax.swing.text.html.StyleSheet.getPointSize(int),float,
javax.swing.text.html.StyleSheet.getPointSize(String),float,
javax.swing.text.html.StyleSheet.stringToColor(String),Color,
"javax.swing.text.html.StyleSheet.BoxPainter.getInset(int,View)",float,
"javax.swing.text.html.StyleSheet.BoxPainter.paint(Graphics,float,float,float,float,View)",void,
"javax.swing.text.html.StyleSheet.ListPainter.paint(Graphics,float,float,float,float,View,int)",void,
javax.swing.text.html.parser.AttributeList.getName(),String,attribute name
javax.swing.text.html.parser.AttributeList.getType(),int,attribute type
javax.swing.text.html.parser.AttributeList.getModifier(),int,attribute modifier
javax.swing.text.html.parser.AttributeList.getValues(),Enumeration&lt;?&gt;,possible attribute values
javax.swing.text.html.parser.AttributeList.getValue(),String,default attribute value
javax.swing.text.html.parser.AttributeList.getNext(),AttributeList,the next attribute in the list
javax.swing.text.html.parser.AttributeList.toString(),String,string representation
javax.swing.text.html.parser.AttributeList.name2type(String),int,
javax.swing.text.html.parser.AttributeList.type2name(int),String,
javax.swing.text.html.parser.ContentModel.empty(),boolean,
javax.swing.text.html.parser.ContentModel.getElements(Vector&lt;Element&gt;),void,
javax.swing.text.html.parser.ContentModel.first(Object),boolean,
javax.swing.text.html.parser.ContentModel.first(),Element,
javax.swing.text.html.parser.ContentModel.toString(),String,a string representation of the object.
"javax.swing.text.html.parser.DocumentParser.parse(Reader,HTMLEditorKit.ParserCallback,boolean)",void,
javax.swing.text.html.parser.DocumentParser.handleStartTag(TagElement),void,
javax.swing.text.html.parser.DocumentParser.handleComment(char[]),void,
javax.swing.text.html.parser.DocumentParser.handleEmptyTag(TagElement),void,
javax.swing.text.html.parser.DocumentParser.handleEndTag(TagElement),void,
javax.swing.text.html.parser.DocumentParser.handleText(char[]),void,
"javax.swing.text.html.parser.DocumentParser.handleError(int,String)",void,
javax.swing.text.html.parser.DTD.getName(),String,the name of the DTD
javax.swing.text.html.parser.DTD.getEntity(String),Entity,the Entity corresponding to the name String
javax.swing.text.html.parser.DTD.getEntity(int),Entity,the Entity corresponding to the ch character
javax.swing.text.html.parser.DTD.getElement(String),Element,"the Element corresponding to name, which may be newly created"
javax.swing.text.html.parser.DTD.getElement(int),Element,the Element corresponding to index
"javax.swing.text.html.parser.DTD.defineEntity(String,int,char[])",Entity,the Entity requested or a new Entity if not found
"javax.swing.text.html.parser.DTD.defineElement(String,int,boolean,boolean,ContentModel,BitSet,BitSet,AttributeList)",Element,the Element specified
"javax.swing.text.html.parser.DTD.defineAttributes(String,AttributeList)",void,
"javax.swing.text.html.parser.DTD.defEntity(String,int,int)",Entity,the new character Entity
"javax.swing.text.html.parser.DTD.defEntity(String,int,String)",Entity,the new Entity
"javax.swing.text.html.parser.DTD.defElement(String,int,boolean,boolean,ContentModel,String[],String[],AttributeList)",Element,the new Element
"javax.swing.text.html.parser.DTD.defAttributeList(String,int,int,String,String,AttributeList)",AttributeList,the new AttributeList
"javax.swing.text.html.parser.DTD.defContentModel(int,Object,ContentModel)",ContentModel,the new ContentModel
javax.swing.text.html.parser.DTD.toString(),String,the string representation of this DTD
"javax.swing.text.html.parser.DTD.putDTDHash(String,DTD)",void,
javax.swing.text.html.parser.DTD.getDTD(String),DTD,the DTD which corresponds to name
javax.swing.text.html.parser.DTD.read(DataInputStream),void,
javax.swing.text.html.parser.Element.getName(),String,
javax.swing.text.html.parser.Element.omitStart(),boolean,
javax.swing.text.html.parser.Element.omitEnd(),boolean,
javax.swing.text.html.parser.Element.getType(),int,
javax.swing.text.html.parser.Element.getContent(),ContentModel,
javax.swing.text.html.parser.Element.getAttributes(),AttributeList,
javax.swing.text.html.parser.Element.getIndex(),int,
javax.swing.text.html.parser.Element.isEmpty(),boolean,
javax.swing.text.html.parser.Element.toString(),String,a string representation of the object.
javax.swing.text.html.parser.Element.getAttribute(String),AttributeList,
javax.swing.text.html.parser.Element.getAttributeByValue(String),AttributeList,
javax.swing.text.html.parser.Element.name2type(String),int,
javax.swing.text.html.parser.Entity.getName(),String,"the name of the entity, as a String"
javax.swing.text.html.parser.Entity.getType(),int,the type of the entity
javax.swing.text.html.parser.Entity.isParameter(),boolean,true if it is a parameter entity
javax.swing.text.html.parser.Entity.isGeneral(),boolean,true if it is a general entity
javax.swing.text.html.parser.Entity.getData(),char[],the data
javax.swing.text.html.parser.Entity.getString(),String,the data as a String
javax.swing.text.html.parser.Entity.name2type(String),int,"the corresponding entity type, or the type corresponding to ""CDATA"", if none exists"
javax.swing.text.html.parser.Parser.getCurrentLine(),int,the line number of the line currently being parsed
"javax.swing.text.html.parser.Parser.makeTag(Element,boolean)",TagElement,
javax.swing.text.html.parser.Parser.makeTag(Element),TagElement,
javax.swing.text.html.parser.Parser.getAttributes(),SimpleAttributeSet,
javax.swing.text.html.parser.Parser.flushAttributes(),void,
javax.swing.text.html.parser.Parser.handleText(char[]),void,
javax.swing.text.html.parser.Parser.handleTitle(char[]),void,
javax.swing.text.html.parser.Parser.handleComment(char[]),void,
javax.swing.text.html.parser.Parser.handleEOFInComment(),void,
javax.swing.text.html.parser.Parser.handleEmptyTag(TagElement),void,
javax.swing.text.html.parser.Parser.handleStartTag(TagElement),void,
javax.swing.text.html.parser.Parser.handleEndTag(TagElement),void,
"javax.swing.text.html.parser.Parser.handleError(int,String)",void,
"javax.swing.text.html.parser.Parser.error(String,String,String,String)",void,
"javax.swing.text.html.parser.Parser.error(String,String,String)",void,
"javax.swing.text.html.parser.Parser.error(String,String)",void,
javax.swing.text.html.parser.Parser.error(String),void,
javax.swing.text.html.parser.Parser.startTag(TagElement),void,
javax.swing.text.html.parser.Parser.endTag(boolean),void,
javax.swing.text.html.parser.Parser.markFirstTime(Element),void,
javax.swing.text.html.parser.Parser.parseDTDMarkup(),String,
javax.swing.text.html.parser.Parser.parseMarkupDeclarations(StringBuffer),boolean,
javax.swing.text.html.parser.Parser.parse(Reader),void,
javax.swing.text.html.parser.Parser.getCurrentPos(),int,
javax.swing.text.html.parser.ParserDelegator.setDefaultDTD(),void,
"javax.swing.text.html.parser.ParserDelegator.createDTD(DTD,String)",DTD,
"javax.swing.text.html.parser.ParserDelegator.parse(Reader,HTMLEditorKit.ParserCallback,boolean)",void,
javax.swing.text.html.parser.TagElement.breaksFlow(),boolean,
javax.swing.text.html.parser.TagElement.isPreformatted(),boolean,
javax.swing.text.html.parser.TagElement.getElement(),Element,
javax.swing.text.html.parser.TagElement.getHTMLTag(),HTML.Tag,
javax.swing.text.html.parser.TagElement.fictional(),boolean,
javax.swing.text.rtf.RTFEditorKit.getContentType(),String,the type
"javax.swing.text.rtf.RTFEditorKit.read(InputStream,Document,int)",void,
"javax.swing.text.rtf.RTFEditorKit.write(OutputStream,Document,int,int)",void,
"javax.swing.text.rtf.RTFEditorKit.read(Reader,Document,int)",void,
"javax.swing.text.rtf.RTFEditorKit.write(Writer,Document,int,int)",void,
javax.swing.tree.AbstractLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions),void,
javax.swing.tree.AbstractLayoutCache.getNodeDimensions(),AbstractLayoutCache.NodeDimensions,the NodeDimensions object
javax.swing.tree.AbstractLayoutCache.setModel(TreeModel),void,
javax.swing.tree.AbstractLayoutCache.getModel(),TreeModel,the TreeModel that is providing the data
javax.swing.tree.AbstractLayoutCache.setRootVisible(boolean),void,
javax.swing.tree.AbstractLayoutCache.isRootVisible(),boolean,true if the root node of the tree is displayed
javax.swing.tree.AbstractLayoutCache.setRowHeight(int),void,
javax.swing.tree.AbstractLayoutCache.getRowHeight(),int,
javax.swing.tree.AbstractLayoutCache.setSelectionModel(TreeSelectionModel),void,
javax.swing.tree.AbstractLayoutCache.getSelectionModel(),TreeSelectionModel,the treeSelectionModel
javax.swing.tree.AbstractLayoutCache.getPreferredHeight(),int,the preferred height
javax.swing.tree.AbstractLayoutCache.getPreferredWidth(Rectangle),int,the preferred width for the passed in region
javax.swing.tree.AbstractLayoutCache.isExpanded(TreePath),abstractboolean,
"javax.swing.tree.AbstractLayoutCache.getBounds(TreePath,Rectangle)",abstractRectangle,a Rectangle object specifying the space to be used
javax.swing.tree.AbstractLayoutCache.getPathForRow(int),abstractTreePath,the TreePath for the given row
javax.swing.tree.AbstractLayoutCache.getRowForPath(TreePath),abstractint,the row where the last item in path is visible or -1 if any elements in path aren't currently visible
"javax.swing.tree.AbstractLayoutCache.getPathClosestTo(int,int)",abstractTreePath,the TreePath closest to the specified point
javax.swing.tree.AbstractLayoutCache.getVisiblePathsFrom(TreePath),abstractEnumeration&lt;TreePath&gt;,the Enumerator starting at the desired location
javax.swing.tree.AbstractLayoutCache.getVisibleChildCount(TreePath),abstractint,the number of visible children for the specified path
"javax.swing.tree.AbstractLayoutCache.setExpandedState(TreePath,boolean)",abstractvoid,
javax.swing.tree.AbstractLayoutCache.getExpandedState(TreePath),abstractboolean,"true if the path is expanded and visible, false otherwise"
javax.swing.tree.AbstractLayoutCache.getRowCount(),abstractint,the number of rows being displayed
javax.swing.tree.AbstractLayoutCache.invalidateSizes(),abstractvoid,
javax.swing.tree.AbstractLayoutCache.invalidatePathBounds(TreePath),abstractvoid,
javax.swing.tree.AbstractLayoutCache.treeNodesChanged(TreeModelEvent),abstractvoid,
javax.swing.tree.AbstractLayoutCache.treeNodesInserted(TreeModelEvent),abstractvoid,
javax.swing.tree.AbstractLayoutCache.treeNodesRemoved(TreeModelEvent),abstractvoid,
javax.swing.tree.AbstractLayoutCache.treeStructureChanged(TreeModelEvent),abstractvoid,
javax.swing.tree.AbstractLayoutCache.getRowsForPaths(TreePath[]),int[],"an array of the same length that is passed in containing the rows that each corresponding where each TreePath is displayed; if paths is null, null is returned"
"javax.swing.tree.AbstractLayoutCache.getNodeDimensions(Object,int,int,boolean,Rectangle)",Rectangle,"a Rectangle containing the node dimensions, or null if node has no dimension"
javax.swing.tree.AbstractLayoutCache.isFixedRowHeight(),boolean,
"javax.swing.tree.AbstractLayoutCache.NodeDimensions.getNodeDimensions(Object,int,int,boolean,Rectangle)",abstractRectangle,"a Rectangle containing the node dimensions, or null if node has no dimension"
"javax.swing.tree.DefaultMutableTreeNode.insert(MutableTreeNode,int)",void,
javax.swing.tree.DefaultMutableTreeNode.remove(int),void,
javax.swing.tree.DefaultMutableTreeNode.setParent(MutableTreeNode),void,
javax.swing.tree.DefaultMutableTreeNode.getParent(),TreeNode,"this node's parent TreeNode, or null if this node has no parent"
javax.swing.tree.DefaultMutableTreeNode.getChildAt(int),TreeNode,the TreeNode in this node's child array at the specified index
javax.swing.tree.DefaultMutableTreeNode.getChildCount(),int,an int giving the number of children of this node
javax.swing.tree.DefaultMutableTreeNode.getIndex(TreeNode),int,"an int giving the index of the node in this node's child array, or -1 if the specified node is a not a child of this node"
javax.swing.tree.DefaultMutableTreeNode.children(),Enumeration,an Enumeration of this node's children
javax.swing.tree.DefaultMutableTreeNode.setAllowsChildren(boolean),void,
javax.swing.tree.DefaultMutableTreeNode.getAllowsChildren(),boolean,"true if this node allows children, else false"
javax.swing.tree.DefaultMutableTreeNode.setUserObject(Object),void,
javax.swing.tree.DefaultMutableTreeNode.getUserObject(),Object,the Object stored at this node by the user
javax.swing.tree.DefaultMutableTreeNode.removeFromParent(),void,
javax.swing.tree.DefaultMutableTreeNode.remove(MutableTreeNode),void,
javax.swing.tree.DefaultMutableTreeNode.removeAllChildren(),void,
javax.swing.tree.DefaultMutableTreeNode.add(MutableTreeNode),void,
javax.swing.tree.DefaultMutableTreeNode.isNodeAncestor(TreeNode),boolean,true if this node is a descendant of anotherNode
javax.swing.tree.DefaultMutableTreeNode.isNodeDescendant(DefaultMutableTreeNode),boolean,true if this node is an ancestor of anotherNode
javax.swing.tree.DefaultMutableTreeNode.getSharedAncestor(DefaultMutableTreeNode),TreeNode,"nearest ancestor common to this node and aNode, or null if none"
javax.swing.tree.DefaultMutableTreeNode.isNodeRelated(DefaultMutableTreeNode),boolean,true if aNode is in the same tree as this node; false if aNode is null
javax.swing.tree.DefaultMutableTreeNode.getDepth(),int,the depth of the tree whose root is this node
javax.swing.tree.DefaultMutableTreeNode.getLevel(),int,the number of levels above this node
javax.swing.tree.DefaultMutableTreeNode.getPath(),TreeNode[],"an array of TreeNode objects giving the path, where the first element in the path is the root and the last element is this node."
"javax.swing.tree.DefaultMutableTreeNode.getPathToRoot(TreeNode,int)",TreeNode[],an array of TreeNodes giving the path from the root to the specified node
javax.swing.tree.DefaultMutableTreeNode.getUserObjectPath(),Object[],
javax.swing.tree.DefaultMutableTreeNode.getRoot(),TreeNode,the root of the tree that contains this node
javax.swing.tree.DefaultMutableTreeNode.isRoot(),boolean,true if this node is the root of its tree
javax.swing.tree.DefaultMutableTreeNode.getNextNode(),DefaultMutableTreeNode,"the node that follows this node in a preorder traversal, or null if this node is last"
javax.swing.tree.DefaultMutableTreeNode.getPreviousNode(),DefaultMutableTreeNode,"the node that precedes this node in a preorder traversal, or null if this node is the first"
javax.swing.tree.DefaultMutableTreeNode.preorderEnumeration(),Enumeration,an enumeration for traversing the tree in preorder
javax.swing.tree.DefaultMutableTreeNode.postorderEnumeration(),Enumeration,an enumeration for traversing the tree in postorder
javax.swing.tree.DefaultMutableTreeNode.breadthFirstEnumeration(),Enumeration,an enumeration for traversing the tree in breadth-first order
javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration(),Enumeration,an enumeration for traversing the tree in depth-first order
javax.swing.tree.DefaultMutableTreeNode.pathFromAncestorEnumeration(TreeNode),Enumeration,an enumeration for following the path from an ancestor of this node to this one
javax.swing.tree.DefaultMutableTreeNode.isNodeChild(TreeNode),boolean,true if aNode is a child of this node; false if aNode is null
javax.swing.tree.DefaultMutableTreeNode.getFirstChild(),TreeNode,the first child of this node
javax.swing.tree.DefaultMutableTreeNode.getLastChild(),TreeNode,the last child of this node
javax.swing.tree.DefaultMutableTreeNode.getChildAfter(TreeNode),TreeNode,the child of this node that immediately follows aChild
javax.swing.tree.DefaultMutableTreeNode.getChildBefore(TreeNode),TreeNode,the child of this node that immediately precedes aChild
javax.swing.tree.DefaultMutableTreeNode.isNodeSibling(TreeNode),boolean,true if anotherNode is a sibling of this node
javax.swing.tree.DefaultMutableTreeNode.getSiblingCount(),int,the number of siblings of this node
javax.swing.tree.DefaultMutableTreeNode.getNextSibling(),DefaultMutableTreeNode,the sibling of this node that immediately follows this node
javax.swing.tree.DefaultMutableTreeNode.getPreviousSibling(),DefaultMutableTreeNode,the sibling of this node that immediately precedes this node
javax.swing.tree.DefaultMutableTreeNode.isLeaf(),boolean,true if this node has no children
javax.swing.tree.DefaultMutableTreeNode.getFirstLeaf(),DefaultMutableTreeNode,the first leaf in the subtree rooted at this node
javax.swing.tree.DefaultMutableTreeNode.getLastLeaf(),DefaultMutableTreeNode,the last leaf in the subtree rooted at this node
javax.swing.tree.DefaultMutableTreeNode.getNextLeaf(),DefaultMutableTreeNode,returns the next leaf past this node
javax.swing.tree.DefaultMutableTreeNode.getPreviousLeaf(),DefaultMutableTreeNode,returns the leaf before this node
javax.swing.tree.DefaultMutableTreeNode.getLeafCount(),int,the number of leaves beneath this node
javax.swing.tree.DefaultMutableTreeNode.toString(),String,a string representation of the object.
javax.swing.tree.DefaultMutableTreeNode.clone(),Object,a copy of this node
javax.swing.tree.DefaultTreeCellEditor.setBorderSelectionColor(Color),void,
javax.swing.tree.DefaultTreeCellEditor.getBorderSelectionColor(),Color,the border selection color
javax.swing.tree.DefaultTreeCellEditor.setFont(Font),void,
javax.swing.tree.DefaultTreeCellEditor.getFont(),Font,the editing Font
"javax.swing.tree.DefaultTreeCellEditor.getTreeCellEditorComponent(JTree,Object,boolean,boolean,boolean,int)",Component,the component for editing
javax.swing.tree.DefaultTreeCellEditor.getCellEditorValue(),Object,the value currently being edited
javax.swing.tree.DefaultTreeCellEditor.isCellEditable(EventObject),boolean,true if editing can be started
javax.swing.tree.DefaultTreeCellEditor.shouldSelectCell(EventObject),boolean,true if the editor would like the editing cell to be selected; otherwise returns false
javax.swing.tree.DefaultTreeCellEditor.stopCellEditing(),boolean,true if editing was stopped; false otherwise
javax.swing.tree.DefaultTreeCellEditor.cancelCellEditing(),void,
javax.swing.tree.DefaultTreeCellEditor.addCellEditorListener(CellEditorListener),void,
javax.swing.tree.DefaultTreeCellEditor.removeCellEditorListener(CellEditorListener),void,
javax.swing.tree.DefaultTreeCellEditor.getCellEditorListeners(),CellEditorListener[],all of the CellEditorListeners added or an empty array if no listeners have been added
javax.swing.tree.DefaultTreeCellEditor.valueChanged(TreeSelectionEvent),void,
javax.swing.tree.DefaultTreeCellEditor.actionPerformed(ActionEvent),void,
javax.swing.tree.DefaultTreeCellEditor.setTree(JTree),void,
javax.swing.tree.DefaultTreeCellEditor.shouldStartEditingTimer(EventObject),boolean,
javax.swing.tree.DefaultTreeCellEditor.startEditingTimer(),void,
javax.swing.tree.DefaultTreeCellEditor.canEditImmediately(EventObject),boolean,
"javax.swing.tree.DefaultTreeCellEditor.inHitRegion(int,int)",boolean,true if the passed in location is a valid mouse location
"javax.swing.tree.DefaultTreeCellEditor.determineOffset(JTree,Object,boolean,boolean,boolean,int)",void,
javax.swing.tree.DefaultTreeCellEditor.prepareForEditing(),void,
javax.swing.tree.DefaultTreeCellEditor.createContainer(),Container,
javax.swing.tree.DefaultTreeCellEditor.createTreeCellEditor(),TreeCellEditor,a new TextField editor
javax.swing.tree.DefaultTreeCellRenderer.updateUI(),void,
javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon(),Icon,
javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon(),Icon,
javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon(),Icon,
javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(Icon),void,
javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon(),Icon,
javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(Icon),void,
javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon(),Icon,
javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(Icon),void,
javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon(),Icon,
javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(Color),void,
javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor(),Color,
javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(Color),void,
javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor(),Color,
javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(Color),void,
javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor(),Color,
javax.swing.tree.DefaultTreeCellRenderer.setBackgroundNonSelectionColor(Color),void,
javax.swing.tree.DefaultTreeCellRenderer.getBackgroundNonSelectionColor(),Color,
javax.swing.tree.DefaultTreeCellRenderer.setBorderSelectionColor(Color),void,
javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor(),Color,
javax.swing.tree.DefaultTreeCellRenderer.setFont(Font),void,
javax.swing.tree.DefaultTreeCellRenderer.getFont(),Font,"this component's font; if a font has not been set for this component, the font of its parent is returned"
javax.swing.tree.DefaultTreeCellRenderer.setBackground(Color),void,
"javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)",Component,the Component that the renderer uses to draw the value
javax.swing.tree.DefaultTreeCellRenderer.paint(Graphics),void,
javax.swing.tree.DefaultTreeCellRenderer.getPreferredSize(),Dimension,the value of the preferredSize property
javax.swing.tree.DefaultTreeCellRenderer.validate(),void,
javax.swing.tree.DefaultTreeCellRenderer.invalidate(),void,
javax.swing.tree.DefaultTreeCellRenderer.revalidate(),void,
"javax.swing.tree.DefaultTreeCellRenderer.repaint(long,int,int,int,int)",void,
javax.swing.tree.DefaultTreeCellRenderer.repaint(Rectangle),void,
javax.swing.tree.DefaultTreeCellRenderer.repaint(),void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,Object,Object)",void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,byte,byte)",void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,char,char)",void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,short,short)",void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,int,int)",void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,long,long)",void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,float,float)",void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,double,double)",void,
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,boolean,boolean)",void,
javax.swing.tree.DefaultTreeModel.setAsksAllowsChildren(boolean),void,
javax.swing.tree.DefaultTreeModel.asksAllowsChildren(),boolean,"true if only nodes which do not allow children are leaf nodes, false if nodes which have no children (even if allowed) are leaf nodes"
javax.swing.tree.DefaultTreeModel.setRoot(TreeNode),void,
javax.swing.tree.DefaultTreeModel.getRoot(),Object,the root of the tree
"javax.swing.tree.DefaultTreeModel.getIndexOfChild(Object,Object)",int,"the index of the child in the parent, or -1 if either the parent or the child is null"
"javax.swing.tree.DefaultTreeModel.getChild(Object,int)",Object,the child of parent at index index
javax.swing.tree.DefaultTreeModel.getChildCount(Object),int,the number of children of the node parent
javax.swing.tree.DefaultTreeModel.isLeaf(Object),boolean,true if the node is a leaf node
javax.swing.tree.DefaultTreeModel.reload(),void,
"javax.swing.tree.DefaultTreeModel.valueForPathChanged(TreePath,Object)",void,
"javax.swing.tree.DefaultTreeModel.insertNodeInto(MutableTreeNode,MutableTreeNode,int)",void,
javax.swing.tree.DefaultTreeModel.removeNodeFromParent(MutableTreeNode),void,
javax.swing.tree.DefaultTreeModel.nodeChanged(TreeNode),void,
javax.swing.tree.DefaultTreeModel.reload(TreeNode),void,
"javax.swing.tree.DefaultTreeModel.nodesWereInserted(TreeNode,int[])",void,
"javax.swing.tree.DefaultTreeModel.nodesWereRemoved(TreeNode,int[],Object[])",void,
"javax.swing.tree.DefaultTreeModel.nodesChanged(TreeNode,int[])",void,
javax.swing.tree.DefaultTreeModel.nodeStructureChanged(TreeNode),void,
javax.swing.tree.DefaultTreeModel.getPathToRoot(TreeNode),TreeNode[],
"javax.swing.tree.DefaultTreeModel.getPathToRoot(TreeNode,int)",TreeNode[],an array of TreeNodes giving the path from the root to the specified node
javax.swing.tree.DefaultTreeModel.addTreeModelListener(TreeModelListener),void,
javax.swing.tree.DefaultTreeModel.removeTreeModelListener(TreeModelListener),void,
javax.swing.tree.DefaultTreeModel.getTreeModelListeners(),TreeModelListener[],all of this model's TreeModelListeners or an empty array if no tree model listeners are currently registered
"javax.swing.tree.DefaultTreeModel.fireTreeNodesChanged(Object,Object[],int[],Object[])",void,
"javax.swing.tree.DefaultTreeModel.fireTreeNodesInserted(Object,Object[],int[],Object[])",void,
"javax.swing.tree.DefaultTreeModel.fireTreeNodesRemoved(Object,Object[],int[],Object[])",void,
"javax.swing.tree.DefaultTreeModel.fireTreeStructureChanged(Object,Object[],int[],Object[])",void,
javax.swing.tree.DefaultTreeModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added"
javax.swing.tree.DefaultTreeSelectionModel.setRowMapper(RowMapper),void,
javax.swing.tree.DefaultTreeSelectionModel.getRowMapper(),RowMapper,
javax.swing.tree.DefaultTreeSelectionModel.setSelectionMode(int),void,
javax.swing.tree.DefaultTreeSelectionModel.getSelectionMode(),int,
javax.swing.tree.DefaultTreeSelectionModel.setSelectionPath(TreePath),void,
javax.swing.tree.DefaultTreeSelectionModel.setSelectionPaths(TreePath[]),void,
javax.swing.tree.DefaultTreeSelectionModel.addSelectionPath(TreePath),void,
javax.swing.tree.DefaultTreeSelectionModel.addSelectionPaths(TreePath[]),void,
javax.swing.tree.DefaultTreeSelectionModel.removeSelectionPath(TreePath),void,
javax.swing.tree.DefaultTreeSelectionModel.removeSelectionPaths(TreePath[]),void,
javax.swing.tree.DefaultTreeSelectionModel.getSelectionPath(),TreePath,
javax.swing.tree.DefaultTreeSelectionModel.getSelectionPaths(),TreePath[],the selection
javax.swing.tree.DefaultTreeSelectionModel.getSelectionCount(),int,
javax.swing.tree.DefaultTreeSelectionModel.isPathSelected(TreePath),boolean,
javax.swing.tree.DefaultTreeSelectionModel.isSelectionEmpty(),boolean,
javax.swing.tree.DefaultTreeSelectionModel.clearSelection(),void,
javax.swing.tree.DefaultTreeSelectionModel.addTreeSelectionListener(TreeSelectionListener),void,
javax.swing.tree.DefaultTreeSelectionModel.removeTreeSelectionListener(TreeSelectionListener),void,
javax.swing.tree.DefaultTreeSelectionModel.getTreeSelectionListeners(),TreeSelectionListener[],all of this model's TreeSelectionListeners or an empty array if no tree selection listeners are currently registered
javax.swing.tree.DefaultTreeSelectionModel.fireValueChanged(TreeSelectionEvent),void,
javax.swing.tree.DefaultTreeSelectionModel.getListeners(Class&lt;T&gt;),&lt;T extends EventListener&gt;T[],"an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added"
javax.swing.tree.DefaultTreeSelectionModel.getSelectionRows(),int[],the selection in terms of rows
javax.swing.tree.DefaultTreeSelectionModel.getMinSelectionRow(),int,
javax.swing.tree.DefaultTreeSelectionModel.getMaxSelectionRow(),int,
javax.swing.tree.DefaultTreeSelectionModel.isRowSelected(int),boolean,
javax.swing.tree.DefaultTreeSelectionModel.resetRowSelection(),void,
javax.swing.tree.DefaultTreeSelectionModel.getLeadSelectionRow(),int,
javax.swing.tree.DefaultTreeSelectionModel.getLeadSelectionPath(),TreePath,
javax.swing.tree.DefaultTreeSelectionModel.addPropertyChangeListener(PropertyChangeListener),void,
javax.swing.tree.DefaultTreeSelectionModel.removePropertyChangeListener(PropertyChangeListener),void,
javax.swing.tree.DefaultTreeSelectionModel.getPropertyChangeListeners(),PropertyChangeListener[],all of this model's PropertyChangeListeners or an empty array if no property change listeners are currently registered
javax.swing.tree.DefaultTreeSelectionModel.insureRowContinuity(),void,
javax.swing.tree.DefaultTreeSelectionModel.arePathsContiguous(TreePath[]),boolean,
javax.swing.tree.DefaultTreeSelectionModel.canPathsBeAdded(TreePath[]),boolean,
javax.swing.tree.DefaultTreeSelectionModel.canPathsBeRemoved(TreePath[]),boolean,
"javax.swing.tree.DefaultTreeSelectionModel.notifyPathChange(Vector&lt;?&gt;,TreePath)",void,
javax.swing.tree.DefaultTreeSelectionModel.updateLeadIndex(),void,
javax.swing.tree.DefaultTreeSelectionModel.insureUniqueness(),void,
javax.swing.tree.DefaultTreeSelectionModel.toString(),String,a String representation of this object
javax.swing.tree.DefaultTreeSelectionModel.clone(),Object,a clone of this instance.
javax.swing.tree.FixedHeightLayoutCache.setModel(TreeModel),void,
javax.swing.tree.FixedHeightLayoutCache.setRootVisible(boolean),void,
javax.swing.tree.FixedHeightLayoutCache.setRowHeight(int),void,
javax.swing.tree.FixedHeightLayoutCache.getRowCount(),int,the number of rows being displayed
javax.swing.tree.FixedHeightLayoutCache.invalidatePathBounds(TreePath),void,
javax.swing.tree.FixedHeightLayoutCache.invalidateSizes(),void,
javax.swing.tree.FixedHeightLayoutCache.isExpanded(TreePath),boolean,
"javax.swing.tree.FixedHeightLayoutCache.getBounds(TreePath,Rectangle)",Rectangle,a Rectangle object specifying the space to be used
javax.swing.tree.FixedHeightLayoutCache.getPathForRow(int),TreePath,the TreePath for the given row
javax.swing.tree.FixedHeightLayoutCache.getRowForPath(TreePath),int,the row where the last item in path is visible or -1 if any elements in path aren't currently visible
"javax.swing.tree.FixedHeightLayoutCache.getPathClosestTo(int,int)",TreePath,the TreePath closest to the specified point
javax.swing.tree.FixedHeightLayoutCache.getVisibleChildCount(TreePath),int,the number of visible children for the specified path
javax.swing.tree.FixedHeightLayoutCache.getVisiblePathsFrom(TreePath),Enumeration&lt;TreePath&gt;,the Enumerator starting at the desired location
"javax.swing.tree.FixedHeightLayoutCache.setExpandedState(TreePath,boolean)",void,
javax.swing.tree.FixedHeightLayoutCache.getExpandedState(TreePath),boolean,"true if the path is expanded and visible, false otherwise"
javax.swing.tree.FixedHeightLayoutCache.treeNodesChanged(TreeModelEvent),void,
javax.swing.tree.FixedHeightLayoutCache.treeNodesInserted(TreeModelEvent),void,
javax.swing.tree.FixedHeightLayoutCache.treeNodesRemoved(TreeModelEvent),void,
javax.swing.tree.FixedHeightLayoutCache.treeStructureChanged(TreeModelEvent),void,
javax.swing.tree.TreePath.getPath(),Object[],an array of the elements in this TreePath
javax.swing.tree.TreePath.getLastPathComponent(),Object,the last element in the path
javax.swing.tree.TreePath.getPathCount(),int,the number of elements in the path
javax.swing.tree.TreePath.getPathComponent(int),Object,the element at the specified index
javax.swing.tree.TreePath.equals(Object),boolean,true if this object is the same as the obj argument; false otherwise.
javax.swing.tree.TreePath.hashCode(),int,the hashCode for the object
javax.swing.tree.TreePath.isDescendant(TreePath),boolean,true if aTreePath is a descendant of this path
javax.swing.tree.TreePath.pathByAddingChild(Object),TreePath,
javax.swing.tree.TreePath.getParentPath(),TreePath,the parent path
javax.swing.tree.TreePath.toString(),String,a String representation of this object
javax.swing.tree.VariableHeightLayoutCache.setModel(TreeModel),void,
javax.swing.tree.VariableHeightLayoutCache.setRootVisible(boolean),void,
javax.swing.tree.VariableHeightLayoutCache.setRowHeight(int),void,
javax.swing.tree.VariableHeightLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions),void,
"javax.swing.tree.VariableHeightLayoutCache.setExpandedState(TreePath,boolean)",void,
javax.swing.tree.VariableHeightLayoutCache.getExpandedState(TreePath),boolean,"true if the path is expanded and visible, otherwise false"
"javax.swing.tree.VariableHeightLayoutCache.getBounds(TreePath,Rectangle)",Rectangle,the bounds of the enclosing rectangle or null if the node could not be ascertained
javax.swing.tree.VariableHeightLayoutCache.getPathForRow(int),TreePath,"the path for row, or null if row is not visible"
javax.swing.tree.VariableHeightLayoutCache.getRowForPath(TreePath),int,the row where the last item in path is visible
javax.swing.tree.VariableHeightLayoutCache.getRowCount(),int,the number of visible rows
javax.swing.tree.VariableHeightLayoutCache.invalidatePathBounds(TreePath),void,
javax.swing.tree.VariableHeightLayoutCache.getPreferredHeight(),int,the preferred height
javax.swing.tree.VariableHeightLayoutCache.getPreferredWidth(Rectangle),int,the preferred width for the passed in region
"javax.swing.tree.VariableHeightLayoutCache.getPathClosestTo(int,int)",TreePath,"the path to the node that is closest to x, y"
javax.swing.tree.VariableHeightLayoutCache.getVisiblePathsFrom(TreePath),Enumeration&lt;TreePath&gt;,an Enumerator that increments over the visible paths
javax.swing.tree.VariableHeightLayoutCache.getVisibleChildCount(TreePath),int,the number of visible children for path
javax.swing.tree.VariableHeightLayoutCache.invalidateSizes(),void,
javax.swing.tree.VariableHeightLayoutCache.isExpanded(TreePath),boolean,true if the value identified by path is currently expanded
javax.swing.tree.VariableHeightLayoutCache.treeNodesChanged(TreeModelEvent),void,
javax.swing.tree.VariableHeightLayoutCache.treeNodesInserted(TreeModelEvent),void,
javax.swing.tree.VariableHeightLayoutCache.treeNodesRemoved(TreeModelEvent),void,
javax.swing.tree.VariableHeightLayoutCache.treeStructureChanged(TreeModelEvent),void,
javax.swing.undo.AbstractUndoableEdit.die(),void,
javax.swing.undo.AbstractUndoableEdit.undo(),void,
javax.swing.undo.AbstractUndoableEdit.canUndo(),boolean,true if this edit is alive and hasBeenDone is true
javax.swing.undo.AbstractUndoableEdit.redo(),void,
javax.swing.undo.AbstractUndoableEdit.canRedo(),boolean,true if this edit is alive and hasBeenDone is false
javax.swing.undo.AbstractUndoableEdit.addEdit(UndoableEdit),boolean,false
javax.swing.undo.AbstractUndoableEdit.replaceEdit(UndoableEdit),boolean,false
javax.swing.undo.AbstractUndoableEdit.isSignificant(),boolean,true
javax.swing.undo.AbstractUndoableEdit.getPresentationName(),String,"the empty string """""
javax.swing.undo.AbstractUndoableEdit.getUndoPresentationName(),String,"the value from the defaults table with key AbstractUndoableEdit.undoText, followed by a space, followed by getPresentationName unless getPresentationName is """" in which case, the defaults value is returned alone."
javax.swing.undo.AbstractUndoableEdit.getRedoPresentationName(),String,"the value from the defaults table with key AbstractUndoableEdit.redoText, followed by a space, followed by getPresentationName unless getPresentationName is """" in which case, the defaults value is returned alone."
javax.swing.undo.AbstractUndoableEdit.toString(),String,a String representation of this object
javax.swing.undo.CompoundEdit.undo(),void,
javax.swing.undo.CompoundEdit.redo(),void,
javax.swing.undo.CompoundEdit.lastEdit(),UndoableEdit,
javax.swing.undo.CompoundEdit.die(),void,
javax.swing.undo.CompoundEdit.addEdit(UndoableEdit),boolean,true if the edit is inProgress; otherwise returns false
javax.swing.undo.CompoundEdit.end(),void,
javax.swing.undo.CompoundEdit.canUndo(),boolean,true if this edit is alive and hasBeenDone is true
javax.swing.undo.CompoundEdit.canRedo(),boolean,true if this edit is alive and hasBeenDone is false
javax.swing.undo.CompoundEdit.isInProgress(),boolean,
javax.swing.undo.CompoundEdit.isSignificant(),boolean,true
javax.swing.undo.CompoundEdit.getPresentationName(),String,"the empty string """""
javax.swing.undo.CompoundEdit.getUndoPresentationName(),String,"the value from the defaults table with key AbstractUndoableEdit.undoText, followed by a space, followed by getPresentationName unless getPresentationName is """" in which case, the defaults value is returned alone."
javax.swing.undo.CompoundEdit.getRedoPresentationName(),String,"the value from the defaults table with key AbstractUndoableEdit.redoText, followed by a space, followed by getPresentationName unless getPresentationName is """" in which case, the defaults value is returned alone."
javax.swing.undo.CompoundEdit.toString(),String,a String representation of this object
"javax.swing.undo.StateEdit.init(StateEditable,String)",void,
javax.swing.undo.StateEdit.end(),void,
javax.swing.undo.StateEdit.undo(),void,
javax.swing.undo.StateEdit.redo(),void,
javax.swing.undo.StateEdit.getPresentationName(),String,"the empty string """""
javax.swing.undo.StateEdit.removeRedundantState(),void,
javax.swing.undo.UndoableEditSupport.addUndoableEditListener(UndoableEditListener),void,
javax.swing.undo.UndoableEditSupport.removeUndoableEditListener(UndoableEditListener),void,
javax.swing.undo.UndoableEditSupport.getUndoableEditListeners(),UndoableEditListener[],all of the UndoableEditListeners added or an empty array if no listeners have been added
javax.swing.undo.UndoableEditSupport._postEdit(UndoableEdit),void,
javax.swing.undo.UndoableEditSupport.postEdit(UndoableEdit),void,
javax.swing.undo.UndoableEditSupport.getUpdateLevel(),int,an integer representing the update level
javax.swing.undo.UndoableEditSupport.beginUpdate(),void,
javax.swing.undo.UndoableEditSupport.createCompoundEdit(),CompoundEdit,
javax.swing.undo.UndoableEditSupport.endUpdate(),void,
javax.swing.undo.UndoableEditSupport.toString(),String,a String representation of this object
javax.swing.undo.UndoManager.getLimit(),int,the maximum number of edits this UndoManager holds
javax.swing.undo.UndoManager.discardAllEdits(),void,
javax.swing.undo.UndoManager.trimForLimit(),void,
"javax.swing.undo.UndoManager.trimEdits(int,int)",void,
javax.swing.undo.UndoManager.setLimit(int),void,
javax.swing.undo.UndoManager.editToBeUndone(),UndoableEdit,the next significant edit to be undone
javax.swing.undo.UndoManager.editToBeRedone(),UndoableEdit,the next significant edit to be redone
javax.swing.undo.UndoManager.undoTo(UndoableEdit),void,
javax.swing.undo.UndoManager.redoTo(UndoableEdit),void,
javax.swing.undo.UndoManager.undoOrRedo(),void,
javax.swing.undo.UndoManager.canUndoOrRedo(),boolean,true if invoking canUndoOrRedo is valid
javax.swing.undo.UndoManager.undo(),void,
javax.swing.undo.UndoManager.canUndo(),boolean,true if there are edits to be undone
javax.swing.undo.UndoManager.redo(),void,
javax.swing.undo.UndoManager.canRedo(),boolean,true if there are edits to be redone
javax.swing.undo.UndoManager.addEdit(UndoableEdit),boolean,true if anEdit can be incorporated into this edit
javax.swing.undo.UndoManager.end(),void,
javax.swing.undo.UndoManager.getUndoOrRedoPresentationName(),String,undo or redo name
javax.swing.undo.UndoManager.getUndoPresentationName(),String,a description of the undoable form of this edit
javax.swing.undo.UndoManager.getRedoPresentationName(),String,a description of the redoable form of this edit
javax.swing.undo.UndoManager.undoableEditHappened(UndoableEditEvent),void,
javax.swing.undo.UndoManager.toString(),String,a String representation of this object
javax.tools.DiagnosticCollector.report(Diagnostic&lt;?),void,
javax.tools.DiagnosticCollector.getDiagnostics(),List&lt;Diagnostic&lt;? extends S&gt;&gt;,a list view of diagnostics
javax.tools.ForwardingFileObject.toUri(),URI,a URI
javax.tools.ForwardingFileObject.getName(),String,a user-friendly name
javax.tools.ForwardingFileObject.openInputStream(),InputStream,an InputStream
javax.tools.ForwardingFileObject.openOutputStream(),OutputStream,an OutputStream
javax.tools.ForwardingFileObject.openReader(boolean),Reader,a Reader
javax.tools.ForwardingFileObject.getCharContent(boolean),CharSequence,a CharSequence if available; null otherwise
javax.tools.ForwardingFileObject.openWriter(),Writer,a Writer
javax.tools.ForwardingFileObject.getLastModified(),long,"the time this file object was last modified; or 0 if the file object does not exist, if an I/O error occurred, or if the operation is not supported"
javax.tools.ForwardingFileObject.delete(),boolean,true if and only if this file object is successfully deleted; false otherwise
javax.tools.ForwardingJavaFileManager.getClassLoader(JavaFileManager.Location),ClassLoader,a class loader for the given location; or null if loading plug-ins from the given location is disabled or if the location is not known
"javax.tools.ForwardingJavaFileManager.list(JavaFileManager.Location,String,Set&lt;JavaFileObject.Kind&gt;,boolean)",Iterable&lt;JavaFileObject&gt;,an Iterable of file objects matching the given criteria
"javax.tools.ForwardingJavaFileManager.inferBinaryName(JavaFileManager.Location,JavaFileObject)",String,a binary name or null the file object is not found in the given location
"javax.tools.ForwardingJavaFileManager.isSameFile(FileObject,FileObject)",boolean,true if the given file objects represent the same underlying object
"javax.tools.ForwardingJavaFileManager.handleOption(String,Iterator&lt;String&gt;)",boolean,"true if this option was handled by this file manager, false otherwise"
javax.tools.ForwardingJavaFileManager.hasLocation(JavaFileManager.Location),boolean,true if the location is known
javax.tools.ForwardingJavaFileManager.isSupportedOption(String),int,the number of arguments the given option takes or -1 if the option is not supported
"javax.tools.ForwardingJavaFileManager.getJavaFileForInput(JavaFileManager.Location,String,JavaFileObject.Kind)",JavaFileObject,"a file object, might return null if the file does not exist"
"javax.tools.ForwardingJavaFileManager.getJavaFileForOutput(JavaFileManager.Location,String,JavaFileObject.Kind,FileObject)",JavaFileObject,a file object for output
"javax.tools.ForwardingJavaFileManager.getFileForInput(JavaFileManager.Location,String,String)",FileObject,"a file object, might return null if the file does not exist"
"javax.tools.ForwardingJavaFileManager.getFileForOutput(JavaFileManager.Location,String,String,FileObject)",FileObject,a file object
javax.tools.ForwardingJavaFileManager.flush(),void,
javax.tools.ForwardingJavaFileManager.close(),void,
javax.tools.ForwardingJavaFileObject.getKind(),JavaFileObject.Kind,the kind
"javax.tools.ForwardingJavaFileObject.isNameCompatible(String,JavaFileObject.Kind)",boolean,true if this file object is compatible; false otherwise
javax.tools.ForwardingJavaFileObject.getNestingKind(),NestingKind,"the nesting kind, or null if the nesting kind is not known"
javax.tools.ForwardingJavaFileObject.getAccessLevel(),Modifier,the access level
javax.tools.SimpleJavaFileObject.toUri(),URI,a URI
javax.tools.SimpleJavaFileObject.getName(),String,a user-friendly name
javax.tools.SimpleJavaFileObject.openInputStream(),InputStream,an InputStream
javax.tools.SimpleJavaFileObject.openOutputStream(),OutputStream,an OutputStream
javax.tools.SimpleJavaFileObject.openReader(boolean),Reader,a Reader wrapping the result of getCharContent
javax.tools.SimpleJavaFileObject.getCharContent(boolean),CharSequence,a CharSequence if available; null otherwise
javax.tools.SimpleJavaFileObject.openWriter(),Writer,a Writer wrapping the result of openOutputStream
javax.tools.SimpleJavaFileObject.getLastModified(),long,0L
javax.tools.SimpleJavaFileObject.delete(),boolean,false
javax.tools.SimpleJavaFileObject.getKind(),JavaFileObject.Kind,this.kind
"javax.tools.SimpleJavaFileObject.isNameCompatible(String,JavaFileObject.Kind)",boolean,true if this file object is compatible; false otherwise
javax.tools.SimpleJavaFileObject.getNestingKind(),NestingKind,"the nesting kind, or null if the nesting kind is not known"
javax.tools.SimpleJavaFileObject.getAccessLevel(),Modifier,the access level
javax.tools.SimpleJavaFileObject.toString(),String,a string representation of the object.
javax.tools.ToolProvider.getSystemJavaCompiler(),JavaCompiler,the compiler provided with this platform or null if no compiler is provided
javax.tools.ToolProvider.getSystemDocumentationTool(),DocumentationTool,the documentation tool provided with this platform or null if no documentation tool is provided
javax.tools.ToolProvider.getSystemToolClassLoader(),ClassLoader,the class loader for tools provided with this platform or null if no tools are provided
javax.xml.bind.Binder.unmarshal(XmlNode),abstractObject,the newly created root object of the JAXB object tree.
"javax.xml.bind.Binder.unmarshal(XmlNode,Class&lt;T&gt;)",abstract&lt;T&gt;JAXBElement&lt;T&gt;,JAXB Element representation of node
"javax.xml.bind.Binder.marshal(Object,XmlNode)",abstractvoid,
javax.xml.bind.Binder.getXMLNode(Object),abstractXmlNode,"null if the specified JAXB object is not known to this Binder, or if it is not associated with an XML element."
javax.xml.bind.Binder.getJAXBNode(XmlNode),abstractObject,"null if the specified XML node is not known to this Binder, or if it is not associated with a JAXB object."
javax.xml.bind.Binder.updateXML(Object),abstractXmlNode,
"javax.xml.bind.Binder.updateXML(Object,XmlNode)",abstractXmlNode,"Returns the updated XML node. Typically, this is the same node you passed in as xmlNode, but it maybe a different object, for example when the tag name of the object has changed."
javax.xml.bind.Binder.updateJAXB(XmlNode),abstractObject,"Returns the updated JAXB object. Typically, this is the same object that was returned from earlier marshal(Object,Object) or updateJAXB(Object) method invocation, but it maybe a different object, for example when the name of the XML element has changed."
javax.xml.bind.Binder.setSchema(Schema),abstractvoid,
javax.xml.bind.Binder.getSchema(),abstractSchema,the Schema object for validation or null if not present
javax.xml.bind.Binder.setEventHandler(ValidationEventHandler),abstractvoid,
javax.xml.bind.Binder.getEventHandler(),abstractValidationEventHandler,the current ValidationEventHandler or the default event handler if it hasn't been set
"javax.xml.bind.Binder.setProperty(String,Object)",abstractvoid,
javax.xml.bind.Binder.getProperty(String),abstractObject,the value of the requested property
javax.xml.bind.DatatypeConverter.setDatatypeConverter(DatatypeConverterInterface),void,
javax.xml.bind.DatatypeConverter.parseString(String),String,A String value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseInteger(String),BigInteger,A BigInteger value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseInt(String),int,A int value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseLong(String),long,A long value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseShort(String),short,A short value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseDecimal(String),BigDecimal,A BigDecimal value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseFloat(String),float,A float value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseDouble(String),double,A double value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseBoolean(String),boolean,A boolean value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseByte(String),byte,A byte value represented by the string argument.
"javax.xml.bind.DatatypeConverter.parseQName(String,NamespaceContext)",QName,A QName value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseDateTime(String),Calendar,A Calendar object represented by the string argument.
javax.xml.bind.DatatypeConverter.parseBase64Binary(String),byte[],An array of bytes represented by the string argument.
javax.xml.bind.DatatypeConverter.parseHexBinary(String),byte[],An array of bytes represented by the string argument.
javax.xml.bind.DatatypeConverter.parseUnsignedInt(String),long,A long value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseUnsignedShort(String),int,An int value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseTime(String),Calendar,A Calendar value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseDate(String),Calendar,A Calendar value represented by the string argument.
javax.xml.bind.DatatypeConverter.parseAnySimpleType(String),String,A string containing the lexical representation of the simple type.
javax.xml.bind.DatatypeConverter.printString(String),String,A string containing a lexical representation of xsd:string.
javax.xml.bind.DatatypeConverter.printInteger(BigInteger),String,A string containing a lexical representation of xsd:integer
javax.xml.bind.DatatypeConverter.printInt(int),String,A string containing a lexical representation of xsd:int
javax.xml.bind.DatatypeConverter.printLong(long),String,A string containing a lexical representation of xsd:long
javax.xml.bind.DatatypeConverter.printShort(short),String,A string containing a lexical representation of xsd:short
javax.xml.bind.DatatypeConverter.printDecimal(BigDecimal),String,A string containing a lexical representation of xsd:decimal
javax.xml.bind.DatatypeConverter.printFloat(float),String,A string containing a lexical representation of xsd:float
javax.xml.bind.DatatypeConverter.printDouble(double),String,A string containing a lexical representation of xsd:double
javax.xml.bind.DatatypeConverter.printBoolean(boolean),String,A string containing a lexical representation of xsd:boolean
javax.xml.bind.DatatypeConverter.printByte(byte),String,A string containing a lexical representation of xsd:byte
"javax.xml.bind.DatatypeConverter.printQName(QName,NamespaceContext)",String,A string containing a lexical representation of QName
javax.xml.bind.DatatypeConverter.printDateTime(Calendar),String,A string containing a lexical representation of xsd:dateTime
javax.xml.bind.DatatypeConverter.printBase64Binary(byte[]),String,A string containing a lexical representation of xsd:base64Binary
javax.xml.bind.DatatypeConverter.printHexBinary(byte[]),String,A string containing a lexical representation of xsd:hexBinary
javax.xml.bind.DatatypeConverter.printUnsignedInt(long),String,A string containing a lexical representation of xsd:unsignedInt
javax.xml.bind.DatatypeConverter.printUnsignedShort(int),String,A string containing a lexical representation of xsd:unsignedShort
javax.xml.bind.DatatypeConverter.printTime(Calendar),String,A string containing a lexical representation of xsd:time
javax.xml.bind.DatatypeConverter.printDate(Calendar),String,A string containing a lexical representation of xsd:date
javax.xml.bind.DatatypeConverter.printAnySimpleType(String),String,A string containing a lexical representation of xsd:AnySimpleType
"javax.xml.bind.JAXB.unmarshal(File,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.xml.bind.JAXB.unmarshal(URL,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.xml.bind.JAXB.unmarshal(URI,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.xml.bind.JAXB.unmarshal(String,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.xml.bind.JAXB.unmarshal(InputStream,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.xml.bind.JAXB.unmarshal(Reader,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.xml.bind.JAXB.unmarshal(Source,Class&lt;T&gt;)",&lt;T&gt;T,
"javax.xml.bind.JAXB.marshal(Object,File)",void,
"javax.xml.bind.JAXB.marshal(Object,URL)",void,
"javax.xml.bind.JAXB.marshal(Object,URI)",void,
"javax.xml.bind.JAXB.marshal(Object,String)",void,
"javax.xml.bind.JAXB.marshal(Object,OutputStream)",void,
"javax.xml.bind.JAXB.marshal(Object,Writer)",void,
"javax.xml.bind.JAXB.marshal(Object,Result)",void,
javax.xml.bind.JAXBContext.newInstance(String),JAXBContext,
"javax.xml.bind.JAXBContext.newInstance(String,ClassLoader)",JAXBContext,
"javax.xml.bind.JAXBContext.newInstance(String,ClassLoader,Map&lt;String,?&gt;)",JAXBContext,a new instance of a JAXBContext
javax.xml.bind.JAXBContext.newInstance(Class...),JAXBContext,A new instance of a JAXBContext. Always non-null valid object.
"javax.xml.bind.JAXBContext.newInstance(Class[],Map&lt;String,?&gt;)",JAXBContext,A new instance of a JAXBContext. Always non-null valid object.
javax.xml.bind.JAXBContext.createUnmarshaller(),abstractUnmarshaller,an Unmarshaller object
javax.xml.bind.JAXBContext.createMarshaller(),abstractMarshaller,a Marshaller object
javax.xml.bind.JAXBContext.createValidator(),abstractValidator,a Validator object
javax.xml.bind.JAXBContext.createBinder(Class&lt;T&gt;),&lt;T&gt;Binder&lt;T&gt;,always a new valid Binder object.
javax.xml.bind.JAXBContext.createBinder(),Binder&lt;Node&gt;,always a new valid Binder object.
javax.xml.bind.JAXBContext.createJAXBIntrospector(),JAXBIntrospector,always return a non-null valid JAXBIntrospector object.
javax.xml.bind.JAXBContext.generateSchema(SchemaOutputResolver),void,
javax.xml.bind.JAXBElement.getDeclaredType(),Class&lt;T&gt;,
javax.xml.bind.JAXBElement.getName(),QName,
javax.xml.bind.JAXBElement.setValue(T),void,
javax.xml.bind.JAXBElement.getValue(),T,
javax.xml.bind.JAXBElement.getScope(),Class,GlobalScope.class if this element is of global scope.
javax.xml.bind.JAXBElement.isNil(),boolean,
javax.xml.bind.JAXBElement.setNil(boolean),void,
javax.xml.bind.JAXBElement.isGlobalScope(),boolean,
javax.xml.bind.JAXBElement.isTypeSubstituted(),boolean,
javax.xml.bind.JAXBIntrospector.isElement(Object),abstractboolean,
javax.xml.bind.JAXBIntrospector.getElementName(Object),abstractQName,xml element qname associated with jaxbElement; null if jaxbElement is not a JAXB Element.
javax.xml.bind.JAXBIntrospector.getValue(Object),Object,The element value of the jaxbElement.
javax.xml.bind.Marshaller.Listener.beforeMarshal(Object),void,
javax.xml.bind.Marshaller.Listener.afterMarshal(Object),void,
"javax.xml.bind.SchemaOutputResolver.createOutput(String,String)",abstractResult,"a Result object that encapsulates the actual destination of the schema. If the Result object has a system ID, it must be an absolute system ID. Those system IDs are relativized by the caller and used for &lt;xs:import&gt; statements. If the Result object does not have a system ID, a schema for the namespace URI is generated but it won't be explicitly &lt;xs:import&gt;ed from other schemas. If null is returned, the schema generation for this namespace URI will be skipped."
"javax.xml.bind.Unmarshaller.Listener.beforeUnmarshal(Object,Object)",void,
"javax.xml.bind.Unmarshaller.Listener.afterUnmarshal(Object,Object)",void,
javax.xml.bind.annotation.W3CDomHandler.getBuilder(),DocumentBuilder,
javax.xml.bind.annotation.W3CDomHandler.setBuilder(DocumentBuilder),void,
javax.xml.bind.annotation.W3CDomHandler.createUnmarshaller(ValidationEventHandler),DOMResult,null if the operation fails. The error must have been reported to the error handler.
javax.xml.bind.annotation.W3CDomHandler.getElement(DOMResult),Element,null if the operation fails. The error must have been reported to the error handler.
"javax.xml.bind.annotation.W3CDomHandler.marshal(Element,ValidationEventHandler)",Source,null if there was an error. The error should have been reported to the handler.
javax.xml.bind.annotation.adapters.CollapsedStringAdapter.unmarshal(String),String,
javax.xml.bind.annotation.adapters.CollapsedStringAdapter.marshal(String),String,
javax.xml.bind.annotation.adapters.CollapsedStringAdapter.isWhiteSpace(char),boolean,
javax.xml.bind.annotation.adapters.HexBinaryAdapter.unmarshal(String),byte[],
javax.xml.bind.annotation.adapters.HexBinaryAdapter.marshal(byte[]),String,
javax.xml.bind.annotation.adapters.NormalizedStringAdapter.unmarshal(String),String,
javax.xml.bind.annotation.adapters.NormalizedStringAdapter.marshal(String),String,
javax.xml.bind.annotation.adapters.NormalizedStringAdapter.isWhiteSpaceExceptSpace(char),boolean,
javax.xml.bind.annotation.adapters.XmlAdapter.unmarshal(ValueType),abstractBoundType,
javax.xml.bind.annotation.adapters.XmlAdapter.marshal(BoundType),abstractValueType,
"javax.xml.bind.attachment.AttachmentMarshaller.addMtomAttachment(DataHandler,String,String)",abstractString,"a valid content-id URI (see RFC 2387) that identifies the attachment containing data. Otherwise, null if the attachment was not added and should instead be inlined in the message."
"javax.xml.bind.attachment.AttachmentMarshaller.addMtomAttachment(byte[],int,int,String,String,String)",abstractString,"content-id URI, cid, to the attachment containing data or null if data should be inlined."
javax.xml.bind.attachment.AttachmentMarshaller.isXOPPackage(),boolean,true when MIME context is a XOP Package.
javax.xml.bind.attachment.AttachmentMarshaller.addSwaRefAttachment(DataHandler),abstractString,must be a valid URI used as cid. Must satisfy Conformance Requirement R2928 from WS-I Attachments Profile Version 1.0.
javax.xml.bind.attachment.AttachmentUnmarshaller.getAttachmentAsDataHandler(String),abstractDataHandler,a DataHandler that represents the MIME attachment.
javax.xml.bind.attachment.AttachmentUnmarshaller.getAttachmentAsByteArray(String),abstractbyte[],byte[] representation of attachment identified by cid.
javax.xml.bind.attachment.AttachmentUnmarshaller.isXOPPackage(),boolean,true when MIME context is a XOP Document.
"javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(Object,OutputStream)",void,
"javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(Object,File)",void,
"javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(Object,Writer)",void,
"javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(Object,ContentHandler)",void,
"javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(Object,Node)",void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getNode(Object),Node,the DOM tree view of the contentTree
javax.xml.bind.helpers.AbstractMarshallerImpl.getEncoding(),String,"the current encoding or ""UTF-8"" if it hasn't been set."
javax.xml.bind.helpers.AbstractMarshallerImpl.setEncoding(String),void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getSchemaLocation(),String,the current schemaLocation or null if it hasn't been set
javax.xml.bind.helpers.AbstractMarshallerImpl.setSchemaLocation(String),void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getNoNSSchemaLocation(),String,the current noNamespaceSchemaLocation or null if it hasn't been set
javax.xml.bind.helpers.AbstractMarshallerImpl.setNoNSSchemaLocation(String),void,
javax.xml.bind.helpers.AbstractMarshallerImpl.isFormattedOutput(),boolean,the current value of the formatted output flag or false if it hasn't been set.
javax.xml.bind.helpers.AbstractMarshallerImpl.setFormattedOutput(boolean),void,
javax.xml.bind.helpers.AbstractMarshallerImpl.isFragment(),boolean,the current value of the fragment flag or false if it hasn't been set.
javax.xml.bind.helpers.AbstractMarshallerImpl.setFragment(boolean),void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getJavaEncoding(String),String,
"javax.xml.bind.helpers.AbstractMarshallerImpl.setProperty(String,Object)",void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getProperty(String),Object,the value of the requested property
javax.xml.bind.helpers.AbstractMarshallerImpl.getEventHandler(),ValidationEventHandler,the current ValidationEventHandler or the default event handler if it hasn't been set
javax.xml.bind.helpers.AbstractMarshallerImpl.setEventHandler(ValidationEventHandler),void,
"javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(Object,XMLEventWriter)",void,
"javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(Object,XMLStreamWriter)",void,
javax.xml.bind.helpers.AbstractMarshallerImpl.setSchema(Schema),void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getSchema(),Schema,the Schema object being used to perform marshal-time validation or null if not present.
javax.xml.bind.helpers.AbstractMarshallerImpl.setAdapter(XmlAdapter),void,
"javax.xml.bind.helpers.AbstractMarshallerImpl.setAdapter(Class&lt;A&gt;,A)",&lt;A extends XmlAdapter&gt;void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getAdapter(Class&lt;A&gt;),&lt;A extends XmlAdapter&gt;A,
javax.xml.bind.helpers.AbstractMarshallerImpl.setAttachmentMarshaller(AttachmentMarshaller),void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getAttachmentMarshaller(),AttachmentMarshaller,
javax.xml.bind.helpers.AbstractMarshallerImpl.setListener(Marshaller.Listener),void,
javax.xml.bind.helpers.AbstractMarshallerImpl.getListener(),Marshaller.Listener,registered Marshaller.Listener or null if no Listener is registered with this Marshaller.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getXMLReader(),XMLReader,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(Source),Object,the newly created root object of the java content tree
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(XMLReader,InputSource)",abstractObject,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(InputSource),Object,the newly created root object of the java content tree
javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(URL),Object,the newly created root object of the java content tree
javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(File),Object,the newly created root object of the java content tree
javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(InputStream),Object,the newly created root object of the java content tree
javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(Reader),Object,the newly created root object of the java content tree
javax.xml.bind.helpers.AbstractUnmarshallerImpl.isValidating(),boolean,"true if the Unmarshaller is configured to validate during unmarshal operations, false otherwise"
javax.xml.bind.helpers.AbstractUnmarshallerImpl.setEventHandler(ValidationEventHandler),void,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.setValidating(boolean),void,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getEventHandler(),ValidationEventHandler,the current ValidationEventHandler or the default event handler if it hasn't been set
javax.xml.bind.helpers.AbstractUnmarshallerImpl.createUnmarshalException(SAXException),UnmarshalException,the resulting UnmarshalException
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.setProperty(String,Object)",void,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getProperty(String),Object,the value of the requested property
javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(XMLEventReader),Object,the newly created root object of the java content tree.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(XMLStreamReader),Object,the newly created root object of the java content tree.
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(Node,Class&lt;T&gt;)",&lt;T&gt;JAXBElement&lt;T&gt;,JAXB Element representation of node
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(Source,Class&lt;T&gt;)",&lt;T&gt;JAXBElement&lt;T&gt;,Java content rooted by JAXB Element
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(XMLStreamReader,Class&lt;T&gt;)",&lt;T&gt;JAXBElement&lt;T&gt;,content tree rooted by JAXB Element representation
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(XMLEventReader,Class&lt;T&gt;)",&lt;T&gt;JAXBElement&lt;T&gt;,content tree rooted by JAXB Element representation
javax.xml.bind.helpers.AbstractUnmarshallerImpl.setSchema(Schema),void,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getSchema(),Schema,the Schema object being used to perform unmarshal-time validation or null if not present
javax.xml.bind.helpers.AbstractUnmarshallerImpl.setAdapter(XmlAdapter),void,
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.setAdapter(Class&lt;A&gt;,A)",&lt;A extends XmlAdapter&gt;void,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getAdapter(Class&lt;A&gt;),&lt;A extends XmlAdapter&gt;A,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.setAttachmentUnmarshaller(AttachmentUnmarshaller),void,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getAttachmentUnmarshaller(),AttachmentUnmarshaller,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.setListener(Unmarshaller.Listener),void,
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getListener(),Unmarshaller.Listener,registered Unmarshaller.Listener or null if no Listener is registered with this Unmarshaller.
javax.xml.bind.helpers.DefaultValidationEventHandler.handleEvent(ValidationEvent),boolean,"true if the JAXB Provider should attempt to continue the current unmarshal, validate, or marshal operation after handling this warning/error, false if the provider should terminate the current operation with the appropriate UnmarshalException, ValidationException, or MarshalException."
javax.xml.bind.helpers.ValidationEventImpl.getSeverity(),int,the severity code for this warning/error
javax.xml.bind.helpers.ValidationEventImpl.setSeverity(int),void,
javax.xml.bind.helpers.ValidationEventImpl.getMessage(),String,the text message for this warning/error or null if one wasn't set
javax.xml.bind.helpers.ValidationEventImpl.setMessage(String),void,
javax.xml.bind.helpers.ValidationEventImpl.getLinkedException(),Throwable,the linked exception for this warning/error or null if one wasn't set
javax.xml.bind.helpers.ValidationEventImpl.setLinkedException(Throwable),void,
javax.xml.bind.helpers.ValidationEventImpl.getLocator(),ValidationEventLocator,the locator that indicates where the warning/error occurred
javax.xml.bind.helpers.ValidationEventImpl.setLocator(ValidationEventLocator),void,
javax.xml.bind.helpers.ValidationEventImpl.toString(),String,a string representation of the object.
javax.xml.bind.helpers.ValidationEventLocatorImpl.getURL(),URL,the name of the XML source as a URL or null if unavailable
javax.xml.bind.helpers.ValidationEventLocatorImpl.setURL(URL),void,
javax.xml.bind.helpers.ValidationEventLocatorImpl.getOffset(),int,the byte offset into the input source or -1 if unavailable
javax.xml.bind.helpers.ValidationEventLocatorImpl.setOffset(int),void,
javax.xml.bind.helpers.ValidationEventLocatorImpl.getLineNumber(),int,the line number or -1 if unavailable
javax.xml.bind.helpers.ValidationEventLocatorImpl.setLineNumber(int),void,
javax.xml.bind.helpers.ValidationEventLocatorImpl.getColumnNumber(),int,the column number or -1 if unavailable
javax.xml.bind.helpers.ValidationEventLocatorImpl.setColumnNumber(int),void,
javax.xml.bind.helpers.ValidationEventLocatorImpl.getObject(),Object,a reference to the object in the Java content tree or null if unavailable
javax.xml.bind.helpers.ValidationEventLocatorImpl.setObject(Object),void,
javax.xml.bind.helpers.ValidationEventLocatorImpl.getNode(),Node,a reference to the DOM Node or null if unavailable
javax.xml.bind.helpers.ValidationEventLocatorImpl.setNode(Node),void,
javax.xml.bind.helpers.ValidationEventLocatorImpl.toString(),String,a string representation of the object.
javax.xml.bind.util.JAXBResult.getResult(),Object,Always return a non-null object.
javax.xml.bind.util.ValidationEventCollector.getEvents(),ValidationEvent[],a copy of all the collected errors and warnings or an empty array if there weren't any
javax.xml.bind.util.ValidationEventCollector.reset(),void,
javax.xml.bind.util.ValidationEventCollector.hasEvents(),boolean,"true if this event collector contains at least one ValidationEvent, false otherwise"
javax.xml.bind.util.ValidationEventCollector.handleEvent(ValidationEvent),boolean,"true if the JAXB Provider should attempt to continue the current unmarshal, validate, or marshal operation after handling this warning/error, false if the provider should terminate the current operation with the appropriate UnmarshalException, ValidationException, or MarshalException."
"javax.xml.crypto.KeySelector.select(KeyInfo,KeySelector.Purpose,AlgorithmMethod,XMLCryptoContext)",abstractKeySelectorResult,the result of the key selector
javax.xml.crypto.KeySelector.singletonKeySelector(Key),KeySelector,a key selector that always selects the specified key
javax.xml.crypto.KeySelector.Purpose.toString(),String,a string representation of this purpose
javax.xml.crypto.OctetStreamData.getOctetStream(),InputStream,the input stream of this OctetStreamData.
javax.xml.crypto.OctetStreamData.getURI(),String,the URI String or null if not applicable
javax.xml.crypto.OctetStreamData.getMimeType(),String,the MIME type or null if not applicable
"javax.xml.crypto.dom.DOMCryptoContext.getNamespacePrefix(String,String)",String,"the prefix that is associated with the specified namespace URI, or defaultPrefix if the URI is not registered. If the namespace URI is registered but has no prefix, an empty string ("""") is returned."
"javax.xml.crypto.dom.DOMCryptoContext.putNamespacePrefix(String,String)",String,"the previous prefix associated with the specified namespace URI, or null if there was none"
javax.xml.crypto.dom.DOMCryptoContext.getDefaultNamespacePrefix(),String,"the default namespace prefix, or null if none has been set."
javax.xml.crypto.dom.DOMCryptoContext.setDefaultNamespacePrefix(String),void,
javax.xml.crypto.dom.DOMCryptoContext.getBaseURI(),String,"the base URI, or null if not specified"
javax.xml.crypto.dom.DOMCryptoContext.setBaseURI(String),void,
javax.xml.crypto.dom.DOMCryptoContext.getURIDereferencer(),URIDereferencer,"the URIDereferencer, or null if not specified"
javax.xml.crypto.dom.DOMCryptoContext.setURIDereferencer(URIDereferencer),void,
javax.xml.crypto.dom.DOMCryptoContext.getProperty(String),Object,"the current value of the specified property, or null if it does not have a value"
"javax.xml.crypto.dom.DOMCryptoContext.setProperty(String,Object)",Object,"the previous value of the specified property, or null if it did not have a value"
javax.xml.crypto.dom.DOMCryptoContext.getKeySelector(),KeySelector,"the key selector, or null if not specified"
javax.xml.crypto.dom.DOMCryptoContext.setKeySelector(KeySelector),void,
javax.xml.crypto.dom.DOMCryptoContext.getElementById(String),Element,"the Element with the specified ID attribute value, or null if none."
"javax.xml.crypto.dom.DOMCryptoContext.setIdAttributeNS(Element,String,String)",void,
javax.xml.crypto.dom.DOMCryptoContext.iterator(),Iterator,a read-only iterator over the set of mappings
javax.xml.crypto.dom.DOMCryptoContext.get(Object),Object,"the value to which this context maps the specified key, or null if there is no mapping for the key"
"javax.xml.crypto.dom.DOMCryptoContext.put(Object,Object)",Object,"the previous value associated with the key, or null if there was no mapping for the key"
javax.xml.crypto.dom.DOMStructure.getNode(),Node,the node
javax.xml.crypto.dom.DOMStructure.isFeatureSupported(String),boolean,"true if the specified feature is supported, false otherwise"
"javax.xml.crypto.dsig.TransformService.getInstance(String,String)",TransformService,a new TransformService
"javax.xml.crypto.dsig.TransformService.getInstance(String,String,Provider)",TransformService,a new TransformService
"javax.xml.crypto.dsig.TransformService.getInstance(String,String,String)",TransformService,a new TransformService
javax.xml.crypto.dsig.TransformService.getMechanismType(),String,the mechanism type
javax.xml.crypto.dsig.TransformService.getAlgorithm(),String,the algorithm URI
javax.xml.crypto.dsig.TransformService.getProvider(),Provider,the provider
javax.xml.crypto.dsig.TransformService.init(TransformParameterSpec),abstractvoid,
"javax.xml.crypto.dsig.TransformService.marshalParams(XMLStructure,XMLCryptoContext)",abstractvoid,
"javax.xml.crypto.dsig.TransformService.init(XMLStructure,XMLCryptoContext)",abstractvoid,
javax.xml.crypto.dsig.XMLSignatureFactory.getInstance(String),XMLSignatureFactory,a new XMLSignatureFactory
"javax.xml.crypto.dsig.XMLSignatureFactory.getInstance(String,Provider)",XMLSignatureFactory,a new XMLSignatureFactory
"javax.xml.crypto.dsig.XMLSignatureFactory.getInstance(String,String)",XMLSignatureFactory,a new XMLSignatureFactory
javax.xml.crypto.dsig.XMLSignatureFactory.getInstance(),XMLSignatureFactory,a new XMLSignatureFactory
javax.xml.crypto.dsig.XMLSignatureFactory.getMechanismType(),String,the XML processing mechanism type supported by this XMLSignatureFactory
javax.xml.crypto.dsig.XMLSignatureFactory.getProvider(),Provider,the provider of this XMLSignatureFactory
"javax.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature(SignedInfo,KeyInfo)",abstractXMLSignature,an XMLSignature
"javax.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature(SignedInfo,KeyInfo,List,String,String)",abstractXMLSignature,an XMLSignature
"javax.xml.crypto.dsig.XMLSignatureFactory.newReference(String,DigestMethod)",abstractReference,a Reference
"javax.xml.crypto.dsig.XMLSignatureFactory.newReference(String,DigestMethod,List,String,String)",abstractReference,a Reference
"javax.xml.crypto.dsig.XMLSignatureFactory.newReference(String,DigestMethod,List,String,String,byte[])",abstractReference,a Reference
"javax.xml.crypto.dsig.XMLSignatureFactory.newReference(String,DigestMethod,List,Data,List,String,String)",abstractReference,a Reference
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo(CanonicalizationMethod,SignatureMethod,List)",abstractSignedInfo,a SignedInfo
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo(CanonicalizationMethod,SignatureMethod,List,String)",abstractSignedInfo,a SignedInfo
"javax.xml.crypto.dsig.XMLSignatureFactory.newXMLObject(List,String,String,String)",abstractXMLObject,an XMLObject
javax.xml.crypto.dsig.XMLSignatureFactory.newManifest(List),abstractManifest,a Manifest
"javax.xml.crypto.dsig.XMLSignatureFactory.newManifest(List,String)",abstractManifest,a Manifest
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperty(List,String,String)",abstractSignatureProperty,a SignatureProperty
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperties(List,String)",abstractSignatureProperties,a SignatureProperties
"javax.xml.crypto.dsig.XMLSignatureFactory.newDigestMethod(String,DigestMethodParameterSpec)",abstractDigestMethod,the DigestMethod
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureMethod(String,SignatureMethodParameterSpec)",abstractSignatureMethod,the SignatureMethod
"javax.xml.crypto.dsig.XMLSignatureFactory.newTransform(String,TransformParameterSpec)",abstractTransform,the Transform
"javax.xml.crypto.dsig.XMLSignatureFactory.newTransform(String,XMLStructure)",abstractTransform,the Transform
"javax.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod(String,C14NMethodParameterSpec)",abstractCanonicalizationMethod,the CanonicalizationMethod
"javax.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod(String,XMLStructure)",abstractCanonicalizationMethod,the CanonicalizationMethod
javax.xml.crypto.dsig.XMLSignatureFactory.getKeyInfoFactory(),KeyInfoFactory,a KeyInfoFactory
javax.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature(XMLValidateContext),abstractXMLSignature,the XMLSignature
javax.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature(XMLStructure),abstractXMLSignature,the XMLSignature
javax.xml.crypto.dsig.XMLSignatureFactory.isFeatureSupported(String),abstractboolean,"true if the specified feature is supported, false otherwise"
javax.xml.crypto.dsig.XMLSignatureFactory.getURIDereferencer(),abstractURIDereferencer,a reference to the default URIDereferencer (never null)
javax.xml.crypto.dsig.dom.DOMSignContext.setParent(Node),void,
javax.xml.crypto.dsig.dom.DOMSignContext.setNextSibling(Node),void,
javax.xml.crypto.dsig.dom.DOMSignContext.getParent(),Node,the parent node (never null)
javax.xml.crypto.dsig.dom.DOMSignContext.getNextSibling(),Node,"the nextSibling node, or null if not specified."
javax.xml.crypto.dsig.dom.DOMValidateContext.setNode(Node),void,
javax.xml.crypto.dsig.dom.DOMValidateContext.getNode(),Node,the node (never null)
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String),KeyInfoFactory,a new KeyInfoFactory
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String,Provider)",KeyInfoFactory,a new KeyInfoFactory
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String,String)",KeyInfoFactory,a new KeyInfoFactory
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(),KeyInfoFactory,a new KeyInfoFactory
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getMechanismType(),String,the XML processing mechanism type supported by this KeyInfoFactory
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getProvider(),Provider,the provider of this KeyInfoFactory
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(List),abstractKeyInfo,a KeyInfo
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(List,String)",abstractKeyInfo,a KeyInfo
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyName(String),abstractKeyName,a KeyName
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyValue(PublicKey),abstractKeyValue,a KeyValue
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[]),abstractPGPData,a PGPData
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],byte[],List)",abstractPGPData,a PGPData
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],List)",abstractPGPData,a PGPData
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(String),abstractRetrievalMethod,a RetrievalMethod
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(String,String,List)",abstractRetrievalMethod,a RetrievalMethod
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509Data(List),abstractX509Data,a X509Data
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509IssuerSerial(String,BigInteger)",abstractX509IssuerSerial,an X509IssuerSerial
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.isFeatureSupported(String),abstractboolean,"true if the specified feature is supported, false otherwise"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getURIDereferencer(),abstractURIDereferencer,a reference to the default URIDereferencer
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.unmarshalKeyInfo(XMLStructure),abstractKeyInfo,the KeyInfo
javax.xml.crypto.dsig.spec.ExcC14NParameterSpec.getPrefixList(),List,the inclusive namespace prefix list (may be empty but never null)
javax.xml.crypto.dsig.spec.HMACParameterSpec.getOutputLength(),int,the truncation length in number of bits
javax.xml.crypto.dsig.spec.XPathFilter2ParameterSpec.getXPathList(),List,a List of XPathType objects (never null or empty)
javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.getXPath(),String,the XPath expression to be evaluated
javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.getNamespaceMap(),Map,"a Map of namespace prefixes to namespace URIs (may be empty, but never null)"
javax.xml.crypto.dsig.spec.XPathType.getExpression(),String,the XPath expression to be evaluated
javax.xml.crypto.dsig.spec.XPathType.getFilter(),XPathType.Filter,the filter operation
javax.xml.crypto.dsig.spec.XPathType.getNamespaceMap(),Map,"a Map of namespace prefixes to namespace URIs (may be empty, but never null)"
javax.xml.crypto.dsig.spec.XPathType.Filter.toString(),String,the string form of the operation
javax.xml.crypto.dsig.spec.XSLTTransformParameterSpec.getStylesheet(),XMLStructure,the stylesheet
javax.xml.datatype.DatatypeConstants.Field.toString(),String,a non-null valid String constant.
javax.xml.datatype.DatatypeConstants.Field.getId(),int,Id of field.
javax.xml.datatype.DatatypeFactory.newInstance(),DatatypeFactory,New instance of a DatatypeFactory
"javax.xml.datatype.DatatypeFactory.newInstance(String,ClassLoader)",DatatypeFactory,New instance of a DatatypeFactory
javax.xml.datatype.DatatypeFactory.newDuration(String),abstractDuration,New Duration created from parsing the lexicalRepresentation.
javax.xml.datatype.DatatypeFactory.newDuration(long),abstractDuration,
"javax.xml.datatype.DatatypeFactory.newDuration(boolean,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigDecimal)",abstractDuration,New Duration created from the specified values.
"javax.xml.datatype.DatatypeFactory.newDuration(boolean,int,int,int,int,int,int)",Duration,New Duration created from the specified values.
javax.xml.datatype.DatatypeFactory.newDurationDayTime(String),Duration,New Duration created using the specified lexicalRepresentation.
javax.xml.datatype.DatatypeFactory.newDurationDayTime(long),Duration,
"javax.xml.datatype.DatatypeFactory.newDurationDayTime(boolean,BigInteger,BigInteger,BigInteger,BigInteger)",Duration,"New Duration created with the specified day, hour, minute and second."
"javax.xml.datatype.DatatypeFactory.newDurationDayTime(boolean,int,int,int,int)",Duration,"New Duration created with the specified day, hour, minute and second."
javax.xml.datatype.DatatypeFactory.newDurationYearMonth(String),Duration,New Duration created using the specified lexicalRepresentation.
javax.xml.datatype.DatatypeFactory.newDurationYearMonth(long),Duration,
"javax.xml.datatype.DatatypeFactory.newDurationYearMonth(boolean,BigInteger,BigInteger)",Duration,New Duration created using the specified year and month.
"javax.xml.datatype.DatatypeFactory.newDurationYearMonth(boolean,int,int)",Duration,New Duration created using the specified year and month.
javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(),abstractXMLGregorianCalendar,New XMLGregorianCalendar with all date/time datatype fields set to DatatypeConstants.FIELD_UNDEFINED or null.
javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(String),abstractXMLGregorianCalendar,XMLGregorianCalendar created from the lexicalRepresentation.
javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(GregorianCalendar),abstractXMLGregorianCalendar,
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(BigInteger,int,int,int,int,int,BigDecimal,int)",abstractXMLGregorianCalendar,XMLGregorianCalendar created from specified values.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(int,int,int,int,int,int,int,int)",XMLGregorianCalendar,XMLGregorianCalendar created from specified values.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarDate(int,int,int,int)",XMLGregorianCalendar,XMLGregorianCalendar created from parameter values.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,int)",XMLGregorianCalendar,XMLGregorianCalendar created from parameter values.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,BigDecimal,int)",XMLGregorianCalendar,XMLGregorianCalendar created from parameter values.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,int,int)",XMLGregorianCalendar,XMLGregorianCalendar created from parameter values.
javax.xml.datatype.Duration.getXMLSchemaType(),QName,"one of the following constants: DatatypeConstants.DURATION, DatatypeConstants.DURATION_DAYTIME or DatatypeConstants.DURATION_YEARMONTH."
javax.xml.datatype.Duration.getSign(),abstractint,"-1 if this duration is negative, 0 if the duration is zero, and 1 if the duration is positive."
javax.xml.datatype.Duration.getYears(),int,"If the years field is present, return its value as an int, else return 0."
javax.xml.datatype.Duration.getMonths(),int,Months of this Duration.
javax.xml.datatype.Duration.getDays(),int,Days of this Duration.
javax.xml.datatype.Duration.getHours(),int,Hours of this Duration.
javax.xml.datatype.Duration.getMinutes(),int,Minutes of this Duration.
javax.xml.datatype.Duration.getSeconds(),int,"seconds in the integer value. The fraction of seconds will be discarded (for example, if the actual value is 2.5, this method returns 2)"
javax.xml.datatype.Duration.getTimeInMillis(Calendar),long,milliseconds between startInstant and startInstant plus this Duration
javax.xml.datatype.Duration.getTimeInMillis(Date),long,milliseconds between startInstant and startInstant plus this Duration
javax.xml.datatype.Duration.getField(DatatypeConstants.Field),abstractNumber,"If the specified field is present, this method returns a non-null non-negative Number object that represents its value. If it is not present, return null. For YEARS, MONTHS, DAYS, HOURS, and MINUTES, this method returns a BigInteger object. For SECONDS, this method returns a BigDecimal."
javax.xml.datatype.Duration.isSet(DatatypeConstants.Field),abstractboolean,true if the field is present. false if not.
javax.xml.datatype.Duration.add(Duration),abstractDuration,non-null valid Duration object.
javax.xml.datatype.Duration.addTo(Calendar),abstractvoid,
javax.xml.datatype.Duration.addTo(Date),void,
javax.xml.datatype.Duration.subtract(Duration),Duration,New Duration created from subtracting rhs from this Duration.
javax.xml.datatype.Duration.multiply(int),Duration,New Duration that is factortimes longer than this Duration.
javax.xml.datatype.Duration.multiply(BigDecimal),abstractDuration,returns a non-null valid Duration object
javax.xml.datatype.Duration.negate(),abstractDuration,always return a non-null valid Duration object.
javax.xml.datatype.Duration.normalizeWith(Calendar),abstractDuration,
javax.xml.datatype.Duration.compare(Duration),abstractint,
javax.xml.datatype.Duration.isLongerThan(Duration),boolean,true if the duration represented by this object is longer than the given duration. false otherwise.
javax.xml.datatype.Duration.isShorterThan(Duration),boolean,"true if duration parameter is shorter than this Duration, else false."
javax.xml.datatype.Duration.equals(Object),boolean,"true if this duration is the same length as duration. false if duration is null, is not a Duration object, or its length is different from this duration."
javax.xml.datatype.Duration.hashCode(),abstractint,a hash code value for this object.
javax.xml.datatype.Duration.toString(),String,A non-null valid String representation of this Duration.
javax.xml.datatype.XMLGregorianCalendar.clear(),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.reset(),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setYear(BigInteger),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setYear(int),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setMonth(int),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setDay(int),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setTimezone(int),abstractvoid,
"javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int)",void,
javax.xml.datatype.XMLGregorianCalendar.setHour(int),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setMinute(int),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setSecond(int),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setMillisecond(int),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.setFractionalSecond(BigDecimal),abstractvoid,
"javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int,BigDecimal)",void,
"javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int,int)",void,
javax.xml.datatype.XMLGregorianCalendar.getEon(),abstractBigInteger,eon of this XMLGregorianCalendar. The value returned is an integer multiple of 10^9.
javax.xml.datatype.XMLGregorianCalendar.getYear(),abstractint,year of this XMLGregorianCalendar.
javax.xml.datatype.XMLGregorianCalendar.getEonAndYear(),abstractBigInteger,"sum of eon and BigInteger.valueOf(year) when both fields are defined. When only year is defined, return it. When both eon and year are not defined, return null."
javax.xml.datatype.XMLGregorianCalendar.getMonth(),abstractint,year of this XMLGregorianCalendar.
javax.xml.datatype.XMLGregorianCalendar.getDay(),abstractint,
javax.xml.datatype.XMLGregorianCalendar.getTimezone(),abstractint,
javax.xml.datatype.XMLGregorianCalendar.getHour(),abstractint,
javax.xml.datatype.XMLGregorianCalendar.getMinute(),abstractint,
javax.xml.datatype.XMLGregorianCalendar.getSecond(),abstractint,Second of this XMLGregorianCalendar.
javax.xml.datatype.XMLGregorianCalendar.getMillisecond(),int,Millisecond of this XMLGregorianCalendar.
javax.xml.datatype.XMLGregorianCalendar.getFractionalSecond(),abstractBigDecimal,fractional seconds of this XMLGregorianCalendar.
javax.xml.datatype.XMLGregorianCalendar.compare(XMLGregorianCalendar),abstractint,"The relationship between this XMLGregorianCalendar and the specified xmlGregorianCalendar as DatatypeConstants.LESSER, DatatypeConstants.EQUAL, DatatypeConstants.GREATER or DatatypeConstants.INDETERMINATE."
javax.xml.datatype.XMLGregorianCalendar.normalize(),abstractXMLGregorianCalendar,this XMLGregorianCalendar normalized to UTC.
javax.xml.datatype.XMLGregorianCalendar.equals(Object),boolean,"true when obj is an instance of XMLGregorianCalendar and compare(XMLGregorianCalendar obj) returns DatatypeConstants.EQUAL, otherwise false."
javax.xml.datatype.XMLGregorianCalendar.hashCode(),int,hash code of this object.
javax.xml.datatype.XMLGregorianCalendar.toXMLFormat(),abstractString,"XML, as String, representation of this XMLGregorianCalendar"
javax.xml.datatype.XMLGregorianCalendar.getXMLSchemaType(),abstractQName,"One of the following class constants: DatatypeConstants.DATETIME, DatatypeConstants.TIME, DatatypeConstants.DATE, DatatypeConstants.GYEARMONTH, DatatypeConstants.GMONTHDAY, DatatypeConstants.GYEAR, DatatypeConstants.GMONTH or DatatypeConstants.GDAY."
javax.xml.datatype.XMLGregorianCalendar.toString(),String,A non-null valid String representation of this XMLGregorianCalendar.
javax.xml.datatype.XMLGregorianCalendar.isValid(),abstractboolean,true if data values are valid.
javax.xml.datatype.XMLGregorianCalendar.add(Duration),abstractvoid,
javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar(),abstractGregorianCalendar,
"javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar(TimeZone,Locale,XMLGregorianCalendar)",abstractGregorianCalendar,
javax.xml.datatype.XMLGregorianCalendar.getTimeZone(int),abstractTimeZone,TimeZone for this.
javax.xml.datatype.XMLGregorianCalendar.clone(),abstractObject,copy of this Object
javax.xml.namespace.QName.getNamespaceURI(),String,Namespace URI of this QName
javax.xml.namespace.QName.getLocalPart(),String,local part of this QName
javax.xml.namespace.QName.getPrefix(),String,prefix of this QName
javax.xml.namespace.QName.equals(Object),boolean,true if the given Object is equal to this QName else false
javax.xml.namespace.QName.hashCode(),int,hash code for this QName Object
javax.xml.namespace.QName.toString(),String,String representation of this QName
javax.xml.namespace.QName.valueOf(String),QName,QName corresponding to the given String
javax.xml.parsers.DocumentBuilder.reset(),void,
javax.xml.parsers.DocumentBuilder.parse(InputStream),Document,Document result of parsing the InputStream
"javax.xml.parsers.DocumentBuilder.parse(InputStream,String)",Document,A new DOM Document object.
javax.xml.parsers.DocumentBuilder.parse(String),Document,A new DOM Document object.
javax.xml.parsers.DocumentBuilder.parse(File),Document,A new DOM Document object.
javax.xml.parsers.DocumentBuilder.parse(InputSource),abstractDocument,A new DOM Document object.
javax.xml.parsers.DocumentBuilder.isNamespaceAware(),abstractboolean,true if this parser is configured to understand namespaces; false otherwise.
javax.xml.parsers.DocumentBuilder.isValidating(),abstractboolean,true if this parser is configured to validate XML documents; false otherwise.
javax.xml.parsers.DocumentBuilder.setEntityResolver(EntityResolver),abstractvoid,
javax.xml.parsers.DocumentBuilder.setErrorHandler(ErrorHandler),abstractvoid,
javax.xml.parsers.DocumentBuilder.newDocument(),abstractDocument,A new instance of a DOM Document object.
javax.xml.parsers.DocumentBuilder.getDOMImplementation(),abstractDOMImplementation,A new instance of a DOMImplementation.
javax.xml.parsers.DocumentBuilder.getSchema(),Schema,Schema being used or null if none in use
javax.xml.parsers.DocumentBuilder.isXIncludeAware(),boolean,the return value of the DocumentBuilderFactory.isXIncludeAware() when this parser was created from factory.
javax.xml.parsers.DocumentBuilderFactory.newInstance(),DocumentBuilderFactory,
"javax.xml.parsers.DocumentBuilderFactory.newInstance(String,ClassLoader)",DocumentBuilderFactory,New instance of a DocumentBuilderFactory
javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder(),abstractDocumentBuilder,A new instance of a DocumentBuilder.
javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean),void,
javax.xml.parsers.DocumentBuilderFactory.setValidating(boolean),void,
javax.xml.parsers.DocumentBuilderFactory.setIgnoringElementContentWhitespace(boolean),void,
javax.xml.parsers.DocumentBuilderFactory.setExpandEntityReferences(boolean),void,
javax.xml.parsers.DocumentBuilderFactory.setIgnoringComments(boolean),void,
javax.xml.parsers.DocumentBuilderFactory.setCoalescing(boolean),void,
javax.xml.parsers.DocumentBuilderFactory.isNamespaceAware(),boolean,true if the factory is configured to produce parsers which are namespace aware; false otherwise.
javax.xml.parsers.DocumentBuilderFactory.isValidating(),boolean,true if the factory is configured to produce parsers which validate the XML content during parse; false otherwise.
javax.xml.parsers.DocumentBuilderFactory.isIgnoringElementContentWhitespace(),boolean,true if the factory is configured to produce parsers which ignore ignorable whitespace in element content; false otherwise.
javax.xml.parsers.DocumentBuilderFactory.isExpandEntityReferences(),boolean,true if the factory is configured to produce parsers which expand entity reference nodes; false otherwise.
javax.xml.parsers.DocumentBuilderFactory.isIgnoringComments(),boolean,true if the factory is configured to produce parsers which ignores comments; false otherwise.
javax.xml.parsers.DocumentBuilderFactory.isCoalescing(),boolean,true if the factory is configured to produce parsers which converts CDATA nodes to Text nodes and appends it to the adjacent (if any) Text node; false otherwise.
"javax.xml.parsers.DocumentBuilderFactory.setAttribute(String,Object)",abstractvoid,
javax.xml.parsers.DocumentBuilderFactory.getAttribute(String),abstractObject,value The value of the attribute.
"javax.xml.parsers.DocumentBuilderFactory.setFeature(String,boolean)",abstractvoid,
javax.xml.parsers.DocumentBuilderFactory.getFeature(String),abstractboolean,State of the named feature.
javax.xml.parsers.DocumentBuilderFactory.getSchema(),Schema,"the Schema object that was last set through the setSchema(Schema) method, or null if the method was not invoked since a DocumentBuilderFactory is created."
javax.xml.parsers.DocumentBuilderFactory.setSchema(Schema),void,
javax.xml.parsers.DocumentBuilderFactory.setXIncludeAware(boolean),void,
javax.xml.parsers.DocumentBuilderFactory.isXIncludeAware(),boolean,current state of XInclude processing
javax.xml.parsers.SAXParser.reset(),void,
"javax.xml.parsers.SAXParser.parse(InputStream,HandlerBase)",void,
"javax.xml.parsers.SAXParser.parse(InputStream,HandlerBase,String)",void,
"javax.xml.parsers.SAXParser.parse(InputStream,DefaultHandler)",void,
"javax.xml.parsers.SAXParser.parse(InputStream,DefaultHandler,String)",void,
"javax.xml.parsers.SAXParser.parse(String,HandlerBase)",void,
"javax.xml.parsers.SAXParser.parse(String,DefaultHandler)",void,
"javax.xml.parsers.SAXParser.parse(File,HandlerBase)",void,
"javax.xml.parsers.SAXParser.parse(File,DefaultHandler)",void,
"javax.xml.parsers.SAXParser.parse(InputSource,HandlerBase)",void,
"javax.xml.parsers.SAXParser.parse(InputSource,DefaultHandler)",void,
javax.xml.parsers.SAXParser.getParser(),abstractParser,The SAX parser that is encapsultated by the implementation of this class.
javax.xml.parsers.SAXParser.getXMLReader(),abstractXMLReader,The XMLReader that is encapsulated by the implementation of this class.
javax.xml.parsers.SAXParser.isNamespaceAware(),abstractboolean,true if this parser is configured to understand namespaces; false otherwise.
javax.xml.parsers.SAXParser.isValidating(),abstractboolean,true if this parser is configured to validate XML documents; false otherwise.
"javax.xml.parsers.SAXParser.setProperty(String,Object)",abstractvoid,
javax.xml.parsers.SAXParser.getProperty(String),abstractObject,Value of the requested property.
javax.xml.parsers.SAXParser.getSchema(),Schema,Schema being used or null if none in use
javax.xml.parsers.SAXParser.isXIncludeAware(),boolean,the return value of the SAXParserFactory.isXIncludeAware() when this parser was created from factory.
javax.xml.parsers.SAXParserFactory.newInstance(),SAXParserFactory,
"javax.xml.parsers.SAXParserFactory.newInstance(String,ClassLoader)",SAXParserFactory,New instance of a SAXParserFactory
javax.xml.parsers.SAXParserFactory.newSAXParser(),abstractSAXParser,A new instance of a SAXParser.
javax.xml.parsers.SAXParserFactory.setNamespaceAware(boolean),void,
javax.xml.parsers.SAXParserFactory.setValidating(boolean),void,
javax.xml.parsers.SAXParserFactory.isNamespaceAware(),boolean,true if the factory is configured to produce parsers which are namespace aware; false otherwise.
javax.xml.parsers.SAXParserFactory.isValidating(),boolean,true if the factory is configured to produce parsers which validate the XML content during parse; false otherwise.
"javax.xml.parsers.SAXParserFactory.setFeature(String,boolean)",abstractvoid,
javax.xml.parsers.SAXParserFactory.getFeature(String),abstractboolean,Value of the requested property.
javax.xml.parsers.SAXParserFactory.getSchema(),Schema,"the Schema object that was last set through the setSchema(Schema) method, or null if the method was not invoked since a SAXParserFactory is created."
javax.xml.parsers.SAXParserFactory.setSchema(Schema),void,
javax.xml.parsers.SAXParserFactory.setXIncludeAware(boolean),void,
javax.xml.parsers.SAXParserFactory.isXIncludeAware(),boolean,current state of XInclude processing
javax.xml.soap.AttachmentPart.getSize(),abstractint,the size of this AttachmentPart object in bytes or -1 if the size cannot be determined
javax.xml.soap.AttachmentPart.clearContent(),abstractvoid,
javax.xml.soap.AttachmentPart.getContent(),abstractObject,a Java object with the content of this AttachmentPart object
javax.xml.soap.AttachmentPart.getRawContent(),abstractInputStream,an InputStream from which the raw data contained by the AttachmentPart can be accessed.
javax.xml.soap.AttachmentPart.getRawContentBytes(),abstractbyte[],a byte[] array containing the raw data of the AttachmentPart.
javax.xml.soap.AttachmentPart.getBase64Content(),abstractInputStream,an InputStream from which the Base64 encoded AttachmentPart can be read.
"javax.xml.soap.AttachmentPart.setContent(Object,String)",abstractvoid,
"javax.xml.soap.AttachmentPart.setRawContent(InputStream,String)",abstractvoid,
"javax.xml.soap.AttachmentPart.setRawContentBytes(byte[],int,int,String)",abstractvoid,
"javax.xml.soap.AttachmentPart.setBase64Content(InputStream,String)",abstractvoid,
javax.xml.soap.AttachmentPart.getDataHandler(),abstractDataHandler,the DataHandler object associated with this AttachmentPart object
javax.xml.soap.AttachmentPart.setDataHandler(DataHandler),abstractvoid,
javax.xml.soap.AttachmentPart.getContentId(),String,"a String giving the value of the ""Content-ID"" header or null if there is none"
javax.xml.soap.AttachmentPart.getContentLocation(),String,"a String giving the value of the ""Content-Location"" header or null if there is none"
javax.xml.soap.AttachmentPart.getContentType(),String,"a String giving the value of the ""Content-Type"" header or null if there is none"
javax.xml.soap.AttachmentPart.setContentId(String),void,
javax.xml.soap.AttachmentPart.setContentLocation(String),void,
javax.xml.soap.AttachmentPart.setContentType(String),void,
javax.xml.soap.AttachmentPart.removeMimeHeader(String),abstractvoid,
javax.xml.soap.AttachmentPart.removeAllMimeHeaders(),abstractvoid,
javax.xml.soap.AttachmentPart.getMimeHeader(String),abstractString[],a String array giving the value for the specified header
"javax.xml.soap.AttachmentPart.setMimeHeader(String,String)",abstractvoid,
"javax.xml.soap.AttachmentPart.addMimeHeader(String,String)",abstractvoid,
javax.xml.soap.AttachmentPart.getAllMimeHeaders(),abstractIterator,an Iterator object with all of the Mime headers for this AttachmentPart object
javax.xml.soap.AttachmentPart.getMatchingMimeHeaders(String[]),abstractIterator,all of the MIME headers that match one of the names in the given array as an Iterator object
javax.xml.soap.AttachmentPart.getNonMatchingMimeHeaders(String[]),abstractIterator,all of the MIME headers in this AttachmentPart object except those that match one of the names in the given array. The nonmatching MIME headers are returned as an Iterator object.
javax.xml.soap.MessageFactory.newInstance(),MessageFactory,
javax.xml.soap.MessageFactory.newInstance(String),MessageFactory,a new instance of a MessageFactory
javax.xml.soap.MessageFactory.createMessage(),abstractSOAPMessage,a new SOAPMessage object
"javax.xml.soap.MessageFactory.createMessage(MimeHeaders,InputStream)",abstractSOAPMessage,a new SOAPMessage object containing the data from the given InputStream object
javax.xml.soap.MimeHeader.getName(),String,the name of the header as a String
javax.xml.soap.MimeHeader.getValue(),String,the value of the header as a String
javax.xml.soap.MimeHeaders.getHeader(String),String[],a String array with all of the values for the specified header
"javax.xml.soap.MimeHeaders.setHeader(String,String)",void,
"javax.xml.soap.MimeHeaders.addHeader(String,String)",void,
javax.xml.soap.MimeHeaders.removeHeader(String),void,
javax.xml.soap.MimeHeaders.removeAllHeaders(),void,
javax.xml.soap.MimeHeaders.getAllHeaders(),Iterator,an Iterator object over this MimeHeaders object's list of MimeHeader objects
javax.xml.soap.MimeHeaders.getMatchingHeaders(String[]),Iterator,an Iterator object over the MimeHeader objects whose name matches one of the names in the given list
javax.xml.soap.MimeHeaders.getNonMatchingHeaders(String[]),Iterator,an Iterator object over the MimeHeader objects whose name does not match one of the names in the given list
javax.xml.soap.SAAJMetaFactory.newMessageFactory(String),abstractMessageFactory,
javax.xml.soap.SAAJMetaFactory.newSOAPFactory(String),abstractSOAPFactory,
javax.xml.soap.SAAJResult.getResult(),Node,the resulting Tree that was created under the specified root Node.
"javax.xml.soap.SOAPConnection.call(SOAPMessage,Object)",abstractSOAPMessage,the SOAPMessage object that is the response to the message that was sent
javax.xml.soap.SOAPConnection.get(Object),SOAPMessage,the SOAPMessage object that is the response to the get message request
javax.xml.soap.SOAPConnection.close(),abstractvoid,
javax.xml.soap.SOAPConnectionFactory.newInstance(),SOAPConnectionFactory,a new instance of a default SOAPConnectionFactory object
javax.xml.soap.SOAPConnectionFactory.createConnection(),abstractSOAPConnection,the new SOAPConnection object.
javax.xml.soap.SOAPElementFactory.create(Name),SOAPElement,the new SOAPElement object that was created
javax.xml.soap.SOAPElementFactory.create(String),SOAPElement,the new SOAPElement object that was created
"javax.xml.soap.SOAPElementFactory.create(String,String,String)",SOAPElement,
javax.xml.soap.SOAPElementFactory.newInstance(),SOAPElementFactory,a new instance of a SOAPElementFactory
javax.xml.soap.SOAPFactory.createElement(Element),SOAPElement,a new SOAPElement that is a copy of domElement.
javax.xml.soap.SOAPFactory.createElement(Name),abstractSOAPElement,the new SOAPElement object that was created
javax.xml.soap.SOAPFactory.createElement(QName),SOAPElement,the new SOAPElement object that was created
javax.xml.soap.SOAPFactory.createElement(String),abstractSOAPElement,the new SOAPElement object that was created
"javax.xml.soap.SOAPFactory.createElement(String,String,String)",abstractSOAPElement,
javax.xml.soap.SOAPFactory.createDetail(),abstractDetail,a Detail object
"javax.xml.soap.SOAPFactory.createFault(String,QName)",abstractSOAPFault,a SOAPFault object
javax.xml.soap.SOAPFactory.createFault(),abstractSOAPFault,a SOAPFault object
"javax.xml.soap.SOAPFactory.createName(String,String,String)",abstractName,"a Name object initialized with the given local name, namespace prefix, and namespace URI"
javax.xml.soap.SOAPFactory.createName(String),abstractName,a Name object initialized with the given local name
javax.xml.soap.SOAPFactory.newInstance(),SOAPFactory,
javax.xml.soap.SOAPFactory.newInstance(String),SOAPFactory,a new instance of a SOAPFactory
javax.xml.soap.SOAPMessage.setContentDescription(String),abstractvoid,
javax.xml.soap.SOAPMessage.getContentDescription(),abstractString,a String describing the content of this message or null if no description has been set
javax.xml.soap.SOAPMessage.getSOAPPart(),abstractSOAPPart,the SOAPPart object for this SOAPMessage object
javax.xml.soap.SOAPMessage.getSOAPBody(),SOAPBody,the SOAPBody object contained by this SOAPMessage object
javax.xml.soap.SOAPMessage.getSOAPHeader(),SOAPHeader,the SOAPHeader object contained by this SOAPMessage object
javax.xml.soap.SOAPMessage.removeAllAttachments(),abstractvoid,
javax.xml.soap.SOAPMessage.countAttachments(),abstractint,the number of AttachmentPart objects that are part of this SOAPMessage object
javax.xml.soap.SOAPMessage.getAttachments(),abstractIterator,an iterator over all the attachments in this message
javax.xml.soap.SOAPMessage.getAttachments(MimeHeaders),abstractIterator,an iterator over all attachments that have a header that matches one of the given headers
javax.xml.soap.SOAPMessage.removeAttachments(MimeHeaders),abstractvoid,
javax.xml.soap.SOAPMessage.getAttachment(SOAPElement),abstractAttachmentPart,the referenced AttachmentPart or null if no such AttachmentPart exists or no reference can be found in this SOAPElement.
javax.xml.soap.SOAPMessage.addAttachmentPart(AttachmentPart),abstractvoid,
javax.xml.soap.SOAPMessage.createAttachmentPart(),abstractAttachmentPart,a new AttachmentPart object that can be populated and added to this SOAPMessage object
javax.xml.soap.SOAPMessage.createAttachmentPart(DataHandler),AttachmentPart,a new AttachmentPart object that contains data generated by the given DataHandler object
javax.xml.soap.SOAPMessage.getMimeHeaders(),abstractMimeHeaders,a MimeHeaders object containing the MimeHeader objects
"javax.xml.soap.SOAPMessage.createAttachmentPart(Object,String)",AttachmentPart,a new AttachmentPart object that contains the given data
javax.xml.soap.SOAPMessage.saveChanges(),abstractvoid,
javax.xml.soap.SOAPMessage.saveRequired(),abstractboolean,true if saveChanges needs to be called; false otherwise.
javax.xml.soap.SOAPMessage.writeTo(OutputStream),abstractvoid,
"javax.xml.soap.SOAPMessage.setProperty(String,Object)",void,
javax.xml.soap.SOAPMessage.getProperty(String),Object,the value associated with the named property or null if no such property exists.
javax.xml.soap.SOAPPart.getEnvelope(),abstractSOAPEnvelope,the SOAPEnvelope object for this SOAPPart object
javax.xml.soap.SOAPPart.getContentId(),String,"a String giving the value of the MIME header named ""Content-Id"""
javax.xml.soap.SOAPPart.getContentLocation(),String,"a String giving the value of the MIME header whose name is ""Content-Location"""
javax.xml.soap.SOAPPart.setContentId(String),void,
javax.xml.soap.SOAPPart.setContentLocation(String),void,
javax.xml.soap.SOAPPart.removeMimeHeader(String),abstractvoid,
javax.xml.soap.SOAPPart.removeAllMimeHeaders(),abstractvoid,
javax.xml.soap.SOAPPart.getMimeHeader(String),abstractString[],a String array giving all the values for the specified header
"javax.xml.soap.SOAPPart.setMimeHeader(String,String)",abstractvoid,
"javax.xml.soap.SOAPPart.addMimeHeader(String,String)",abstractvoid,
javax.xml.soap.SOAPPart.getAllMimeHeaders(),abstractIterator,an Iterator object with all of the Mime headers for this SOAPPart object
javax.xml.soap.SOAPPart.getMatchingMimeHeaders(String[]),abstractIterator,"all of the MIME headers that match one of the names in the given array, returned as an Iterator object"
javax.xml.soap.SOAPPart.getNonMatchingMimeHeaders(String[]),abstractIterator,all of the MIME headers in this SOAPPart object except those that match one of the names in the given array. The nonmatching MIME headers are returned as an Iterator object.
javax.xml.soap.SOAPPart.setContent(Source),abstractvoid,
javax.xml.soap.SOAPPart.getContent(),abstractSource,the content as a javax.xml.transform.Source object
javax.xml.stream.XMLEventFactory.newInstance(),XMLEventFactory,
javax.xml.stream.XMLEventFactory.newFactory(),XMLEventFactory,
"javax.xml.stream.XMLEventFactory.newInstance(String,ClassLoader)",XMLEventFactory,the factory implementation
"javax.xml.stream.XMLEventFactory.newFactory(String,ClassLoader)",XMLEventFactory,
javax.xml.stream.XMLEventFactory.setLocation(Location),abstractvoid,
"javax.xml.stream.XMLEventFactory.createAttribute(String,String,String,String)",abstractAttribute,the Attribute with specified values
"javax.xml.stream.XMLEventFactory.createAttribute(String,String)",abstractAttribute,the Attribute with specified values
"javax.xml.stream.XMLEventFactory.createAttribute(QName,String)",abstractAttribute,the Attribute with specified values
javax.xml.stream.XMLEventFactory.createNamespace(String),abstractNamespace,the Namespace with the specified value
"javax.xml.stream.XMLEventFactory.createNamespace(String,String)",abstractNamespace,the Namespace with the specified values
"javax.xml.stream.XMLEventFactory.createStartElement(QName,Iterator,Iterator)",abstractStartElement,an instance of the requested StartElement
"javax.xml.stream.XMLEventFactory.createStartElement(String,String,String)",abstractStartElement,an instance of the requested StartElement
"javax.xml.stream.XMLEventFactory.createStartElement(String,String,String,Iterator,Iterator)",abstractStartElement,an instance of the requested StartElement
"javax.xml.stream.XMLEventFactory.createStartElement(String,String,String,Iterator,Iterator,NamespaceContext)",abstractStartElement,an instance of the requested StartElement
"javax.xml.stream.XMLEventFactory.createEndElement(QName,Iterator)",abstractEndElement,an instance of the requested EndElement
"javax.xml.stream.XMLEventFactory.createEndElement(String,String,String)",abstractEndElement,an instance of the requested EndElement
"javax.xml.stream.XMLEventFactory.createEndElement(String,String,String,Iterator)",abstractEndElement,an instance of the requested EndElement
javax.xml.stream.XMLEventFactory.createCharacters(String),abstractCharacters,a Characters event
javax.xml.stream.XMLEventFactory.createCData(String),abstractCharacters,a Characters event
javax.xml.stream.XMLEventFactory.createSpace(String),abstractCharacters,a Characters event
javax.xml.stream.XMLEventFactory.createIgnorableSpace(String),abstractCharacters,a Characters event
javax.xml.stream.XMLEventFactory.createStartDocument(),abstractStartDocument,a StartDocument event
"javax.xml.stream.XMLEventFactory.createStartDocument(String,String,boolean)",abstractStartDocument,a StartDocument event
"javax.xml.stream.XMLEventFactory.createStartDocument(String,String)",abstractStartDocument,a StartDocument event
javax.xml.stream.XMLEventFactory.createStartDocument(String),abstractStartDocument,a StartDocument event
javax.xml.stream.XMLEventFactory.createEndDocument(),abstractEndDocument,an EndDocument event
"javax.xml.stream.XMLEventFactory.createEntityReference(String,EntityDeclaration)",abstractEntityReference,an EntityReference event
javax.xml.stream.XMLEventFactory.createComment(String),abstractComment,
"javax.xml.stream.XMLEventFactory.createProcessingInstruction(String,String)",abstractProcessingInstruction,a ProcessingInstruction event
javax.xml.stream.XMLEventFactory.createDTD(String),abstractDTD,a DTD event
javax.xml.stream.XMLInputFactory.newInstance(),XMLInputFactory,
javax.xml.stream.XMLInputFactory.newFactory(),XMLInputFactory,
"javax.xml.stream.XMLInputFactory.newInstance(String,ClassLoader)",XMLInputFactory,the factory implementation
"javax.xml.stream.XMLInputFactory.newFactory(String,ClassLoader)",XMLInputFactory,
javax.xml.stream.XMLInputFactory.createXMLStreamReader(Reader),abstractXMLStreamReader,
javax.xml.stream.XMLInputFactory.createXMLStreamReader(Source),abstractXMLStreamReader,
javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream),abstractXMLStreamReader,
"javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream,String)",abstractXMLStreamReader,
"javax.xml.stream.XMLInputFactory.createXMLStreamReader(String,InputStream)",abstractXMLStreamReader,
"javax.xml.stream.XMLInputFactory.createXMLStreamReader(String,Reader)",abstractXMLStreamReader,
javax.xml.stream.XMLInputFactory.createXMLEventReader(Reader),abstractXMLEventReader,
"javax.xml.stream.XMLInputFactory.createXMLEventReader(String,Reader)",abstractXMLEventReader,
javax.xml.stream.XMLInputFactory.createXMLEventReader(XMLStreamReader),abstractXMLEventReader,a new XMLEventReader
javax.xml.stream.XMLInputFactory.createXMLEventReader(Source),abstractXMLEventReader,
javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream),abstractXMLEventReader,
"javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream,String)",abstractXMLEventReader,
"javax.xml.stream.XMLInputFactory.createXMLEventReader(String,InputStream)",abstractXMLEventReader,
"javax.xml.stream.XMLInputFactory.createFilteredReader(XMLStreamReader,StreamFilter)",abstractXMLStreamReader,
"javax.xml.stream.XMLInputFactory.createFilteredReader(XMLEventReader,EventFilter)",abstractXMLEventReader,
javax.xml.stream.XMLInputFactory.getXMLResolver(),abstractXMLResolver,
javax.xml.stream.XMLInputFactory.setXMLResolver(XMLResolver),abstractvoid,
javax.xml.stream.XMLInputFactory.getXMLReporter(),abstractXMLReporter,
javax.xml.stream.XMLInputFactory.setXMLReporter(XMLReporter),abstractvoid,
"javax.xml.stream.XMLInputFactory.setProperty(String,Object)",abstractvoid,
javax.xml.stream.XMLInputFactory.getProperty(String),abstractObject,The value of the property
javax.xml.stream.XMLInputFactory.isPropertySupported(String),abstractboolean,true if the property is supported and false otherwise
javax.xml.stream.XMLInputFactory.setEventAllocator(XMLEventAllocator),abstractvoid,
javax.xml.stream.XMLInputFactory.getEventAllocator(),abstractXMLEventAllocator,
javax.xml.stream.XMLOutputFactory.newInstance(),XMLOutputFactory,
javax.xml.stream.XMLOutputFactory.newFactory(),XMLOutputFactory,
"javax.xml.stream.XMLOutputFactory.newInstance(String,ClassLoader)",XMLInputFactory,the factory implementation
"javax.xml.stream.XMLOutputFactory.newFactory(String,ClassLoader)",XMLOutputFactory,
javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(Writer),abstractXMLStreamWriter,
javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(OutputStream),abstractXMLStreamWriter,
"javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(OutputStream,String)",abstractXMLStreamWriter,
javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(Result),abstractXMLStreamWriter,
javax.xml.stream.XMLOutputFactory.createXMLEventWriter(Result),abstractXMLEventWriter,
javax.xml.stream.XMLOutputFactory.createXMLEventWriter(OutputStream),abstractXMLEventWriter,
"javax.xml.stream.XMLOutputFactory.createXMLEventWriter(OutputStream,String)",abstractXMLEventWriter,
javax.xml.stream.XMLOutputFactory.createXMLEventWriter(Writer),abstractXMLEventWriter,
"javax.xml.stream.XMLOutputFactory.setProperty(String,Object)",abstractvoid,
javax.xml.stream.XMLOutputFactory.getProperty(String),abstractObject,The value of the property
javax.xml.stream.XMLOutputFactory.isPropertySupported(String),abstractboolean,true if the property is supported and false otherwise
javax.xml.stream.util.EventReaderDelegate.setParent(XMLEventReader),void,
javax.xml.stream.util.EventReaderDelegate.getParent(),XMLEventReader,the parent or null if none is set
javax.xml.stream.util.EventReaderDelegate.nextEvent(),XMLEvent,
javax.xml.stream.util.EventReaderDelegate.next(),Object,the next element in the iteration
javax.xml.stream.util.EventReaderDelegate.hasNext(),boolean,"true if the event reader has more events, false otherwise"
javax.xml.stream.util.EventReaderDelegate.peek(),XMLEvent,
javax.xml.stream.util.EventReaderDelegate.close(),void,
javax.xml.stream.util.EventReaderDelegate.getElementText(),String,
javax.xml.stream.util.EventReaderDelegate.nextTag(),XMLEvent,
javax.xml.stream.util.EventReaderDelegate.getProperty(String),Object,The value of the property
javax.xml.stream.util.EventReaderDelegate.remove(),void,
javax.xml.stream.util.StreamReaderDelegate.setParent(XMLStreamReader),void,
javax.xml.stream.util.StreamReaderDelegate.getParent(),XMLStreamReader,the parent or null if none is set
javax.xml.stream.util.StreamReaderDelegate.next(),int,the integer code corresponding to the current parse event
javax.xml.stream.util.StreamReaderDelegate.nextTag(),int,the event type of the element read (START_ELEMENT or END_ELEMENT)
javax.xml.stream.util.StreamReaderDelegate.getElementText(),String,
"javax.xml.stream.util.StreamReaderDelegate.require(int,String,String)",void,
javax.xml.stream.util.StreamReaderDelegate.hasNext(),boolean,"true if there are more events, false otherwise"
javax.xml.stream.util.StreamReaderDelegate.close(),void,
javax.xml.stream.util.StreamReaderDelegate.getNamespaceURI(String),String,the uri bound to the given prefix or null if it is not bound
javax.xml.stream.util.StreamReaderDelegate.getNamespaceContext(),NamespaceContext,return a namespace context
javax.xml.stream.util.StreamReaderDelegate.isStartElement(),boolean,"true if the cursor points to a start tag, false otherwise"
javax.xml.stream.util.StreamReaderDelegate.isEndElement(),boolean,"true if the cursor points to an end tag, false otherwise"
javax.xml.stream.util.StreamReaderDelegate.isCharacters(),boolean,"true if the cursor points to character data, false otherwise"
javax.xml.stream.util.StreamReaderDelegate.isWhiteSpace(),boolean,"true if the cursor points to all whitespace, false otherwise"
"javax.xml.stream.util.StreamReaderDelegate.getAttributeValue(String,String)",String,"returns the value of the attribute , returns null if not found"
javax.xml.stream.util.StreamReaderDelegate.getAttributeCount(),int,returns the number of attributes
javax.xml.stream.util.StreamReaderDelegate.getAttributeName(int),QName,the QName of the attribute
javax.xml.stream.util.StreamReaderDelegate.getAttributePrefix(int),String,the prefix of the attribute
javax.xml.stream.util.StreamReaderDelegate.getAttributeNamespace(int),String,the namespace URI (can be null)
javax.xml.stream.util.StreamReaderDelegate.getAttributeLocalName(int),String,the localName of the attribute
javax.xml.stream.util.StreamReaderDelegate.getAttributeType(int),String,the XML type of the attribute
javax.xml.stream.util.StreamReaderDelegate.getAttributeValue(int),String,the attribute value
javax.xml.stream.util.StreamReaderDelegate.isAttributeSpecified(int),boolean,true if this is a default attribute
javax.xml.stream.util.StreamReaderDelegate.getNamespaceCount(),int,returns the number of namespace declarations on this specific element
javax.xml.stream.util.StreamReaderDelegate.getNamespacePrefix(int),String,returns the namespace prefix
javax.xml.stream.util.StreamReaderDelegate.getNamespaceURI(int),String,returns the namespace uri
javax.xml.stream.util.StreamReaderDelegate.getEventType(),int,
javax.xml.stream.util.StreamReaderDelegate.getText(),String,the current text or null
"javax.xml.stream.util.StreamReaderDelegate.getTextCharacters(int,char[],int,int)",int,the number of characters actually copied
javax.xml.stream.util.StreamReaderDelegate.getTextCharacters(),char[],the current text or an empty array
javax.xml.stream.util.StreamReaderDelegate.getTextStart(),int,
javax.xml.stream.util.StreamReaderDelegate.getTextLength(),int,
javax.xml.stream.util.StreamReaderDelegate.getEncoding(),String,the encoding of this instance or null
javax.xml.stream.util.StreamReaderDelegate.hasText(),boolean,
javax.xml.stream.util.StreamReaderDelegate.getLocation(),Location,
javax.xml.stream.util.StreamReaderDelegate.getName(),QName,the QName for the current START_ELEMENT or END_ELEMENT event
javax.xml.stream.util.StreamReaderDelegate.getLocalName(),String,the localName
javax.xml.stream.util.StreamReaderDelegate.hasName(),boolean,
javax.xml.stream.util.StreamReaderDelegate.getNamespaceURI(),String,"the URI bound to this elements prefix, the default namespace, or null"
javax.xml.stream.util.StreamReaderDelegate.getPrefix(),String,the prefix or null
javax.xml.stream.util.StreamReaderDelegate.getVersion(),String,the XML version or null
javax.xml.stream.util.StreamReaderDelegate.isStandalone(),boolean,"true if this is standalone, or false otherwise"
javax.xml.stream.util.StreamReaderDelegate.standaloneSet(),boolean,"true if standalone was set in the document, or false otherwise"
javax.xml.stream.util.StreamReaderDelegate.getCharacterEncodingScheme(),String,the encoding declared in the document or null
javax.xml.stream.util.StreamReaderDelegate.getPITarget(),String,the target or null
javax.xml.stream.util.StreamReaderDelegate.getPIData(),String,the data or null
javax.xml.stream.util.StreamReaderDelegate.getProperty(String),Object,The value of the property
javax.xml.transform.Transformer.reset(),void,
"javax.xml.transform.Transformer.transform(Source,Result)",abstractvoid,
"javax.xml.transform.Transformer.setParameter(String,Object)",abstractvoid,
javax.xml.transform.Transformer.getParameter(String),abstractObject,A parameter that has been set with setParameter.
javax.xml.transform.Transformer.clearParameters(),abstractvoid,
javax.xml.transform.Transformer.setURIResolver(URIResolver),abstractvoid,
javax.xml.transform.Transformer.getURIResolver(),abstractURIResolver,"An object that implements the URIResolver interface, or null."
javax.xml.transform.Transformer.setOutputProperties(Properties),abstractvoid,
javax.xml.transform.Transformer.getOutputProperties(),abstractProperties,A copy of the set of output properties in effect for the next transformation.
"javax.xml.transform.Transformer.setOutputProperty(String,String)",abstractvoid,
javax.xml.transform.Transformer.getOutputProperty(String),abstractString,"The string value of the output property, or null if no property was found."
javax.xml.transform.Transformer.setErrorListener(ErrorListener),abstractvoid,
javax.xml.transform.Transformer.getErrorListener(),abstractErrorListener,"The current error handler, which should never be null."
javax.xml.transform.TransformerFactory.newInstance(),TransformerFactory,
"javax.xml.transform.TransformerFactory.newInstance(String,ClassLoader)",TransformerFactory,"new TransformerFactory instance, never null."
javax.xml.transform.TransformerFactory.newTransformer(Source),abstractTransformer,"A Transformer object that may be used to perform a transformation in a single Thread, never null."
javax.xml.transform.TransformerFactory.newTransformer(),abstractTransformer,"A Transformer object that may be used to perform a transformation in a single thread, never null."
javax.xml.transform.TransformerFactory.newTemplates(Source),abstractTemplates,"A Templates object capable of being used for transformation purposes, never null."
"javax.xml.transform.TransformerFactory.getAssociatedStylesheet(Source,String,String,String)",abstractSource,A Source Object suitable for passing to the TransformerFactory.
javax.xml.transform.TransformerFactory.setURIResolver(URIResolver),abstractvoid,
javax.xml.transform.TransformerFactory.getURIResolver(),abstractURIResolver,The URIResolver that was set with setURIResolver.
"javax.xml.transform.TransformerFactory.setFeature(String,boolean)",abstractvoid,
javax.xml.transform.TransformerFactory.getFeature(String),abstractboolean,"The current state of the feature, true or false."
"javax.xml.transform.TransformerFactory.setAttribute(String,Object)",abstractvoid,
javax.xml.transform.TransformerFactory.getAttribute(String),abstractObject,value The value of the attribute.
javax.xml.transform.TransformerFactory.setErrorListener(ErrorListener),abstractvoid,
javax.xml.transform.TransformerFactory.getErrorListener(),abstractErrorListener,"The current error handler, which should never be null."
javax.xml.transform.dom.DOMResult.setNode(Node),void,
javax.xml.transform.dom.DOMResult.getNode(),Node,The node to which the transformation will be appended.
javax.xml.transform.dom.DOMResult.setNextSibling(Node),void,
javax.xml.transform.dom.DOMResult.getNextSibling(),Node,The child node before which the result nodes will be inserted.
javax.xml.transform.dom.DOMResult.setSystemId(String),void,
javax.xml.transform.dom.DOMResult.getSystemId(),String,The system identifier.
javax.xml.transform.dom.DOMSource.setNode(Node),void,
javax.xml.transform.dom.DOMSource.getNode(),Node,The node that is to be transformed.
javax.xml.transform.dom.DOMSource.setSystemId(String),void,
javax.xml.transform.dom.DOMSource.getSystemId(),String,Base URL for this DOM tree.
javax.xml.transform.sax.SAXResult.setHandler(ContentHandler),void,
javax.xml.transform.sax.SAXResult.getHandler(),ContentHandler,The ContentHandler that is to be transformation output.
javax.xml.transform.sax.SAXResult.setLexicalHandler(LexicalHandler),void,
javax.xml.transform.sax.SAXResult.getLexicalHandler(),LexicalHandler,"A LexicalHandler, or null."
javax.xml.transform.sax.SAXResult.setSystemId(String),void,
javax.xml.transform.sax.SAXResult.getSystemId(),String,"The system identifier that was set with setSystemId, or null if setSystemId was not called."
javax.xml.transform.sax.SAXSource.setXMLReader(XMLReader),void,
javax.xml.transform.sax.SAXSource.getXMLReader(),XMLReader,"A valid XMLReader or XMLFilter reference, or null."
javax.xml.transform.sax.SAXSource.setInputSource(InputSource),void,
javax.xml.transform.sax.SAXSource.getInputSource(),InputSource,"A valid InputSource reference, or null."
javax.xml.transform.sax.SAXSource.setSystemId(String),void,
javax.xml.transform.sax.SAXSource.getSystemId(),String,"Base URL for the Source, or null."
javax.xml.transform.sax.SAXSource.sourceToInputSource(Source),InputSource,"An InputSource, or null if Source can not be converted."
javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler(Source),abstractTransformerHandler,TransformerHandler ready to transform SAX events.
javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler(Templates),abstractTransformerHandler,TransformerHandler ready to transform SAX events.
javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler(),abstractTransformerHandler,"A non-null reference to a TransformerHandler, that may be used as a ContentHandler for SAX parse events."
javax.xml.transform.sax.SAXTransformerFactory.newTemplatesHandler(),abstractTemplatesHandler,"A non-null reference to a TransformerHandler, that may be used as a ContentHandler for SAX parse events."
javax.xml.transform.sax.SAXTransformerFactory.newXMLFilter(Source),abstractXMLFilter,"An XMLFilter object, or null if this feature is not supported."
javax.xml.transform.sax.SAXTransformerFactory.newXMLFilter(Templates),abstractXMLFilter,"An XMLFilter object, or null if this feature is not supported."
javax.xml.transform.stax.StAXResult.getXMLEventWriter(),XMLEventWriter,XMLEventWriter used by this StAXResult.
javax.xml.transform.stax.StAXResult.getXMLStreamWriter(),XMLStreamWriter,XMLStreamWriter used by this StAXResult.
javax.xml.transform.stax.StAXResult.setSystemId(String),void,
javax.xml.transform.stax.StAXResult.getSystemId(),String,The returned system identifier is always null.
javax.xml.transform.stax.StAXSource.getXMLEventReader(),XMLEventReader,XMLEventReader used by this StAXSource.
javax.xml.transform.stax.StAXSource.getXMLStreamReader(),XMLStreamReader,XMLStreamReader used by this StAXSource.
javax.xml.transform.stax.StAXSource.setSystemId(String),void,
javax.xml.transform.stax.StAXSource.getSystemId(),String,System identifier used by this StAXSource.
javax.xml.transform.stream.StreamResult.setOutputStream(OutputStream),void,
javax.xml.transform.stream.StreamResult.getOutputStream(),OutputStream,"The byte stream that was set with setOutputStream, or null if setOutputStream or the ByteStream constructor was not called."
javax.xml.transform.stream.StreamResult.setWriter(Writer),void,
javax.xml.transform.stream.StreamResult.getWriter(),Writer,"The character stream that was set with setWriter, or null if setWriter or the Writer constructor was not called."
javax.xml.transform.stream.StreamResult.setSystemId(String),void,
javax.xml.transform.stream.StreamResult.setSystemId(File),void,
javax.xml.transform.stream.StreamResult.getSystemId(),String,"The system identifier that was set with setSystemId, or null if setSystemId was not called."
javax.xml.transform.stream.StreamSource.setInputStream(InputStream),void,
javax.xml.transform.stream.StreamSource.getInputStream(),InputStream,"The byte stream that was set with setByteStream, or null if setByteStream or the ByteStream constructor was not called."
javax.xml.transform.stream.StreamSource.setReader(Reader),void,
javax.xml.transform.stream.StreamSource.getReader(),Reader,"The character stream that was set with setReader, or null if setReader or the Reader constructor was not called."
javax.xml.transform.stream.StreamSource.setPublicId(String),void,
javax.xml.transform.stream.StreamSource.getPublicId(),String,"The public identifier that was set with setPublicId, or null if setPublicId was not called."
javax.xml.transform.stream.StreamSource.setSystemId(String),void,
javax.xml.transform.stream.StreamSource.getSystemId(),String,"The system identifier that was set with setSystemId, or null if setSystemId was not called."
javax.xml.transform.stream.StreamSource.setSystemId(File),void,
javax.xml.validation.Schema.newValidator(),abstractValidator,Always return a non-null valid object.
javax.xml.validation.Schema.newValidatorHandler(),abstractValidatorHandler,Always return a non-null valid object.
javax.xml.validation.SchemaFactory.newInstance(String),SchemaFactory,
"javax.xml.validation.SchemaFactory.newInstance(String,String,ClassLoader)",SchemaFactory,New instance of a SchemaFactory
javax.xml.validation.SchemaFactory.isSchemaLanguageSupported(String),abstractboolean,"true if SchemaFactory supports schemaLanguage, else false."
javax.xml.validation.SchemaFactory.getFeature(String),boolean,The current value of the feature (true or false).
"javax.xml.validation.SchemaFactory.setFeature(String,boolean)",void,
"javax.xml.validation.SchemaFactory.setProperty(String,Object)",void,
javax.xml.validation.SchemaFactory.getProperty(String),Object,The current value of the property.
javax.xml.validation.SchemaFactory.setErrorHandler(ErrorHandler),abstractvoid,
javax.xml.validation.SchemaFactory.getErrorHandler(),abstractErrorHandler,"This method returns the object that was last set through the setErrorHandler(ErrorHandler) method, or null if that method has never been called since this SchemaFactory has created."
javax.xml.validation.SchemaFactory.setResourceResolver(LSResourceResolver),abstractvoid,
javax.xml.validation.SchemaFactory.getResourceResolver(),abstractLSResourceResolver,"This method returns the object that was last set through the setResourceResolver(LSResourceResolver) method, or null if that method has never been called since this SchemaFactory has created."
javax.xml.validation.SchemaFactory.newSchema(Source),Schema,New Schema from parsing schema.
javax.xml.validation.SchemaFactory.newSchema(File),Schema,New Schema from parsing schema.
javax.xml.validation.SchemaFactory.newSchema(URL),Schema,New Schema from parsing schema.
javax.xml.validation.SchemaFactory.newSchema(Source[]),abstractSchema,"Always return a non-null valid Schema object. Note that when an error has been reported, there is no guarantee that the returned Schema object is meaningful."
javax.xml.validation.SchemaFactory.newSchema(),abstractSchema,Always return non-null valid Schema object.
javax.xml.validation.SchemaFactoryLoader.newFactory(String),abstractSchemaFactory,null if the callee fails to create one.
javax.xml.validation.TypeInfoProvider.getElementTypeInfo(),abstractTypeInfo,"An immutable TypeInfo object that represents the type of the current element. Note that the caller can keep references to the obtained TypeInfo longer than the callback scope. Otherwise, this method returns null if the validator is unable to determine the type of the current element for some reason (for example, if the validator is recovering from an earlier error.)"
javax.xml.validation.TypeInfoProvider.getAttributeTypeInfo(int),abstractTypeInfo,"An immutable TypeInfo object that represents the type of the specified attribute. Note that the caller can keep references to the obtained TypeInfo longer than the callback scope. Otherwise, this method returns null if the validator is unable to determine the type."
javax.xml.validation.TypeInfoProvider.isIdAttribute(int),abstractboolean,true if the type of the specified attribute is ID.
javax.xml.validation.TypeInfoProvider.isSpecified(int),abstractboolean,true if the attribute was present before the validator processes input. false if the attribute was added by the validator.
javax.xml.validation.Validator.reset(),abstractvoid,
javax.xml.validation.Validator.validate(Source),void,
"javax.xml.validation.Validator.validate(Source,Result)",abstractvoid,
javax.xml.validation.Validator.setErrorHandler(ErrorHandler),abstractvoid,
javax.xml.validation.Validator.getErrorHandler(),abstractErrorHandler,"This method returns the object that was last set through the setErrorHandler(ErrorHandler) method, or null if that method has never been called since this Validator has created."
javax.xml.validation.Validator.setResourceResolver(LSResourceResolver),abstractvoid,
javax.xml.validation.Validator.getResourceResolver(),abstractLSResourceResolver,"This method returns the object that was last set through the setResourceResolver(LSResourceResolver) method, or null if that method has never been called since this Validator has created."
javax.xml.validation.Validator.getFeature(String),boolean,The current value of the feature (true or false).
"javax.xml.validation.Validator.setFeature(String,boolean)",void,
"javax.xml.validation.Validator.setProperty(String,Object)",void,
javax.xml.validation.Validator.getProperty(String),Object,The current value of the property.
javax.xml.validation.ValidatorHandler.setContentHandler(ContentHandler),abstractvoid,
javax.xml.validation.ValidatorHandler.getContentHandler(),abstractContentHandler,"This method returns the object that was last set through the getContentHandler() method, or null if that method has never been called since this ValidatorHandler has created."
javax.xml.validation.ValidatorHandler.setErrorHandler(ErrorHandler),abstractvoid,
javax.xml.validation.ValidatorHandler.getErrorHandler(),abstractErrorHandler,"This method returns the object that was last set through the setErrorHandler(ErrorHandler) method, or null if that method has never been called since this ValidatorHandler has created."
javax.xml.validation.ValidatorHandler.setResourceResolver(LSResourceResolver),abstractvoid,
javax.xml.validation.ValidatorHandler.getResourceResolver(),abstractLSResourceResolver,"This method returns the object that was last set through the setResourceResolver(LSResourceResolver) method, or null if that method has never been called since this ValidatorHandler has created."
javax.xml.validation.ValidatorHandler.getTypeInfoProvider(),abstractTypeInfoProvider,null if the validator / schema language does not support the notion of TypeInfo. Otherwise a non-null valid TypeInfoProvider.
javax.xml.validation.ValidatorHandler.getFeature(String),boolean,The current value of the feature (true or false).
"javax.xml.validation.ValidatorHandler.setFeature(String,boolean)",void,
"javax.xml.validation.ValidatorHandler.setProperty(String,Object)",void,
javax.xml.validation.ValidatorHandler.getProperty(String),Object,The current value of the property.
javax.xml.ws.Endpoint.create(Object),Endpoint,The newly created endpoint.
"javax.xml.ws.Endpoint.create(Object,WebServiceFeature...)",Endpoint,The newly created endpoint.
"javax.xml.ws.Endpoint.create(String,Object)",Endpoint,The newly created endpoint.
"javax.xml.ws.Endpoint.create(String,Object,WebServiceFeature...)",Endpoint,The newly created endpoint.
javax.xml.ws.Endpoint.getBinding(),abstractBinding,The binding for this endpoint
javax.xml.ws.Endpoint.getImplementor(),abstractObject,The implementor for this endpoint
javax.xml.ws.Endpoint.publish(String),abstractvoid,
"javax.xml.ws.Endpoint.publish(String,Object)",Endpoint,The newly created endpoint.
"javax.xml.ws.Endpoint.publish(String,Object,WebServiceFeature...)",Endpoint,The newly created endpoint.
javax.xml.ws.Endpoint.publish(Object),abstractvoid,
javax.xml.ws.Endpoint.publish(HttpContext),void,
javax.xml.ws.Endpoint.stop(),abstractvoid,
javax.xml.ws.Endpoint.isPublished(),abstractboolean,true if the endpoint is in the published state.
javax.xml.ws.Endpoint.getMetadata(),abstractList&lt;Source&gt;,List&lt;javax.xml.transform.Source&gt; A list of metadata documents for the service
javax.xml.ws.Endpoint.setMetadata(List&lt;Source&gt;),abstractvoid,
javax.xml.ws.Endpoint.getExecutor(),abstractExecutor,The java.util.concurrent.Executor to be used to dispatch a request.
javax.xml.ws.Endpoint.setExecutor(Executor),abstractvoid,
javax.xml.ws.Endpoint.getProperties(),"abstractMap&lt;String,Object&gt;","Map&lt;String,Object&gt; The property bag associated with this instance."
"javax.xml.ws.Endpoint.setProperties(Map&lt;String,Object&gt;)",abstractvoid,
javax.xml.ws.Endpoint.getEndpointReference(Element...),abstractEndpointReference,EndpointReference of this Endpoint instance. If the returned EndpointReference is of type W3CEndpointReference then it MUST contain the the specified referenceParameters.
"javax.xml.ws.Endpoint.getEndpointReference(Class&lt;T&gt;,Element...)",abstract&lt;T extends EndpointReference&gt;T,EndpointReference of type clazz of this Endpoint instance. If the returned EndpointReference is of type W3CEndpointReference then it MUST contain the the specified referenceParameters.
javax.xml.ws.Endpoint.setEndpointContext(EndpointContext),void,
javax.xml.ws.EndpointContext.getEndpoints(),abstractSet&lt;Endpoint&gt;,list of all endpoints in an application
javax.xml.ws.EndpointReference.readFrom(Source),EndpointReference,the EndpointReference unmarshalled from eprInfoset never null
javax.xml.ws.EndpointReference.writeTo(Result),abstractvoid,
"javax.xml.ws.EndpointReference.getPort(Class&lt;T&gt;,WebServiceFeature...)",&lt;T&gt;T,Object Proxy instance that supports the specified service endpoint interface
javax.xml.ws.EndpointReference.toString(),String,a string representation of the object.
javax.xml.ws.RespectBindingFeature.getID(),String,the unique identifier for this feature.
"javax.xml.ws.Service.getPort(QName,Class&lt;T&gt;)",&lt;T&gt;T,Object Proxy instance that supports the specified service endpoint interface.
"javax.xml.ws.Service.getPort(QName,Class&lt;T&gt;,WebServiceFeature...)",&lt;T&gt;T,Object Proxy instance that supports the specified service endpoint interface.
javax.xml.ws.Service.getPort(Class&lt;T&gt;),&lt;T&gt;T,Object instance that supports the specified service endpoint interface.
"javax.xml.ws.Service.getPort(Class&lt;T&gt;,WebServiceFeature...)",&lt;T&gt;T,Object instance that supports the specified service endpoint interface.
"javax.xml.ws.Service.getPort(EndpointReference,Class&lt;T&gt;,WebServiceFeature...)",&lt;T&gt;T,Object Proxy instance that supports the specified service endpoint interface.
"javax.xml.ws.Service.addPort(QName,String,String)",void,
"javax.xml.ws.Service.createDispatch(QName,Class&lt;T&gt;,Service.Mode)",&lt;T&gt;Dispatch&lt;T&gt;,Dispatch instance.
"javax.xml.ws.Service.createDispatch(QName,Class&lt;T&gt;,Service.Mode,WebServiceFeature...)",&lt;T&gt;Dispatch&lt;T&gt;,Dispatch instance.
"javax.xml.ws.Service.createDispatch(EndpointReference,Class&lt;T&gt;,Service.Mode,WebServiceFeature...)",&lt;T&gt;Dispatch&lt;T&gt;,Dispatch instance
"javax.xml.ws.Service.createDispatch(QName,JAXBContext,Service.Mode)",Dispatch&lt;Object&gt;,Dispatch instance.
"javax.xml.ws.Service.createDispatch(QName,JAXBContext,Service.Mode,WebServiceFeature...)",Dispatch&lt;Object&gt;,Dispatch instance.
"javax.xml.ws.Service.createDispatch(EndpointReference,JAXBContext,Service.Mode,WebServiceFeature...)",Dispatch&lt;Object&gt;,Dispatch instance
javax.xml.ws.Service.getServiceName(),QName,Qualified name of this service
javax.xml.ws.Service.getPorts(),Iterator&lt;QName&gt;,Returns java.util.Iterator with elements of type javax.xml.namespace.QName.
javax.xml.ws.Service.getWSDLDocumentLocation(),URL,URL for the location of the WSDL document for this service.
javax.xml.ws.Service.getHandlerResolver(),HandlerResolver,"HandlerResolver The HandlerResolver being used by this Service instance, or null if there isn't one."
javax.xml.ws.Service.setHandlerResolver(HandlerResolver),void,
javax.xml.ws.Service.getExecutor(),Executor,The java.util.concurrent.Executor to be used to invoke a callback.
javax.xml.ws.Service.setExecutor(Executor),void,
"javax.xml.ws.Service.create(URL,QName)",Service,
"javax.xml.ws.Service.create(URL,QName,WebServiceFeature...)",Service,
javax.xml.ws.Service.create(QName),Service,
"javax.xml.ws.Service.create(QName,WebServiceFeature...)",Service,
javax.xml.ws.WebServiceFeature.getID(),abstractString,the unique identifier for this feature.
javax.xml.ws.WebServiceFeature.isEnabled(),boolean,true if and only if the feature is enabled .
javax.xml.ws.soap.AddressingFeature.getID(),String,the unique identifier for this feature.
javax.xml.ws.soap.AddressingFeature.isRequired(),boolean,the current required value
javax.xml.ws.soap.AddressingFeature.getResponses(),AddressingFeature.Responses,"AddressingFeature.Responses.ALL when endpoint supports all types of responses, AddressingFeature.Responses.ANONYMOUS when endpoint requires the use of only anonymous responses, AddressingFeature.Responses.NON_ANONYMOUS when endpoint requires the use of only non-anonymous responses"
javax.xml.ws.soap.MTOMFeature.getID(),String,the unique identifier for this feature.
javax.xml.ws.soap.MTOMFeature.getThreshold(),int,the current threshold size in bytes
javax.xml.ws.spi.Invoker.inject(WebServiceContext),abstractvoid,
"javax.xml.ws.spi.Invoker.invoke(Method,Object...)",abstractObject,return value of the method
javax.xml.ws.spi.Provider.provider(),Provider,
"javax.xml.ws.spi.Provider.createServiceDelegate(URL,QName,Class&lt;?)",abstractServiceDelegate,The newly created service delegate.
"javax.xml.ws.spi.Provider.createServiceDelegate(URL,QName,Class&lt;?,WebServiceFeature...)",ServiceDelegate,The newly created service delegate.
"javax.xml.ws.spi.Provider.createEndpoint(String,Object)",abstractEndpoint,The newly created endpoint.
"javax.xml.ws.spi.Provider.createAndPublishEndpoint(String,Object)",abstractEndpoint,The newly created endpoint.
javax.xml.ws.spi.Provider.readEndpointReference(Source),abstractEndpointReference,the EndpointReference unmarshalled from eprInfoset. This method never returns null.
"javax.xml.ws.spi.Provider.getPort(EndpointReference,Class&lt;T&gt;,WebServiceFeature...)",abstract&lt;T&gt;T,Object Proxy instance that supports the specified service endpoint interface
"javax.xml.ws.spi.Provider.createW3CEndpointReference(String,QName,QName,List&lt;Element&gt;,String,List&lt;Element&gt;)",abstractW3CEndpointReference,"the W3CEndpointReference created from serviceName, portName, metadata, wsdlDocumentLocation and referenceParameters. This method never returns null."
"javax.xml.ws.spi.Provider.createW3CEndpointReference(String,QName,QName,QName,List&lt;Element&gt;,String,List&lt;Element&gt;,List&lt;Element&gt;,Map&lt;QName,String&gt;)",W3CEndpointReference,"the W3CEndpointReference created from serviceName, portName, metadata, wsdlDocumentLocation and referenceParameters. This method never returns null."
"javax.xml.ws.spi.Provider.createAndPublishEndpoint(String,Object,WebServiceFeature...)",Endpoint,The newly created endpoint.
"javax.xml.ws.spi.Provider.createEndpoint(String,Object,WebServiceFeature...)",Endpoint,The newly created endpoint.
"javax.xml.ws.spi.Provider.createEndpoint(String,Class&lt;?&gt;,Invoker,WebServiceFeature...)",Endpoint,The newly created endpoint.
"javax.xml.ws.spi.ServiceDelegate.getPort(QName,Class&lt;T&gt;)",abstract&lt;T&gt;T,Object Proxy instance that supports the specified service endpoint interface
"javax.xml.ws.spi.ServiceDelegate.getPort(QName,Class&lt;T&gt;,WebServiceFeature...)",abstract&lt;T&gt;T,Object Proxy instance that supports the specified service endpoint interface
"javax.xml.ws.spi.ServiceDelegate.getPort(EndpointReference,Class&lt;T&gt;,WebServiceFeature...)",abstract&lt;T&gt;T,Object Proxy instance that supports the specified service endpoint interface.
javax.xml.ws.spi.ServiceDelegate.getPort(Class&lt;T&gt;),abstract&lt;T&gt;T,Object instance that supports the specified service endpoint interface
"javax.xml.ws.spi.ServiceDelegate.getPort(Class&lt;T&gt;,WebServiceFeature...)",abstract&lt;T&gt;T,Object instance that supports the specified service endpoint interface
"javax.xml.ws.spi.ServiceDelegate.addPort(QName,String,String)",abstractvoid,
"javax.xml.ws.spi.ServiceDelegate.createDispatch(QName,Class&lt;T&gt;,Service.Mode)",abstract&lt;T&gt;Dispatch&lt;T&gt;,Dispatch instance
"javax.xml.ws.spi.ServiceDelegate.createDispatch(QName,Class&lt;T&gt;,Service.Mode,WebServiceFeature...)",abstract&lt;T&gt;Dispatch&lt;T&gt;,Dispatch instance
"javax.xml.ws.spi.ServiceDelegate.createDispatch(EndpointReference,Class&lt;T&gt;,Service.Mode,WebServiceFeature...)",abstract&lt;T&gt;Dispatch&lt;T&gt;,Dispatch instance
"javax.xml.ws.spi.ServiceDelegate.createDispatch(QName,JAXBContext,Service.Mode)",abstractDispatch&lt;Object&gt;,Dispatch instance
"javax.xml.ws.spi.ServiceDelegate.createDispatch(QName,JAXBContext,Service.Mode,WebServiceFeature...)",abstractDispatch&lt;Object&gt;,Dispatch instance
"javax.xml.ws.spi.ServiceDelegate.createDispatch(EndpointReference,JAXBContext,Service.Mode,WebServiceFeature...)",abstractDispatch&lt;Object&gt;,Dispatch instance
javax.xml.ws.spi.ServiceDelegate.getServiceName(),abstractQName,Qualified name of this service
javax.xml.ws.spi.ServiceDelegate.getPorts(),abstractIterator&lt;QName&gt;,Returns java.util.Iterator with elements of type javax.xml.namespace.QName
javax.xml.ws.spi.ServiceDelegate.getWSDLDocumentLocation(),abstractURL,URL for the location of the WSDL document for this service
javax.xml.ws.spi.ServiceDelegate.getHandlerResolver(),abstractHandlerResolver,"HandlerResolver The HandlerResolver being used by this Service instance, or null if there isn't one."
javax.xml.ws.spi.ServiceDelegate.setHandlerResolver(HandlerResolver),abstractvoid,
javax.xml.ws.spi.ServiceDelegate.getExecutor(),abstractExecutor,The java.util.concurrent.Executor to be used to invoke a callback.
javax.xml.ws.spi.ServiceDelegate.setExecutor(Executor),abstractvoid,
javax.xml.ws.spi.http.HttpContext.setHandler(HttpHandler),void,
javax.xml.ws.spi.http.HttpContext.getPath(),abstractString,this context's path
javax.xml.ws.spi.http.HttpContext.getAttribute(String),abstractObject,attribute value
javax.xml.ws.spi.http.HttpContext.getAttributeNames(),abstractSet&lt;String&gt;,set of all attribute names
javax.xml.ws.spi.http.HttpExchange.getRequestHeaders(),"abstractMap&lt;String,List&lt;String&gt;&gt;",an immutable Map which can be used to access request headers
javax.xml.ws.spi.http.HttpExchange.getRequestHeader(String),abstractString,"returns the value of the requested header, or null if the request does not have a header of that name"
javax.xml.ws.spi.http.HttpExchange.getResponseHeaders(),"abstractMap&lt;String,List&lt;String&gt;&gt;",a mutable Map which can be used to set response headers.
"javax.xml.ws.spi.http.HttpExchange.addResponseHeader(String,String)",abstractvoid,
javax.xml.ws.spi.http.HttpExchange.getRequestURI(),abstractString,the request URI
javax.xml.ws.spi.http.HttpExchange.getContextPath(),abstractString,context path of all the endpoints in an application
javax.xml.ws.spi.http.HttpExchange.getRequestMethod(),abstractString,the request method
javax.xml.ws.spi.http.HttpExchange.getHttpContext(),abstractHttpContext,the HttpContext for this exchange
javax.xml.ws.spi.http.HttpExchange.close(),abstractvoid,
javax.xml.ws.spi.http.HttpExchange.getRequestBody(),abstractInputStream,the stream from which the request body can be read.
javax.xml.ws.spi.http.HttpExchange.getResponseBody(),abstractOutputStream,the stream to which the response body is written
javax.xml.ws.spi.http.HttpExchange.setStatus(int),abstractvoid,
javax.xml.ws.spi.http.HttpExchange.getRemoteAddress(),abstractInetSocketAddress,the InetSocketAddress of the caller
javax.xml.ws.spi.http.HttpExchange.getLocalAddress(),abstractInetSocketAddress,the InetSocketAddress of the local interface
javax.xml.ws.spi.http.HttpExchange.getProtocol(),abstractString,the protocol string from the request
javax.xml.ws.spi.http.HttpExchange.getScheme(),abstractString,name of the scheme used to make this request
javax.xml.ws.spi.http.HttpExchange.getPathInfo(),abstractString,decoded extra path information of web service. It is the path that comes after the web service path but before the query string in the request URI null if there is no extra path in the request URI
javax.xml.ws.spi.http.HttpExchange.getQueryString(),abstractString,"undecoded query string of request URI, or null if the request URI doesn't have one"
javax.xml.ws.spi.http.HttpExchange.getAttribute(String),abstractObject,"the attribute value, or null if the attribute doesn't exist"
javax.xml.ws.spi.http.HttpExchange.getAttributeNames(),abstractSet&lt;String&gt;,set of all attribute names
javax.xml.ws.spi.http.HttpExchange.getUserPrincipal(),abstractPrincipal,"Principal for an authenticated user, or null if not authenticated"
javax.xml.ws.spi.http.HttpExchange.isUserInRole(String),abstractboolean,true if the user making this request belongs to a given role
javax.xml.ws.spi.http.HttpHandler.handle(HttpExchange),abstractvoid,
javax.xml.ws.wsaddressing.W3CEndpointReference.writeTo(Result),void,
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.address(String),W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the address set to the wsa:Address.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.interfaceName(QName),W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the interfaceName as wsam:InterfaceName element added to the wsa:Metadata element
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.serviceName(QName),W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the serviceName as wsam:ServiceName element added to the wsa:Metadata element
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.endpointName(QName),W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the endpointName as wsam:ServiceName/@EndpointName in the wsa:Metadata element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.wsdlDocumentLocation(String),W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the wsdlDocumentLocation that is to be referenced.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.referenceParameter(Element),W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the referenceParameter added to the wsa:ReferenceParameters element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.metadata(Element),W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the metadataElement added to the wsa:Metadata element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.element(Element),W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the extension element added to the W3CEndpointReference instance.
"javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.attribute(QName,String)",W3CEndpointReferenceBuilder,A W3CEndpointReferenceBuilder instance with the extension attribute added to the W3CEndpointReference instance.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.build(),W3CEndpointReference,W3CEndpointReference from the accumulated properties set on this W3CEndpointReferenceBuilder instance. This method never returns null.
javax.xml.xpath.XPathFactory.newInstance(),XPathFactory,Instance of an XPathFactory.
javax.xml.xpath.XPathFactory.newInstance(String),XPathFactory,
"javax.xml.xpath.XPathFactory.newInstance(String,String,ClassLoader)",XPathFactory,New instance of a XPathFactory
javax.xml.xpath.XPathFactory.isObjectModelSupported(String),abstractboolean,"true if XPathFactory supports objectModel, else false."
"javax.xml.xpath.XPathFactory.setFeature(String,boolean)",abstractvoid,
javax.xml.xpath.XPathFactory.getFeature(String),abstractboolean,State of the named feature.
javax.xml.xpath.XPathFactory.setXPathVariableResolver(XPathVariableResolver),abstractvoid,
javax.xml.xpath.XPathFactory.setXPathFunctionResolver(XPathFunctionResolver),abstractvoid,
javax.xml.xpath.XPathFactory.newXPath(),abstractXPath,New instance of an XPath.
org.ietf.jgss.ChannelBinding.getInitiatorAddress(),InetAddress,the initiator's address. null is returned if the address has not been set.
org.ietf.jgss.ChannelBinding.getAcceptorAddress(),InetAddress,the acceptor's address. null is returned if the address has not been set.
org.ietf.jgss.ChannelBinding.getApplicationData(),byte[],the application data being used as part of the ChannelBinding. null is returned if no application data has been specified for the channel binding.
org.ietf.jgss.ChannelBinding.equals(Object),boolean,true if the two ChannelBinding's contain the same values for the initiator and acceptor addresses and the application data.
org.ietf.jgss.ChannelBinding.hashCode(),int,a hashCode value
org.ietf.jgss.GSSManager.getInstance(),GSSManager,a GSSManager implementation
org.ietf.jgss.GSSManager.getMechs(),abstractOid[],"an array of Oid objects corresponding to the mechanisms that are available. A null value is returned when no mechanism are available (an example of this would be when mechanism are dynamically configured, and currently no mechanisms are installed)."
org.ietf.jgss.GSSManager.getNamesForMech(Oid),abstractOid[],an array of Oid objects corresponding to the name types that the mechanism supports.
org.ietf.jgss.GSSManager.getMechsForName(Oid),abstractOid[],an array of Oid objects corresponding to the mechanisms that support the specified name type. null is returned when no mechanisms are found to support the specified name type.
"org.ietf.jgss.GSSManager.createName(String,Oid)",abstractGSSName,a GSSName representing the indicated principal
"org.ietf.jgss.GSSManager.createName(byte[],Oid)",abstractGSSName,a GSSName representing the indicated principal
"org.ietf.jgss.GSSManager.createName(String,Oid,Oid)",abstractGSSName,a GSSName representing the indicated principal
"org.ietf.jgss.GSSManager.createName(byte[],Oid,Oid)",abstractGSSName,a GSSName representing the indicated principal
org.ietf.jgss.GSSManager.createCredential(int),abstractGSSCredential,a GSSCredential of the requested type.
"org.ietf.jgss.GSSManager.createCredential(GSSName,int,Oid,int)",abstractGSSCredential,a GSSCredential of the requested type.
"org.ietf.jgss.GSSManager.createCredential(GSSName,int,Oid[],int)",abstractGSSCredential,a GSSCredential of the requested type.
"org.ietf.jgss.GSSManager.createContext(GSSName,Oid,GSSCredential,int)",abstractGSSContext,an unestablished GSSContext
org.ietf.jgss.GSSManager.createContext(GSSCredential),abstractGSSContext,an unestablished GSSContext
org.ietf.jgss.GSSManager.createContext(byte[]),abstractGSSContext,the previously established GSSContext
"org.ietf.jgss.GSSManager.addProviderAtFront(Provider,Oid)",abstractvoid,
"org.ietf.jgss.GSSManager.addProviderAtEnd(Provider,Oid)",abstractvoid,
org.ietf.jgss.MessageProp.getQOP(),int,an int representing the QOP value
org.ietf.jgss.MessageProp.getPrivacy(),boolean,"true if the privacy (i.e., confidentiality) state is true, false otherwise."
org.ietf.jgss.MessageProp.setQOP(int),void,
org.ietf.jgss.MessageProp.setPrivacy(boolean),void,
org.ietf.jgss.MessageProp.isDuplicateToken(),boolean,"true if this is a duplicate, false otherwise."
org.ietf.jgss.MessageProp.isOldToken(),boolean,"true if the token's validity period has expired, false otherwise."
org.ietf.jgss.MessageProp.isUnseqToken(),boolean,"true if a later token had already been processed, false otherwise."
org.ietf.jgss.MessageProp.isGapToken(),boolean,"true if an expected per-message token was not received, false otherwise."
org.ietf.jgss.MessageProp.getMinorStatus(),int,the int minor status
org.ietf.jgss.MessageProp.getMinorString(),String,a String corresponding to the minor status code. null will be returned when no minor status code has been set.
"org.ietf.jgss.MessageProp.setSupplementaryStates(boolean,boolean,boolean,boolean,int,String)",void,
org.ietf.jgss.Oid.toString(),String,"string representation in the following format: ""1.2.3.4.5"""
org.ietf.jgss.Oid.equals(Object),boolean,"true if the two Oid objects represent the same value, false otherwise."
org.ietf.jgss.Oid.getDER(),byte[],byte array containing the DER encoding of this oid object.
org.ietf.jgss.Oid.containedIn(Oid[]),boolean,"true if the array contains this Oid value, false otherwise"
org.ietf.jgss.Oid.hashCode(),int,a hashCode value
org.omg.CORBA._IDLTypeStub.type(),TypeCode,the TypeCode defined by this object.
org.omg.CORBA._IDLTypeStub.def_kind(),DefinitionKind,the DefinitionKind corresponding to this Interface Repository object.
org.omg.CORBA._IDLTypeStub.destroy(),void,
org.omg.CORBA._IDLTypeStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.CORBA._PolicyStub.policy_type(),int,the constant value that corresponds to the type of the policy object.
org.omg.CORBA._PolicyStub.copy(),Policy,the copy of the policy object.
org.omg.CORBA._PolicyStub.destroy(),void,
org.omg.CORBA._PolicyStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.CORBA.Any.equal(Any),abstractboolean,true if the Any objects are equal; false otherwise
org.omg.CORBA.Any.type(),abstractTypeCode,the TypeCode object containing type information about the value contained in this Any object
org.omg.CORBA.Any.type(TypeCode),abstractvoid,
"org.omg.CORBA.Any.read_value(InputStream,TypeCode)",abstractvoid,
org.omg.CORBA.Any.write_value(OutputStream),abstractvoid,
org.omg.CORBA.Any.create_output_stream(),abstractOutputStream,the newly-created OutputStream
org.omg.CORBA.Any.create_input_stream(),abstractInputStream,the newly-created InputStream
org.omg.CORBA.Any.extract_short(),abstractshort,the short stored in this Any object
org.omg.CORBA.Any.insert_short(short),abstractvoid,
org.omg.CORBA.Any.extract_long(),abstractint,the int stored in this Any object
org.omg.CORBA.Any.insert_long(int),abstractvoid,
org.omg.CORBA.Any.extract_longlong(),abstractlong,the long stored in this Any object
org.omg.CORBA.Any.insert_longlong(long),abstractvoid,
org.omg.CORBA.Any.extract_ushort(),abstractshort,the short stored in this Any object
org.omg.CORBA.Any.insert_ushort(short),abstractvoid,
org.omg.CORBA.Any.extract_ulong(),abstractint,the int stored in this Any object
org.omg.CORBA.Any.insert_ulong(int),abstractvoid,
org.omg.CORBA.Any.extract_ulonglong(),abstractlong,the long stored in this Any object
org.omg.CORBA.Any.insert_ulonglong(long),abstractvoid,
org.omg.CORBA.Any.extract_float(),abstractfloat,the float stored in this Any object
org.omg.CORBA.Any.insert_float(float),abstractvoid,
org.omg.CORBA.Any.extract_double(),abstractdouble,the double stored in this Any object
org.omg.CORBA.Any.insert_double(double),abstractvoid,
org.omg.CORBA.Any.extract_boolean(),abstractboolean,the boolean stored in this Any object
org.omg.CORBA.Any.insert_boolean(boolean),abstractvoid,
org.omg.CORBA.Any.extract_char(),abstractchar,the char stored in this Any object
org.omg.CORBA.Any.insert_char(char),abstractvoid,
org.omg.CORBA.Any.extract_wchar(),abstractchar,the char stored in this Any object
org.omg.CORBA.Any.insert_wchar(char),abstractvoid,
org.omg.CORBA.Any.extract_octet(),abstractbyte,the byte stored in this Any object
org.omg.CORBA.Any.insert_octet(byte),abstractvoid,
org.omg.CORBA.Any.extract_any(),abstractAny,the Any object stored in this Any object
org.omg.CORBA.Any.insert_any(Any),abstractvoid,
org.omg.CORBA.Any.extract_Object(),abstractObject,the org.omg.CORBA.Object stored in this Any object
org.omg.CORBA.Any.insert_Object(Object),abstractvoid,
org.omg.CORBA.Any.extract_Value(),abstractSerializable,the java.io.Serializable object stored in this Any object
org.omg.CORBA.Any.insert_Value(Serializable),abstractvoid,
"org.omg.CORBA.Any.insert_Value(Serializable,TypeCode)",abstractvoid,
"org.omg.CORBA.Any.insert_Object(Object,TypeCode)",abstractvoid,
org.omg.CORBA.Any.extract_string(),abstractString,the String object stored in this Any object
org.omg.CORBA.Any.insert_string(String),abstractvoid,
org.omg.CORBA.Any.extract_wstring(),abstractString,the String object stored in this Any object
org.omg.CORBA.Any.insert_wstring(String),abstractvoid,
org.omg.CORBA.Any.extract_TypeCode(),abstractTypeCode,the TypeCode object stored in this Any object
org.omg.CORBA.Any.insert_TypeCode(TypeCode),abstractvoid,
org.omg.CORBA.Any.extract_Principal(),Principal,the Principal object stored in this Any object
org.omg.CORBA.Any.insert_Principal(Principal),void,
org.omg.CORBA.Any.extract_Streamable(),Streamable,the Streamable stored in the Any object.
org.omg.CORBA.Any.insert_Streamable(Streamable),void,
org.omg.CORBA.Any.extract_fixed(),BigDecimal,the java.math.BigDecimal object stored in this Any object
org.omg.CORBA.Any.insert_fixed(BigDecimal),void,
"org.omg.CORBA.Any.insert_fixed(BigDecimal,TypeCode)",void,
org.omg.CORBA.AnyHolder._read(InputStream),void,
org.omg.CORBA.AnyHolder._write(OutputStream),void,
org.omg.CORBA.AnyHolder._type(),TypeCode,the TypeCode of the value held in this AnyHolder object
"org.omg.CORBA.AnySeqHelper.insert(Any,Any[])",void,
org.omg.CORBA.AnySeqHelper.extract(Any),Any[],
org.omg.CORBA.AnySeqHelper.type(),TypeCode,
org.omg.CORBA.AnySeqHelper.id(),String,
org.omg.CORBA.AnySeqHelper.read(InputStream),Any[],
"org.omg.CORBA.AnySeqHelper.write(OutputStream,Any[])",void,
org.omg.CORBA.AnySeqHolder._read(InputStream),void,
org.omg.CORBA.AnySeqHolder._write(OutputStream),void,
org.omg.CORBA.AnySeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CORBA.BooleanHolder._read(InputStream),void,
org.omg.CORBA.BooleanHolder._write(OutputStream),void,
org.omg.CORBA.BooleanHolder._type(),TypeCode,the TypeCode for the value held in this BooleanHolder object
"org.omg.CORBA.BooleanSeqHelper.insert(Any,boolean[])",void,
org.omg.CORBA.BooleanSeqHelper.extract(Any),boolean[],
org.omg.CORBA.BooleanSeqHelper.type(),TypeCode,
org.omg.CORBA.BooleanSeqHelper.id(),String,
org.omg.CORBA.BooleanSeqHelper.read(InputStream),boolean[],
"org.omg.CORBA.BooleanSeqHelper.write(OutputStream,boolean[])",void,
org.omg.CORBA.BooleanSeqHolder._read(InputStream),void,
org.omg.CORBA.BooleanSeqHolder._write(OutputStream),void,
org.omg.CORBA.BooleanSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CORBA.ByteHolder._read(InputStream),void,
org.omg.CORBA.ByteHolder._write(OutputStream),void,
org.omg.CORBA.ByteHolder._type(),TypeCode,the TypeCode of the value held in this ByteHolder object
org.omg.CORBA.CharHolder._read(InputStream),void,
org.omg.CORBA.CharHolder._write(OutputStream),void,
org.omg.CORBA.CharHolder._type(),TypeCode,the TypeCode of the value held in this CharHolder object
"org.omg.CORBA.CharSeqHelper.insert(Any,char[])",void,
org.omg.CORBA.CharSeqHelper.extract(Any),char[],
org.omg.CORBA.CharSeqHelper.type(),TypeCode,
org.omg.CORBA.CharSeqHelper.id(),String,
org.omg.CORBA.CharSeqHelper.read(InputStream),char[],
"org.omg.CORBA.CharSeqHelper.write(OutputStream,char[])",void,
org.omg.CORBA.CharSeqHolder._read(InputStream),void,
org.omg.CORBA.CharSeqHolder._write(OutputStream),void,
org.omg.CORBA.CharSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CORBA.CompletionStatus.value(),int,"one of the possible CompletionStatus values: _COMPLETED_YES, _COMPLETED_NO, or _COMPLETED_MAYBE"
org.omg.CORBA.CompletionStatus.from_int(int),CompletionStatus,"one of the possible CompletionStatus objects with values: _COMPLETED_YES, _COMPLETED_NO, or _COMPLETED_MAYBE"
"org.omg.CORBA.CompletionStatusHelper.insert(Any,CompletionStatus)",void,
org.omg.CORBA.CompletionStatusHelper.extract(Any),CompletionStatus,
org.omg.CORBA.CompletionStatusHelper.type(),TypeCode,
org.omg.CORBA.CompletionStatusHelper.id(),String,
org.omg.CORBA.CompletionStatusHelper.read(InputStream),CompletionStatus,
"org.omg.CORBA.CompletionStatusHelper.write(OutputStream,CompletionStatus)",void,
org.omg.CORBA.Context.context_name(),abstractString,the name of this Context object
org.omg.CORBA.Context.parent(),abstractContext,the Context object that is the parent of this Context object
org.omg.CORBA.Context.create_child(String),abstractContext,the newly-created child Context object initialized with the specified name
"org.omg.CORBA.Context.set_one_value(String,Any)",abstractvoid,
org.omg.CORBA.Context.set_values(NVList),abstractvoid,
org.omg.CORBA.Context.delete_values(String),abstractvoid,
"org.omg.CORBA.Context.get_values(String,int,String)",abstractNVList,an NVList containing all the property values (in the form of NamedValue objects) whose associated property name matches the given name or name pattern
org.omg.CORBA.ContextList.count(),abstractint,an int representing the number of Strings in this ContextList object
org.omg.CORBA.ContextList.add(String),abstractvoid,
org.omg.CORBA.ContextList.item(int),abstractString,the string at the given index
org.omg.CORBA.ContextList.remove(int),abstractvoid,
"org.omg.CORBA.CurrentHelper.insert(Any,Current)",void,
org.omg.CORBA.CurrentHelper.extract(Any),Current,
org.omg.CORBA.CurrentHelper.type(),TypeCode,
org.omg.CORBA.CurrentHelper.id(),String,
org.omg.CORBA.CurrentHelper.read(InputStream),Current,
"org.omg.CORBA.CurrentHelper.write(OutputStream,Current)",void,
org.omg.CORBA.CurrentHelper.narrow(Object),Current,
org.omg.CORBA.CurrentHolder._read(InputStream),void,
org.omg.CORBA.CurrentHolder._write(OutputStream),void,
org.omg.CORBA.CurrentHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CORBA.DefinitionKind.value(),int,the int constant from the class DefinitionKind that is the value of this DefinitionKind instance
org.omg.CORBA.DefinitionKind.from_int(int),DefinitionKind,the DefinitionKind instance corresponding to the given code
"org.omg.CORBA.DefinitionKindHelper.insert(Any,DefinitionKind)",void,
org.omg.CORBA.DefinitionKindHelper.extract(Any),DefinitionKind,
org.omg.CORBA.DefinitionKindHelper.type(),TypeCode,
org.omg.CORBA.DefinitionKindHelper.id(),String,
org.omg.CORBA.DefinitionKindHelper.read(InputStream),DefinitionKind,
"org.omg.CORBA.DefinitionKindHelper.write(OutputStream,DefinitionKind)",void,
org.omg.CORBA.DoubleHolder._read(InputStream),void,
org.omg.CORBA.DoubleHolder._write(OutputStream),void,
org.omg.CORBA.DoubleHolder._type(),TypeCode,the TypeCode object.
"org.omg.CORBA.DoubleSeqHelper.insert(Any,double[])",void,
org.omg.CORBA.DoubleSeqHelper.extract(Any),double[],
org.omg.CORBA.DoubleSeqHelper.type(),TypeCode,
org.omg.CORBA.DoubleSeqHelper.id(),String,
org.omg.CORBA.DoubleSeqHelper.read(InputStream),double[],
"org.omg.CORBA.DoubleSeqHelper.write(OutputStream,double[])",void,
org.omg.CORBA.DoubleSeqHolder._read(InputStream),void,
org.omg.CORBA.DoubleSeqHolder._write(OutputStream),void,
org.omg.CORBA.DoubleSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CORBA.DynamicImplementation.invoke(ServerRequest),void,
org.omg.CORBA.DynamicImplementation._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.CORBA.Environment.exception(),abstractException,the exception in this Environment object
org.omg.CORBA.Environment.exception(Exception),abstractvoid,
org.omg.CORBA.Environment.clear(),abstractvoid,
org.omg.CORBA.ExceptionList.count(),abstractint,the number of TypeCode objects in this ExceptionList object
org.omg.CORBA.ExceptionList.add(TypeCode),abstractvoid,
org.omg.CORBA.ExceptionList.item(int),abstractTypeCode,the TypeCode object at the given index
org.omg.CORBA.ExceptionList.remove(int),abstractvoid,
"org.omg.CORBA.FieldNameHelper.insert(Any,String)",void,
org.omg.CORBA.FieldNameHelper.extract(Any),String,
org.omg.CORBA.FieldNameHelper.type(),TypeCode,
org.omg.CORBA.FieldNameHelper.id(),String,
org.omg.CORBA.FieldNameHelper.read(InputStream),String,
"org.omg.CORBA.FieldNameHelper.write(OutputStream,String)",void,
org.omg.CORBA.FixedHolder._read(InputStream),void,
org.omg.CORBA.FixedHolder._write(OutputStream),void,
org.omg.CORBA.FixedHolder._type(),TypeCode,the TypeCode object.
org.omg.CORBA.FloatHolder._read(InputStream),void,
org.omg.CORBA.FloatHolder._write(OutputStream),void,
org.omg.CORBA.FloatHolder._type(),TypeCode,the TypeCode object.
"org.omg.CORBA.FloatSeqHelper.insert(Any,float[])",void,
org.omg.CORBA.FloatSeqHelper.extract(Any),float[],
org.omg.CORBA.FloatSeqHelper.type(),TypeCode,
org.omg.CORBA.FloatSeqHelper.id(),String,
org.omg.CORBA.FloatSeqHelper.read(InputStream),float[],
"org.omg.CORBA.FloatSeqHelper.write(OutputStream,float[])",void,
org.omg.CORBA.FloatSeqHolder._read(InputStream),void,
org.omg.CORBA.FloatSeqHolder._write(OutputStream),void,
org.omg.CORBA.FloatSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.IdentifierHelper.insert(Any,String)",void,
org.omg.CORBA.IdentifierHelper.extract(Any),String,
org.omg.CORBA.IdentifierHelper.type(),TypeCode,
org.omg.CORBA.IdentifierHelper.id(),String,
org.omg.CORBA.IdentifierHelper.read(InputStream),String,
"org.omg.CORBA.IdentifierHelper.write(OutputStream,String)",void,
"org.omg.CORBA.IDLTypeHelper.insert(Any,IDLType)",void,
org.omg.CORBA.IDLTypeHelper.extract(Any),IDLType,
org.omg.CORBA.IDLTypeHelper.type(),TypeCode,
org.omg.CORBA.IDLTypeHelper.id(),String,
org.omg.CORBA.IDLTypeHelper.read(InputStream),IDLType,
"org.omg.CORBA.IDLTypeHelper.write(OutputStream,IDLType)",void,
org.omg.CORBA.IDLTypeHelper.narrow(Object),IDLType,
org.omg.CORBA.IntHolder._read(InputStream),void,
org.omg.CORBA.IntHolder._write(OutputStream),void,
org.omg.CORBA.IntHolder._type(),TypeCode,the type code for the value held in this IntHolder object
org.omg.CORBA.LocalObject._is_equivalent(Object),boolean,"true if this object reference is known to be equivalent to the given object reference. Note that false indicates only that the two object references are distinct, not necessarily that they reference distinct objects."
org.omg.CORBA.LocalObject._non_existent(),boolean,false
org.omg.CORBA.LocalObject._hash(int),int,this instance's hashcode
org.omg.CORBA.LocalObject._is_a(String),boolean,NO_IMPLEMENT because this is a locally constrained object and this method does not apply to local objects
org.omg.CORBA.LocalObject._duplicate(),Object,a duplicate of this LocalObject instance.
org.omg.CORBA.LocalObject._release(),void,
org.omg.CORBA.LocalObject._request(String),Request,a Request object with the given operation
"org.omg.CORBA.LocalObject._create_request(Context,String,NVList,NamedValue)",Request,a new Request object initialized with the given arguments
"org.omg.CORBA.LocalObject._create_request(Context,String,NVList,NamedValue,ExceptionList,ContextList)",Request,the new Request object initialized with the given arguments
org.omg.CORBA.LocalObject._get_interface(),Object,NO_IMPLEMENT because this is a locally constrained object and this method does not apply to local objects
org.omg.CORBA.LocalObject._get_interface_def(),Object,the InterfaceDef object in the Interface Repository which provides type information about the object referred to by this object reference
org.omg.CORBA.LocalObject._orb(),ORB,the ORB instance that created the Delegate contained in this ObjectImpl
org.omg.CORBA.LocalObject._get_policy(int),Policy,NO_IMPLEMENT because this is a locally constrained object and this method does not apply to local objects
org.omg.CORBA.LocalObject._get_domain_managers(),DomainManager[],the list of immediately enclosing domain managers of this object. At least one domain manager is always returned in the list since by default each object is associated with at least one domain manager at creation.
"org.omg.CORBA.LocalObject._set_policy_override(Policy[],SetOverrideType)",Object,NO_IMPLEMENT because this is a locally constrained object and this method does not apply to local objects
org.omg.CORBA.LocalObject._is_local(),boolean,true always
"org.omg.CORBA.LocalObject._servant_preinvoke(String,Class)",ServantObject,NO_IMPLEMENT because this is a locally constrained object and this method does not apply to local objects
org.omg.CORBA.LocalObject._servant_postinvoke(ServantObject),void,
"org.omg.CORBA.LocalObject._request(String,boolean)",OutputStream,NO_IMPLEMENT because this is a locally constrained object and this method does not apply to local objects
org.omg.CORBA.LocalObject._invoke(OutputStream),InputStream,NO_IMPLEMENT because this is a locally constrained object and this method does not apply to local objects
org.omg.CORBA.LocalObject._releaseReply(InputStream),void,
org.omg.CORBA.LocalObject.validate_connection(),boolean,NO_IMPLEMENT because this is a locally constrained object and this method does not apply to local objects
org.omg.CORBA.LongHolder._read(InputStream),void,
org.omg.CORBA.LongHolder._write(OutputStream),void,
org.omg.CORBA.LongHolder._type(),TypeCode,the TypeCode of the value held in the holder
"org.omg.CORBA.LongLongSeqHelper.insert(Any,long[])",void,
org.omg.CORBA.LongLongSeqHelper.extract(Any),long[],
org.omg.CORBA.LongLongSeqHelper.type(),TypeCode,
org.omg.CORBA.LongLongSeqHelper.id(),String,
org.omg.CORBA.LongLongSeqHelper.read(InputStream),long[],
"org.omg.CORBA.LongLongSeqHelper.write(OutputStream,long[])",void,
org.omg.CORBA.LongLongSeqHolder._read(InputStream),void,
org.omg.CORBA.LongLongSeqHolder._write(OutputStream),void,
org.omg.CORBA.LongLongSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.LongSeqHelper.insert(Any,int[])",void,
org.omg.CORBA.LongSeqHelper.extract(Any),int[],
org.omg.CORBA.LongSeqHelper.type(),TypeCode,
org.omg.CORBA.LongSeqHelper.id(),String,
org.omg.CORBA.LongSeqHelper.read(InputStream),int[],
"org.omg.CORBA.LongSeqHelper.write(OutputStream,int[])",void,
org.omg.CORBA.LongSeqHolder._read(InputStream),void,
org.omg.CORBA.LongSeqHolder._write(OutputStream),void,
org.omg.CORBA.LongSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CORBA.NamedValue.name(),abstractString,a String object representing the name of this NamedValue object
org.omg.CORBA.NamedValue.value(),abstractAny,an Any object containing the value of this NamedValue object
org.omg.CORBA.NamedValue.flags(),abstractint,an int representing the argument mode for this NamedValue object
"org.omg.CORBA.NameValuePairHelper.insert(Any,NameValuePair)",void,
org.omg.CORBA.NameValuePairHelper.extract(Any),NameValuePair,
org.omg.CORBA.NameValuePairHelper.type(),TypeCode,
org.omg.CORBA.NameValuePairHelper.id(),String,
org.omg.CORBA.NameValuePairHelper.read(InputStream),NameValuePair,
"org.omg.CORBA.NameValuePairHelper.write(OutputStream,NameValuePair)",void,
org.omg.CORBA.NVList.count(),abstractint,an int indicating the number of NamedValue objects in this NVList.
org.omg.CORBA.NVList.add(int),abstractNamedValue,the newly-created NamedValue object
"org.omg.CORBA.NVList.add_item(String,int)",abstractNamedValue,the newly-created NamedValue object
"org.omg.CORBA.NVList.add_value(String,Any,int)",abstractNamedValue,the newly created NamedValue object
org.omg.CORBA.NVList.item(int),abstractNamedValue,the NamedValue object at the given index
org.omg.CORBA.NVList.remove(int),abstractvoid,
"org.omg.CORBA.ObjectHelper.insert(Any,Object)",void,
org.omg.CORBA.ObjectHelper.extract(Any),Object,
org.omg.CORBA.ObjectHelper.type(),TypeCode,
org.omg.CORBA.ObjectHelper.id(),String,
org.omg.CORBA.ObjectHelper.read(InputStream),Object,
"org.omg.CORBA.ObjectHelper.write(OutputStream,Object)",void,
org.omg.CORBA.ObjectHolder._read(InputStream),void,
org.omg.CORBA.ObjectHolder._write(OutputStream),void,
org.omg.CORBA.ObjectHolder._type(),TypeCode,the TypeCode of the value held in this ObjectHolder object
"org.omg.CORBA.OctetSeqHelper.insert(Any,byte[])",void,
org.omg.CORBA.OctetSeqHelper.extract(Any),byte[],
org.omg.CORBA.OctetSeqHelper.type(),TypeCode,
org.omg.CORBA.OctetSeqHelper.id(),String,
org.omg.CORBA.OctetSeqHelper.read(InputStream),byte[],
"org.omg.CORBA.OctetSeqHelper.write(OutputStream,byte[])",void,
org.omg.CORBA.OctetSeqHolder._read(InputStream),void,
org.omg.CORBA.OctetSeqHolder._write(OutputStream),void,
org.omg.CORBA.OctetSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CORBA.ORB.init(),ORB,the singleton ORB
"org.omg.CORBA.ORB.init(String[],Properties)",ORB,the newly-created ORB instance
"org.omg.CORBA.ORB.init(Applet,Properties)",ORB,the newly-created ORB instance
"org.omg.CORBA.ORB.set_parameters(String[],Properties)",abstractvoid,
"org.omg.CORBA.ORB.set_parameters(Applet,Properties)",abstractvoid,
org.omg.CORBA.ORB.connect(Object),void,
org.omg.CORBA.ORB.destroy(),void,
org.omg.CORBA.ORB.disconnect(Object),void,
org.omg.CORBA.ORB.list_initial_services(),abstractString[],an array of String objects that represent the object references for CORBA services that are initially available with this ORB
org.omg.CORBA.ORB.resolve_initial_references(String),abstractObject,the object reference associated with the given name
org.omg.CORBA.ORB.object_to_string(Object),abstractString,the string representing the object reference
org.omg.CORBA.ORB.string_to_object(String),abstractObject,the object reference
org.omg.CORBA.ORB.create_list(int),abstractNVList,the newly-created NVList
org.omg.CORBA.ORB.create_operation_list(Object),NVList,a newly-created NVList object containing descriptions of the arguments to the method described in the given OperationDef object
"org.omg.CORBA.ORB.create_named_value(String,Any,int)",abstractNamedValue,the newly-created NamedValue object
org.omg.CORBA.ORB.create_exception_list(),abstractExceptionList,the newly-created ExceptionList object
org.omg.CORBA.ORB.create_context_list(),abstractContextList,the newly-created ContextList object
org.omg.CORBA.ORB.get_default_context(),abstractContext,the default Context object
org.omg.CORBA.ORB.create_environment(),abstractEnvironment,the newly-created Environment object
org.omg.CORBA.ORB.create_output_stream(),abstractOutputStream,the newly-created org.omg.CORBA.portable.OutputStream object
org.omg.CORBA.ORB.send_multiple_requests_oneway(Request[]),abstractvoid,
org.omg.CORBA.ORB.send_multiple_requests_deferred(Request[]),abstractvoid,
org.omg.CORBA.ORB.poll_next_response(),abstractboolean,true if there is a response available; false otherwise
org.omg.CORBA.ORB.get_next_response(),abstractRequest,the next Request object ready with a response
org.omg.CORBA.ORB.get_primitive_tc(TCKind),abstractTypeCode,the requested TypeCode object
"org.omg.CORBA.ORB.create_struct_tc(String,String,StructMember[])",abstractTypeCode,a newly-created TypeCode object describing an IDL struct
"org.omg.CORBA.ORB.create_union_tc(String,String,TypeCode,UnionMember[])",abstractTypeCode,a newly-created TypeCode object describing an IDL union
"org.omg.CORBA.ORB.create_enum_tc(String,String,String[])",abstractTypeCode,a newly-created TypeCode object describing an IDL enum
"org.omg.CORBA.ORB.create_alias_tc(String,String,TypeCode)",abstractTypeCode,a newly-created TypeCode object describing an IDL alias
"org.omg.CORBA.ORB.create_exception_tc(String,String,StructMember[])",abstractTypeCode,a newly-created TypeCode object describing an IDL exception
"org.omg.CORBA.ORB.create_interface_tc(String,String)",abstractTypeCode,a newly-created TypeCode object describing an IDL interface
org.omg.CORBA.ORB.create_string_tc(int),abstractTypeCode,a newly-created TypeCode object describing a bounded IDL string
org.omg.CORBA.ORB.create_wstring_tc(int),abstractTypeCode,a newly-created TypeCode object describing a bounded IDL wstring
"org.omg.CORBA.ORB.create_sequence_tc(int,TypeCode)",abstractTypeCode,a newly-created TypeCode object describing an IDL sequence
"org.omg.CORBA.ORB.create_recursive_sequence_tc(int,int)",abstractTypeCode,a newly-created TypeCode object describing a recursive sequence
"org.omg.CORBA.ORB.create_array_tc(int,TypeCode)",abstractTypeCode,a newly-created TypeCode object describing an IDL array
"org.omg.CORBA.ORB.create_native_tc(String,String)",TypeCode,the requested TypeCode.
"org.omg.CORBA.ORB.create_abstract_interface_tc(String,String)",TypeCode,the requested TypeCode.
"org.omg.CORBA.ORB.create_fixed_tc(short,short)",TypeCode,the requested TypeCode.
"org.omg.CORBA.ORB.create_value_tc(String,String,short,TypeCode,ValueMember[])",TypeCode,the requested TypeCode
org.omg.CORBA.ORB.create_recursive_tc(String),TypeCode,the requested TypeCode
"org.omg.CORBA.ORB.create_value_box_tc(String,String,TypeCode)",TypeCode,the requested TypeCode
org.omg.CORBA.ORB.create_any(),abstractAny,a newly-created Any object
org.omg.CORBA.ORB.get_current(),Current,a newly-created Current object
org.omg.CORBA.ORB.run(),void,
org.omg.CORBA.ORB.shutdown(boolean),void,
org.omg.CORBA.ORB.work_pending(),boolean,"true if there is work pending, meaning that the ORB needs the main thread to perform some work; false if there is no work pending and thus the ORB does not need the main thread"
org.omg.CORBA.ORB.perform_work(),void,
"org.omg.CORBA.ORB.get_service_information(short,ServiceInformationHolder)",boolean,true if service information is available for the service_type; false if no information for the requested services type is available
org.omg.CORBA.ORB.create_dyn_any(Any),DynAny,the new DynAny object created from the given Any object
org.omg.CORBA.ORB.create_basic_dyn_any(TypeCode),DynAny,the new DynAny object created from the given TypeCode object
org.omg.CORBA.ORB.create_dyn_struct(TypeCode),DynStruct,the new DynStruct object created from the given TypeCode object
org.omg.CORBA.ORB.create_dyn_sequence(TypeCode),DynSequence,the new DynSequence object created from the given TypeCode object
org.omg.CORBA.ORB.create_dyn_array(TypeCode),DynArray,the new DynArray object created from the given TypeCode object
org.omg.CORBA.ORB.create_dyn_union(TypeCode),DynUnion,the new DynUnion object created from the given TypeCode object
org.omg.CORBA.ORB.create_dyn_enum(TypeCode),DynEnum,the new DynEnum object created from the given TypeCode object
"org.omg.CORBA.ORB.create_policy(int,Any)",Policy,Reference to a newly created Policy object of type specified by the type parameter and initialized to a state specified by the val parameter
org.omg.CORBA.ParameterMode.value(),int,
org.omg.CORBA.ParameterMode.from_int(int),ParameterMode,
"org.omg.CORBA.ParameterModeHelper.insert(Any,ParameterMode)",void,
org.omg.CORBA.ParameterModeHelper.extract(Any),ParameterMode,
org.omg.CORBA.ParameterModeHelper.type(),TypeCode,
org.omg.CORBA.ParameterModeHelper.id(),String,
org.omg.CORBA.ParameterModeHelper.read(InputStream),ParameterMode,
"org.omg.CORBA.ParameterModeHelper.write(OutputStream,ParameterMode)",void,
org.omg.CORBA.ParameterModeHolder._read(InputStream),void,
org.omg.CORBA.ParameterModeHolder._write(OutputStream),void,
org.omg.CORBA.ParameterModeHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.PolicyErrorCodeHelper.insert(Any,short)",void,
org.omg.CORBA.PolicyErrorCodeHelper.extract(Any),short,
org.omg.CORBA.PolicyErrorCodeHelper.type(),TypeCode,
org.omg.CORBA.PolicyErrorCodeHelper.id(),String,
org.omg.CORBA.PolicyErrorCodeHelper.read(InputStream),short,
"org.omg.CORBA.PolicyErrorCodeHelper.write(OutputStream,short)",void,
"org.omg.CORBA.PolicyErrorHelper.insert(Any,PolicyError)",void,
org.omg.CORBA.PolicyErrorHelper.extract(Any),PolicyError,
org.omg.CORBA.PolicyErrorHelper.type(),TypeCode,
org.omg.CORBA.PolicyErrorHelper.id(),String,
org.omg.CORBA.PolicyErrorHelper.read(InputStream),PolicyError,
"org.omg.CORBA.PolicyErrorHelper.write(OutputStream,PolicyError)",void,
org.omg.CORBA.PolicyErrorHolder._read(InputStream),void,
org.omg.CORBA.PolicyErrorHolder._write(OutputStream),void,
org.omg.CORBA.PolicyErrorHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.PolicyHelper.insert(Any,Policy)",void,
org.omg.CORBA.PolicyHelper.extract(Any),Policy,
org.omg.CORBA.PolicyHelper.type(),TypeCode,
org.omg.CORBA.PolicyHelper.id(),String,
org.omg.CORBA.PolicyHelper.read(InputStream),Policy,
"org.omg.CORBA.PolicyHelper.write(OutputStream,Policy)",void,
org.omg.CORBA.PolicyHelper.narrow(Object),Policy,
org.omg.CORBA.PolicyHolder._read(InputStream),void,
org.omg.CORBA.PolicyHolder._write(OutputStream),void,
org.omg.CORBA.PolicyHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.PolicyListHelper.insert(Any,Policy[])",void,
org.omg.CORBA.PolicyListHelper.extract(Any),Policy[],
org.omg.CORBA.PolicyListHelper.type(),TypeCode,
org.omg.CORBA.PolicyListHelper.id(),String,
org.omg.CORBA.PolicyListHelper.read(InputStream),Policy[],
"org.omg.CORBA.PolicyListHelper.write(OutputStream,Policy[])",void,
org.omg.CORBA.PolicyListHolder._read(InputStream),void,
org.omg.CORBA.PolicyListHolder._write(OutputStream),void,
org.omg.CORBA.PolicyListHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.PolicyTypeHelper.insert(Any,int)",void,
org.omg.CORBA.PolicyTypeHelper.extract(Any),int,
org.omg.CORBA.PolicyTypeHelper.type(),TypeCode,
org.omg.CORBA.PolicyTypeHelper.id(),String,
org.omg.CORBA.PolicyTypeHelper.read(InputStream),int,
"org.omg.CORBA.PolicyTypeHelper.write(OutputStream,int)",void,
org.omg.CORBA.Principal.name(byte[]),void,
org.omg.CORBA.Principal.name(),byte[],the name of this Principal object
org.omg.CORBA.PrincipalHolder._read(InputStream),void,
org.omg.CORBA.PrincipalHolder._write(OutputStream),void,
org.omg.CORBA.PrincipalHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.RepositoryIdHelper.insert(Any,String)",void,
org.omg.CORBA.RepositoryIdHelper.extract(Any),String,
org.omg.CORBA.RepositoryIdHelper.type(),TypeCode,
org.omg.CORBA.RepositoryIdHelper.id(),String,
org.omg.CORBA.RepositoryIdHelper.read(InputStream),String,
"org.omg.CORBA.RepositoryIdHelper.write(OutputStream,String)",void,
org.omg.CORBA.Request.target(),abstractObject,the object reference that points to the object implementation for the method to be invoked
org.omg.CORBA.Request.operation(),abstractString,the name of the method to be invoked
org.omg.CORBA.Request.arguments(),abstractNVList,the NVList object containing the arguments for the method
org.omg.CORBA.Request.result(),abstractNamedValue,the NamedValue object containing the result of the method
org.omg.CORBA.Request.env(),abstractEnvironment,the Environment object for this request
org.omg.CORBA.Request.exceptions(),abstractExceptionList,the ExceptionList object describing the exceptions that may be thrown by the method being invoked
org.omg.CORBA.Request.contexts(),abstractContextList,the list of context strings whose values need to be resolved and sent with the invocation.
org.omg.CORBA.Request.ctx(),abstractContext,the Context object that is to be used to resolve any context strings whose values need to be sent with the invocation
org.omg.CORBA.Request.ctx(Context),abstractvoid,
org.omg.CORBA.Request.add_in_arg(),abstractAny,an Any object that contains the value and typecode for the input argument added
org.omg.CORBA.Request.add_named_in_arg(String),abstractAny,an Any object that contains the value and typecode for the input argument added
org.omg.CORBA.Request.add_inout_arg(),abstractAny,an Any object that contains the value and typecode for the input/output argument added
org.omg.CORBA.Request.add_named_inout_arg(String),abstractAny,an Any object that contains the value and typecode for the input/output argument added
org.omg.CORBA.Request.add_out_arg(),abstractAny,an Any object that contains the value and typecode for the output argument added
org.omg.CORBA.Request.add_named_out_arg(String),abstractAny,an Any object that contains the value and typecode for the output argument added
org.omg.CORBA.Request.set_return_type(TypeCode),abstractvoid,
org.omg.CORBA.Request.return_value(),abstractAny,an Any object containing the value and typecode for the return value
org.omg.CORBA.Request.invoke(),abstractvoid,
org.omg.CORBA.Request.send_oneway(),abstractvoid,
org.omg.CORBA.Request.send_deferred(),abstractvoid,
org.omg.CORBA.Request.poll_response(),abstractboolean,true if the method response has been received; false otherwise
org.omg.CORBA.Request.get_response(),abstractvoid,
org.omg.CORBA.ServerRequest.op_name(),String,the name of the operation to be invoked
org.omg.CORBA.ServerRequest.operation(),String,the name of the operation to be invoked
org.omg.CORBA.ServerRequest.params(NVList),void,
org.omg.CORBA.ServerRequest.arguments(NVList),void,
org.omg.CORBA.ServerRequest.result(Any),void,
org.omg.CORBA.ServerRequest.set_result(Any),void,
org.omg.CORBA.ServerRequest.except(Any),void,
org.omg.CORBA.ServerRequest.set_exception(Any),void,
org.omg.CORBA.ServerRequest.ctx(),abstractContext,the context object that is to be used to resolve any context strings whose values need to be sent with the invocation.
"org.omg.CORBA.ServiceDetailHelper.write(OutputStream,ServiceDetail)",void,
org.omg.CORBA.ServiceDetailHelper.read(InputStream),ServiceDetail,
org.omg.CORBA.ServiceDetailHelper.extract(Any),ServiceDetail,
"org.omg.CORBA.ServiceDetailHelper.insert(Any,ServiceDetail)",void,
org.omg.CORBA.ServiceDetailHelper.type(),TypeCode,
org.omg.CORBA.ServiceDetailHelper.id(),String,
"org.omg.CORBA.ServiceInformationHelper.write(OutputStream,ServiceInformation)",void,
org.omg.CORBA.ServiceInformationHelper.read(InputStream),ServiceInformation,
org.omg.CORBA.ServiceInformationHelper.extract(Any),ServiceInformation,
"org.omg.CORBA.ServiceInformationHelper.insert(Any,ServiceInformation)",void,
org.omg.CORBA.ServiceInformationHelper.type(),TypeCode,
org.omg.CORBA.ServiceInformationHelper.id(),String,
org.omg.CORBA.ServiceInformationHolder._write(OutputStream),void,
org.omg.CORBA.ServiceInformationHolder._read(InputStream),void,
org.omg.CORBA.ServiceInformationHolder._type(),TypeCode,the type code for the value held in this ServiceInformationHolder object
org.omg.CORBA.SetOverrideType.value(),int,the int for this SetOverrideType instance.
org.omg.CORBA.SetOverrideType.from_int(int),SetOverrideType,the SetOverrideType instance whose value matches the given int
"org.omg.CORBA.SetOverrideTypeHelper.insert(Any,SetOverrideType)",void,
org.omg.CORBA.SetOverrideTypeHelper.extract(Any),SetOverrideType,
org.omg.CORBA.SetOverrideTypeHelper.type(),TypeCode,
org.omg.CORBA.SetOverrideTypeHelper.id(),String,
org.omg.CORBA.SetOverrideTypeHelper.read(InputStream),SetOverrideType,
"org.omg.CORBA.SetOverrideTypeHelper.write(OutputStream,SetOverrideType)",void,
org.omg.CORBA.ShortHolder._read(InputStream),void,
org.omg.CORBA.ShortHolder._write(OutputStream),void,
org.omg.CORBA.ShortHolder._type(),TypeCode,the TypeCode of the value held in this ShortHolder object
"org.omg.CORBA.ShortSeqHelper.insert(Any,short[])",void,
org.omg.CORBA.ShortSeqHelper.extract(Any),short[],
org.omg.CORBA.ShortSeqHelper.type(),TypeCode,
org.omg.CORBA.ShortSeqHelper.id(),String,
org.omg.CORBA.ShortSeqHelper.read(InputStream),short[],
"org.omg.CORBA.ShortSeqHelper.write(OutputStream,short[])",void,
org.omg.CORBA.ShortSeqHolder._read(InputStream),void,
org.omg.CORBA.ShortSeqHolder._write(OutputStream),void,
org.omg.CORBA.ShortSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CORBA.StringHolder._read(InputStream),void,
org.omg.CORBA.StringHolder._write(OutputStream),void,
org.omg.CORBA.StringHolder._type(),TypeCode,the type code of the value held in this StringHolder object
"org.omg.CORBA.StringSeqHelper.insert(Any,String[])",void,
org.omg.CORBA.StringSeqHelper.extract(Any),String[],
org.omg.CORBA.StringSeqHelper.type(),TypeCode,
org.omg.CORBA.StringSeqHelper.id(),String,
org.omg.CORBA.StringSeqHelper.read(InputStream),String[],
"org.omg.CORBA.StringSeqHelper.write(OutputStream,String[])",void,
org.omg.CORBA.StringSeqHolder._read(InputStream),void,
org.omg.CORBA.StringSeqHolder._write(OutputStream),void,
org.omg.CORBA.StringSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.StringValueHelper.insert(Any,String)",void,
org.omg.CORBA.StringValueHelper.extract(Any),String,
org.omg.CORBA.StringValueHelper.type(),TypeCode,
org.omg.CORBA.StringValueHelper.id(),String,
org.omg.CORBA.StringValueHelper.read(InputStream),String,
org.omg.CORBA.StringValueHelper.read_value(InputStream),Serializable,
"org.omg.CORBA.StringValueHelper.write(OutputStream,String)",void,
"org.omg.CORBA.StringValueHelper.write_value(OutputStream,Serializable)",void,
org.omg.CORBA.StringValueHelper.get_id(),String,
"org.omg.CORBA.StructMemberHelper.insert(Any,StructMember)",void,
org.omg.CORBA.StructMemberHelper.extract(Any),StructMember,
org.omg.CORBA.StructMemberHelper.type(),TypeCode,
org.omg.CORBA.StructMemberHelper.id(),String,
org.omg.CORBA.StructMemberHelper.read(InputStream),StructMember,
"org.omg.CORBA.StructMemberHelper.write(OutputStream,StructMember)",void,
org.omg.CORBA.TCKind.value(),int,the int that represents the kind of IDL data type for this TCKind instance
org.omg.CORBA.TCKind.from_int(int),TCKind,the TCKind instance whose value field matches the given int
org.omg.CORBA.TypeCode.equal(TypeCode),abstractboolean,true if the type codes are equal; false otherwise
org.omg.CORBA.TypeCode.equivalent(TypeCode),abstractboolean,true if the given typecode is equivalent to this typecode; false otherwise
org.omg.CORBA.TypeCode.get_compact_typecode(),abstractTypeCode,"a TypeCode object with optional name and member name fields stripped out, except for alias typecodes, which are left intact"
org.omg.CORBA.TypeCode.kind(),abstractTCKind,the TCKind instance indicating the value of the kind field of this TypeCode object
org.omg.CORBA.TypeCode.id(),abstractString,the RepositoryId for this TypeCode object or an empty string if there is no RepositoryID
org.omg.CORBA.TypeCode.name(),abstractString,the name identifying this TypeCode object or an empty string
org.omg.CORBA.TypeCode.member_count(),abstractint,the number of members constituting the type described by this TypeCode object
org.omg.CORBA.TypeCode.member_name(int),abstractString,simple name of the member identified by the index or an empty string
org.omg.CORBA.TypeCode.member_type(int),abstractTypeCode,the TypeCode object describing the member at the given index
org.omg.CORBA.TypeCode.member_label(int),abstractAny,an Any object describing the label of the requested union member or the zero octet for the default member
org.omg.CORBA.TypeCode.discriminator_type(),abstractTypeCode,the TypeCode object describing the non-default member labels
org.omg.CORBA.TypeCode.default_index(),abstractint,"the index of the default member, or -1 if there is no default member"
org.omg.CORBA.TypeCode.length(),abstractint,"the bound for strings and sequences, or the number of elements for arrays"
org.omg.CORBA.TypeCode.content_type(),abstractTypeCode,"a TypeCode object representing the element type for sequences and arrays, the original type for aliases, or the boxed type for boxed valuetypes."
org.omg.CORBA.TypeCode.fixed_digits(),abstractshort,the total number of digits
org.omg.CORBA.TypeCode.fixed_scale(),abstractshort,the scale of the fixed type that this TypeCode object describes
org.omg.CORBA.TypeCode.member_visibility(int),abstractshort,either PRIVATE_MEMBER.value or PUBLIC_MEMBER.value
org.omg.CORBA.TypeCode.type_modifier(),abstractshort,a constant describing the value type that this TypeCode object describes
org.omg.CORBA.TypeCode.concrete_base_type(),abstractTypeCode,the TypeCode object that describes the concrete base type of the value type that this TypeCode object describes
org.omg.CORBA.TypeCodeHolder._read(InputStream),void,
org.omg.CORBA.TypeCodeHolder._write(OutputStream),void,
org.omg.CORBA.TypeCodeHolder._type(),TypeCode,the TypeCode of the value held in this TypeCodeHolder object
"org.omg.CORBA.ULongLongSeqHelper.insert(Any,long[])",void,
org.omg.CORBA.ULongLongSeqHelper.extract(Any),long[],
org.omg.CORBA.ULongLongSeqHelper.type(),TypeCode,
org.omg.CORBA.ULongLongSeqHelper.id(),String,
org.omg.CORBA.ULongLongSeqHelper.read(InputStream),long[],
"org.omg.CORBA.ULongLongSeqHelper.write(OutputStream,long[])",void,
org.omg.CORBA.ULongLongSeqHolder._read(InputStream),void,
org.omg.CORBA.ULongLongSeqHolder._write(OutputStream),void,
org.omg.CORBA.ULongLongSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.ULongSeqHelper.insert(Any,int[])",void,
org.omg.CORBA.ULongSeqHelper.extract(Any),int[],
org.omg.CORBA.ULongSeqHelper.type(),TypeCode,
org.omg.CORBA.ULongSeqHelper.id(),String,
org.omg.CORBA.ULongSeqHelper.read(InputStream),int[],
"org.omg.CORBA.ULongSeqHelper.write(OutputStream,int[])",void,
org.omg.CORBA.ULongSeqHolder._read(InputStream),void,
org.omg.CORBA.ULongSeqHolder._write(OutputStream),void,
org.omg.CORBA.ULongSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.UnionMemberHelper.insert(Any,UnionMember)",void,
org.omg.CORBA.UnionMemberHelper.extract(Any),UnionMember,
org.omg.CORBA.UnionMemberHelper.type(),TypeCode,
org.omg.CORBA.UnionMemberHelper.id(),String,
org.omg.CORBA.UnionMemberHelper.read(InputStream),UnionMember,
"org.omg.CORBA.UnionMemberHelper.write(OutputStream,UnionMember)",void,
"org.omg.CORBA.UnknownUserExceptionHelper.insert(Any,UnknownUserException)",void,
org.omg.CORBA.UnknownUserExceptionHelper.extract(Any),UnknownUserException,
org.omg.CORBA.UnknownUserExceptionHelper.type(),TypeCode,
org.omg.CORBA.UnknownUserExceptionHelper.id(),String,
org.omg.CORBA.UnknownUserExceptionHelper.read(InputStream),UnknownUserException,
"org.omg.CORBA.UnknownUserExceptionHelper.write(OutputStream,UnknownUserException)",void,
org.omg.CORBA.UnknownUserExceptionHolder._read(InputStream),void,
org.omg.CORBA.UnknownUserExceptionHolder._write(OutputStream),void,
org.omg.CORBA.UnknownUserExceptionHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.UShortSeqHelper.insert(Any,short[])",void,
org.omg.CORBA.UShortSeqHelper.extract(Any),short[],
org.omg.CORBA.UShortSeqHelper.type(),TypeCode,
org.omg.CORBA.UShortSeqHelper.id(),String,
org.omg.CORBA.UShortSeqHelper.read(InputStream),short[],
"org.omg.CORBA.UShortSeqHelper.write(OutputStream,short[])",void,
org.omg.CORBA.UShortSeqHolder._read(InputStream),void,
org.omg.CORBA.UShortSeqHolder._write(OutputStream),void,
org.omg.CORBA.UShortSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.ValueBaseHelper.insert(Any,Serializable)",void,
org.omg.CORBA.ValueBaseHelper.extract(Any),Serializable,
org.omg.CORBA.ValueBaseHelper.type(),TypeCode,
org.omg.CORBA.ValueBaseHelper.id(),String,
org.omg.CORBA.ValueBaseHelper.read(InputStream),Serializable,
"org.omg.CORBA.ValueBaseHelper.write(OutputStream,Serializable)",void,
org.omg.CORBA.ValueBaseHolder._read(InputStream),void,
org.omg.CORBA.ValueBaseHolder._write(OutputStream),void,
org.omg.CORBA.ValueBaseHolder._type(),TypeCode,the TypeCode of the value held in the holder
"org.omg.CORBA.ValueMemberHelper.insert(Any,ValueMember)",void,
org.omg.CORBA.ValueMemberHelper.extract(Any),ValueMember,
org.omg.CORBA.ValueMemberHelper.type(),TypeCode,
org.omg.CORBA.ValueMemberHelper.id(),String,
org.omg.CORBA.ValueMemberHelper.read(InputStream),ValueMember,
"org.omg.CORBA.ValueMemberHelper.write(OutputStream,ValueMember)",void,
"org.omg.CORBA.VersionSpecHelper.insert(Any,String)",void,
org.omg.CORBA.VersionSpecHelper.extract(Any),String,
org.omg.CORBA.VersionSpecHelper.type(),TypeCode,
org.omg.CORBA.VersionSpecHelper.id(),String,
org.omg.CORBA.VersionSpecHelper.read(InputStream),String,
"org.omg.CORBA.VersionSpecHelper.write(OutputStream,String)",void,
"org.omg.CORBA.VisibilityHelper.insert(Any,short)",void,
org.omg.CORBA.VisibilityHelper.extract(Any),short,
org.omg.CORBA.VisibilityHelper.type(),TypeCode,
org.omg.CORBA.VisibilityHelper.id(),String,
org.omg.CORBA.VisibilityHelper.read(InputStream),short,
"org.omg.CORBA.VisibilityHelper.write(OutputStream,short)",void,
"org.omg.CORBA.WCharSeqHelper.insert(Any,char[])",void,
org.omg.CORBA.WCharSeqHelper.extract(Any),char[],
org.omg.CORBA.WCharSeqHelper.type(),TypeCode,
org.omg.CORBA.WCharSeqHelper.id(),String,
org.omg.CORBA.WCharSeqHelper.read(InputStream),char[],
"org.omg.CORBA.WCharSeqHelper.write(OutputStream,char[])",void,
org.omg.CORBA.WCharSeqHolder._read(InputStream),void,
org.omg.CORBA.WCharSeqHolder._write(OutputStream),void,
org.omg.CORBA.WCharSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.WrongTransactionHelper.insert(Any,WrongTransaction)",void,
org.omg.CORBA.WrongTransactionHelper.extract(Any),WrongTransaction,
org.omg.CORBA.WrongTransactionHelper.type(),TypeCode,
org.omg.CORBA.WrongTransactionHelper.id(),String,
org.omg.CORBA.WrongTransactionHelper.read(InputStream),WrongTransaction,
"org.omg.CORBA.WrongTransactionHelper.write(OutputStream,WrongTransaction)",void,
org.omg.CORBA.WrongTransactionHolder._read(InputStream),void,
org.omg.CORBA.WrongTransactionHolder._write(OutputStream),void,
org.omg.CORBA.WrongTransactionHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.WStringSeqHelper.insert(Any,String[])",void,
org.omg.CORBA.WStringSeqHelper.extract(Any),String[],
org.omg.CORBA.WStringSeqHelper.type(),TypeCode,
org.omg.CORBA.WStringSeqHelper.id(),String,
org.omg.CORBA.WStringSeqHelper.read(InputStream),String[],
"org.omg.CORBA.WStringSeqHelper.write(OutputStream,String[])",void,
org.omg.CORBA.WStringSeqHolder._read(InputStream),void,
org.omg.CORBA.WStringSeqHolder._write(OutputStream),void,
org.omg.CORBA.WStringSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CORBA.WStringValueHelper.insert(Any,String)",void,
org.omg.CORBA.WStringValueHelper.extract(Any),String,
org.omg.CORBA.WStringValueHelper.type(),TypeCode,
org.omg.CORBA.WStringValueHelper.id(),String,
org.omg.CORBA.WStringValueHelper.read(InputStream),String,
org.omg.CORBA.WStringValueHelper.read_value(InputStream),Serializable,
"org.omg.CORBA.WStringValueHelper.write(OutputStream,String)",void,
"org.omg.CORBA.WStringValueHelper.write_value(OutputStream,Serializable)",void,
org.omg.CORBA.WStringValueHelper.get_id(),String,
"org.omg.CORBA_2_3.ORB.register_value_factory(String,ValueFactory)",ValueFactory,
org.omg.CORBA_2_3.ORB.unregister_value_factory(String),void,
org.omg.CORBA_2_3.ORB.lookup_value_factory(String),ValueFactory,
org.omg.CORBA_2_3.ORB.get_value_def(String),Object,
org.omg.CORBA_2_3.ORB.set_delegate(Object),void,
org.omg.CORBA_2_3.portable.Delegate.get_codebase(Object),String,the codebase as a space delimited list of url strings or null if none.
org.omg.CORBA_2_3.portable.InputStream.read_value(),Serializable,the value type unmarshalled from the input stream
org.omg.CORBA_2_3.portable.InputStream.read_value(Class),Serializable,the value unmarshalled from the input stream
org.omg.CORBA_2_3.portable.InputStream.read_value(BoxedValueHelper),Serializable,the value unmarshalled from the input stream
org.omg.CORBA_2_3.portable.InputStream.read_value(String),Serializable,value type unmarshalled from the input stream
org.omg.CORBA_2_3.portable.InputStream.read_value(Serializable),Serializable,value type unmarshalled from the input stream
org.omg.CORBA_2_3.portable.InputStream.read_abstract_interface(),Object,ORB runtime returns the value object or a suitable stub object.
org.omg.CORBA_2_3.portable.InputStream.read_abstract_interface(Class),Object,ORB runtime returns the value object or a suitable stub object.
org.omg.CORBA_2_3.portable.ObjectImpl._get_codebase(),String,the codebase as a space delimited list of url strings or null if none.
org.omg.CORBA_2_3.portable.OutputStream.write_value(Serializable),void,
"org.omg.CORBA_2_3.portable.OutputStream.write_value(Serializable,Class)",void,
"org.omg.CORBA_2_3.portable.OutputStream.write_value(Serializable,String)",void,
"org.omg.CORBA_2_3.portable.OutputStream.write_value(Serializable,BoxedValueHelper)",void,
org.omg.CORBA_2_3.portable.OutputStream.write_abstract_interface(Object),void,
org.omg.CORBA.portable.Delegate.get_interface_def(Object),abstractObject,the InterfaceDef
org.omg.CORBA.portable.Delegate.duplicate(Object),abstractObject,the duplicate object reference
org.omg.CORBA.portable.Delegate.release(Object),abstractvoid,
"org.omg.CORBA.portable.Delegate.is_a(Object,String)",abstractboolean,true if the object reference supports the interface
org.omg.CORBA.portable.Delegate.non_existent(Object),abstractboolean,"true if the ORB knows authoritatively that the server object does not exist, false otherwise"
"org.omg.CORBA.portable.Delegate.is_equivalent(Object,Object)",abstractboolean,true if the objects are CORBA-equivalent.
"org.omg.CORBA.portable.Delegate.hash(Object,int)",abstractint,ORB-internal hash identifier for object reference
"org.omg.CORBA.portable.Delegate.request(Object,String)",abstractRequest,the created Request instance
"org.omg.CORBA.portable.Delegate.create_request(Object,Context,String,NVList,NamedValue)",abstractRequest,The created Request object.
"org.omg.CORBA.portable.Delegate.create_request(Object,Context,String,NVList,NamedValue,ExceptionList,ContextList)",abstractRequest,The created Request object.
org.omg.CORBA.portable.Delegate.orb(Object),ORB,the associated orb.
"org.omg.CORBA.portable.Delegate.get_policy(Object,int)",Policy,A Policy object of the type specified by the policy_type parameter.
org.omg.CORBA.portable.Delegate.get_domain_managers(Object),DomainManager[],The list of immediately enclosing domain managers of this object. At least one domain manager is always returned in the list since by default each object is associated with at least one domain manager at creation.
"org.omg.CORBA.portable.Delegate.set_policy_override(Object,Policy[],SetOverrideType)",Object,A new object reference with the new policies associated with it.
org.omg.CORBA.portable.Delegate.is_local(Object),boolean,true only if the servant incarnating this object is located in this Java VM. Return false if the servant is not local or the ORB does not support local stubs for this particular servant. The default behavior of is_local() is to return false.
"org.omg.CORBA.portable.Delegate.servant_preinvoke(Object,String,Class)",ServantObject,"a ServantObject object. The method may return a null value if it does not wish to support this optimization (e.g. due to security, transactions, etc). The method must return null if the servant is not of the expected type."
"org.omg.CORBA.portable.Delegate.servant_postinvoke(Object,ServantObject)",void,
"org.omg.CORBA.portable.Delegate.request(Object,String,boolean)",OutputStream,OutputStream the OutputStream into which request arguments can be marshaled.
"org.omg.CORBA.portable.Delegate.invoke(Object,OutputStream)",InputStream,input the InputStream from which reply parameters can be unmarshaled.
"org.omg.CORBA.portable.Delegate.releaseReply(Object,InputStream)",void,
org.omg.CORBA.portable.Delegate.toString(Object),String,a String object that represents the object reference that delegated to this Delegate object
org.omg.CORBA.portable.Delegate.hashCode(Object),int,an int that represents the hashcode for the object reference that delegated to this Delegate object
"org.omg.CORBA.portable.Delegate.equals(Object,Object)",boolean,true if obj equals self; false otherwise
org.omg.CORBA.portable.InputStream.read_boolean(),abstractboolean,the boolean value read from this input stream
org.omg.CORBA.portable.InputStream.read_char(),abstractchar,the char value read from this input stream
org.omg.CORBA.portable.InputStream.read_wchar(),abstractchar,the char value read from this input stream
org.omg.CORBA.portable.InputStream.read_octet(),abstractbyte,the byte value read from this input stream
org.omg.CORBA.portable.InputStream.read_short(),abstractshort,the short value read from this input stream
org.omg.CORBA.portable.InputStream.read_ushort(),abstractshort,the short value read from this input stream
org.omg.CORBA.portable.InputStream.read_long(),abstractint,the int value read from this input stream
org.omg.CORBA.portable.InputStream.read_ulong(),abstractint,the int value read from this input stream
org.omg.CORBA.portable.InputStream.read_longlong(),abstractlong,the long value read from this input stream
org.omg.CORBA.portable.InputStream.read_ulonglong(),abstractlong,the long value read from this input stream
org.omg.CORBA.portable.InputStream.read_float(),abstractfloat,the float value read from this input stream
org.omg.CORBA.portable.InputStream.read_double(),abstractdouble,the double value read from this input stream
org.omg.CORBA.portable.InputStream.read_string(),abstractString,the String value read from this input stream
org.omg.CORBA.portable.InputStream.read_wstring(),abstractString,the String value read from this input stream
"org.omg.CORBA.portable.InputStream.read_boolean_array(boolean[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_char_array(char[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_wchar_array(char[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_octet_array(byte[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_short_array(short[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_ushort_array(short[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_long_array(int[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_ulong_array(int[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_longlong_array(long[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_ulonglong_array(long[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_float_array(float[],int,int)",abstractvoid,
"org.omg.CORBA.portable.InputStream.read_double_array(double[],int,int)",abstractvoid,
org.omg.CORBA.portable.InputStream.read_Object(),abstractObject,the Object instance read from this input stream.
org.omg.CORBA.portable.InputStream.read_TypeCode(),abstractTypeCode,the TypeCode instance read from this input stream.
org.omg.CORBA.portable.InputStream.read_any(),abstractAny,the Any instance read from this input stream.
org.omg.CORBA.portable.InputStream.read_Principal(),Principal,Principal for invocation.
org.omg.CORBA.portable.InputStream.read(),int,"the next byte of data, or -1 if the end of the stream is reached."
org.omg.CORBA.portable.InputStream.read_fixed(),BigDecimal,a java.math.BigDecimal number
org.omg.CORBA.portable.InputStream.read_Context(),Context,a CORBA context
org.omg.CORBA.portable.InputStream.read_Object(Class),Object,an Object instance of clz read from this stream
org.omg.CORBA.portable.InputStream.orb(),ORB,the ORB object that created this stream
org.omg.CORBA.portable.ObjectImpl._get_delegate(),Delegate,the Delegate contained in this ObjectImpl instance
org.omg.CORBA.portable.ObjectImpl._set_delegate(Delegate),void,
org.omg.CORBA.portable.ObjectImpl._ids(),abstractString[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.CORBA.portable.ObjectImpl._duplicate(),Object,an orb.omg.CORBA.Object object that is a duplicate of this object
org.omg.CORBA.portable.ObjectImpl._release(),void,
org.omg.CORBA.portable.ObjectImpl._is_a(String),boolean,true if the object identified by the given repository id is an instance of ObjectImpl; false otherwise
org.omg.CORBA.portable.ObjectImpl._is_equivalent(Object),boolean,true if the given object is equivalent to this ObjectImpl object; false otherwise
org.omg.CORBA.portable.ObjectImpl._non_existent(),boolean,true if the ORB knows authoritatively that the server object does not exist; false otherwise
org.omg.CORBA.portable.ObjectImpl._hash(int),int,an int representing the hash code for this ObjectImpl object
org.omg.CORBA.portable.ObjectImpl._request(String),Request,a new Request object initialized with the given method
"org.omg.CORBA.portable.ObjectImpl._create_request(Context,String,NVList,NamedValue)",Request,"a new Request object initialized with the given context, method, argument list, and container for the return value"
"org.omg.CORBA.portable.ObjectImpl._create_request(Context,String,NVList,NamedValue,ExceptionList,ContextList)",Request,"a new Request object initialized with the given context strings to resolve, method, argument list, container for the result, exceptions, and list of property names to be used in resolving the context strings"
org.omg.CORBA.portable.ObjectImpl._get_interface_def(),Object,the org.omg.CORBA.Object instance that is the interface definition for this ObjectImpl object
org.omg.CORBA.portable.ObjectImpl._orb(),ORB,the ORB instance that created the Delegate object contained in this ObjectImpl object
org.omg.CORBA.portable.ObjectImpl._get_policy(int),Policy,the Policy object that is the specified policy type and that applies to this ObjectImpl object
org.omg.CORBA.portable.ObjectImpl._get_domain_managers(),DomainManager[],an array containing the DomainManager objects for this instance of ObjectImpl
"org.omg.CORBA.portable.ObjectImpl._set_policy_override(Policy[],SetOverrideType)",Object,an Object with the given policies replacing or added to its previous policies
org.omg.CORBA.portable.ObjectImpl._is_local(),boolean,true if this object is implemented by a local servant; false otherwise
"org.omg.CORBA.portable.ObjectImpl._servant_preinvoke(String,Class)",ServantObject,"(1) a ServantObject object, which may or may not be the actual servant instance, or (2) null if (a) the servant is not local or (b) the servant has ceased to be local due to a ForwardRequest from a POA ServantManager"
org.omg.CORBA.portable.ObjectImpl._servant_postinvoke(ServantObject),void,
"org.omg.CORBA.portable.ObjectImpl._request(String,boolean)",OutputStream,an OutputStream object for dispatching the request
org.omg.CORBA.portable.ObjectImpl._invoke(OutputStream),InputStream,an InputStream object containing the marshalled response to the method invoked
org.omg.CORBA.portable.ObjectImpl._releaseReply(InputStream),void,
org.omg.CORBA.portable.ObjectImpl.toString(),String,the String representation of this object
org.omg.CORBA.portable.ObjectImpl.hashCode(),int,the hash code for this object
org.omg.CORBA.portable.ObjectImpl.equals(Object),boolean,true if the two objects are equal; false otherwise
org.omg.CORBA.portable.OutputStream.create_input_stream(),abstractInputStream,an input stream with the same buffer.
org.omg.CORBA.portable.OutputStream.write_boolean(boolean),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_char(char),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_wchar(char),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_octet(byte),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_short(short),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_ushort(short),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_long(int),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_ulong(int),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_longlong(long),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_ulonglong(long),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_float(float),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_double(double),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_string(String),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_wstring(String),abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_boolean_array(boolean[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_char_array(char[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_wchar_array(char[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_octet_array(byte[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_short_array(short[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_ushort_array(short[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_long_array(int[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_ulong_array(int[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_longlong_array(long[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_ulonglong_array(long[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_float_array(float[],int,int)",abstractvoid,
"org.omg.CORBA.portable.OutputStream.write_double_array(double[],int,int)",abstractvoid,
org.omg.CORBA.portable.OutputStream.write_Object(Object),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_TypeCode(TypeCode),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_any(Any),abstractvoid,
org.omg.CORBA.portable.OutputStream.write_Principal(Principal),void,
org.omg.CORBA.portable.OutputStream.write(int),void,
org.omg.CORBA.portable.OutputStream.write_fixed(BigDecimal),void,
"org.omg.CORBA.portable.OutputStream.write_Context(Context,ContextList)",void,
org.omg.CORBA.portable.OutputStream.orb(),ORB,the ORB that created this OutputStream
org.omg.CosNaming._BindingIteratorImplBase._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.CosNaming._BindingIteratorImplBase.invoke(ServerRequest),void,
org.omg.CosNaming._BindingIteratorStub.next_one(BindingHolder),boolean,
"org.omg.CosNaming._BindingIteratorStub.next_n(int,BindingListHolder)",boolean,
org.omg.CosNaming._BindingIteratorStub.destroy(),void,
org.omg.CosNaming._BindingIteratorStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.CosNaming._NamingContextExtStub.to_string(NameComponent[]),String,
org.omg.CosNaming._NamingContextExtStub.to_name(String),NameComponent[],
"org.omg.CosNaming._NamingContextExtStub.to_url(String,String)",String,
org.omg.CosNaming._NamingContextExtStub.resolve_str(String),Object,
"org.omg.CosNaming._NamingContextExtStub.bind(NameComponent[],Object)",void,
"org.omg.CosNaming._NamingContextExtStub.bind_context(NameComponent[],NamingContext)",void,
"org.omg.CosNaming._NamingContextExtStub.rebind(NameComponent[],Object)",void,
"org.omg.CosNaming._NamingContextExtStub.rebind_context(NameComponent[],NamingContext)",void,
org.omg.CosNaming._NamingContextExtStub.resolve(NameComponent[]),Object,
org.omg.CosNaming._NamingContextExtStub.unbind(NameComponent[]),void,
"org.omg.CosNaming._NamingContextExtStub.list(int,BindingListHolder,BindingIteratorHolder)",void,
org.omg.CosNaming._NamingContextExtStub.new_context(),NamingContext,
org.omg.CosNaming._NamingContextExtStub.bind_new_context(NameComponent[]),NamingContext,
org.omg.CosNaming._NamingContextExtStub.destroy(),void,
org.omg.CosNaming._NamingContextExtStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.CosNaming._NamingContextImplBase._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.CosNaming._NamingContextImplBase.invoke(ServerRequest),void,
"org.omg.CosNaming._NamingContextStub.bind(NameComponent[],Object)",void,
"org.omg.CosNaming._NamingContextStub.bind_context(NameComponent[],NamingContext)",void,
"org.omg.CosNaming._NamingContextStub.rebind(NameComponent[],Object)",void,
"org.omg.CosNaming._NamingContextStub.rebind_context(NameComponent[],NamingContext)",void,
org.omg.CosNaming._NamingContextStub.resolve(NameComponent[]),Object,
org.omg.CosNaming._NamingContextStub.unbind(NameComponent[]),void,
"org.omg.CosNaming._NamingContextStub.list(int,BindingListHolder,BindingIteratorHolder)",void,
org.omg.CosNaming._NamingContextStub.new_context(),NamingContext,
org.omg.CosNaming._NamingContextStub.bind_new_context(NameComponent[]),NamingContext,
org.omg.CosNaming._NamingContextStub.destroy(),void,
org.omg.CosNaming._NamingContextStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
"org.omg.CosNaming.BindingHelper.insert(Any,Binding)",void,
org.omg.CosNaming.BindingHelper.extract(Any),Binding,
org.omg.CosNaming.BindingHelper.type(),TypeCode,
org.omg.CosNaming.BindingHelper.id(),String,
org.omg.CosNaming.BindingHelper.read(InputStream),Binding,
"org.omg.CosNaming.BindingHelper.write(OutputStream,Binding)",void,
org.omg.CosNaming.BindingHolder._read(InputStream),void,
org.omg.CosNaming.BindingHolder._write(OutputStream),void,
org.omg.CosNaming.BindingHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.BindingIteratorHelper.insert(Any,BindingIterator)",void,
org.omg.CosNaming.BindingIteratorHelper.extract(Any),BindingIterator,
org.omg.CosNaming.BindingIteratorHelper.type(),TypeCode,
org.omg.CosNaming.BindingIteratorHelper.id(),String,
org.omg.CosNaming.BindingIteratorHelper.read(InputStream),BindingIterator,
"org.omg.CosNaming.BindingIteratorHelper.write(OutputStream,BindingIterator)",void,
org.omg.CosNaming.BindingIteratorHelper.narrow(Object),BindingIterator,
org.omg.CosNaming.BindingIteratorHelper.unchecked_narrow(Object),BindingIterator,
org.omg.CosNaming.BindingIteratorHolder._read(InputStream),void,
org.omg.CosNaming.BindingIteratorHolder._write(OutputStream),void,
org.omg.CosNaming.BindingIteratorHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.BindingIteratorPOA._invoke(String,InputStream,ResponseHandler)",OutputStream,The OutputStream created by the ResponseHandler which contains the marshalled reply
"org.omg.CosNaming.BindingIteratorPOA._all_interfaces(POA,byte[])",String[],list of type information for the object.
org.omg.CosNaming.BindingIteratorPOA._this(),BindingIterator,
org.omg.CosNaming.BindingIteratorPOA._this(ORB),BindingIterator,
"org.omg.CosNaming.BindingListHelper.insert(Any,Binding[])",void,
org.omg.CosNaming.BindingListHelper.extract(Any),Binding[],
org.omg.CosNaming.BindingListHelper.type(),TypeCode,
org.omg.CosNaming.BindingListHelper.id(),String,
org.omg.CosNaming.BindingListHelper.read(InputStream),Binding[],
"org.omg.CosNaming.BindingListHelper.write(OutputStream,Binding[])",void,
org.omg.CosNaming.BindingListHolder._read(InputStream),void,
org.omg.CosNaming.BindingListHolder._write(OutputStream),void,
org.omg.CosNaming.BindingListHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CosNaming.BindingType.value(),int,
org.omg.CosNaming.BindingType.from_int(int),BindingType,
"org.omg.CosNaming.BindingTypeHelper.insert(Any,BindingType)",void,
org.omg.CosNaming.BindingTypeHelper.extract(Any),BindingType,
org.omg.CosNaming.BindingTypeHelper.type(),TypeCode,
org.omg.CosNaming.BindingTypeHelper.id(),String,
org.omg.CosNaming.BindingTypeHelper.read(InputStream),BindingType,
"org.omg.CosNaming.BindingTypeHelper.write(OutputStream,BindingType)",void,
org.omg.CosNaming.BindingTypeHolder._read(InputStream),void,
org.omg.CosNaming.BindingTypeHolder._write(OutputStream),void,
org.omg.CosNaming.BindingTypeHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.IstringHelper.insert(Any,String)",void,
org.omg.CosNaming.IstringHelper.extract(Any),String,
org.omg.CosNaming.IstringHelper.type(),TypeCode,
org.omg.CosNaming.IstringHelper.id(),String,
org.omg.CosNaming.IstringHelper.read(InputStream),String,
"org.omg.CosNaming.IstringHelper.write(OutputStream,String)",void,
"org.omg.CosNaming.NameComponentHelper.insert(Any,NameComponent)",void,
org.omg.CosNaming.NameComponentHelper.extract(Any),NameComponent,
org.omg.CosNaming.NameComponentHelper.type(),TypeCode,
org.omg.CosNaming.NameComponentHelper.id(),String,
org.omg.CosNaming.NameComponentHelper.read(InputStream),NameComponent,
"org.omg.CosNaming.NameComponentHelper.write(OutputStream,NameComponent)",void,
org.omg.CosNaming.NameComponentHolder._read(InputStream),void,
org.omg.CosNaming.NameComponentHolder._write(OutputStream),void,
org.omg.CosNaming.NameComponentHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NameHelper.insert(Any,NameComponent[])",void,
org.omg.CosNaming.NameHelper.extract(Any),NameComponent[],
org.omg.CosNaming.NameHelper.type(),TypeCode,
org.omg.CosNaming.NameHelper.id(),String,
org.omg.CosNaming.NameHelper.read(InputStream),NameComponent[],
"org.omg.CosNaming.NameHelper.write(OutputStream,NameComponent[])",void,
org.omg.CosNaming.NameHolder._read(InputStream),void,
org.omg.CosNaming.NameHolder._write(OutputStream),void,
org.omg.CosNaming.NameHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NamingContextExtHelper.insert(Any,NamingContextExt)",void,
org.omg.CosNaming.NamingContextExtHelper.extract(Any),NamingContextExt,
org.omg.CosNaming.NamingContextExtHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextExtHelper.id(),String,
org.omg.CosNaming.NamingContextExtHelper.read(InputStream),NamingContextExt,
"org.omg.CosNaming.NamingContextExtHelper.write(OutputStream,NamingContextExt)",void,
org.omg.CosNaming.NamingContextExtHelper.narrow(Object),NamingContextExt,
org.omg.CosNaming.NamingContextExtHelper.unchecked_narrow(Object),NamingContextExt,
org.omg.CosNaming.NamingContextExtHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextExtHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextExtHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NamingContextExtPOA._invoke(String,InputStream,ResponseHandler)",OutputStream,The OutputStream created by the ResponseHandler which contains the marshalled reply
"org.omg.CosNaming.NamingContextExtPOA._all_interfaces(POA,byte[])",String[],list of type information for the object.
org.omg.CosNaming.NamingContextExtPOA._this(),NamingContextExt,
org.omg.CosNaming.NamingContextExtPOA._this(ORB),NamingContextExt,
"org.omg.CosNaming.NamingContextHelper.insert(Any,NamingContext)",void,
org.omg.CosNaming.NamingContextHelper.extract(Any),NamingContext,
org.omg.CosNaming.NamingContextHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextHelper.id(),String,
org.omg.CosNaming.NamingContextHelper.read(InputStream),NamingContext,
"org.omg.CosNaming.NamingContextHelper.write(OutputStream,NamingContext)",void,
org.omg.CosNaming.NamingContextHelper.narrow(Object),NamingContext,
org.omg.CosNaming.NamingContextHelper.unchecked_narrow(Object),NamingContext,
org.omg.CosNaming.NamingContextHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NamingContextPOA._invoke(String,InputStream,ResponseHandler)",OutputStream,The OutputStream created by the ResponseHandler which contains the marshalled reply
"org.omg.CosNaming.NamingContextPOA._all_interfaces(POA,byte[])",String[],list of type information for the object.
org.omg.CosNaming.NamingContextPOA._this(),NamingContext,
org.omg.CosNaming.NamingContextPOA._this(ORB),NamingContext,
"org.omg.CosNaming.NamingContextExtPackage.AddressHelper.insert(Any,String)",void,
org.omg.CosNaming.NamingContextExtPackage.AddressHelper.extract(Any),String,
org.omg.CosNaming.NamingContextExtPackage.AddressHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextExtPackage.AddressHelper.id(),String,
org.omg.CosNaming.NamingContextExtPackage.AddressHelper.read(InputStream),String,
"org.omg.CosNaming.NamingContextExtPackage.AddressHelper.write(OutputStream,String)",void,
"org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.insert(Any,InvalidAddress)",void,
org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.extract(Any),InvalidAddress,
org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.id(),String,
org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.read(InputStream),InvalidAddress,
"org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.write(OutputStream,InvalidAddress)",void,
org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.insert(Any,String)",void,
org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.extract(Any),String,
org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.id(),String,
org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.read(InputStream),String,
"org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.write(OutputStream,String)",void,
"org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.insert(Any,String)",void,
org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.extract(Any),String,
org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.id(),String,
org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.read(InputStream),String,
"org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.write(OutputStream,String)",void,
"org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.insert(Any,AlreadyBound)",void,
org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.extract(Any),AlreadyBound,
org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.id(),String,
org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.read(InputStream),Al,
"org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.write(OutputStream,AlreadyBound)",void,
org.omg.CosNaming.NamingContextPackage.AlreadyBoundHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextPackage.AlreadyBoundHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextPackage.AlreadyBoundHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.insert(Any,CannotProceed)",void,
org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.extract(Any),CannotProceed,
org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.id(),String,
org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read(InputStream),CannotProceed,
"org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.write(OutputStream,CannotProceed)",void,
org.omg.CosNaming.NamingContextPackage.CannotProceedHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextPackage.CannotProceedHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextPackage.CannotProceedHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.insert(Any,InvalidName)",void,
org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.extract(Any),InvalidName,
org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.id(),String,
org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read(InputStream),InvalidName,
"org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.write(OutputStream,InvalidName)",void,
org.omg.CosNaming.NamingContextPackage.InvalidNameHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextPackage.InvalidNameHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextPackage.InvalidNameHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.insert(Any,NotEmpty)",void,
org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.extract(Any),NotEmpty,
org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.id(),String,
org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.read(InputStream),NotEmpty,
"org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.write(OutputStream,NotEmpty)",void,
org.omg.CosNaming.NamingContextPackage.NotEmptyHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextPackage.NotEmptyHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextPackage.NotEmptyHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.CosNaming.NamingContextPackage.NotFoundHelper.insert(Any,NotFound)",void,
org.omg.CosNaming.NamingContextPackage.NotFoundHelper.extract(Any),NotFound,
org.omg.CosNaming.NamingContextPackage.NotFoundHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextPackage.NotFoundHelper.id(),String,
org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read(InputStream),NotFound,
"org.omg.CosNaming.NamingContextPackage.NotFoundHelper.write(OutputStream,NotFound)",void,
org.omg.CosNaming.NamingContextPackage.NotFoundHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextPackage.NotFoundHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextPackage.NotFoundHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.CosNaming.NamingContextPackage.NotFoundReason.value(),int,
org.omg.CosNaming.NamingContextPackage.NotFoundReason.from_int(int),NotFoundReason,
"org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.insert(Any,NotFoundReason)",void,
org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.extract(Any),NotFoundReason,
org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.type(),TypeCode,
org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.id(),String,
org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.read(InputStream),NotFoundReason,
"org.omg.CosNaming.NamingContextPackage.NotFoundReasonHelper.write(OutputStream,NotFoundReason)",void,
org.omg.CosNaming.NamingContextPackage.NotFoundReasonHolder._read(InputStream),void,
org.omg.CosNaming.NamingContextPackage.NotFoundReasonHolder._write(OutputStream),void,
org.omg.CosNaming.NamingContextPackage.NotFoundReasonHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.DynamicAny._DynAnyFactoryStub.create_dyn_any(Any),DynAny,
org.omg.DynamicAny._DynAnyFactoryStub.create_dyn_any_from_type_code(TypeCode),DynAny,
org.omg.DynamicAny._DynAnyFactoryStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.DynamicAny._DynAnyStub.type(),TypeCode,The TypeCode associated with this DynAny object
org.omg.DynamicAny._DynAnyStub.assign(DynAny),void,
org.omg.DynamicAny._DynAnyStub.from_any(Any),void,
org.omg.DynamicAny._DynAnyStub.to_any(),Any,a new Any object with the same value and TypeCode
org.omg.DynamicAny._DynAnyStub.equal(DynAny),boolean,"true of the DynAnys are equal, false otherwise"
org.omg.DynamicAny._DynAnyStub.destroy(),void,
org.omg.DynamicAny._DynAnyStub.copy(),DynAny,a deep copy of the DynAny object
org.omg.DynamicAny._DynAnyStub.insert_boolean(boolean),void,
org.omg.DynamicAny._DynAnyStub.insert_octet(byte),void,
org.omg.DynamicAny._DynAnyStub.insert_char(char),void,
org.omg.DynamicAny._DynAnyStub.insert_short(short),void,
org.omg.DynamicAny._DynAnyStub.insert_ushort(short),void,
org.omg.DynamicAny._DynAnyStub.insert_long(int),void,
org.omg.DynamicAny._DynAnyStub.insert_ulong(int),void,
org.omg.DynamicAny._DynAnyStub.insert_float(float),void,
org.omg.DynamicAny._DynAnyStub.insert_double(double),void,
org.omg.DynamicAny._DynAnyStub.insert_string(String),void,
org.omg.DynamicAny._DynAnyStub.insert_reference(Object),void,
org.omg.DynamicAny._DynAnyStub.insert_typecode(TypeCode),void,
org.omg.DynamicAny._DynAnyStub.insert_longlong(long),void,
org.omg.DynamicAny._DynAnyStub.insert_ulonglong(long),void,
org.omg.DynamicAny._DynAnyStub.insert_wchar(char),void,
org.omg.DynamicAny._DynAnyStub.insert_wstring(String),void,
org.omg.DynamicAny._DynAnyStub.insert_any(Any),void,
org.omg.DynamicAny._DynAnyStub.insert_dyn_any(DynAny),void,
org.omg.DynamicAny._DynAnyStub.insert_val(Serializable),void,
org.omg.DynamicAny._DynAnyStub.get_boolean(),boolean,
org.omg.DynamicAny._DynAnyStub.get_octet(),byte,
org.omg.DynamicAny._DynAnyStub.get_char(),char,
org.omg.DynamicAny._DynAnyStub.get_short(),short,
org.omg.DynamicAny._DynAnyStub.get_ushort(),short,
org.omg.DynamicAny._DynAnyStub.get_long(),int,
org.omg.DynamicAny._DynAnyStub.get_ulong(),int,
org.omg.DynamicAny._DynAnyStub.get_float(),float,
org.omg.DynamicAny._DynAnyStub.get_double(),double,
org.omg.DynamicAny._DynAnyStub.get_string(),String,
org.omg.DynamicAny._DynAnyStub.get_reference(),Object,
org.omg.DynamicAny._DynAnyStub.get_typecode(),TypeCode,
org.omg.DynamicAny._DynAnyStub.get_longlong(),long,
org.omg.DynamicAny._DynAnyStub.get_ulonglong(),long,
org.omg.DynamicAny._DynAnyStub.get_wchar(),char,
org.omg.DynamicAny._DynAnyStub.get_wstring(),String,
org.omg.DynamicAny._DynAnyStub.get_any(),Any,
org.omg.DynamicAny._DynAnyStub.get_dyn_any(),DynAny,
org.omg.DynamicAny._DynAnyStub.get_val(),Serializable,
org.omg.DynamicAny._DynAnyStub.seek(int),boolean,
org.omg.DynamicAny._DynAnyStub.rewind(),void,
org.omg.DynamicAny._DynAnyStub.next(),boolean,
org.omg.DynamicAny._DynAnyStub.component_count(),int,
org.omg.DynamicAny._DynAnyStub.current_component(),DynAny,
org.omg.DynamicAny._DynAnyStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.DynamicAny._DynArrayStub.get_elements(),Any[],
org.omg.DynamicAny._DynArrayStub.set_elements(Any[]),void,
org.omg.DynamicAny._DynArrayStub.get_elements_as_dyn_any(),DynAny[],
org.omg.DynamicAny._DynArrayStub.set_elements_as_dyn_any(DynAny[]),void,
org.omg.DynamicAny._DynArrayStub.type(),TypeCode,The TypeCode associated with this DynAny object
org.omg.DynamicAny._DynArrayStub.assign(DynAny),void,
org.omg.DynamicAny._DynArrayStub.from_any(Any),void,
org.omg.DynamicAny._DynArrayStub.to_any(),Any,a new Any object with the same value and TypeCode
org.omg.DynamicAny._DynArrayStub.equal(DynAny),boolean,"true of the DynAnys are equal, false otherwise"
org.omg.DynamicAny._DynArrayStub.destroy(),void,
org.omg.DynamicAny._DynArrayStub.copy(),DynAny,a deep copy of the DynAny object
org.omg.DynamicAny._DynArrayStub.insert_boolean(boolean),void,
org.omg.DynamicAny._DynArrayStub.insert_octet(byte),void,
org.omg.DynamicAny._DynArrayStub.insert_char(char),void,
org.omg.DynamicAny._DynArrayStub.insert_short(short),void,
org.omg.DynamicAny._DynArrayStub.insert_ushort(short),void,
org.omg.DynamicAny._DynArrayStub.insert_long(int),void,
org.omg.DynamicAny._DynArrayStub.insert_ulong(int),void,
org.omg.DynamicAny._DynArrayStub.insert_float(float),void,
org.omg.DynamicAny._DynArrayStub.insert_double(double),void,
org.omg.DynamicAny._DynArrayStub.insert_string(String),void,
org.omg.DynamicAny._DynArrayStub.insert_reference(Object),void,
org.omg.DynamicAny._DynArrayStub.insert_typecode(TypeCode),void,
org.omg.DynamicAny._DynArrayStub.insert_longlong(long),void,
org.omg.DynamicAny._DynArrayStub.insert_ulonglong(long),void,
org.omg.DynamicAny._DynArrayStub.insert_wchar(char),void,
org.omg.DynamicAny._DynArrayStub.insert_wstring(String),void,
org.omg.DynamicAny._DynArrayStub.insert_any(Any),void,
org.omg.DynamicAny._DynArrayStub.insert_dyn_any(DynAny),void,
org.omg.DynamicAny._DynArrayStub.insert_val(Serializable),void,
org.omg.DynamicAny._DynArrayStub.get_boolean(),boolean,
org.omg.DynamicAny._DynArrayStub.get_octet(),byte,
org.omg.DynamicAny._DynArrayStub.get_char(),char,
org.omg.DynamicAny._DynArrayStub.get_short(),short,
org.omg.DynamicAny._DynArrayStub.get_ushort(),short,
org.omg.DynamicAny._DynArrayStub.get_long(),int,
org.omg.DynamicAny._DynArrayStub.get_ulong(),int,
org.omg.DynamicAny._DynArrayStub.get_float(),float,
org.omg.DynamicAny._DynArrayStub.get_double(),double,
org.omg.DynamicAny._DynArrayStub.get_string(),String,
org.omg.DynamicAny._DynArrayStub.get_reference(),Object,
org.omg.DynamicAny._DynArrayStub.get_typecode(),TypeCode,
org.omg.DynamicAny._DynArrayStub.get_longlong(),long,
org.omg.DynamicAny._DynArrayStub.get_ulonglong(),long,
org.omg.DynamicAny._DynArrayStub.get_wchar(),char,
org.omg.DynamicAny._DynArrayStub.get_wstring(),String,
org.omg.DynamicAny._DynArrayStub.get_any(),Any,
org.omg.DynamicAny._DynArrayStub.get_dyn_any(),DynAny,
org.omg.DynamicAny._DynArrayStub.get_val(),Serializable,
org.omg.DynamicAny._DynArrayStub.seek(int),boolean,
org.omg.DynamicAny._DynArrayStub.rewind(),void,
org.omg.DynamicAny._DynArrayStub.next(),boolean,
org.omg.DynamicAny._DynArrayStub.component_count(),int,
org.omg.DynamicAny._DynArrayStub.current_component(),DynAny,
org.omg.DynamicAny._DynArrayStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.DynamicAny._DynEnumStub.get_as_string(),String,
org.omg.DynamicAny._DynEnumStub.set_as_string(String),void,
org.omg.DynamicAny._DynEnumStub.get_as_ulong(),int,
org.omg.DynamicAny._DynEnumStub.set_as_ulong(int),void,
org.omg.DynamicAny._DynEnumStub.type(),TypeCode,The TypeCode associated with this DynAny object
org.omg.DynamicAny._DynEnumStub.assign(DynAny),void,
org.omg.DynamicAny._DynEnumStub.from_any(Any),void,
org.omg.DynamicAny._DynEnumStub.to_any(),Any,a new Any object with the same value and TypeCode
org.omg.DynamicAny._DynEnumStub.equal(DynAny),boolean,"true of the DynAnys are equal, false otherwise"
org.omg.DynamicAny._DynEnumStub.destroy(),void,
org.omg.DynamicAny._DynEnumStub.copy(),DynAny,a deep copy of the DynAny object
org.omg.DynamicAny._DynEnumStub.insert_boolean(boolean),void,
org.omg.DynamicAny._DynEnumStub.insert_octet(byte),void,
org.omg.DynamicAny._DynEnumStub.insert_char(char),void,
org.omg.DynamicAny._DynEnumStub.insert_short(short),void,
org.omg.DynamicAny._DynEnumStub.insert_ushort(short),void,
org.omg.DynamicAny._DynEnumStub.insert_long(int),void,
org.omg.DynamicAny._DynEnumStub.insert_ulong(int),void,
org.omg.DynamicAny._DynEnumStub.insert_float(float),void,
org.omg.DynamicAny._DynEnumStub.insert_double(double),void,
org.omg.DynamicAny._DynEnumStub.insert_string(String),void,
org.omg.DynamicAny._DynEnumStub.insert_reference(Object),void,
org.omg.DynamicAny._DynEnumStub.insert_typecode(TypeCode),void,
org.omg.DynamicAny._DynEnumStub.insert_longlong(long),void,
org.omg.DynamicAny._DynEnumStub.insert_ulonglong(long),void,
org.omg.DynamicAny._DynEnumStub.insert_wchar(char),void,
org.omg.DynamicAny._DynEnumStub.insert_wstring(String),void,
org.omg.DynamicAny._DynEnumStub.insert_any(Any),void,
org.omg.DynamicAny._DynEnumStub.insert_dyn_any(DynAny),void,
org.omg.DynamicAny._DynEnumStub.insert_val(Serializable),void,
org.omg.DynamicAny._DynEnumStub.get_boolean(),boolean,
org.omg.DynamicAny._DynEnumStub.get_octet(),byte,
org.omg.DynamicAny._DynEnumStub.get_char(),char,
org.omg.DynamicAny._DynEnumStub.get_short(),short,
org.omg.DynamicAny._DynEnumStub.get_ushort(),short,
org.omg.DynamicAny._DynEnumStub.get_long(),int,
org.omg.DynamicAny._DynEnumStub.get_ulong(),int,
org.omg.DynamicAny._DynEnumStub.get_float(),float,
org.omg.DynamicAny._DynEnumStub.get_double(),double,
org.omg.DynamicAny._DynEnumStub.get_string(),String,
org.omg.DynamicAny._DynEnumStub.get_reference(),Object,
org.omg.DynamicAny._DynEnumStub.get_typecode(),TypeCode,
org.omg.DynamicAny._DynEnumStub.get_longlong(),long,
org.omg.DynamicAny._DynEnumStub.get_ulonglong(),long,
org.omg.DynamicAny._DynEnumStub.get_wchar(),char,
org.omg.DynamicAny._DynEnumStub.get_wstring(),String,
org.omg.DynamicAny._DynEnumStub.get_any(),Any,
org.omg.DynamicAny._DynEnumStub.get_dyn_any(),DynAny,
org.omg.DynamicAny._DynEnumStub.get_val(),Serializable,
org.omg.DynamicAny._DynEnumStub.seek(int),boolean,
org.omg.DynamicAny._DynEnumStub.rewind(),void,
org.omg.DynamicAny._DynEnumStub.next(),boolean,
org.omg.DynamicAny._DynEnumStub.component_count(),int,
org.omg.DynamicAny._DynEnumStub.current_component(),DynAny,
org.omg.DynamicAny._DynEnumStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.DynamicAny._DynFixedStub.get_value(),String,
org.omg.DynamicAny._DynFixedStub.set_value(String),boolean,
org.omg.DynamicAny._DynFixedStub.type(),TypeCode,The TypeCode associated with this DynAny object
org.omg.DynamicAny._DynFixedStub.assign(DynAny),void,
org.omg.DynamicAny._DynFixedStub.from_any(Any),void,
org.omg.DynamicAny._DynFixedStub.to_any(),Any,a new Any object with the same value and TypeCode
org.omg.DynamicAny._DynFixedStub.equal(DynAny),boolean,"true of the DynAnys are equal, false otherwise"
org.omg.DynamicAny._DynFixedStub.destroy(),void,
org.omg.DynamicAny._DynFixedStub.copy(),DynAny,a deep copy of the DynAny object
org.omg.DynamicAny._DynFixedStub.insert_boolean(boolean),void,
org.omg.DynamicAny._DynFixedStub.insert_octet(byte),void,
org.omg.DynamicAny._DynFixedStub.insert_char(char),void,
org.omg.DynamicAny._DynFixedStub.insert_short(short),void,
org.omg.DynamicAny._DynFixedStub.insert_ushort(short),void,
org.omg.DynamicAny._DynFixedStub.insert_long(int),void,
org.omg.DynamicAny._DynFixedStub.insert_ulong(int),void,
org.omg.DynamicAny._DynFixedStub.insert_float(float),void,
org.omg.DynamicAny._DynFixedStub.insert_double(double),void,
org.omg.DynamicAny._DynFixedStub.insert_string(String),void,
org.omg.DynamicAny._DynFixedStub.insert_reference(Object),void,
org.omg.DynamicAny._DynFixedStub.insert_typecode(TypeCode),void,
org.omg.DynamicAny._DynFixedStub.insert_longlong(long),void,
org.omg.DynamicAny._DynFixedStub.insert_ulonglong(long),void,
org.omg.DynamicAny._DynFixedStub.insert_wchar(char),void,
org.omg.DynamicAny._DynFixedStub.insert_wstring(String),void,
org.omg.DynamicAny._DynFixedStub.insert_any(Any),void,
org.omg.DynamicAny._DynFixedStub.insert_dyn_any(DynAny),void,
org.omg.DynamicAny._DynFixedStub.insert_val(Serializable),void,
org.omg.DynamicAny._DynFixedStub.get_boolean(),boolean,
org.omg.DynamicAny._DynFixedStub.get_octet(),byte,
org.omg.DynamicAny._DynFixedStub.get_char(),char,
org.omg.DynamicAny._DynFixedStub.get_short(),short,
org.omg.DynamicAny._DynFixedStub.get_ushort(),short,
org.omg.DynamicAny._DynFixedStub.get_long(),int,
org.omg.DynamicAny._DynFixedStub.get_ulong(),int,
org.omg.DynamicAny._DynFixedStub.get_float(),float,
org.omg.DynamicAny._DynFixedStub.get_double(),double,
org.omg.DynamicAny._DynFixedStub.get_string(),String,
org.omg.DynamicAny._DynFixedStub.get_reference(),Object,
org.omg.DynamicAny._DynFixedStub.get_typecode(),TypeCode,
org.omg.DynamicAny._DynFixedStub.get_longlong(),long,
org.omg.DynamicAny._DynFixedStub.get_ulonglong(),long,
org.omg.DynamicAny._DynFixedStub.get_wchar(),char,
org.omg.DynamicAny._DynFixedStub.get_wstring(),String,
org.omg.DynamicAny._DynFixedStub.get_any(),Any,
org.omg.DynamicAny._DynFixedStub.get_dyn_any(),DynAny,
org.omg.DynamicAny._DynFixedStub.get_val(),Serializable,
org.omg.DynamicAny._DynFixedStub.seek(int),boolean,
org.omg.DynamicAny._DynFixedStub.rewind(),void,
org.omg.DynamicAny._DynFixedStub.next(),boolean,
org.omg.DynamicAny._DynFixedStub.component_count(),int,
org.omg.DynamicAny._DynFixedStub.current_component(),DynAny,
org.omg.DynamicAny._DynFixedStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.DynamicAny._DynSequenceStub.get_length(),int,
org.omg.DynamicAny._DynSequenceStub.set_length(int),void,
org.omg.DynamicAny._DynSequenceStub.get_elements(),Any[],
org.omg.DynamicAny._DynSequenceStub.set_elements(Any[]),void,
org.omg.DynamicAny._DynSequenceStub.get_elements_as_dyn_any(),DynAny[],
org.omg.DynamicAny._DynSequenceStub.set_elements_as_dyn_any(DynAny[]),void,
org.omg.DynamicAny._DynSequenceStub.type(),TypeCode,The TypeCode associated with this DynAny object
org.omg.DynamicAny._DynSequenceStub.assign(DynAny),void,
org.omg.DynamicAny._DynSequenceStub.from_any(Any),void,
org.omg.DynamicAny._DynSequenceStub.to_any(),Any,a new Any object with the same value and TypeCode
org.omg.DynamicAny._DynSequenceStub.equal(DynAny),boolean,"true of the DynAnys are equal, false otherwise"
org.omg.DynamicAny._DynSequenceStub.destroy(),void,
org.omg.DynamicAny._DynSequenceStub.copy(),DynAny,a deep copy of the DynAny object
org.omg.DynamicAny._DynSequenceStub.insert_boolean(boolean),void,
org.omg.DynamicAny._DynSequenceStub.insert_octet(byte),void,
org.omg.DynamicAny._DynSequenceStub.insert_char(char),void,
org.omg.DynamicAny._DynSequenceStub.insert_short(short),void,
org.omg.DynamicAny._DynSequenceStub.insert_ushort(short),void,
org.omg.DynamicAny._DynSequenceStub.insert_long(int),void,
org.omg.DynamicAny._DynSequenceStub.insert_ulong(int),void,
org.omg.DynamicAny._DynSequenceStub.insert_float(float),void,
org.omg.DynamicAny._DynSequenceStub.insert_double(double),void,
org.omg.DynamicAny._DynSequenceStub.insert_string(String),void,
org.omg.DynamicAny._DynSequenceStub.insert_reference(Object),void,
org.omg.DynamicAny._DynSequenceStub.insert_typecode(TypeCode),void,
org.omg.DynamicAny._DynSequenceStub.insert_longlong(long),void,
org.omg.DynamicAny._DynSequenceStub.insert_ulonglong(long),void,
org.omg.DynamicAny._DynSequenceStub.insert_wchar(char),void,
org.omg.DynamicAny._DynSequenceStub.insert_wstring(String),void,
org.omg.DynamicAny._DynSequenceStub.insert_any(Any),void,
org.omg.DynamicAny._DynSequenceStub.insert_dyn_any(DynAny),void,
org.omg.DynamicAny._DynSequenceStub.insert_val(Serializable),void,
org.omg.DynamicAny._DynSequenceStub.get_boolean(),boolean,
org.omg.DynamicAny._DynSequenceStub.get_octet(),byte,
org.omg.DynamicAny._DynSequenceStub.get_char(),char,
org.omg.DynamicAny._DynSequenceStub.get_short(),short,
org.omg.DynamicAny._DynSequenceStub.get_ushort(),short,
org.omg.DynamicAny._DynSequenceStub.get_long(),int,
org.omg.DynamicAny._DynSequenceStub.get_ulong(),int,
org.omg.DynamicAny._DynSequenceStub.get_float(),float,
org.omg.DynamicAny._DynSequenceStub.get_double(),double,
org.omg.DynamicAny._DynSequenceStub.get_string(),String,
org.omg.DynamicAny._DynSequenceStub.get_reference(),Object,
org.omg.DynamicAny._DynSequenceStub.get_typecode(),TypeCode,
org.omg.DynamicAny._DynSequenceStub.get_longlong(),long,
org.omg.DynamicAny._DynSequenceStub.get_ulonglong(),long,
org.omg.DynamicAny._DynSequenceStub.get_wchar(),char,
org.omg.DynamicAny._DynSequenceStub.get_wstring(),String,
org.omg.DynamicAny._DynSequenceStub.get_any(),Any,
org.omg.DynamicAny._DynSequenceStub.get_dyn_any(),DynAny,
org.omg.DynamicAny._DynSequenceStub.get_val(),Serializable,
org.omg.DynamicAny._DynSequenceStub.seek(int),boolean,
org.omg.DynamicAny._DynSequenceStub.rewind(),void,
org.omg.DynamicAny._DynSequenceStub.next(),boolean,
org.omg.DynamicAny._DynSequenceStub.component_count(),int,
org.omg.DynamicAny._DynSequenceStub.current_component(),DynAny,
org.omg.DynamicAny._DynSequenceStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.DynamicAny._DynStructStub.current_member_name(),String,
org.omg.DynamicAny._DynStructStub.current_member_kind(),TCKind,
org.omg.DynamicAny._DynStructStub.get_members(),NameValuePair[],
org.omg.DynamicAny._DynStructStub.set_members(NameValuePair[]),void,
org.omg.DynamicAny._DynStructStub.get_members_as_dyn_any(),NameDynAnyPair[],
org.omg.DynamicAny._DynStructStub.set_members_as_dyn_any(NameDynAnyPair[]),void,
org.omg.DynamicAny._DynStructStub.type(),TypeCode,The TypeCode associated with this DynAny object
org.omg.DynamicAny._DynStructStub.assign(DynAny),void,
org.omg.DynamicAny._DynStructStub.from_any(Any),void,
org.omg.DynamicAny._DynStructStub.to_any(),Any,a new Any object with the same value and TypeCode
org.omg.DynamicAny._DynStructStub.equal(DynAny),boolean,"true of the DynAnys are equal, false otherwise"
org.omg.DynamicAny._DynStructStub.destroy(),void,
org.omg.DynamicAny._DynStructStub.copy(),DynAny,a deep copy of the DynAny object
org.omg.DynamicAny._DynStructStub.insert_boolean(boolean),void,
org.omg.DynamicAny._DynStructStub.insert_octet(byte),void,
org.omg.DynamicAny._DynStructStub.insert_char(char),void,
org.omg.DynamicAny._DynStructStub.insert_short(short),void,
org.omg.DynamicAny._DynStructStub.insert_ushort(short),void,
org.omg.DynamicAny._DynStructStub.insert_long(int),void,
org.omg.DynamicAny._DynStructStub.insert_ulong(int),void,
org.omg.DynamicAny._DynStructStub.insert_float(float),void,
org.omg.DynamicAny._DynStructStub.insert_double(double),void,
org.omg.DynamicAny._DynStructStub.insert_string(String),void,
org.omg.DynamicAny._DynStructStub.insert_reference(Object),void,
org.omg.DynamicAny._DynStructStub.insert_typecode(TypeCode),void,
org.omg.DynamicAny._DynStructStub.insert_longlong(long),void,
org.omg.DynamicAny._DynStructStub.insert_ulonglong(long),void,
org.omg.DynamicAny._DynStructStub.insert_wchar(char),void,
org.omg.DynamicAny._DynStructStub.insert_wstring(String),void,
org.omg.DynamicAny._DynStructStub.insert_any(Any),void,
org.omg.DynamicAny._DynStructStub.insert_dyn_any(DynAny),void,
org.omg.DynamicAny._DynStructStub.insert_val(Serializable),void,
org.omg.DynamicAny._DynStructStub.get_boolean(),boolean,
org.omg.DynamicAny._DynStructStub.get_octet(),byte,
org.omg.DynamicAny._DynStructStub.get_char(),char,
org.omg.DynamicAny._DynStructStub.get_short(),short,
org.omg.DynamicAny._DynStructStub.get_ushort(),short,
org.omg.DynamicAny._DynStructStub.get_long(),int,
org.omg.DynamicAny._DynStructStub.get_ulong(),int,
org.omg.DynamicAny._DynStructStub.get_float(),float,
org.omg.DynamicAny._DynStructStub.get_double(),double,
org.omg.DynamicAny._DynStructStub.get_string(),String,
org.omg.DynamicAny._DynStructStub.get_reference(),Object,
org.omg.DynamicAny._DynStructStub.get_typecode(),TypeCode,
org.omg.DynamicAny._DynStructStub.get_longlong(),long,
org.omg.DynamicAny._DynStructStub.get_ulonglong(),long,
org.omg.DynamicAny._DynStructStub.get_wchar(),char,
org.omg.DynamicAny._DynStructStub.get_wstring(),String,
org.omg.DynamicAny._DynStructStub.get_any(),Any,
org.omg.DynamicAny._DynStructStub.get_dyn_any(),DynAny,
org.omg.DynamicAny._DynStructStub.get_val(),Serializable,
org.omg.DynamicAny._DynStructStub.seek(int),boolean,
org.omg.DynamicAny._DynStructStub.rewind(),void,
org.omg.DynamicAny._DynStructStub.next(),boolean,
org.omg.DynamicAny._DynStructStub.component_count(),int,
org.omg.DynamicAny._DynStructStub.current_component(),DynAny,
org.omg.DynamicAny._DynStructStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.DynamicAny._DynUnionStub.get_discriminator(),DynAny,
org.omg.DynamicAny._DynUnionStub.set_discriminator(DynAny),void,
org.omg.DynamicAny._DynUnionStub.set_to_default_member(),void,
org.omg.DynamicAny._DynUnionStub.set_to_no_active_member(),void,
org.omg.DynamicAny._DynUnionStub.has_no_active_member(),boolean,
org.omg.DynamicAny._DynUnionStub.discriminator_kind(),TCKind,
org.omg.DynamicAny._DynUnionStub.member_kind(),TCKind,
org.omg.DynamicAny._DynUnionStub.member(),DynAny,
org.omg.DynamicAny._DynUnionStub.member_name(),String,
org.omg.DynamicAny._DynUnionStub.type(),TypeCode,The TypeCode associated with this DynAny object
org.omg.DynamicAny._DynUnionStub.assign(DynAny),void,
org.omg.DynamicAny._DynUnionStub.from_any(Any),void,
org.omg.DynamicAny._DynUnionStub.to_any(),Any,a new Any object with the same value and TypeCode
org.omg.DynamicAny._DynUnionStub.equal(DynAny),boolean,"true of the DynAnys are equal, false otherwise"
org.omg.DynamicAny._DynUnionStub.destroy(),void,
org.omg.DynamicAny._DynUnionStub.copy(),DynAny,a deep copy of the DynAny object
org.omg.DynamicAny._DynUnionStub.insert_boolean(boolean),void,
org.omg.DynamicAny._DynUnionStub.insert_octet(byte),void,
org.omg.DynamicAny._DynUnionStub.insert_char(char),void,
org.omg.DynamicAny._DynUnionStub.insert_short(short),void,
org.omg.DynamicAny._DynUnionStub.insert_ushort(short),void,
org.omg.DynamicAny._DynUnionStub.insert_long(int),void,
org.omg.DynamicAny._DynUnionStub.insert_ulong(int),void,
org.omg.DynamicAny._DynUnionStub.insert_float(float),void,
org.omg.DynamicAny._DynUnionStub.insert_double(double),void,
org.omg.DynamicAny._DynUnionStub.insert_string(String),void,
org.omg.DynamicAny._DynUnionStub.insert_reference(Object),void,
org.omg.DynamicAny._DynUnionStub.insert_typecode(TypeCode),void,
org.omg.DynamicAny._DynUnionStub.insert_longlong(long),void,
org.omg.DynamicAny._DynUnionStub.insert_ulonglong(long),void,
org.omg.DynamicAny._DynUnionStub.insert_wchar(char),void,
org.omg.DynamicAny._DynUnionStub.insert_wstring(String),void,
org.omg.DynamicAny._DynUnionStub.insert_any(Any),void,
org.omg.DynamicAny._DynUnionStub.insert_dyn_any(DynAny),void,
org.omg.DynamicAny._DynUnionStub.insert_val(Serializable),void,
org.omg.DynamicAny._DynUnionStub.get_boolean(),boolean,
org.omg.DynamicAny._DynUnionStub.get_octet(),byte,
org.omg.DynamicAny._DynUnionStub.get_char(),char,
org.omg.DynamicAny._DynUnionStub.get_short(),short,
org.omg.DynamicAny._DynUnionStub.get_ushort(),short,
org.omg.DynamicAny._DynUnionStub.get_long(),int,
org.omg.DynamicAny._DynUnionStub.get_ulong(),int,
org.omg.DynamicAny._DynUnionStub.get_float(),float,
org.omg.DynamicAny._DynUnionStub.get_double(),double,
org.omg.DynamicAny._DynUnionStub.get_string(),String,
org.omg.DynamicAny._DynUnionStub.get_reference(),Object,
org.omg.DynamicAny._DynUnionStub.get_typecode(),TypeCode,
org.omg.DynamicAny._DynUnionStub.get_longlong(),long,
org.omg.DynamicAny._DynUnionStub.get_ulonglong(),long,
org.omg.DynamicAny._DynUnionStub.get_wchar(),char,
org.omg.DynamicAny._DynUnionStub.get_wstring(),String,
org.omg.DynamicAny._DynUnionStub.get_any(),Any,
org.omg.DynamicAny._DynUnionStub.get_dyn_any(),DynAny,
org.omg.DynamicAny._DynUnionStub.get_val(),Serializable,
org.omg.DynamicAny._DynUnionStub.seek(int),boolean,
org.omg.DynamicAny._DynUnionStub.rewind(),void,
org.omg.DynamicAny._DynUnionStub.next(),boolean,
org.omg.DynamicAny._DynUnionStub.component_count(),int,
org.omg.DynamicAny._DynUnionStub.current_component(),DynAny,
org.omg.DynamicAny._DynUnionStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
org.omg.DynamicAny._DynValueStub.current_member_name(),String,
org.omg.DynamicAny._DynValueStub.current_member_kind(),TCKind,
org.omg.DynamicAny._DynValueStub.get_members(),NameValuePair[],
org.omg.DynamicAny._DynValueStub.set_members(NameValuePair[]),void,
org.omg.DynamicAny._DynValueStub.get_members_as_dyn_any(),NameDynAnyPair[],
org.omg.DynamicAny._DynValueStub.set_members_as_dyn_any(NameDynAnyPair[]),void,
org.omg.DynamicAny._DynValueStub.is_null(),boolean,
org.omg.DynamicAny._DynValueStub.set_to_null(),void,
org.omg.DynamicAny._DynValueStub.set_to_value(),void,
org.omg.DynamicAny._DynValueStub.type(),TypeCode,The TypeCode associated with this DynAny object
org.omg.DynamicAny._DynValueStub.assign(DynAny),void,
org.omg.DynamicAny._DynValueStub.from_any(Any),void,
org.omg.DynamicAny._DynValueStub.to_any(),Any,a new Any object with the same value and TypeCode
org.omg.DynamicAny._DynValueStub.equal(DynAny),boolean,"true of the DynAnys are equal, false otherwise"
org.omg.DynamicAny._DynValueStub.destroy(),void,
org.omg.DynamicAny._DynValueStub.copy(),DynAny,a deep copy of the DynAny object
org.omg.DynamicAny._DynValueStub.insert_boolean(boolean),void,
org.omg.DynamicAny._DynValueStub.insert_octet(byte),void,
org.omg.DynamicAny._DynValueStub.insert_char(char),void,
org.omg.DynamicAny._DynValueStub.insert_short(short),void,
org.omg.DynamicAny._DynValueStub.insert_ushort(short),void,
org.omg.DynamicAny._DynValueStub.insert_long(int),void,
org.omg.DynamicAny._DynValueStub.insert_ulong(int),void,
org.omg.DynamicAny._DynValueStub.insert_float(float),void,
org.omg.DynamicAny._DynValueStub.insert_double(double),void,
org.omg.DynamicAny._DynValueStub.insert_string(String),void,
org.omg.DynamicAny._DynValueStub.insert_reference(Object),void,
org.omg.DynamicAny._DynValueStub.insert_typecode(TypeCode),void,
org.omg.DynamicAny._DynValueStub.insert_longlong(long),void,
org.omg.DynamicAny._DynValueStub.insert_ulonglong(long),void,
org.omg.DynamicAny._DynValueStub.insert_wchar(char),void,
org.omg.DynamicAny._DynValueStub.insert_wstring(String),void,
org.omg.DynamicAny._DynValueStub.insert_any(Any),void,
org.omg.DynamicAny._DynValueStub.insert_dyn_any(DynAny),void,
org.omg.DynamicAny._DynValueStub.insert_val(Serializable),void,
org.omg.DynamicAny._DynValueStub.get_boolean(),boolean,
org.omg.DynamicAny._DynValueStub.get_octet(),byte,
org.omg.DynamicAny._DynValueStub.get_char(),char,
org.omg.DynamicAny._DynValueStub.get_short(),short,
org.omg.DynamicAny._DynValueStub.get_ushort(),short,
org.omg.DynamicAny._DynValueStub.get_long(),int,
org.omg.DynamicAny._DynValueStub.get_ulong(),int,
org.omg.DynamicAny._DynValueStub.get_float(),float,
org.omg.DynamicAny._DynValueStub.get_double(),double,
org.omg.DynamicAny._DynValueStub.get_string(),String,
org.omg.DynamicAny._DynValueStub.get_reference(),Object,
org.omg.DynamicAny._DynValueStub.get_typecode(),TypeCode,
org.omg.DynamicAny._DynValueStub.get_longlong(),long,
org.omg.DynamicAny._DynValueStub.get_ulonglong(),long,
org.omg.DynamicAny._DynValueStub.get_wchar(),char,
org.omg.DynamicAny._DynValueStub.get_wstring(),String,
org.omg.DynamicAny._DynValueStub.get_any(),Any,
org.omg.DynamicAny._DynValueStub.get_dyn_any(),DynAny,
org.omg.DynamicAny._DynValueStub.get_val(),Serializable,
org.omg.DynamicAny._DynValueStub.seek(int),boolean,
org.omg.DynamicAny._DynValueStub.rewind(),void,
org.omg.DynamicAny._DynValueStub.next(),boolean,
org.omg.DynamicAny._DynValueStub.component_count(),int,
org.omg.DynamicAny._DynValueStub.current_component(),DynAny,
org.omg.DynamicAny._DynValueStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
"org.omg.DynamicAny.AnySeqHelper.insert(Any,Any[])",void,
org.omg.DynamicAny.AnySeqHelper.extract(Any),Any[],
org.omg.DynamicAny.AnySeqHelper.type(),TypeCode,
org.omg.DynamicAny.AnySeqHelper.id(),String,
org.omg.DynamicAny.AnySeqHelper.read(InputStream),Any[],
"org.omg.DynamicAny.AnySeqHelper.write(OutputStream,Any[])",void,
"org.omg.DynamicAny.DynAnyFactoryHelper.insert(Any,DynAnyFactory)",void,
org.omg.DynamicAny.DynAnyFactoryHelper.extract(Any),DynAnyFactory,
org.omg.DynamicAny.DynAnyFactoryHelper.type(),TypeCode,
org.omg.DynamicAny.DynAnyFactoryHelper.id(),String,
org.omg.DynamicAny.DynAnyFactoryHelper.read(InputStream),DynAnyFactory,
"org.omg.DynamicAny.DynAnyFactoryHelper.write(OutputStream,DynAnyFactory)",void,
org.omg.DynamicAny.DynAnyFactoryHelper.narrow(Object),DynAnyFactory,
org.omg.DynamicAny.DynAnyFactoryHelper.unchecked_narrow(Object),DynAnyFactory,
"org.omg.DynamicAny.DynAnyHelper.insert(Any,DynAny)",void,
org.omg.DynamicAny.DynAnyHelper.extract(Any),DynAny,
org.omg.DynamicAny.DynAnyHelper.type(),TypeCode,
org.omg.DynamicAny.DynAnyHelper.id(),String,
org.omg.DynamicAny.DynAnyHelper.read(InputStream),DynAny,
"org.omg.DynamicAny.DynAnyHelper.write(OutputStream,DynAny)",void,
org.omg.DynamicAny.DynAnyHelper.narrow(Object),DynAny,
org.omg.DynamicAny.DynAnyHelper.unchecked_narrow(Object),DynAny,
"org.omg.DynamicAny.DynAnySeqHelper.insert(Any,DynAny[])",void,
org.omg.DynamicAny.DynAnySeqHelper.extract(Any),DynAny[],
org.omg.DynamicAny.DynAnySeqHelper.type(),TypeCode,
org.omg.DynamicAny.DynAnySeqHelper.id(),String,
org.omg.DynamicAny.DynAnySeqHelper.read(InputStream),DynAny[],
"org.omg.DynamicAny.DynAnySeqHelper.write(OutputStream,DynAny[])",void,
"org.omg.DynamicAny.DynArrayHelper.insert(Any,DynArray)",void,
org.omg.DynamicAny.DynArrayHelper.extract(Any),DynArray,
org.omg.DynamicAny.DynArrayHelper.type(),TypeCode,
org.omg.DynamicAny.DynArrayHelper.id(),String,
org.omg.DynamicAny.DynArrayHelper.read(InputStream),DynArray,
"org.omg.DynamicAny.DynArrayHelper.write(OutputStream,DynArray)",void,
org.omg.DynamicAny.DynArrayHelper.narrow(Object),DynArray,
org.omg.DynamicAny.DynArrayHelper.unchecked_narrow(Object),DynArray,
"org.omg.DynamicAny.DynEnumHelper.insert(Any,DynEnum)",void,
org.omg.DynamicAny.DynEnumHelper.extract(Any),DynEnum,
org.omg.DynamicAny.DynEnumHelper.type(),TypeCode,
org.omg.DynamicAny.DynEnumHelper.id(),String,
org.omg.DynamicAny.DynEnumHelper.read(InputStream),DynEnum,
"org.omg.DynamicAny.DynEnumHelper.write(OutputStream,DynEnum)",void,
org.omg.DynamicAny.DynEnumHelper.narrow(Object),DynEnum,
org.omg.DynamicAny.DynEnumHelper.unchecked_narrow(Object),DynEnum,
"org.omg.DynamicAny.DynFixedHelper.insert(Any,DynFixed)",void,
org.omg.DynamicAny.DynFixedHelper.extract(Any),DynFixed,
org.omg.DynamicAny.DynFixedHelper.type(),TypeCode,
org.omg.DynamicAny.DynFixedHelper.id(),String,
org.omg.DynamicAny.DynFixedHelper.read(InputStream),DynFixed,
"org.omg.DynamicAny.DynFixedHelper.write(OutputStream,DynFixed)",void,
org.omg.DynamicAny.DynFixedHelper.narrow(Object),DynFixed,
org.omg.DynamicAny.DynFixedHelper.unchecked_narrow(Object),DynFixed,
"org.omg.DynamicAny.DynSequenceHelper.insert(Any,DynSequence)",void,
org.omg.DynamicAny.DynSequenceHelper.extract(Any),DynSequence,
org.omg.DynamicAny.DynSequenceHelper.type(),TypeCode,
org.omg.DynamicAny.DynSequenceHelper.id(),String,
org.omg.DynamicAny.DynSequenceHelper.read(InputStream),DynSequence,
"org.omg.DynamicAny.DynSequenceHelper.write(OutputStream,DynSequence)",void,
org.omg.DynamicAny.DynSequenceHelper.narrow(Object),DynSequence,
org.omg.DynamicAny.DynSequenceHelper.unchecked_narrow(Object),DynSequence,
"org.omg.DynamicAny.DynStructHelper.insert(Any,DynStruct)",void,
org.omg.DynamicAny.DynStructHelper.extract(Any),DynStruct,
org.omg.DynamicAny.DynStructHelper.type(),TypeCode,
org.omg.DynamicAny.DynStructHelper.id(),String,
org.omg.DynamicAny.DynStructHelper.read(InputStream),DynStruct,
"org.omg.DynamicAny.DynStructHelper.write(OutputStream,DynStruct)",void,
org.omg.DynamicAny.DynStructHelper.narrow(Object),DynStruct,
org.omg.DynamicAny.DynStructHelper.unchecked_narrow(Object),DynStruct,
"org.omg.DynamicAny.DynUnionHelper.insert(Any,DynUnion)",void,
org.omg.DynamicAny.DynUnionHelper.extract(Any),DynUnion,
org.omg.DynamicAny.DynUnionHelper.type(),TypeCode,
org.omg.DynamicAny.DynUnionHelper.id(),String,
org.omg.DynamicAny.DynUnionHelper.read(InputStream),DynUnion,
"org.omg.DynamicAny.DynUnionHelper.write(OutputStream,DynUnion)",void,
org.omg.DynamicAny.DynUnionHelper.narrow(Object),DynUnion,
org.omg.DynamicAny.DynUnionHelper.unchecked_narrow(Object),DynUnion,
"org.omg.DynamicAny.DynValueHelper.insert(Any,DynValue)",void,
org.omg.DynamicAny.DynValueHelper.extract(Any),DynValue,
org.omg.DynamicAny.DynValueHelper.type(),TypeCode,
org.omg.DynamicAny.DynValueHelper.id(),String,
org.omg.DynamicAny.DynValueHelper.read(InputStream),DynValue,
"org.omg.DynamicAny.DynValueHelper.write(OutputStream,DynValue)",void,
org.omg.DynamicAny.DynValueHelper.narrow(Object),DynValue,
org.omg.DynamicAny.DynValueHelper.unchecked_narrow(Object),DynValue,
"org.omg.DynamicAny.FieldNameHelper.insert(Any,String)",void,
org.omg.DynamicAny.FieldNameHelper.extract(Any),String,
org.omg.DynamicAny.FieldNameHelper.type(),TypeCode,
org.omg.DynamicAny.FieldNameHelper.id(),String,
org.omg.DynamicAny.FieldNameHelper.read(InputStream),String,
"org.omg.DynamicAny.FieldNameHelper.write(OutputStream,String)",void,
"org.omg.DynamicAny.NameDynAnyPairHelper.insert(Any,NameDynAnyPair)",void,
org.omg.DynamicAny.NameDynAnyPairHelper.extract(Any),NameDynAnyPair,
org.omg.DynamicAny.NameDynAnyPairHelper.type(),TypeCode,
org.omg.DynamicAny.NameDynAnyPairHelper.id(),String,
org.omg.DynamicAny.NameDynAnyPairHelper.read(InputStream),NameDynAnyPair,
"org.omg.DynamicAny.NameDynAnyPairHelper.write(OutputStream,NameDynAnyPair)",void,
"org.omg.DynamicAny.NameDynAnyPairSeqHelper.insert(Any,NameDynAnyPair[])",void,
org.omg.DynamicAny.NameDynAnyPairSeqHelper.extract(Any),NameDynAnyPair[],
org.omg.DynamicAny.NameDynAnyPairSeqHelper.type(),TypeCode,
org.omg.DynamicAny.NameDynAnyPairSeqHelper.id(),String,
org.omg.DynamicAny.NameDynAnyPairSeqHelper.read(InputStream),NameDynAnyPair[],
"org.omg.DynamicAny.NameDynAnyPairSeqHelper.write(OutputStream,NameDynAnyPair[])",void,
"org.omg.DynamicAny.NameValuePairHelper.insert(Any,NameValuePair)",void,
org.omg.DynamicAny.NameValuePairHelper.extract(Any),NameValuePair,
org.omg.DynamicAny.NameValuePairHelper.type(),TypeCode,
org.omg.DynamicAny.NameValuePairHelper.id(),String,
org.omg.DynamicAny.NameValuePairHelper.read(InputStream),NameValuePair,
"org.omg.DynamicAny.NameValuePairHelper.write(OutputStream,NameValuePair)",void,
"org.omg.DynamicAny.NameValuePairSeqHelper.insert(Any,NameValuePair[])",void,
org.omg.DynamicAny.NameValuePairSeqHelper.extract(Any),NameValuePair[],
org.omg.DynamicAny.NameValuePairSeqHelper.type(),TypeCode,
org.omg.DynamicAny.NameValuePairSeqHelper.id(),String,
org.omg.DynamicAny.NameValuePairSeqHelper.read(InputStream),NameValuePair[],
"org.omg.DynamicAny.NameValuePairSeqHelper.write(OutputStream,NameValuePair[])",void,
"org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.insert(Any,InconsistentTypeCode)",void,
org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.extract(Any),InconsistentTypeCode,
org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.type(),TypeCode,
org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.id(),String,
org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.read(InputStream),InconsistentTypeCode,
"org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCodeHelper.write(OutputStream,InconsistentTypeCode)",void,
"org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.insert(Any,InvalidValue)",void,
org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.extract(Any),InvalidValue,
org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.type(),TypeCode,
org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.id(),String,
org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.read(InputStream),InvalidValue,
"org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write(OutputStream,InvalidValue)",void,
"org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.insert(Any,TypeMismatch)",void,
org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.extract(Any),TypeMismatch,
org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.type(),TypeCode,
org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.id(),String,
org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.read(InputStream),TypeMismatch,
"org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write(OutputStream,TypeMismatch)",void,
"org.omg.IOP.CodecFactoryHelper.insert(Any,CodecFactory)",void,
org.omg.IOP.CodecFactoryHelper.extract(Any),CodecFactory,
org.omg.IOP.CodecFactoryHelper.type(),TypeCode,
org.omg.IOP.CodecFactoryHelper.id(),String,
org.omg.IOP.CodecFactoryHelper.read(InputStream),CodecFactory,
"org.omg.IOP.CodecFactoryHelper.write(OutputStream,CodecFactory)",void,
org.omg.IOP.CodecFactoryHelper.narrow(Object),CodecFactory,
org.omg.IOP.CodecFactoryHelper.unchecked_narrow(Object),CodecFactory,
"org.omg.IOP.ComponentIdHelper.insert(Any,int)",void,
org.omg.IOP.ComponentIdHelper.extract(Any),int,
org.omg.IOP.ComponentIdHelper.type(),TypeCode,
org.omg.IOP.ComponentIdHelper.id(),String,
org.omg.IOP.ComponentIdHelper.read(InputStream),int,
"org.omg.IOP.ComponentIdHelper.write(OutputStream,int)",void,
"org.omg.IOP.IORHelper.insert(Any,IOR)",void,
org.omg.IOP.IORHelper.extract(Any),IOR,
org.omg.IOP.IORHelper.type(),TypeCode,
org.omg.IOP.IORHelper.id(),String,
org.omg.IOP.IORHelper.read(InputStream),IOR,
"org.omg.IOP.IORHelper.write(OutputStream,IOR)",void,
org.omg.IOP.IORHolder._read(InputStream),void,
org.omg.IOP.IORHolder._write(OutputStream),void,
org.omg.IOP.IORHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.IOP.MultipleComponentProfileHelper.insert(Any,TaggedComponent[])",void,
org.omg.IOP.MultipleComponentProfileHelper.extract(Any),TaggedComponent[],
org.omg.IOP.MultipleComponentProfileHelper.type(),TypeCode,
org.omg.IOP.MultipleComponentProfileHelper.id(),String,
org.omg.IOP.MultipleComponentProfileHelper.read(InputStream),TaggedComponent[],
"org.omg.IOP.MultipleComponentProfileHelper.write(OutputStream,TaggedComponent[])",void,
org.omg.IOP.MultipleComponentProfileHolder._read(InputStream),void,
org.omg.IOP.MultipleComponentProfileHolder._write(OutputStream),void,
org.omg.IOP.MultipleComponentProfileHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.IOP.ProfileIdHelper.insert(Any,int)",void,
org.omg.IOP.ProfileIdHelper.extract(Any),int,
org.omg.IOP.ProfileIdHelper.type(),TypeCode,
org.omg.IOP.ProfileIdHelper.id(),String,
org.omg.IOP.ProfileIdHelper.read(InputStream),int,
"org.omg.IOP.ProfileIdHelper.write(OutputStream,int)",void,
"org.omg.IOP.ServiceContextHelper.insert(Any,ServiceContext)",void,
org.omg.IOP.ServiceContextHelper.extract(Any),ServiceContext,
org.omg.IOP.ServiceContextHelper.type(),TypeCode,
org.omg.IOP.ServiceContextHelper.id(),String,
org.omg.IOP.ServiceContextHelper.read(InputStream),ServiceContext,
"org.omg.IOP.ServiceContextHelper.write(OutputStream,ServiceContext)",void,
org.omg.IOP.ServiceContextHolder._read(InputStream),void,
org.omg.IOP.ServiceContextHolder._write(OutputStream),void,
org.omg.IOP.ServiceContextHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.IOP.ServiceContextListHelper.insert(Any,ServiceContext[])",void,
org.omg.IOP.ServiceContextListHelper.extract(Any),ServiceContext[],
org.omg.IOP.ServiceContextListHelper.type(),TypeCode,
org.omg.IOP.ServiceContextListHelper.id(),String,
org.omg.IOP.ServiceContextListHelper.read(InputStream),ServiceContext[],
"org.omg.IOP.ServiceContextListHelper.write(OutputStream,ServiceContext[])",void,
org.omg.IOP.ServiceContextListHolder._read(InputStream),void,
org.omg.IOP.ServiceContextListHolder._write(OutputStream),void,
org.omg.IOP.ServiceContextListHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.IOP.ServiceIdHelper.insert(Any,int)",void,
org.omg.IOP.ServiceIdHelper.extract(Any),int,
org.omg.IOP.ServiceIdHelper.type(),TypeCode,
org.omg.IOP.ServiceIdHelper.id(),String,
org.omg.IOP.ServiceIdHelper.read(InputStream),int,
"org.omg.IOP.ServiceIdHelper.write(OutputStream,int)",void,
"org.omg.IOP.TaggedComponentHelper.insert(Any,TaggedComponent)",void,
org.omg.IOP.TaggedComponentHelper.extract(Any),TaggedComponent,
org.omg.IOP.TaggedComponentHelper.type(),TypeCode,
org.omg.IOP.TaggedComponentHelper.id(),String,
org.omg.IOP.TaggedComponentHelper.read(InputStream),TaggedComponent,
"org.omg.IOP.TaggedComponentHelper.write(OutputStream,TaggedComponent)",void,
org.omg.IOP.TaggedComponentHolder._read(InputStream),void,
org.omg.IOP.TaggedComponentHolder._write(OutputStream),void,
org.omg.IOP.TaggedComponentHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.IOP.TaggedProfileHelper.insert(Any,TaggedProfile)",void,
org.omg.IOP.TaggedProfileHelper.extract(Any),TaggedProfile,
org.omg.IOP.TaggedProfileHelper.type(),TypeCode,
org.omg.IOP.TaggedProfileHelper.id(),String,
org.omg.IOP.TaggedProfileHelper.read(InputStream),TaggedProfile,
"org.omg.IOP.TaggedProfileHelper.write(OutputStream,TaggedProfile)",void,
org.omg.IOP.TaggedProfileHolder._read(InputStream),void,
org.omg.IOP.TaggedProfileHolder._write(OutputStream),void,
org.omg.IOP.TaggedProfileHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.insert(Any,UnknownEncoding)",void,
org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.extract(Any),UnknownEncoding,
org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.type(),TypeCode,
org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.id(),String,
org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.read(InputStream),UnknownEncoding,
"org.omg.IOP.CodecFactoryPackage.UnknownEncodingHelper.write(OutputStream,UnknownEncoding)",void,
"org.omg.IOP.CodecPackage.FormatMismatchHelper.insert(Any,FormatMismatch)",void,
org.omg.IOP.CodecPackage.FormatMismatchHelper.extract(Any),FormatMismatch,
org.omg.IOP.CodecPackage.FormatMismatchHelper.type(),TypeCode,
org.omg.IOP.CodecPackage.FormatMismatchHelper.id(),String,
org.omg.IOP.CodecPackage.FormatMismatchHelper.read(InputStream),FormatMismatch,
"org.omg.IOP.CodecPackage.FormatMismatchHelper.write(OutputStream,FormatMismatch)",void,
"org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.insert(Any,InvalidTypeForEncoding)",void,
org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.extract(Any),InvalidTypeForEncoding,
org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.type(),TypeCode,
org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.id(),String,
org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.read(InputStream),InvalidTypeForEncoding,
"org.omg.IOP.CodecPackage.InvalidTypeForEncodingHelper.write(OutputStream,InvalidTypeForEncoding)",void,
"org.omg.IOP.CodecPackage.TypeMismatchHelper.insert(Any,TypeMismatch)",void,
org.omg.IOP.CodecPackage.TypeMismatchHelper.extract(Any),TypeMismatch,
org.omg.IOP.CodecPackage.TypeMismatchHelper.type(),TypeCode,
org.omg.IOP.CodecPackage.TypeMismatchHelper.id(),String,
org.omg.IOP.CodecPackage.TypeMismatchHelper.read(InputStream),TypeMismatch,
"org.omg.IOP.CodecPackage.TypeMismatchHelper.write(OutputStream,TypeMismatch)",void,
"org.omg.Messaging.SyncScopeHelper.insert(Any,short)",void,
org.omg.Messaging.SyncScopeHelper.extract(Any),short,
org.omg.Messaging.SyncScopeHelper.type(),TypeCode,
org.omg.Messaging.SyncScopeHelper.id(),String,
org.omg.Messaging.SyncScopeHelper.read(InputStream),short,
"org.omg.Messaging.SyncScopeHelper.write(OutputStream,short)",void,
"org.omg.PortableInterceptor.AdapterManagerIdHelper.insert(Any,int)",void,
org.omg.PortableInterceptor.AdapterManagerIdHelper.extract(Any),int,
org.omg.PortableInterceptor.AdapterManagerIdHelper.type(),TypeCode,
org.omg.PortableInterceptor.AdapterManagerIdHelper.id(),String,
org.omg.PortableInterceptor.AdapterManagerIdHelper.read(InputStream),int,
"org.omg.PortableInterceptor.AdapterManagerIdHelper.write(OutputStream,int)",void,
"org.omg.PortableInterceptor.AdapterNameHelper.insert(Any,String[])",void,
org.omg.PortableInterceptor.AdapterNameHelper.extract(Any),String[],
org.omg.PortableInterceptor.AdapterNameHelper.type(),TypeCode,
org.omg.PortableInterceptor.AdapterNameHelper.id(),String,
org.omg.PortableInterceptor.AdapterNameHelper.read(InputStream),String[],
"org.omg.PortableInterceptor.AdapterNameHelper.write(OutputStream,String[])",void,
"org.omg.PortableInterceptor.AdapterStateHelper.insert(Any,short)",void,
org.omg.PortableInterceptor.AdapterStateHelper.extract(Any),short,
org.omg.PortableInterceptor.AdapterStateHelper.type(),TypeCode,
org.omg.PortableInterceptor.AdapterStateHelper.id(),String,
org.omg.PortableInterceptor.AdapterStateHelper.read(InputStream),short,
"org.omg.PortableInterceptor.AdapterStateHelper.write(OutputStream,short)",void,
"org.omg.PortableInterceptor.CurrentHelper.insert(Any,Current)",void,
org.omg.PortableInterceptor.CurrentHelper.extract(Any),Current,
org.omg.PortableInterceptor.CurrentHelper.type(),TypeCode,
org.omg.PortableInterceptor.CurrentHelper.id(),String,
org.omg.PortableInterceptor.CurrentHelper.read(InputStream),Current,
"org.omg.PortableInterceptor.CurrentHelper.write(OutputStream,Current)",void,
org.omg.PortableInterceptor.CurrentHelper.narrow(Object),Current,
org.omg.PortableInterceptor.CurrentHelper.unchecked_narrow(Object),Current,
"org.omg.PortableInterceptor.ForwardRequestHelper.insert(Any,ForwardRequest)",void,
org.omg.PortableInterceptor.ForwardRequestHelper.extract(Any),ForwardRequest,
org.omg.PortableInterceptor.ForwardRequestHelper.type(),TypeCode,
org.omg.PortableInterceptor.ForwardRequestHelper.id(),String,
org.omg.PortableInterceptor.ForwardRequestHelper.read(InputStream),ForwardRequest,
"org.omg.PortableInterceptor.ForwardRequestHelper.write(OutputStream,ForwardRequest)",void,
"org.omg.PortableInterceptor.InvalidSlotHelper.insert(Any,InvalidSlot)",void,
org.omg.PortableInterceptor.InvalidSlotHelper.extract(Any),InvalidSlot,
org.omg.PortableInterceptor.InvalidSlotHelper.type(),TypeCode,
org.omg.PortableInterceptor.InvalidSlotHelper.id(),String,
org.omg.PortableInterceptor.InvalidSlotHelper.read(InputStream),InvalidSlot,
"org.omg.PortableInterceptor.InvalidSlotHelper.write(OutputStream,InvalidSlot)",void,
"org.omg.PortableInterceptor.IORInterceptor_3_0Helper.insert(Any,IORInterceptor_3_0)",void,
org.omg.PortableInterceptor.IORInterceptor_3_0Helper.extract(Any),IORInterceptor_3_0,
org.omg.PortableInterceptor.IORInterceptor_3_0Helper.type(),TypeCode,
org.omg.PortableInterceptor.IORInterceptor_3_0Helper.id(),String,
org.omg.PortableInterceptor.IORInterceptor_3_0Helper.read(InputStream),IORInterceptor_3_0,
"org.omg.PortableInterceptor.IORInterceptor_3_0Helper.write(OutputStream,IORInterceptor_3_0)",void,
org.omg.PortableInterceptor.IORInterceptor_3_0Helper.narrow(Object),IORInterceptor_3_0,
org.omg.PortableInterceptor.IORInterceptor_3_0Helper.unchecked_narrow(Object),IORInterceptor_3_0,
org.omg.PortableInterceptor.IORInterceptor_3_0Holder._read(InputStream),void,
org.omg.PortableInterceptor.IORInterceptor_3_0Holder._write(OutputStream),void,
org.omg.PortableInterceptor.IORInterceptor_3_0Holder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.PortableInterceptor.ObjectIdHelper.insert(Any,byte[])",void,
org.omg.PortableInterceptor.ObjectIdHelper.extract(Any),byte[],
org.omg.PortableInterceptor.ObjectIdHelper.type(),TypeCode,
org.omg.PortableInterceptor.ObjectIdHelper.id(),String,
org.omg.PortableInterceptor.ObjectIdHelper.read(InputStream),byte[],
"org.omg.PortableInterceptor.ObjectIdHelper.write(OutputStream,byte[])",void,
"org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.insert(Any,ObjectReferenceFactory)",void,
org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.extract(Any),ObjectReferenceFactory,
org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.type(),TypeCode,
org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.id(),String,
org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.read(InputStream),ObjectReferenceFactory,
"org.omg.PortableInterceptor.ObjectReferenceFactoryHelper.write(OutputStream,ObjectReferenceFactory)",void,
org.omg.PortableInterceptor.ObjectReferenceFactoryHolder._read(InputStream),void,
org.omg.PortableInterceptor.ObjectReferenceFactoryHolder._write(OutputStream),void,
org.omg.PortableInterceptor.ObjectReferenceFactoryHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.insert(Any,ObjectReferenceTemplate)",void,
org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.extract(Any),ObjectReferenceTemplate,
org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.type(),TypeCode,
org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.id(),String,
org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.read(InputStream),ObjectReferenceTemplate,
"org.omg.PortableInterceptor.ObjectReferenceTemplateHelper.write(OutputStream,ObjectReferenceTemplate)",void,
org.omg.PortableInterceptor.ObjectReferenceTemplateHolder._read(InputStream),void,
org.omg.PortableInterceptor.ObjectReferenceTemplateHolder._write(OutputStream),void,
org.omg.PortableInterceptor.ObjectReferenceTemplateHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.insert(Any,ObjectReferenceTemplate[])",void,
org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.extract(Any),ObjectReferenceTemplate[],
org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.type(),TypeCode,
org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.id(),String,
org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.read(InputStream),ObjectReferenceTemplate[],
"org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHelper.write(OutputStream,ObjectReferenceTemplate[])",void,
org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHolder._read(InputStream),void,
org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHolder._write(OutputStream),void,
org.omg.PortableInterceptor.ObjectReferenceTemplateSeqHolder._type(),TypeCode,the TypeCode object for the value held in the holder
"org.omg.PortableInterceptor.ORBIdHelper.insert(Any,String)",void,
org.omg.PortableInterceptor.ORBIdHelper.extract(Any),String,
org.omg.PortableInterceptor.ORBIdHelper.type(),TypeCode,
org.omg.PortableInterceptor.ORBIdHelper.id(),String,
org.omg.PortableInterceptor.ORBIdHelper.read(InputStream),String,
"org.omg.PortableInterceptor.ORBIdHelper.write(OutputStream,String)",void,
"org.omg.PortableInterceptor.ServerIdHelper.insert(Any,String)",void,
org.omg.PortableInterceptor.ServerIdHelper.extract(Any),String,
org.omg.PortableInterceptor.ServerIdHelper.type(),TypeCode,
org.omg.PortableInterceptor.ServerIdHelper.id(),String,
org.omg.PortableInterceptor.ServerIdHelper.read(InputStream),String,
"org.omg.PortableInterceptor.ServerIdHelper.write(OutputStream,String)",void,
"org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.insert(Any,DuplicateName)",void,
org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.extract(Any),DuplicateName,
org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.type(),TypeCode,
org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.id(),String,
org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.read(InputStream),DuplicateName,
"org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateNameHelper.write(OutputStream,DuplicateName)",void,
"org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.insert(Any,InvalidName)",void,
org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.extract(Any),InvalidName,
org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.type(),TypeCode,
org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.id(),String,
org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.read(InputStream),InvalidName,
"org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidNameHelper.write(OutputStream,InvalidName)",void,
"org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.insert(Any,String)",void,
org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.extract(Any),String,
org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.type(),TypeCode,
org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.id(),String,
org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.read(InputStream),String,
"org.omg.PortableInterceptor.ORBInitInfoPackage.ObjectIdHelper.write(OutputStream,String)",void,
"org.omg.PortableServer._ServantActivatorStub.incarnate(byte[],POA)",Servant,Servant corresponding to oid is created or located by the user supplied servant manager.
"org.omg.PortableServer._ServantActivatorStub.etherealize(byte[],POA,Servant,boolean,boolean)",void,
org.omg.PortableServer._ServantActivatorStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
"org.omg.PortableServer._ServantLocatorStub.preinvoke(byte[],POA,String,CookieHolder)",Servant,Servant used to process incoming request.
"org.omg.PortableServer._ServantLocatorStub.postinvoke(byte[],POA,String,Object,Servant)",void,
org.omg.PortableServer._ServantLocatorStub._ids(),String[],the array of all repository identifiers supported by this ObjectImpl instance
"org.omg.PortableServer.CurrentHelper.insert(Any,Current)",void,
org.omg.PortableServer.CurrentHelper.extract(Any),Current,
org.omg.PortableServer.CurrentHelper.type(),TypeCode,
org.omg.PortableServer.CurrentHelper.id(),String,
org.omg.PortableServer.CurrentHelper.read(InputStream),Current,
"org.omg.PortableServer.CurrentHelper.write(OutputStream,Current)",void,
org.omg.PortableServer.CurrentHelper.narrow(Object),Current,
org.omg.PortableServer.DynamicImplementation.invoke(ServerRequest),abstractvoid,
"org.omg.PortableServer.ForwardRequestHelper.insert(Any,ForwardRequest)",void,
org.omg.PortableServer.ForwardRequestHelper.extract(Any),ForwardRequest,
org.omg.PortableServer.ForwardRequestHelper.type(),TypeCode,
org.omg.PortableServer.ForwardRequestHelper.id(),String,
org.omg.PortableServer.ForwardRequestHelper.read(InputStream),ForwardRequest,
"org.omg.PortableServer.ForwardRequestHelper.write(OutputStream,ForwardRequest)",void,
org.omg.PortableServer.IdAssignmentPolicyValue.value(),int,
org.omg.PortableServer.IdAssignmentPolicyValue.from_int(int),IdAssignmentPolicyValue,
org.omg.PortableServer.IdUniquenessPolicyValue.value(),int,
org.omg.PortableServer.IdUniquenessPolicyValue.from_int(int),IdUniquenessPolicyValue,
org.omg.PortableServer.ImplicitActivationPolicyValue.value(),int,
org.omg.PortableServer.ImplicitActivationPolicyValue.from_int(int),ImplicitActivationPolicyValue,
org.omg.PortableServer.LifespanPolicyValue.value(),int,
org.omg.PortableServer.LifespanPolicyValue.from_int(int),LifespanPolicyValue,
"org.omg.PortableServer.POAHelper.insert(Any,POA)",void,
org.omg.PortableServer.POAHelper.extract(Any),POA,
org.omg.PortableServer.POAHelper.type(),TypeCode,
org.omg.PortableServer.POAHelper.id(),String,
org.omg.PortableServer.POAHelper.read(InputStream),POA,
"org.omg.PortableServer.POAHelper.write(OutputStream,POA)",void,
org.omg.PortableServer.POAHelper.narrow(Object),POA,
org.omg.PortableServer.RequestProcessingPolicyValue.value(),int,
org.omg.PortableServer.RequestProcessingPolicyValue.from_int(int),RequestProcessingPolicyValue,
org.omg.PortableServer.Servant._get_delegate(),Delegate,_delegate the ORB vendor-specific implementation of PortableServer::Servant.
org.omg.PortableServer.Servant._set_delegate(Delegate),void,
org.omg.PortableServer.Servant._this_object(),Object,this_object Object reference associated with the request.
org.omg.PortableServer.Servant._this_object(ORB),Object,_this_object reference associated with the request.
org.omg.PortableServer.Servant._orb(),ORB,orb the instance of the ORB currently associated with the Servant.
org.omg.PortableServer.Servant._poa(),POA,poa POA associated with the servant.
org.omg.PortableServer.Servant._object_id(),byte[],object_id the Object ID associated with this servant.
org.omg.PortableServer.Servant._default_POA(),POA,default_POA the POA associated with the Servant.
org.omg.PortableServer.Servant._is_a(String),boolean,is_a boolean indicating whether the specified repository_id is in the repository list or is same as a generic CORBA object.
org.omg.PortableServer.Servant._non_existent(),boolean,"non_existent true if that object does not exist, false otherwise."
org.omg.PortableServer.Servant._get_interface_def(),Object,get_interface_def an InterfaceDef object as a CORBA::Object that defines the runtime type of the CORBA::Object implemented by the Servant.
"org.omg.PortableServer.Servant._all_interfaces(POA,byte[])",abstractString[],list of type information for the object.
"org.omg.PortableServer.ServantActivatorHelper.insert(Any,ServantActivator)",void,
org.omg.PortableServer.ServantActivatorHelper.extract(Any),ServantActivator,
org.omg.PortableServer.ServantActivatorHelper.type(),TypeCode,
org.omg.PortableServer.ServantActivatorHelper.id(),String,
org.omg.PortableServer.ServantActivatorHelper.read(InputStream),ServantActivator,
"org.omg.PortableServer.ServantActivatorHelper.write(OutputStream,ServantActivator)",void,
org.omg.PortableServer.ServantActivatorHelper.narrow(Object),ServantActivator,
org.omg.PortableServer.ServantActivatorHelper.unchecked_narrow(Object),ServantActivator,
"org.omg.PortableServer.ServantActivatorPOA._invoke(String,InputStream,ResponseHandler)",OutputStream,The OutputStream created by the ResponseHandler which contains the marshalled reply
"org.omg.PortableServer.ServantActivatorPOA._all_interfaces(POA,byte[])",String[],list of type information for the object.
org.omg.PortableServer.ServantActivatorPOA._this(),ServantActivator,
org.omg.PortableServer.ServantActivatorPOA._this(ORB),ServantActivator,
"org.omg.PortableServer.ServantLocatorHelper.insert(Any,ServantLocator)",void,
org.omg.PortableServer.ServantLocatorHelper.extract(Any),ServantLocator,
org.omg.PortableServer.ServantLocatorHelper.type(),TypeCode,
org.omg.PortableServer.ServantLocatorHelper.id(),String,
org.omg.PortableServer.ServantLocatorHelper.read(InputStream),ServantLocator,
"org.omg.PortableServer.ServantLocatorHelper.write(OutputStream,ServantLocator)",void,
org.omg.PortableServer.ServantLocatorHelper.narrow(Object),ServantLocator,
org.omg.PortableServer.ServantLocatorHelper.unchecked_narrow(Object),ServantLocator,
"org.omg.PortableServer.ServantLocatorPOA._invoke(String,InputStream,ResponseHandler)",OutputStream,The OutputStream created by the ResponseHandler which contains the marshalled reply
"org.omg.PortableServer.ServantLocatorPOA._all_interfaces(POA,byte[])",String[],list of type information for the object.
org.omg.PortableServer.ServantLocatorPOA._this(),ServantLocator,
org.omg.PortableServer.ServantLocatorPOA._this(ORB),ServantLocator,
org.omg.PortableServer.ServantRetentionPolicyValue.value(),int,
org.omg.PortableServer.ServantRetentionPolicyValue.from_int(int),ServantRetentionPolicyValue,
org.omg.PortableServer.ThreadPolicyValue.value(),int,
org.omg.PortableServer.ThreadPolicyValue.from_int(int),ThreadPolicyValue,
"org.omg.PortableServer.CurrentPackage.NoContextHelper.insert(Any,NoContext)",void,
org.omg.PortableServer.CurrentPackage.NoContextHelper.extract(Any),NoContext,
org.omg.PortableServer.CurrentPackage.NoContextHelper.type(),TypeCode,
org.omg.PortableServer.CurrentPackage.NoContextHelper.id(),String,
org.omg.PortableServer.CurrentPackage.NoContextHelper.read(InputStream),NoContext,
"org.omg.PortableServer.CurrentPackage.NoContextHelper.write(OutputStream,NoContext)",void,
"org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.insert(Any,AdapterInactive)",void,
org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.extract(Any),AdapterInactive,
org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.type(),TypeCode,
org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.id(),String,
org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.read(InputStream),AdapterInactive,
"org.omg.PortableServer.POAManagerPackage.AdapterInactiveHelper.write(OutputStream,AdapterInactive)",void,
org.omg.PortableServer.POAManagerPackage.State.value(),int,
org.omg.PortableServer.POAManagerPackage.State.from_int(int),State,
"org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.insert(Any,AdapterAlreadyExists)",void,
org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.extract(Any),AdapterAlreadyExists,
org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.id(),String,
org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.read(InputStream),AdapterAl,
"org.omg.PortableServer.POAPackage.AdapterAlreadyExistsHelper.write(OutputStream,AdapterAlreadyExists)",void,
"org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.insert(Any,AdapterNonExistent)",void,
org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.extract(Any),AdapterNonExistent,
org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.id(),String,
org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.read(InputStream),AdapterNonExistent,
"org.omg.PortableServer.POAPackage.AdapterNonExistentHelper.write(OutputStream,AdapterNonExistent)",void,
"org.omg.PortableServer.POAPackage.InvalidPolicyHelper.insert(Any,InvalidPolicy)",void,
org.omg.PortableServer.POAPackage.InvalidPolicyHelper.extract(Any),InvalidPolicy,
org.omg.PortableServer.POAPackage.InvalidPolicyHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.InvalidPolicyHelper.id(),String,
org.omg.PortableServer.POAPackage.InvalidPolicyHelper.read(InputStream),InvalidPolicy,
"org.omg.PortableServer.POAPackage.InvalidPolicyHelper.write(OutputStream,InvalidPolicy)",void,
"org.omg.PortableServer.POAPackage.NoServantHelper.insert(Any,NoServant)",void,
org.omg.PortableServer.POAPackage.NoServantHelper.extract(Any),NoServant,
org.omg.PortableServer.POAPackage.NoServantHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.NoServantHelper.id(),String,
org.omg.PortableServer.POAPackage.NoServantHelper.read(InputStream),NoServant,
"org.omg.PortableServer.POAPackage.NoServantHelper.write(OutputStream,NoServant)",void,
"org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.insert(Any,ObjectAlreadyActive)",void,
org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.extract(Any),ObjectAlreadyActive,
org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.id(),String,
org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.read(InputStream),ObjectAl,
"org.omg.PortableServer.POAPackage.ObjectAlreadyActiveHelper.write(OutputStream,ObjectAlreadyActive)",void,
"org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.insert(Any,ObjectNotActive)",void,
org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.extract(Any),ObjectNotActive,
org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.id(),String,
org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.read(InputStream),ObjectNotActive,
"org.omg.PortableServer.POAPackage.ObjectNotActiveHelper.write(OutputStream,ObjectNotActive)",void,
"org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.insert(Any,ServantAlreadyActive)",void,
org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.extract(Any),ServantAlreadyActive,
org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.id(),String,
org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.read(InputStream),ServantAl,
"org.omg.PortableServer.POAPackage.ServantAlreadyActiveHelper.write(OutputStream,ServantAlreadyActive)",void,
"org.omg.PortableServer.POAPackage.ServantNotActiveHelper.insert(Any,ServantNotActive)",void,
org.omg.PortableServer.POAPackage.ServantNotActiveHelper.extract(Any),ServantNotActive,
org.omg.PortableServer.POAPackage.ServantNotActiveHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.ServantNotActiveHelper.id(),String,
org.omg.PortableServer.POAPackage.ServantNotActiveHelper.read(InputStream),ServantNotActive,
"org.omg.PortableServer.POAPackage.ServantNotActiveHelper.write(OutputStream,ServantNotActive)",void,
"org.omg.PortableServer.POAPackage.WrongAdapterHelper.insert(Any,WrongAdapter)",void,
org.omg.PortableServer.POAPackage.WrongAdapterHelper.extract(Any),WrongAdapter,
org.omg.PortableServer.POAPackage.WrongAdapterHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.WrongAdapterHelper.id(),String,
org.omg.PortableServer.POAPackage.WrongAdapterHelper.read(InputStream),WrongAdapter,
"org.omg.PortableServer.POAPackage.WrongAdapterHelper.write(OutputStream,WrongAdapter)",void,
"org.omg.PortableServer.POAPackage.WrongPolicyHelper.insert(Any,WrongPolicy)",void,
org.omg.PortableServer.POAPackage.WrongPolicyHelper.extract(Any),WrongPolicy,
org.omg.PortableServer.POAPackage.WrongPolicyHelper.type(),TypeCode,
org.omg.PortableServer.POAPackage.WrongPolicyHelper.id(),String,
org.omg.PortableServer.POAPackage.WrongPolicyHelper.read(InputStream),WrongPolicy,
"org.omg.PortableServer.POAPackage.WrongPolicyHelper.write(OutputStream,WrongPolicy)",void,
org.omg.PortableServer.ServantLocatorPackage.CookieHolder._read(InputStream),void,
org.omg.PortableServer.ServantLocatorPackage.CookieHolder._write(OutputStream),void,
org.omg.PortableServer.ServantLocatorPackage.CookieHolder._type(),TypeCode,the TypeCode object for the value held in the holder
org.omg.stub.java.rmi._Remote_Stub._ids(),String[],an array of repository ids that an object implements.
org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance(),DOMImplementationRegistry,an initialized instance of DOMImplementationRegistry
org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementation(String),DOMImplementation,"An implementation that has the desired features, or null if none found."
org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementationList(String),DOMImplementationList,A list of DOMImplementations that support the desired features.
org.w3c.dom.bootstrap.DOMImplementationRegistry.addSource(DOMImplementationSource),void,
"org.xml.sax.HandlerBase.resolveEntity(String,String)",InputSource,"The new input source, or null to require the default behaviour."
"org.xml.sax.HandlerBase.notationDecl(String,String,String)",void,
"org.xml.sax.HandlerBase.unparsedEntityDecl(String,String,String,String)",void,
org.xml.sax.HandlerBase.setDocumentLocator(Locator),void,
org.xml.sax.HandlerBase.startDocument(),void,
org.xml.sax.HandlerBase.endDocument(),void,
"org.xml.sax.HandlerBase.startElement(String,AttributeList)",void,
org.xml.sax.HandlerBase.endElement(String),void,
"org.xml.sax.HandlerBase.characters(char[],int,int)",void,
"org.xml.sax.HandlerBase.ignorableWhitespace(char[],int,int)",void,
"org.xml.sax.HandlerBase.processingInstruction(String,String)",void,
org.xml.sax.HandlerBase.warning(SAXParseException),void,
org.xml.sax.HandlerBase.error(SAXParseException),void,
org.xml.sax.HandlerBase.fatalError(SAXParseException),void,
org.xml.sax.InputSource.setPublicId(String),void,
org.xml.sax.InputSource.getPublicId(),String,"The public identifier, or null if none was supplied."
org.xml.sax.InputSource.setSystemId(String),void,
org.xml.sax.InputSource.getSystemId(),String,"The system identifier, or null if none was supplied."
org.xml.sax.InputSource.setByteStream(InputStream),void,
org.xml.sax.InputSource.getByteStream(),InputStream,"The byte stream, or null if none was supplied."
org.xml.sax.InputSource.setEncoding(String),void,
org.xml.sax.InputSource.getEncoding(),String,"The encoding, or null if none was supplied."
org.xml.sax.InputSource.setCharacterStream(Reader),void,
org.xml.sax.InputSource.getCharacterStream(),Reader,"The character stream, or null if none was supplied."
org.xml.sax.ext.Attributes2Impl.isDeclared(int),boolean,"true if the attribute was declared in the DTD, false otherwise."
"org.xml.sax.ext.Attributes2Impl.isDeclared(String,String)",boolean,"true if the attribute was declared in the DTD, false otherwise."
org.xml.sax.ext.Attributes2Impl.isDeclared(String),boolean,"true if the attribute was declared in the DTD, false otherwise."
org.xml.sax.ext.Attributes2Impl.isSpecified(int),boolean,current flag value
"org.xml.sax.ext.Attributes2Impl.isSpecified(String,String)",boolean,current flag value
org.xml.sax.ext.Attributes2Impl.isSpecified(String),boolean,current flag value
org.xml.sax.ext.Attributes2Impl.setAttributes(Attributes),void,
"org.xml.sax.ext.Attributes2Impl.addAttribute(String,String,String,String,String)",void,
org.xml.sax.ext.Attributes2Impl.removeAttribute(int),void,
"org.xml.sax.ext.Attributes2Impl.setDeclared(int,boolean)",void,
"org.xml.sax.ext.Attributes2Impl.setSpecified(int,boolean)",void,
org.xml.sax.ext.DefaultHandler2.startCDATA(),void,
org.xml.sax.ext.DefaultHandler2.endCDATA(),void,
"org.xml.sax.ext.DefaultHandler2.startDTD(String,String,String)",void,
org.xml.sax.ext.DefaultHandler2.endDTD(),void,
org.xml.sax.ext.DefaultHandler2.startEntity(String),void,
org.xml.sax.ext.DefaultHandler2.endEntity(String),void,
"org.xml.sax.ext.DefaultHandler2.comment(char[],int,int)",void,
"org.xml.sax.ext.DefaultHandler2.attributeDecl(String,String,String,String,String)",void,
"org.xml.sax.ext.DefaultHandler2.elementDecl(String,String)",void,
"org.xml.sax.ext.DefaultHandler2.externalEntityDecl(String,String,String)",void,
"org.xml.sax.ext.DefaultHandler2.internalEntityDecl(String,String)",void,
"org.xml.sax.ext.DefaultHandler2.getExternalSubset(String,String)",InputSource,"An InputSource object describing the new external subset to be used by the parser, or null to indicate that no external subset is provided."
"org.xml.sax.ext.DefaultHandler2.resolveEntity(String,String,String,String)",InputSource,An InputSource object describing the new input source to be used by the parser. Returning null directs the parser to resolve the system ID against the base URI and open a connection to resulting URI.
"org.xml.sax.ext.DefaultHandler2.resolveEntity(String,String)",InputSource,"The new input source, or null to require the default behaviour."
org.xml.sax.ext.Locator2Impl.getXMLVersion(),String,"Identifier for the XML version being used to interpret the entity's text, or null if that information is not yet available in the current parsing state."
org.xml.sax.ext.Locator2Impl.getEncoding(),String,"Name of the character encoding being used to interpret * the entity's text, or null if this was not provided for a * character stream passed through an InputSource or is otherwise not yet available in the current parsing state."
org.xml.sax.ext.Locator2Impl.setXMLVersion(String),void,
org.xml.sax.ext.Locator2Impl.setEncoding(String),void,
org.xml.sax.helpers.AttributeListImpl.setAttributeList(AttributeList),void,
"org.xml.sax.helpers.AttributeListImpl.addAttribute(String,String,String)",void,
org.xml.sax.helpers.AttributeListImpl.removeAttribute(String),void,
org.xml.sax.helpers.AttributeListImpl.clear(),void,
org.xml.sax.helpers.AttributeListImpl.getLength(),int,The number of attributes in the list.
org.xml.sax.helpers.AttributeListImpl.getName(int),String,"The attribute name as a string, or null if there is no attribute at that position."
org.xml.sax.helpers.AttributeListImpl.getType(int),String,"The attribute type as a string (""NMTOKEN"" for an enumeration, and ""CDATA"" if no declaration was read), or null if there is no attribute at that position."
org.xml.sax.helpers.AttributeListImpl.getValue(int),String,"The attribute value as a string, or null if there is no attribute at that position."
org.xml.sax.helpers.AttributeListImpl.getType(String),String,"The attribute type as a string (""NMTOKEN"" for an enumeration, and ""CDATA"" if no declaration was read)."
org.xml.sax.helpers.AttributeListImpl.getValue(String),String,"The attribute value as a string, or null if no such attribute exists."
org.xml.sax.helpers.AttributesImpl.getLength(),int,The number of attributes in the list.
org.xml.sax.helpers.AttributesImpl.getURI(int),String,"The Namespace URI, the empty string if none is available, or null if the index is out of range."
org.xml.sax.helpers.AttributesImpl.getLocalName(int),String,"The attribute's local name, the empty string if none is available, or null if the index if out of range."
org.xml.sax.helpers.AttributesImpl.getQName(int),String,"The attribute's qualified name, the empty string if none is available, or null if the index is out of bounds."
org.xml.sax.helpers.AttributesImpl.getType(int),String,"The attribute's type, ""CDATA"" if the type is unknown, or null if the index is out of bounds."
org.xml.sax.helpers.AttributesImpl.getValue(int),String,The attribute's value or null if the index is out of bounds.
"org.xml.sax.helpers.AttributesImpl.getIndex(String,String)",int,"The attribute's index, or -1 if none matches."
org.xml.sax.helpers.AttributesImpl.getIndex(String),int,"The attribute's index, or -1 if none matches."
"org.xml.sax.helpers.AttributesImpl.getType(String,String)",String,"The attribute's type, or null if there is no matching attribute."
org.xml.sax.helpers.AttributesImpl.getType(String),String,"The attribute's type, or null if there is no matching attribute."
"org.xml.sax.helpers.AttributesImpl.getValue(String,String)",String,"The attribute's value, or null if there is no matching attribute."
org.xml.sax.helpers.AttributesImpl.getValue(String),String,"The attribute's value, or null if there is no matching attribute."
org.xml.sax.helpers.AttributesImpl.clear(),void,
org.xml.sax.helpers.AttributesImpl.setAttributes(Attributes),void,
"org.xml.sax.helpers.AttributesImpl.addAttribute(String,String,String,String,String)",void,
"org.xml.sax.helpers.AttributesImpl.setAttribute(int,String,String,String,String,String)",void,
org.xml.sax.helpers.AttributesImpl.removeAttribute(int),void,
"org.xml.sax.helpers.AttributesImpl.setURI(int,String)",void,
"org.xml.sax.helpers.AttributesImpl.setLocalName(int,String)",void,
"org.xml.sax.helpers.AttributesImpl.setQName(int,String)",void,
"org.xml.sax.helpers.AttributesImpl.setType(int,String)",void,
"org.xml.sax.helpers.AttributesImpl.setValue(int,String)",void,
"org.xml.sax.helpers.DefaultHandler.resolveEntity(String,String)",InputSource,"The new input source, or null to require the default behaviour."
"org.xml.sax.helpers.DefaultHandler.notationDecl(String,String,String)",void,
"org.xml.sax.helpers.DefaultHandler.unparsedEntityDecl(String,String,String,String)",void,
org.xml.sax.helpers.DefaultHandler.setDocumentLocator(Locator),void,
org.xml.sax.helpers.DefaultHandler.startDocument(),void,
org.xml.sax.helpers.DefaultHandler.endDocument(),void,
"org.xml.sax.helpers.DefaultHandler.startPrefixMapping(String,String)",void,
org.xml.sax.helpers.DefaultHandler.endPrefixMapping(String),void,
"org.xml.sax.helpers.DefaultHandler.startElement(String,String,String,Attributes)",void,
"org.xml.sax.helpers.DefaultHandler.endElement(String,String,String)",void,
"org.xml.sax.helpers.DefaultHandler.characters(char[],int,int)",void,
"org.xml.sax.helpers.DefaultHandler.ignorableWhitespace(char[],int,int)",void,
"org.xml.sax.helpers.DefaultHandler.processingInstruction(String,String)",void,
org.xml.sax.helpers.DefaultHandler.skippedEntity(String),void,
org.xml.sax.helpers.DefaultHandler.warning(SAXParseException),void,
org.xml.sax.helpers.DefaultHandler.error(SAXParseException),void,
org.xml.sax.helpers.DefaultHandler.fatalError(SAXParseException),void,
org.xml.sax.helpers.LocatorImpl.getPublicId(),String,"The public identifier as a string, or null if none is available."
org.xml.sax.helpers.LocatorImpl.getSystemId(),String,"The system identifier as a string, or null if none is available."
org.xml.sax.helpers.LocatorImpl.getLineNumber(),int,"The line number as an integer, or -1 if none is available."
org.xml.sax.helpers.LocatorImpl.getColumnNumber(),int,"The column number as an integer, or -1 if none is available."
org.xml.sax.helpers.LocatorImpl.setPublicId(String),void,
org.xml.sax.helpers.LocatorImpl.setSystemId(String),void,
org.xml.sax.helpers.LocatorImpl.setLineNumber(int),void,
org.xml.sax.helpers.LocatorImpl.setColumnNumber(int),void,
org.xml.sax.helpers.NamespaceSupport.reset(),void,
org.xml.sax.helpers.NamespaceSupport.pushContext(),void,
org.xml.sax.helpers.NamespaceSupport.popContext(),void,
"org.xml.sax.helpers.NamespaceSupport.declarePrefix(String,String)",boolean,"true if the prefix was legal, false otherwise"
"org.xml.sax.helpers.NamespaceSupport.processName(String,String[],boolean)",String[],"The supplied array holding three internalized strings representing the Namespace URI (or empty string), the local name, and the XML qualified name; or null if there is an undeclared prefix."
org.xml.sax.helpers.NamespaceSupport.getURI(String),String,"The associated Namespace URI, or null if the prefix is undeclared in this context."
org.xml.sax.helpers.NamespaceSupport.getPrefixes(),Enumeration,An enumeration of prefixes (never empty).
org.xml.sax.helpers.NamespaceSupport.getPrefix(String),String,"one of the prefixes currently mapped to the URI supplied, or null if none is mapped or if the URI is assigned to the default namespace"
org.xml.sax.helpers.NamespaceSupport.getPrefixes(String),Enumeration,An enumeration of prefixes (never empty).
org.xml.sax.helpers.NamespaceSupport.getDeclaredPrefixes(),Enumeration,An enumeration of all prefixes declared in this context.
org.xml.sax.helpers.NamespaceSupport.setNamespaceDeclUris(boolean),void,
org.xml.sax.helpers.NamespaceSupport.isNamespaceDeclUris(),boolean,
"org.xml.sax.helpers.ParserAdapter.setFeature(String,boolean)",void,
org.xml.sax.helpers.ParserAdapter.getFeature(String),boolean,The current feature value.
"org.xml.sax.helpers.ParserAdapter.setProperty(String,Object)",void,
org.xml.sax.helpers.ParserAdapter.getProperty(String),Object,The property value.
org.xml.sax.helpers.ParserAdapter.setEntityResolver(EntityResolver),void,
org.xml.sax.helpers.ParserAdapter.getEntityResolver(),EntityResolver,"The current entity resolver, or null if none was supplied."
org.xml.sax.helpers.ParserAdapter.setDTDHandler(DTDHandler),void,
org.xml.sax.helpers.ParserAdapter.getDTDHandler(),DTDHandler,"the current DTD handler, or null if none was supplied"
org.xml.sax.helpers.ParserAdapter.setContentHandler(ContentHandler),void,
org.xml.sax.helpers.ParserAdapter.getContentHandler(),ContentHandler,"The current content handler, or null if none was supplied."
org.xml.sax.helpers.ParserAdapter.setErrorHandler(ErrorHandler),void,
org.xml.sax.helpers.ParserAdapter.getErrorHandler(),ErrorHandler,"The current error handler, or null if none was supplied."
org.xml.sax.helpers.ParserAdapter.parse(String),void,
org.xml.sax.helpers.ParserAdapter.parse(InputSource),void,
org.xml.sax.helpers.ParserAdapter.setDocumentLocator(Locator),void,
org.xml.sax.helpers.ParserAdapter.startDocument(),void,
org.xml.sax.helpers.ParserAdapter.endDocument(),void,
"org.xml.sax.helpers.ParserAdapter.startElement(String,AttributeList)",void,
org.xml.sax.helpers.ParserAdapter.endElement(String),void,
"org.xml.sax.helpers.ParserAdapter.characters(char[],int,int)",void,
"org.xml.sax.helpers.ParserAdapter.ignorableWhitespace(char[],int,int)",void,
"org.xml.sax.helpers.ParserAdapter.processingInstruction(String,String)",void,
org.xml.sax.helpers.ParserFactory.makeParser(),Parser,
org.xml.sax.helpers.ParserFactory.makeParser(String),Parser,
org.xml.sax.helpers.XMLFilterImpl.setParent(XMLReader),void,
org.xml.sax.helpers.XMLFilterImpl.getParent(),XMLReader,"The parent XML reader, or null if none is set."
"org.xml.sax.helpers.XMLFilterImpl.setFeature(String,boolean)",void,
org.xml.sax.helpers.XMLFilterImpl.getFeature(String),boolean,The current value of the feature.
"org.xml.sax.helpers.XMLFilterImpl.setProperty(String,Object)",void,
org.xml.sax.helpers.XMLFilterImpl.getProperty(String),Object,The current value of the property.
org.xml.sax.helpers.XMLFilterImpl.setEntityResolver(EntityResolver),void,
org.xml.sax.helpers.XMLFilterImpl.getEntityResolver(),EntityResolver,"The current entity resolver, or null if none was set."
org.xml.sax.helpers.XMLFilterImpl.setDTDHandler(DTDHandler),void,
org.xml.sax.helpers.XMLFilterImpl.getDTDHandler(),DTDHandler,"The current DTD handler, or null if none was set."
org.xml.sax.helpers.XMLFilterImpl.setContentHandler(ContentHandler),void,
org.xml.sax.helpers.XMLFilterImpl.getContentHandler(),ContentHandler,"The current content handler, or null if none was set."
org.xml.sax.helpers.XMLFilterImpl.setErrorHandler(ErrorHandler),void,
org.xml.sax.helpers.XMLFilterImpl.getErrorHandler(),ErrorHandler,"The current error handler, or null if none was set."
org.xml.sax.helpers.XMLFilterImpl.parse(InputSource),void,
org.xml.sax.helpers.XMLFilterImpl.parse(String),void,
"org.xml.sax.helpers.XMLFilterImpl.resolveEntity(String,String)",InputSource,A new InputSource or null for the default.
"org.xml.sax.helpers.XMLFilterImpl.notationDecl(String,String,String)",void,
"org.xml.sax.helpers.XMLFilterImpl.unparsedEntityDecl(String,String,String,String)",void,
org.xml.sax.helpers.XMLFilterImpl.setDocumentLocator(Locator),void,
org.xml.sax.helpers.XMLFilterImpl.startDocument(),void,
org.xml.sax.helpers.XMLFilterImpl.endDocument(),void,
"org.xml.sax.helpers.XMLFilterImpl.startPrefixMapping(String,String)",void,
org.xml.sax.helpers.XMLFilterImpl.endPrefixMapping(String),void,
"org.xml.sax.helpers.XMLFilterImpl.startElement(String,String,String,Attributes)",void,
"org.xml.sax.helpers.XMLFilterImpl.endElement(String,String,String)",void,
"org.xml.sax.helpers.XMLFilterImpl.characters(char[],int,int)",void,
"org.xml.sax.helpers.XMLFilterImpl.ignorableWhitespace(char[],int,int)",void,
"org.xml.sax.helpers.XMLFilterImpl.processingInstruction(String,String)",void,
org.xml.sax.helpers.XMLFilterImpl.skippedEntity(String),void,
org.xml.sax.helpers.XMLFilterImpl.warning(SAXParseException),void,
org.xml.sax.helpers.XMLFilterImpl.error(SAXParseException),void,
org.xml.sax.helpers.XMLFilterImpl.fatalError(SAXParseException),void,
org.xml.sax.helpers.XMLReaderAdapter.setLocale(Locale),void,
org.xml.sax.helpers.XMLReaderAdapter.setEntityResolver(EntityResolver),void,
org.xml.sax.helpers.XMLReaderAdapter.setDTDHandler(DTDHandler),void,
org.xml.sax.helpers.XMLReaderAdapter.setDocumentHandler(DocumentHandler),void,
org.xml.sax.helpers.XMLReaderAdapter.setErrorHandler(ErrorHandler),void,
org.xml.sax.helpers.XMLReaderAdapter.parse(String),void,
org.xml.sax.helpers.XMLReaderAdapter.parse(InputSource),void,
org.xml.sax.helpers.XMLReaderAdapter.setDocumentLocator(Locator),void,
org.xml.sax.helpers.XMLReaderAdapter.startDocument(),void,
org.xml.sax.helpers.XMLReaderAdapter.endDocument(),void,
"org.xml.sax.helpers.XMLReaderAdapter.startPrefixMapping(String,String)",void,
org.xml.sax.helpers.XMLReaderAdapter.endPrefixMapping(String),void,
"org.xml.sax.helpers.XMLReaderAdapter.startElement(String,String,String,Attributes)",void,
"org.xml.sax.helpers.XMLReaderAdapter.endElement(String,String,String)",void,
"org.xml.sax.helpers.XMLReaderAdapter.characters(char[],int,int)",void,
"org.xml.sax.helpers.XMLReaderAdapter.ignorableWhitespace(char[],int,int)",void,
"org.xml.sax.helpers.XMLReaderAdapter.processingInstruction(String,String)",void,
org.xml.sax.helpers.XMLReaderAdapter.skippedEntity(String),void,
org.xml.sax.helpers.XMLReaderFactory.createXMLReader(),XMLReader,
org.xml.sax.helpers.XMLReaderFactory.createXMLReader(String),XMLReader,A new XML reader.
